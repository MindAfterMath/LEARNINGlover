<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
PageRankAlgorithm<script type="text/javascript" src="examples/randgraph.js"></script>
<script type="text/javascript">
function pagerank(graph, iters)
{
        //N <- |G|
        var size = graph.length;
        var damp = 0.85;
        var i, j;
        var rank = new Array();
        var aux = new Array();
        var count = 0;

        //for each p \in G do
        //  Pagerank_p = (1/N)
        //  Aux_p = 0
        for (i = 0; i < graph.length; i++)
        {
                rank[i] = 1 / size;
                aux[i] = 0;
        }

        //while (Pagerank not converging) do
        //  for each p \in G do
        //    \Gamma^{+}(p) <- pages pointed by p
        //    for each p' \in \Gamma^{+}(p) do
        //      Aux_{p'} = Aux_{p'} + Pagerank_p / |\Gamma+(p)|
        //    end for
        //  end for
        //  for each p \in G do
        //    Pagerank_p = q / N + (1 - q)Aux_p
        //    Aux_p = 0
        //  end for
        //  Normalize Pagerank : /Sum Pagerank_p = 1
        //end while
        //end
        while (count < iters)
        {
                for (i = 0; i < graph.length; i++)
                {
                        var linksTo = new Array();
                        for (j = 0; j < n; j++)
                        {
                                if (graph[i][j] > 0)
				{
					linksTo[linksTo.length] = j;
				}
                        }

                        for (j = 0; j < linksTo.length; j++)
                        {
                                aux[j] = aux[j] + rank[i] / linksTo.length;
                        }
                }

                for (i = 0; i < graph.length; i++)
                {
                        rank[i] = (damp / size) + (1 - damp) * aux[i];
                        aux[i] = 0;
                }
                count++;
        }

//      var sum = 0;
//      for (i = 0; i < rank.length; i++)
//              sum += rank[i];

//      document.getElementById("output").innerHTML += "rank = " + rank + "<br>sum = " + sum;

//      for (i = 0; i < rank.length; i++)
//              rank[i] = rank[i] / sum;

        return rank;
}

function indexOf(set, element)
{
        var loc = -1, i;
//        for (i = 0; i < set.length && loc == -1; i++)
//        {
                if (set[i] == element)
                        loc = i;
//        }

        return loc;
}

function EucDist(point1_x, point1_y, point2_x, point2_y)
{
        var i, j, sumSq = 0;

        sumSq += Math.pow(point1_x - point2_x, 2);
        sumSq += Math.pow(point1_y - point2_y, 2);

        return Math.sqrt(sumSq);
}

function used(list, num1, num2)
{
        var i, ans = false;
        for (i = 0; i < list.length && ans == false; i++)
        {
                if (EucDist(list[i][0], list[i][1], num1, num2) < 5)
                        ans = true;
        }

        return ans;
}

function disp(set)
{
        var text = "";
        text += "<table><tr><td>node </td>";
        for (var i = 0; i < set.length; i++)
                text += "<td>" + i + "</td>";
        text += "</tr><tr><td>path length</td>";
        for (var i = 0; i < set.length; i++)
        {
                text += "<td>" + set[i] + "</td>";
        }
        text += "</tr></table>";

        return text;
}

function drawGraph(A)
{
        var c=document.getElementById("myCanvas");
        var ctx=c.getContext("2d");
        ctx.clearRect (0, 0, c.width, c.height);
        var i, j, num1, num2;
        var points = new Array();
        ctx.lineWidth = 1;
        ctx.strokeStyle="#000000";

	var theta = new Array();

	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2 * Math.PI * i) / A.length;

		points[i] = new Array();
		points[i][0] = 255 * Math.cos(theta[i]) + 275;
		points[i][1] = 255 * Math.sin(theta[i]) + 275;
	}

        for (i = 0; i < A.length; i++)
        {
                for (j = 0; j < A[0].length; j++)
                {
                        if (A[i][j] != 0)
                        {
                                ctx.beginPath();
                                ctx.moveTo(points[i][0], points[i][1]);
                                ctx.lineTo(points[j][0], points[j][1]);
                                ctx.stroke();
                        }
                }
        }

        for (i = 0; i < A.length; i++)
        {
                ctx.strokeStyle="#000000";
                ctx.beginPath();
                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
                ctx.stroke();

                ctx.fillStyle="#00FFFF";
                ctx.beginPath();
                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
                ctx.fill();

                ctx.fillStyle="#000000";
                ctx.font="10px Arial";
                ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
        }

        return points;
}

function drawNodes(A, points)
{
        var c=document.getElementById("myCanvas");
        var ctx=c.getContext("2d");
        var i, j, num1, num2;
        ctx.lineWidth = 1;
        for (i = 0; i < A.length; i++)
        {
                ctx.strokeStyle="#000000";
                ctx.beginPath();
                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
                ctx.stroke();

                ctx.fillStyle="#00FFFF";
                ctx.beginPath();
                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
                ctx.fill();

                ctx.fillStyle="#000000";
                ctx.font="10px Arial";
                ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
        }
}

function drawLines(A, points)
{
        var c=document.getElementById("myCanvas");
        var ctx=c.getContext("2d");
        ctx.clearRect (0, 0, c.width, c.height);
        var i, j;

        for (i = 0; i < A.length; i++)
        {
                for (j = 0; j < A[0].length; j++)
                {
                        if (A[i][j] != 0)
                        {
                                ctx.lineWidth = 1;
                                ctx.strokeStyle="#000000";
                                ctx.beginPath();
                                ctx.moveTo(points[i][0], points[i][1]);
                                ctx.lineTo(points[j][0], points[j][1]);
                                ctx.stroke();
                        }
                }
        }

}

function drawAns(A, points, ans, start)
{
        var c=document.getElementById("myCanvas");
        var ctx=c.getContext("2d");
        var i, j, num1, num2;

        ctx.strokeStyle="#00FF00";
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);
        ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);
        ctx.stroke();
        drawNodes(A, points);
        if ((start + 2) >= ans.length-1)
        {
                start = 0;
        }
        else
                start += 2;
        var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A,
points, ans, start);drawNodes(A, points);};
        t = setTimeout(f, 2000);

        return t;
}
</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" /><meta name="keywords" content="mathematics, math, pagerank, page, rank, computer science, data mining, machine learning, algorithm, javascript, script, graph theory, graph, animation, important, hub, node, arc" />
<meta name="description" content="This script implements the PageRank algorithm which can be used to find the importance of nodes in a grapn. " />
<title> at LEARNINGlover.com</title>
<script type="text/javascript" src="examples/randgraph.js"></script>
<script type="text/javascript">
function pagerank(graph, iters)
{
        //N <- |G|
        var size = graph.length;
        var damp = 0.85;
        var i, j;
        var rank = new Array();
        var aux = new Array();
        var count = 0;

        //for each p \in G do
        //  Pagerank_p = (1/N)
        //  Aux_p = 0
        for (i = 0; i < graph.length; i++)
        {
                rank[i] = 1 / size;
                aux[i] = 0;
        }

        //while (Pagerank not converging) do
        //  for each p \in G do
        //    \Gamma^{+}(p) <- pages pointed by p
        //    for each p' \in \Gamma^{+}(p) do
        //      Aux_{p'} = Aux_{p'} + Pagerank_p / |\Gamma+(p)|
        //    end for
        //  end for
        //  for each p \in G do
        //    Pagerank_p = q / N + (1 - q)Aux_p
        //    Aux_p = 0
        //  end for
        //  Normalize Pagerank : /Sum Pagerank_p = 1
        //end while
        //end
        while (count < iters)
        {
                for (i = 0; i < graph.length; i++)
                {
                        var linksTo = new Array();
                        for (j = 0; j < n; j++)
                        {
                                if (graph[i][j] > 0)
				{
					linksTo[linksTo.length] = j;
				}
                        }

                        for (j = 0; j < linksTo.length; j++)
                        {
                                aux[j] = aux[j] + rank[i] / linksTo.length;
                        }
                }

                for (i = 0; i < graph.length; i++)
                {
                        rank[i] = (damp / size) + (1 - damp) * aux[i];
                        aux[i] = 0;
                }
                count++;
        }

//      var sum = 0;
//      for (i = 0; i < rank.length; i++)
//              sum += rank[i];

//      document.getElementById("output").innerHTML += "rank = " + rank + "<br>sum = " + sum;

//      for (i = 0; i < rank.length; i++)
//              rank[i] = rank[i] / sum;

        return rank;
}

function indexOf(set, element)
{
        var loc = -1, i;
//        for (i = 0; i < set.length && loc == -1; i++)
//        {
                if (set[i] == element)
                        loc = i;
//        }

        return loc;
}

function EucDist(point1_x, point1_y, point2_x, point2_y)
{
        var i, j, sumSq = 0;

        sumSq += Math.pow(point1_x - point2_x, 2);
        sumSq += Math.pow(point1_y - point2_y, 2);

        return Math.sqrt(sumSq);
}

function used(list, num1, num2)
{
        var i, ans = false;
        for (i = 0; i < list.length && ans == false; i++)
        {
                if (EucDist(list[i][0], list[i][1], num1, num2) < 5)
                        ans = true;
        }

        return ans;
}

function disp(set)
{
        var text = "";
        text += "<table><tr><td>node </td>";
        for (var i = 0; i < set.length; i++)
                text += "<td>" + i + "</td>";
        text += "</tr><tr><td>path length</td>";
        for (var i = 0; i < set.length; i++)
        {
                text += "<td>" + set[i] + "</td>";
        }
        text += "</tr></table>";

        return text;
}

function drawGraph(A)
{
        var c=document.getElementById("myCanvas");
        var ctx=c.getContext("2d");
        ctx.clearRect (0, 0, c.width, c.height);
        var i, j, num1, num2;
        var points = new Array();
        ctx.lineWidth = 1;
        ctx.strokeStyle="#000000";

	var theta = new Array();

	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2 * Math.PI * i) / A.length;

		points[i] = new Array();
		points[i][0] = 255 * Math.cos(theta[i]) + 275;
		points[i][1] = 255 * Math.sin(theta[i]) + 275;
	}

        for (i = 0; i < A.length; i++)
        {
                for (j = 0; j < A[0].length; j++)
                {
                        if (A[i][j] != 0)
                        {
                                ctx.beginPath();
                                ctx.moveTo(points[i][0], points[i][1]);
                                ctx.lineTo(points[j][0], points[j][1]);
                                ctx.stroke();
                        }
                }
        }

        for (i = 0; i < A.length; i++)
        {
                ctx.strokeStyle="#000000";
                ctx.beginPath();
                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
                ctx.stroke();

                ctx.fillStyle="#00FFFF";
                ctx.beginPath();
                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
                ctx.fill();

                ctx.fillStyle="#000000";
                ctx.font="10px Arial";
                ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
        }

        return points;
}

function drawNodes(A, points)
{
        var c=document.getElementById("myCanvas");
        var ctx=c.getContext("2d");
        var i, j, num1, num2;
        ctx.lineWidth = 1;
        for (i = 0; i < A.length; i++)
        {
                ctx.strokeStyle="#000000";
                ctx.beginPath();
                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
                ctx.stroke();

                ctx.fillStyle="#00FFFF";
                ctx.beginPath();
                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
                ctx.fill();

                ctx.fillStyle="#000000";
                ctx.font="10px Arial";
                ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
        }
}

function drawLines(A, points)
{
        var c=document.getElementById("myCanvas");
        var ctx=c.getContext("2d");
        ctx.clearRect (0, 0, c.width, c.height);
        var i, j;

        for (i = 0; i < A.length; i++)
        {
                for (j = 0; j < A[0].length; j++)
                {
                        if (A[i][j] != 0)
                        {
                                ctx.lineWidth = 1;
                                ctx.strokeStyle="#000000";
                                ctx.beginPath();
                                ctx.moveTo(points[i][0], points[i][1]);
                                ctx.lineTo(points[j][0], points[j][1]);
                                ctx.stroke();
                        }
                }
        }

}

function drawAns(A, points, ans, start)
{
        var c=document.getElementById("myCanvas");
        var ctx=c.getContext("2d");
        var i, j, num1, num2;

        ctx.strokeStyle="#00FF00";
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);
        ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);
        ctx.stroke();
        drawNodes(A, points);
        if ((start + 2) >= ans.length-1)
        {
                start = 0;
        }
        else
                start += 2;
        var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A,
points, ans, start);drawNodes(A, points);};
        t = setTimeout(f, 2000);

        return t;
}
</script>
<h3><center></center></h3>
<p><p>This script implements the PageRank algorithm which can be used to find the importance of nodes in a graph. </P>

<p>The algorithm works by initially assigning each node in the graph a default rank value (say 1/N, where N is the number of nodes in the graph). Then we change the value of the rank of each node by saying that the pagerank of a node is equal to the sum of the pageranks of the nodes that link to it over their respective magnitudes. </p>

<p>More precisely, <img src="http://learninglover.com/blog/wp-content/gallery/examples/pagerank.jpg" width='85%'></p>

<p>To ensure that the hubs do not dominate the graph, we also introduce a damping factor (which is normally set to 0.85) and so the equation becomes<br>
Rank(i) = (damp / size) + (1 - damp) * Rank*(i)</p></p>
<script type="text/javascript">
n = Math.floor(Math.random()*20)+5;
A = RandGraph(n);
text = "<table>";
for (i = 0; i < n; i++)
{
        text += "<tr>";
        for (j = 0; j < n; j++)
        {
                 if (A[i][j] != 0)
                          text += "<td>" + A[i][j] + "</td>";
                 else
                          text += "<td>-</td>";
        }
        text += "</tr>";
}
text += "</table>";
document.write(text);
var t;
</script>
<form name=data id=data>
<input type=button onclick="javascript:location.reload(true)"
value="New Problem"><br>
<input type="checkbox" name="show" id="show"> Show Work?
<input type="button" value="Solve" onclick="text2 ='<table>';sol =
pagerank(A, 500);for (i = 0; i < n;i++)

text2 += '<tr><td>PageRank(' + i + ') = ' + sol[i].toFixed(3)
+ '</td></tr>';text2 += '</table>';
document.getElementById('output').innerHTML = text2;t =

drawAns(A, pts, sol, 0);">
<input type=button onclick="t=clearTimeout(t);pts = drawGraph(A)"
value="Redraw Graph">
</form>

<canvas id="myCanvas" width="550" height="600" style="border:1px solid
#d3d3d3;">
your browser does not support the canvas tag
</canvas>
<script type="text/javascript">
var pts = drawGraph(A);
</script>
<P name=output id=output>&nbsp;</P>