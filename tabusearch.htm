<html>
<head>
<style>
textarea {
  width: 300px;
  height: 150px;
}
span 
{
	cursor:pointer;
	color:blue;
	text-decoration:underline;
}
</style>
<script type="text/javascript">
function euc_2d(c1, c2)
{
	return Math.sqrt((c1[0] - c2[0])*(c1[0] - c2[0]) + (c1[1] - c2[1])*(c1[1] - c2[1]));
}

function cost(perm, cities)
{
	var distance = 0
	for (var i = 0; i < perm.length; i++)
	{
		var c1 = perm[i];
		var c2;
		if (i == perm.length - 1)
		{
			c2 = perm[0];
		}
		else
		{
			c2 = perm[i+1];
		}
		distance += euc_2d(cities[c1], cities[c2]);
	}
  
	return distance;
}

function random_permutation(cities)
{
//	perm = Array.new(cities.size){|i| i}
	var perm = [];
	for (var i = 0; i < cities.length; i++)
	{
		perm[i] = i;
	}
//	perm.each_index do |i|
	for (var i = 0; i < perm.length; i++)
	{
		var r = Math.floor(Math.random() * perm.length - i) + i;
		var temp = perm[r];
		perm[r] = perm[i];
		perm[i] = temp;
//		perm[r], perm[i] = perm[i], perm[r]
	}
	return perm
}

function stochastic_two_opt(parent)
{
	perm = [];
	for (var i = 0; i < parent.length; i++)
	{
		perm[i] = parent[i];
	}
	
	var c1 = Math.floor(Math.random() * perm.length);
	var c2 = Math.floor(Math.random() * perm.length);
	var exclude = [c1];
	if (c1 == 0)
	{
		exclude.push(perm.lenght-1);
	}
	else
	{
		exclude.push(c1 - 1);
	}
	
	if (c1 == perm.length - 1)
	{
		exclude.push(0);
	}
	else
	{
		exclude.push(c1 + 1);
	}
	
	do
	{
		c2 = Math.floor(Math.random() * perm.length);
	}
	while(c2 in exclude);
	
	if (c2 < c1)
	{
		var temp = c1;
		c1 = c2;
		c2 = temp;
	}
	
	for (var i = 0; i < c2 - c1; i++)
	{
		var temp = perm[c1 + i];
		perm[c1 + i] = perm[c2 - i];
		perm[c2 - i] = temp;
	}
//	perm[c1...c2] = perm[c1...c2].reverse
	edges = [];
	edges[0] = [parent[c1-1], parent[c1]];
	edges[1] = [parent[c2-1], parent[c2]];
	return [perm, edges];
}

function is_tabu(permutation, tabu_list)
{
//	permutation.each_with_index do |c1, i|
	for (var i = 0; i < permutation.length; i++)
	{
		var c1 = permutation[i];
		var c2;
		if (i == permutation.length - 1)
		{
			c2 = permutation[0];
		}
		else
		{
			c2 = permutation[i+1];
		}
//		c2 = (i==permutation.size-1) ? permutation[0] : permutation[i+1]
//		tabu_list.each do |forbidden_edge|
		for (var j = 0; j < tabu_list.length; i++)
		{
			if (tabu_list[j][0] == c1 && tabu_list[j][1] == c2)
			{
				return true;
			}
		}
	}
	return false;
}

function generate_candidate(best, tabu_list, cities)
{
	var perm;
	var edges;
	
	do
	{
		var arr = stochastic_two_opt(best["vector"]);
		perm = arr[0];
		edges = arr[1];
	}
	while (is_tabu(perm, tabu_list));
	
	candidate = {};
	candidate["vector"] = perm;
	candidate["cost"] = cost(candidate[vector], cities);
	
	return [candidate, edges];
}

function sort(array)
{
	for (var i = 0; i < array.length; i++)
	{
		for (var j = 0; j < i; j++)
		{
			if (array[i]["cost"] > array[j]["cost"])
			{
				var temp = array[i];
				array[i] = array[j];
				array[j] = temp;
			}
		}
	}
	
	return array;
}

function search(cities, tabu_list_size, candidate_list_size, max_iter)
{
	var current = [];
	current["vector"] = random_permutation(cities);
	current["cost"] = cost(current["vector"], cities);
	best = current;
	tabu_list = [];
	var out = "";
//	for (var i = 0; i < tabu_list_size; i++)
//	{
//		tabu_list.push("");
//	}
 
//	tabu_list = Array.new(tabu_list_size)
//	max_iter.times do |iter|
	for (var i = 0; i < max_iter; i++)
	{
		var candidates = [];
		
//		candidates = Array.new(candidate_list_size) do |i|
		for (var j = 0; j < candidate_list_size; j++)
		{
			candidates.push(generate_candidate(current, tabu_list, cities));
		}
//		candidates.sort! {|x,y| x.first[:cost] <=> y.first[:cost]}
		candidates = sort(candidates);
		
		best_candidate = candidates[0][0]
		best_candidate_edges = candidates[0][1]
		if (best_candidate["cost"] < current["cost"])
		{
			current = best_candidate
			if (best_candidate["cost"] < best["cost"])
				best = best_candidate 
			for (var j = 0; j < best_candidate_edges.length; j++)
			{
				tabu_list.push(best_candidate_edges[j]);
			}
//			best_candidate_edges.each {|edge| tabu_list.push(edge)}

			while (tabu_list.length > tabu_list_size)
			{
				tabu_list.pop();
			}
//			tabu_list.pop while tabu_list.size > tabu_list_size
		}
		
		out += " > iteration " + (iter+1) + ", best = " + best["cost"] + "<br>";
	}
	
	document.getElementById("output").innerHTML = out;
	return best
}

</script>
</head>
<body>
<p id="output"></p>
<script type="text/javascript">

//	problem configuration
	berlin52 = [];
	berlin52.push([565,575]);
	berlin52.push([25,185]);
	berlin52.push([345,750]);
	berlin52.push([945,685]);
	berlin52.push([845,655]);
	berlin52.push([880,660]);
	berlin52.push([25,230]);
	berlin52.push([525,1000]);
	berlin52.push([580,1175]);
	berlin52.push([650,1130]);
	berlin52.push([1605,620]);
	berlin52.push([1220,580]);
	berlin52.push([1465,200]);
	berlin52.push([1530,5]);
	berlin52.push([845,680]);
	berlin52.push([725,370]);
	berlin52.push([145,665]);
	berlin52.push([415,635]);
	berlin52.push([510,875]);
	berlin52.push([560,365]);
	berlin52.push([300,465]);
	berlin52.push([520,585]);
	berlin52.push([480,415]);
	berlin52.push([835,625]);
	berlin52.push([975,580]);
	berlin52.push([1215,245]);
	berlin52.push([1320,315]);
	berlin52.push([1250,400]);
	berlin52.push([660,180]);
	berlin52.push([410,250]);
	berlin52.push([420,555]);
	berlin52.push([575,665]);
	berlin52.push([1150,1160]);
	berlin52.push([700,580]);
	berlin52.push([685,595]);
	berlin52.push([685,610]);
	berlin52.push([770,610]);
	berlin52.push([795,645]);
	berlin52.push([720,635]);
	berlin52.push([760,650]);
	berlin52.push([475,960]);
	berlin52.push([95,260]);
	berlin52.push([875,920]);
	berlin52.push([700,500]);
	berlin52.push([555,815]);
	berlin52.push([830,485]);
	berlin52.push([1170,65]);
	berlin52.push([830,610]);
	berlin52.push([605,625]);
	berlin52.push([595,360]);
	berlin52.push([1340,725]);
	berlin52.push([1740,245]);
	
//	algorithm configuration
  max_iter = 100
  tabu_list_size = 15
  max_candidates = 50
//execute the algorithm
  best = search(berlin52, tabu_list_size, max_candidates, max_iter)
  document.getElementById("output").innerHTML = "Done. Best Solution: c=#{best[:cost]}, v=#{best[:vector].inspect}";
</script>
</body>
</html>
