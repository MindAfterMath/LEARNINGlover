<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
K-MeansClustering<script type="text/javascript">
var M = 1000000;
var text = "";

function clearRect()
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");

	ctx.fillStyle = "#c3c3c3";
	ctx.fillRect(0, 0, c.width, c.height);
	ctx.fill();

	return;
}

function EucDist(point1, point2)
{
	var i, j, sumSq = 0;

	if (point1.length != point2.length)
		return M;

	for (i = 0; i < point1.length; i++)
		sumSq += Math.pow(Math.abs(point1[i] - point2[i]), 2);

	return Math.sqrt(sumSq);
}

function generate()
{
	document.getElementById("points").value = "";
	var numPts = document.getElementById('nopts').value;
	var i;

	for (i = 0; i < numPts; i++)
	{
		inp[i] = new Array();
		inp[i][0] = Math.floor(Math.random()*document.getElementById("myCanvas").width + 1);
		inp[i][1] = Math.floor(Math.random()*document.getElementById("myCanvas").height + 1);
		document.getElementById("points").value += "(" + inp[i][0] + ", " + inp[i][1] + "), ";
	}

	dispPts(inp);
	return inp;
}

function dispPts(input)
{
	var i, c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");

	ctx.clearRect(0, 0, c.width, c.height);
	ctx.fillStyle="#000000";

	for (i = 0; i < input.length; i++)
	{
		ctx.beginPath();
		ctx.arc(input[i][0],c.height-input[i][1],5,0,Math.PI*2,true);
		ctx.closePath();
		ctx.fill();
//		alert("point " + i + ": " + input[i][0] + ", " + input[i][1] + " drawn.");
	}
}

function kmeans(items, k, maxno, clusters, labels)
{
	var minDist, i, j, changed, iter, pos, chosen = new Array();
	var maxDist = new Array();
	text = "";
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	ctx.clearRect(0, 0, c.height, c.width);
	dispPts(items);

	for (i = 0; i < items.length; i++)
		chosen[i] = 0;

	for(i = 0; i < k; i++)
	{
		do
			pos = Math.floor(Math.random()*items.length + 1);
		while (chosen[pos] != 0);

		clusters[i] = new Array();

		clusters[i][0] = items[pos][0];
		clusters[i][1] = items[pos][1];
		chosen[pos] = 1;
		maxDist[i] = 0;
	}

	for (i = 0; i < items.length; i++)
	{
		pos = M;
		posD = M;
		for (j = 0; j < k; j++)
		{
			dist_curr = EucDist(items[i], clusters[j]);
			if (dist_curr < posD)
			{
				posD = dist_curr;
				pos = j;
			}
		}
		labels[i] = pos;
	}

	text += "Initial Configuration: <br>";
	text += dispClusters(items, k, clusters, labels);

	changed = false;
	iter = 0;

	do
	{
		for (i = 0; i < k; i++)
		{
			var sum = new Array();
			for (m = 0; m < items[0].length; m++)
				sum[m] = 0;
			count = 0;

			for (j = 0; j < items.length; j++)
			{
				if (labels[j] == i)
				{
					for (m = 0; m < items[j].length; m++)
					{
						sum[m] += items[j][m];
					}
					count++;
				}
			}

			for (m = 0; m < clusters[i].length; m++)
				clusters[i][m] = sum[m] / count;
			maxDist[i] = 0;
		}

		for (i = 0; i < items.length; i++)
		{
			pos = M;
			posD = M;

			for (j = 0; j < k; j++)
			{
				dist_curr = EucDist(items[i], clusters[j]);
				if (dist_curr < posD)
				{
					posD = dist_curr;
					pos = j;
				}
			}

			if (pos != labels[i])
			{
				labels[i] = pos;
				changed = true;
			}
		}
		iter++;
	} while (changed == true && iter <= maxno);

	for (i = 0; i < k; i++)
		for (j = 0; j < items.length; j++)
			if (labels[j] == i && EucDist(items[j], clusters[i]) > maxDist[i])
				maxDist[i] = EucDist(items[j], clusters[i]);

	for (i = 0; i < k; i++)
	{
		ctx.strokeStyle="#0000FF";
		ctx.beginPath();
		ctx.moveTo(clusters[i][0], c.height-clusters[i][1]);
		for (j = 0; j < items.length; j++)
			if (labels[j] == i)
			{
				ctx.lineTo(items[j][0], c.height-items[j][1]);
				ctx.lineTo(clusters[i][0], c.height-clusters[i][1]);
			}
		ctx.closePath();
		ctx.stroke();

		ctx.fillStyle="#FF0000";
		ctx.beginPath();
		ctx.arc(clusters[i][0],c.height-clusters[i][1],2,0,Math.PI*2,true);
		ctx.closePath();
		ctx.fill();

		ctx.strokeStyle="#00FF00";
		ctx.beginPath();
		ctx.arc(clusters[i][0],c.height-clusters[i][1],maxDist[i],0,Math.PI*2,true);
		ctx.closePath();
		ctx.stroke();
	}
}

function dispClusters(items, k, clusters, labels)
{
	var text = "<table>";
	var i, j;

	for (i = 0; i < clusters.length; i++)
	{
		text += "<tr><td width=150><b>Cluster " + i + ":</b></td>";
		text += "<td width=150><b>(" + clusters[i][0].toFixed(3) + ", " + clusters[i][1].toFixed(3) + ")</b></td><td>";
		for (j = 0; j < items.length; j++)
		{
			if (labels[j] == i)
			{
				text += "(" + items[j][0] + ", " + items[j][1] + ")<br>";
			}
		}
		text += "</td></tr>";
	}

	text += "</table>";
	return text;
}

</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" /><meta name="keywords" content="algorithm, center, cluster center, clustering, distance, java script, JavaScript, k-means clustering, learning, machine, machine learning, programming, script, supervised, supervised learning, unsupervised, unsupervised learning" /> 
<meta name="description" content="This page contains a script I've written to help understand the K-Means Clustering Algorithm." />
<title> at LEARNINGlover.com</title>
<script type="text/javascript">
var M = 1000000;
var text = "";

function clearRect()
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");

	ctx.fillStyle = "#c3c3c3";
	ctx.fillRect(0, 0, c.width, c.height);
	ctx.fill();

	return;
}

function EucDist(point1, point2)
{
	var i, j, sumSq = 0;

	if (point1.length != point2.length)
		return M;

	for (i = 0; i < point1.length; i++)
		sumSq += Math.pow(Math.abs(point1[i] - point2[i]), 2);

	return Math.sqrt(sumSq);
}

function generate()
{
	document.getElementById("points").value = "";
	var numPts = document.getElementById('nopts').value;
	var i;

	for (i = 0; i < numPts; i++)
	{
		inp[i] = new Array();
		inp[i][0] = Math.floor(Math.random()*document.getElementById("myCanvas").width + 1);
		inp[i][1] = Math.floor(Math.random()*document.getElementById("myCanvas").height + 1);
		document.getElementById("points").value += "(" + inp[i][0] + ", " + inp[i][1] + "), ";
	}

	dispPts(inp);
	return inp;
}

function dispPts(input)
{
	var i, c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");

	ctx.clearRect(0, 0, c.width, c.height);
	ctx.fillStyle="#000000";

	for (i = 0; i < input.length; i++)
	{
		ctx.beginPath();
		ctx.arc(input[i][0],c.height-input[i][1],5,0,Math.PI*2,true);
		ctx.closePath();
		ctx.fill();
//		alert("point " + i + ": " + input[i][0] + ", " + input[i][1] + " drawn.");
	}
}

function kmeans(items, k, maxno, clusters, labels)
{
	var minDist, i, j, changed, iter, pos, chosen = new Array();
	var maxDist = new Array();
	text = "";
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	ctx.clearRect(0, 0, c.height, c.width);
	dispPts(items);

	for (i = 0; i < items.length; i++)
		chosen[i] = 0;

	for(i = 0; i < k; i++)
	{
		do
			pos = Math.floor(Math.random()*items.length + 1);
		while (chosen[pos] != 0);

		clusters[i] = new Array();

		clusters[i][0] = items[pos][0];
		clusters[i][1] = items[pos][1];
		chosen[pos] = 1;
		maxDist[i] = 0;
	}

	for (i = 0; i < items.length; i++)
	{
		pos = M;
		posD = M;
		for (j = 0; j < k; j++)
		{
			dist_curr = EucDist(items[i], clusters[j]);
			if (dist_curr < posD)
			{
				posD = dist_curr;
				pos = j;
			}
		}
		labels[i] = pos;
	}

	text += "Initial Configuration: <br>";
	text += dispClusters(items, k, clusters, labels);

	changed = false;
	iter = 0;

	do
	{
		for (i = 0; i < k; i++)
		{
			var sum = new Array();
			for (m = 0; m < items[0].length; m++)
				sum[m] = 0;
			count = 0;

			for (j = 0; j < items.length; j++)
			{
				if (labels[j] == i)
				{
					for (m = 0; m < items[j].length; m++)
					{
						sum[m] += items[j][m];
					}
					count++;
				}
			}

			for (m = 0; m < clusters[i].length; m++)
				clusters[i][m] = sum[m] / count;
			maxDist[i] = 0;
		}

		for (i = 0; i < items.length; i++)
		{
			pos = M;
			posD = M;

			for (j = 0; j < k; j++)
			{
				dist_curr = EucDist(items[i], clusters[j]);
				if (dist_curr < posD)
				{
					posD = dist_curr;
					pos = j;
				}
			}

			if (pos != labels[i])
			{
				labels[i] = pos;
				changed = true;
			}
		}
		iter++;
	} while (changed == true && iter <= maxno);

	for (i = 0; i < k; i++)
		for (j = 0; j < items.length; j++)
			if (labels[j] == i && EucDist(items[j], clusters[i]) > maxDist[i])
				maxDist[i] = EucDist(items[j], clusters[i]);

	for (i = 0; i < k; i++)
	{
		ctx.strokeStyle="#0000FF";
		ctx.beginPath();
		ctx.moveTo(clusters[i][0], c.height-clusters[i][1]);
		for (j = 0; j < items.length; j++)
			if (labels[j] == i)
			{
				ctx.lineTo(items[j][0], c.height-items[j][1]);
				ctx.lineTo(clusters[i][0], c.height-clusters[i][1]);
			}
		ctx.closePath();
		ctx.stroke();

		ctx.fillStyle="#FF0000";
		ctx.beginPath();
		ctx.arc(clusters[i][0],c.height-clusters[i][1],2,0,Math.PI*2,true);
		ctx.closePath();
		ctx.fill();

		ctx.strokeStyle="#00FF00";
		ctx.beginPath();
		ctx.arc(clusters[i][0],c.height-clusters[i][1],maxDist[i],0,Math.PI*2,true);
		ctx.closePath();
		ctx.stroke();
	}
}

function dispClusters(items, k, clusters, labels)
{
	var text = "<table>";
	var i, j;

	for (i = 0; i < clusters.length; i++)
	{
		text += "<tr><td width=150><b>Cluster " + i + ":</b></td>";
		text += "<td width=150><b>(" + clusters[i][0].toFixed(3) + ", " + clusters[i][1].toFixed(3) + ")</b></td><td>";
		for (j = 0; j < items.length; j++)
		{
			if (labels[j] == i)
			{
				text += "(" + items[j][0] + ", " + items[j][1] + ")<br>";
			}
		}
		text += "</td></tr>";
	}

	text += "</table>";
	return text;
}

</script>
<h3><center></center></h3>
<p><p>The K-Means Clustering algorithm gives a nice introduction to unsupervised machine learning. The algorithm seeks to group similar items together into a set of clusters. The number of clusters (k) is part of the input into the problem, along with the data points themselves. The algorithm breaks down into three basic steps which are repeated until either convergence or until some maximum number of iterations is met. These three steps are as follows: <br>
<br>
0. Initially assign a point to each cluster. (Call this the center of that cluster), and set count to 0. <br>
1. For each point in our data set, we find the "closest" cluster center to that point and assign this point to the associated cluster. <br>
2. For each cluster, we calculate the average of the points in that cluster to determine a new cluster center. <br>
3. Increment count. <br>
4. If a point has changed cluster and count is less than the maximum number of iterations, then go to 1. <br>
5. Display the Clusters. <br>
</p></p>
<form name=input id=input>
Number of Points:
<select name=nopts id=nopts>
<option value="25">25</option>
<option value="50">50</option>
<option value="100">100</option>
<option value="200">200</option>
</select><br>
Number of Clusters:
<select name=noclust id=noclust>
<option value="5">5</option>
<option value="10">10</option>
<option value="15">15</option>
<option value="20">20</option>
</select><br>
Max Number of Iterations:
<select name=maxno id=maxno>
<option value="50">50</option>
<option value="100">100</option>
<option value="200">200</option>
<option value="500">500</option>
</select><br>
<textarea name="points" id="points" readonly rows=5></textarea><br>
<input type=Button value="Generate Points" onclick="clearRect();inp=generate();">
<input type=Button value="Run K-Means" onclick="clearRect();kmeans(inp, document.getElementById('noclust').value, document.getElementById('maxno').value, clusters, labels);text += 'Final Configuration:<br>';text += dispClusters(inp, document.getElementById('noclust').value, clusters, labels);document.getElementById('output').innerHTML = text;">
</form>
<canvas id="myCanvas" width="550" height="400"  style="border:1px solid
#c3c3c3;">
Your browser does not support the canvas element.
</canvas>
<p name='output' id='output'></p>
<script type="text/javascript">
var inp = new Array();
var clusters = new Array();
var labels = new Array();
</script>