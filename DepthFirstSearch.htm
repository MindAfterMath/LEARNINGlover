<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
DepthFirstSearch<style type="text/css">
.c {
	border: 1px black solid;
	width: 1.2em;
	height: 1.2em;
}

.rbeg {
	border: 1px black solid;
	white-space:nowrap;
	width: 1.2em;
	height: 1.2em;
}

.cbeg {
	border: 1px black solid;
	width: 1.2em;
	height: 1.2em;
}

p
{
	display: inline;
}
</style>
<script type="text/javascript">
var M_VAL = 50000;
function generate()
{
	var numNodes = Math.floor(Math.random()*20)+5;
	var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/4) - numNodes)) + numNodes;
	var graph = new Array(numNodes);
	var tree = new Array();
	var otherNodes = new Array();
	var count = 0;
	
	for (var i = 0; i < numNodes; i++)
	{
		graph[i] = new Array(numNodes);
		for (var j = 0; j < numNodes; j++)
		{
			graph[i][j] = M_VAL;
		}
	}
	
	tree[0] = 0;
	for (var i = 1; i < numNodes; i++)
	{
		otherNodes[i-1] = i;
	}
	
	while(tree.length < numNodes)
	{
		var inside = Math.floor(Math.random()*tree.length);
		var outside = Math.floor(Math.random()*otherNodes.length);
		
		graph[tree[inside]][otherNodes[outside]] = 1;
		graph[otherNodes[outside]][tree[inside]] = 1;
		
		tree[tree.length] = otherNodes[outside];
	
		otherNodes[outside] = otherNodes[otherNodes.length-1];
		otherNodes.length--;
	
		count++;
	}
		
	while (count < numArcs)
	{
		var loc1, loc2;
	
		do
		{
			var loc1 = Math.floor(Math.random()*numNodes);
			var loc2;
			var poss = new Array();
			for (var i = 0; i < graph.length; i++)
			{
				if (graph[loc1][i] == M_VAL && i != loc1)
				{
					poss[poss.length] = i;
				}
			}

			loc2 = Math.floor(Math.random()*poss.length);
		}
		while (poss.length == 0);
		
		graph[loc1][poss[loc2]] = 1;
		graph[poss[loc2]][loc1] = 1;
		count++;
	}
	
//	for (var i = 0; i < graph.length; i++)
//	{
//		P[i] = i;
//	}
//	R = new Array();
//	X = new Array();
	
	return graph;
}

function pop(stack)
{
//	var next = queue[0];
	for (var i = 1; i < stack.length; i++)
	{
		stack[i-1] = stack[i];
	}
	stack.length--;
	
	return stack;
}

function push(stack, node)
{
	for (var i = stack.length-1; i >= 0; i--)
	{
		stack[i+1] = stack[i];
	}
	stack[0] = node;
	
	return stack;
}

function depthFirst(graph, start)
{
	var stack = new Array();
	push(stack, start);
	var currLbl = 0;
	graph.nodes[start].label = currLbl;
	graph.nodes[start].dfsDist = 0;
	currLbl++;
	
	while (stack.length != 0)
	{
		var next = stack[0];
		stack = pop(stack);
		
		graph.nodes[next].label = currLbl;
		currLbl++;
		
		graph.nodes[next].stack = new Array();
		for (var i = 0; i < stack.length; i++)
		{
			graph.nodes[next].stack[i] = stack[i];
		}
		
		var adding = new Array();
		
		for (var i = 0; i < graph.edges.length; i++)
		{
			var toAdd = -1;
			if (graph.edges[i][0] == next)
			{
				toAdd = graph.edges[i][1];
			}
			else if (graph.edges[i][1] == next)
			{
				toAdd = graph.edges[i][0];
			}
			
			if (toAdd == -1 || (graph.nodes[toAdd].dfsDist != M_VAL || stack.indexOf(toAdd) != -1))
			{
				continue;
			}
			
			adding = push(adding, toAdd);
			
			graph.nodes[toAdd].dfsDist = graph.nodes[next].dfsDist + 1;
			graph.nodes[toAdd].parent = next;
			stack = push(stack, toAdd);
		}
		graph.nodes[next].adding = adding;
	}
	
	return graph;
}

function init(A)
{
	var graph = new Object();
	graph.edges = new Array();
	graph.nodes = new Array();
	
	var theta = new Array();
	var x = new Array();
	var y = new Array();
	var sel = document.getElementById("start");
	
	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2*Math.PI*i) / A.length;
		
		graph.nodes[i] = new Object;
		graph.nodes[i].value = i;
		graph.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;
		graph.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;
		graph.nodes[i].label = "";
		graph.nodes[i].dfsDist = M_VAL;
		graph.nodes[i].stack = [];
		graph.nodes[i].adding = [];
		graph.nodes[i].parent = -1;
		
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] != M_VAL)
			{
				var len = graph.edges.length;
				graph.edges[len] = new Array();
				graph.edges[len][0] = i;
				graph.edges[len][1] = j;
			}
		}
		
		if (sel.options.length < A.length)
		{
			sel.options[sel.options.length] = new Option("Node " + i, i);
		}
	}
	
	drawGraph(graph);
	
	return graph;
}

function drawGraph(graph)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");

	ctx.clearRect(0, 0, c.width, c.height);
	
	for (var i = 0; i < graph.edges.length; i++)
	{
		ctx.lineWidth = 1;
		ctx.strokeStyle = "#000000";
		ctx.beginPath();
		ctx.moveTo(graph.nodes[graph.edges[i][0]].xVal, graph.nodes[graph.edges[i][0]].yVal);
		ctx.lineTo(graph.nodes[graph.edges[i][1]].xVal, graph.nodes[graph.edges[i][1]].yVal);
		ctx.stroke();
	}
	
	for (var i = 0; i < graph.nodes.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);
		ctx.stroke();

		ctx.fillStyle = "#c9c9c9";
		
		ctx.beginPath();
		ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		if (graph.nodes[i].value == 0)
		{
			ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(20))+1), graph.nodes[i].yVal+2);
		}
		else
		{
			ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(20))+1), graph.nodes[i].yVal+2);
		}
	}
}

function dispMtrx(A)
{	
	var text = "<table>";
	text += "<tr>";
	for (var j = 0; j < A.length; j++)
	{
		text += "<td>" + j + "</td>";
	}
	text += "</tr>";

	for (var i = 0; i < A.length; i++)
	{	
		for (var j = 0; j < A.length; j++)
		{
			if (A[i][j] != M_VAL)
			{
				text += "<td>" + A[i][j] + "</td>";
			}	
			else
			{
				text += "<td>-</td>";
			}
		}
		text += "</tr>";
	}
	text += "</table>";

	return text;
}

function newProb()
{
	P = new Array(); 
	R = new Array(); 
	X = new Array(); 
	A = generate(); 
	userAns = new Array(); 
	clqs = new Array(); 
	forest=init(A); 
//	drawGraph(forest);
}

function dispClqs()
{
	for (var i = 0; i < clqs.length; i++)
	{
		document.getElementById("output").innerHTML += "clique " + i + ") " + clqs[i] + "<br>";
	}
}

function dispTable(graph, start)
{
	var text = "<table>";
	text += "<tr><td>Node</td><td>Order Visited</td><td>To Visit</td><td>Adding</td><td>Distance From Node " + start + "</td></tr>";
	for (var i = 0; i < graph.nodes.length; i++)
	{
		for (var j = 0; j < graph.nodes.length; j++)
		{
			if (graph.nodes[j].label == i)
			{
				text += "<tr><td>" + graph.nodes[j].value + "</td><td><center>" + graph.nodes[j].label + "</center></td><td>" + graph.nodes[j].stack + "</td><td>" + graph.nodes[j].adding + "</td><td>" + graph.nodes[j].dfsDist + "</td></tr>";
			}
		}
	}
	text += "</table>";
	
	return text;
}

function drawLabels(graph)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");

	for (var i = 0; i < graph.nodes.length; i++)
	{
		ctx.fillStyle = colors[graph.nodes[i].dfsDist];
		ctx.beginPath();
		ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);
		ctx.fill();

//		if (graph.nodes[i].label == 0)
//		{
//			ctx.fillText(graph.nodes[i].bfsDist, graph.nodes[i].xVal+20*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(20))+1), graph.nodes[i].yVal-20);
//		}
//		else
//		{
//			ctx.fillText(graph.nodes[i].bfsDist, graph.nodes[i].xVal+20*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(20))+1), graph.nodes[i].yVal-20);
//		}
	}
}
</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" /><meta name="keywords" content="search, node, depth, first, algorithm, graph, neighbors, visit, mark,  javascript, script, computer science, math, mathematics, dfs, learning, programming, math tutor" />
<meta name="description" content="This page contains a script to help users understand the Depth First Search Algorithm. " />

<title> at LEARNINGlover.com</title>
<style type="text/css">
.c {
	border: 1px black solid;
	width: 1.2em;
	height: 1.2em;
}

.rbeg {
	border: 1px black solid;
	white-space:nowrap;
	width: 1.2em;
	height: 1.2em;
}

.cbeg {
	border: 1px black solid;
	width: 1.2em;
	height: 1.2em;
}

p
{
	display: inline;
}
</style>
<script type="text/javascript">
var M_VAL = 50000;
function generate()
{
	var numNodes = Math.floor(Math.random()*20)+5;
	var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/4) - numNodes)) + numNodes;
	var graph = new Array(numNodes);
	var tree = new Array();
	var otherNodes = new Array();
	var count = 0;
	
	for (var i = 0; i < numNodes; i++)
	{
		graph[i] = new Array(numNodes);
		for (var j = 0; j < numNodes; j++)
		{
			graph[i][j] = M_VAL;
		}
	}
	
	tree[0] = 0;
	for (var i = 1; i < numNodes; i++)
	{
		otherNodes[i-1] = i;
	}
	
	while(tree.length < numNodes)
	{
		var inside = Math.floor(Math.random()*tree.length);
		var outside = Math.floor(Math.random()*otherNodes.length);
		
		graph[tree[inside]][otherNodes[outside]] = 1;
		graph[otherNodes[outside]][tree[inside]] = 1;
		
		tree[tree.length] = otherNodes[outside];
	
		otherNodes[outside] = otherNodes[otherNodes.length-1];
		otherNodes.length--;
	
		count++;
	}
		
	while (count < numArcs)
	{
		var loc1, loc2;
	
		do
		{
			var loc1 = Math.floor(Math.random()*numNodes);
			var loc2;
			var poss = new Array();
			for (var i = 0; i < graph.length; i++)
			{
				if (graph[loc1][i] == M_VAL && i != loc1)
				{
					poss[poss.length] = i;
				}
			}

			loc2 = Math.floor(Math.random()*poss.length);
		}
		while (poss.length == 0);
		
		graph[loc1][poss[loc2]] = 1;
		graph[poss[loc2]][loc1] = 1;
		count++;
	}
	
//	for (var i = 0; i < graph.length; i++)
//	{
//		P[i] = i;
//	}
//	R = new Array();
//	X = new Array();
	
	return graph;
}

function pop(stack)
{
//	var next = queue[0];
	for (var i = 1; i < stack.length; i++)
	{
		stack[i-1] = stack[i];
	}
	stack.length--;
	
	return stack;
}

function push(stack, node)
{
	for (var i = stack.length-1; i >= 0; i--)
	{
		stack[i+1] = stack[i];
	}
	stack[0] = node;
	
	return stack;
}

function depthFirst(graph, start)
{
	var stack = new Array();
	push(stack, start);
	var currLbl = 0;
	graph.nodes[start].label = currLbl;
	graph.nodes[start].dfsDist = 0;
	currLbl++;
	
	while (stack.length != 0)
	{
		var next = stack[0];
		stack = pop(stack);
		
		graph.nodes[next].label = currLbl;
		currLbl++;
		
		graph.nodes[next].stack = new Array();
		for (var i = 0; i < stack.length; i++)
		{
			graph.nodes[next].stack[i] = stack[i];
		}
		
		var adding = new Array();
		
		for (var i = 0; i < graph.edges.length; i++)
		{
			var toAdd = -1;
			if (graph.edges[i][0] == next)
			{
				toAdd = graph.edges[i][1];
			}
			else if (graph.edges[i][1] == next)
			{
				toAdd = graph.edges[i][0];
			}
			
			if (toAdd == -1 || (graph.nodes[toAdd].dfsDist != M_VAL || stack.indexOf(toAdd) != -1))
			{
				continue;
			}
			
			adding = push(adding, toAdd);
			
			graph.nodes[toAdd].dfsDist = graph.nodes[next].dfsDist + 1;
			graph.nodes[toAdd].parent = next;
			stack = push(stack, toAdd);
		}
		graph.nodes[next].adding = adding;
	}
	
	return graph;
}

function init(A)
{
	var graph = new Object();
	graph.edges = new Array();
	graph.nodes = new Array();
	
	var theta = new Array();
	var x = new Array();
	var y = new Array();
	var sel = document.getElementById("start");
	
	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2*Math.PI*i) / A.length;
		
		graph.nodes[i] = new Object;
		graph.nodes[i].value = i;
		graph.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;
		graph.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;
		graph.nodes[i].label = "";
		graph.nodes[i].dfsDist = M_VAL;
		graph.nodes[i].stack = [];
		graph.nodes[i].adding = [];
		graph.nodes[i].parent = -1;
		
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] != M_VAL)
			{
				var len = graph.edges.length;
				graph.edges[len] = new Array();
				graph.edges[len][0] = i;
				graph.edges[len][1] = j;
			}
		}
		
		if (sel.options.length < A.length)
		{
			sel.options[sel.options.length] = new Option("Node " + i, i);
		}
	}
	
	drawGraph(graph);
	
	return graph;
}

function drawGraph(graph)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");

	ctx.clearRect(0, 0, c.width, c.height);
	
	for (var i = 0; i < graph.edges.length; i++)
	{
		ctx.lineWidth = 1;
		ctx.strokeStyle = "#000000";
		ctx.beginPath();
		ctx.moveTo(graph.nodes[graph.edges[i][0]].xVal, graph.nodes[graph.edges[i][0]].yVal);
		ctx.lineTo(graph.nodes[graph.edges[i][1]].xVal, graph.nodes[graph.edges[i][1]].yVal);
		ctx.stroke();
	}
	
	for (var i = 0; i < graph.nodes.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);
		ctx.stroke();

		ctx.fillStyle = "#c9c9c9";
		
		ctx.beginPath();
		ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		if (graph.nodes[i].value == 0)
		{
			ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(20))+1), graph.nodes[i].yVal+2);
		}
		else
		{
			ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(20))+1), graph.nodes[i].yVal+2);
		}
	}
}

function dispMtrx(A)
{	
	var text = "<table>";
	text += "<tr>";
	for (var j = 0; j < A.length; j++)
	{
		text += "<td>" + j + "</td>";
	}
	text += "</tr>";

	for (var i = 0; i < A.length; i++)
	{	
		for (var j = 0; j < A.length; j++)
		{
			if (A[i][j] != M_VAL)
			{
				text += "<td>" + A[i][j] + "</td>";
			}	
			else
			{
				text += "<td>-</td>";
			}
		}
		text += "</tr>";
	}
	text += "</table>";

	return text;
}

function newProb()
{
	P = new Array(); 
	R = new Array(); 
	X = new Array(); 
	A = generate(); 
	userAns = new Array(); 
	clqs = new Array(); 
	forest=init(A); 
//	drawGraph(forest);
}

function dispClqs()
{
	for (var i = 0; i < clqs.length; i++)
	{
		document.getElementById("output").innerHTML += "clique " + i + ") " + clqs[i] + "<br>";
	}
}

function dispTable(graph, start)
{
	var text = "<table>";
	text += "<tr><td>Node</td><td>Order Visited</td><td>To Visit</td><td>Adding</td><td>Distance From Node " + start + "</td></tr>";
	for (var i = 0; i < graph.nodes.length; i++)
	{
		for (var j = 0; j < graph.nodes.length; j++)
		{
			if (graph.nodes[j].label == i)
			{
				text += "<tr><td>" + graph.nodes[j].value + "</td><td><center>" + graph.nodes[j].label + "</center></td><td>" + graph.nodes[j].stack + "</td><td>" + graph.nodes[j].adding + "</td><td>" + graph.nodes[j].dfsDist + "</td></tr>";
			}
		}
	}
	text += "</table>";
	
	return text;
}

function drawLabels(graph)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");

	for (var i = 0; i < graph.nodes.length; i++)
	{
		ctx.fillStyle = colors[graph.nodes[i].dfsDist];
		ctx.beginPath();
		ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);
		ctx.fill();

//		if (graph.nodes[i].label == 0)
//		{
//			ctx.fillText(graph.nodes[i].bfsDist, graph.nodes[i].xVal+20*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(20))+1), graph.nodes[i].yVal-20);
//		}
//		else
//		{
//			ctx.fillText(graph.nodes[i].bfsDist, graph.nodes[i].xVal+20*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(20))+1), graph.nodes[i].yVal-20);
//		}
	}
}
</script>
<h3><center></center></h3>
<p><p>This is program that labels a graph using the Depth First Search Algorithm</p>
</p>
<form name="data" id="data">
<br>
<input type="hidden" id="numNodes" name="numNodes">
<p name="input" id="input"></p>
<canvas name="myCanvas"  id="myCanvas" width=550 height=550 style="border:1px solid #000000;">your browser does not support the canvas tag</canvas>
<br>
<label>Start Node: </label><select name="start" id="start"></select><br>
<script type="text/javascript">
	var colors = new Array();
	colors[0] = "#0000FF";
	colors[1] = "#00FF00";
	colors[2] = "#FF0000";
	colors[3] = "#00AAFF";
	colors[4] = "#005555";
	colors[5] = "#AA00AA";
	colors[6] = "#00AAAA";
	colors[7] = "#AAAA00";
	colors[8] = "#AA00FF";
	colors[9] = "#00FFFF";
	colors[10] = "#FFAA00";
	colors[11] = "#FF00FF";
	colors[12] = "#AAAAFF";
	colors[13] = "#D2691E";
	colors[14] = "#FFAAAA";
	colors[15] = "#4682BD";
	colors[16] = "#FFFF00";
	colors[17] = "#FFFFAA";
	colors[18] = "#0000AA";
	colors[19] = "#00AA00";
	colors[20] = "#AA0000";
	colors[21] = "#F0F8FF";
	colors[22] = "#F0F8FF";
	colors[23] = "#FAEBD7";
	colors[24] = "#DEB887";

var A = generate();
var graph = init(A);
</script><br>
<input type="button" onclick="graph = init(A);depthFirst(graph, document.getElementById('start').value); document.getElementById('output').innerHTML = dispTable(graph, document.getElementById('start').value); drawLabels(graph)" value="Solve">
<p name="output"  id="output"></p>
</FORM>