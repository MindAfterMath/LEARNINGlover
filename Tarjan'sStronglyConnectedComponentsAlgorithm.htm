<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
Tarjan'sStronglyConnectedComponentsAlgorithm<script type="text/javascript">
//var M_VAL = 50000;
function generateDG()
{
	var numNodes = Math.floor(Math.random()*20)+5;
	var numArcs = Math.floor(Math.random() * ((numNodes * (numNodes-1))/2 - numNodes)) + numNodes;
	var graph = new Array(numNodes);
	var tree = new Array();
	var otherNodes = new Array();
	var count = 0;
	
	//rank is a list of the nodes that have already been placed in the graph.
	//This variable is called rank because in the DAG format we will only have arcs flowing one way and the rank ordering gives the direction. 
	var rank = new Array(numNodes);
	
	//rem is a list of the nodes remaining to be placed in the graph.
	var rem = new Array(numNodes);
	
	for (var i = 0; i < numNodes; i++)
	{
		rem.push(i);
	}
	
	//This next procedure
	//	(1) Randomly selects a node (loc is the location in rem of the node, rem[loc] is the node itself). 
	//	(2) Put that node at the end of rank.
	//	(3) Reove that node from rem. 
	for (var i = 0; i < numNodes; i++)
	{
		var loc = Math.floor(Math.random()*rem.length);
		rank.push(rem[loc]);
		rem[loc] = rem[rem.length-1];
		rem.length--;
	}
	
	//Now rem should be an empty array, so we can assign its value to null and remove it from the program. 
	rem = null;
	
	//Next we will set up an initial adjacency matrix with all values equal to infinity (Number.MAX_VALUE). 
	for (var i = 0; i < numNodes; i++)
	{
		graph[i] = new Array(numNodes);
		for (var j = 0; j < numNodes; j++)
		{
			graph[i][j] = Number.MAX_VALUE;
		}
	}
	
	//To build a connected graph, we will begin by connecting all nodes via a tree. 
	//Initially node 0 is in this tree and the remaining nodes are in otherNodes (outside the tree). 
	tree[0] = Math.floor(Math.random() * numNodes);
	for (var i = 0; i < numNodes; i++)
	{
		if (tree.indexOf(i) == -1)
		{
			otherNodes.push(i);
		}
	}
	
	//The purpose of this while loop is to connect all nodes to the tree. 
	//It operates by iteratively selecting a node inside the tree and a node outside the tree (both at random). 
	while (tree.length < numNodes)
	{
		var inside = Math.floor(Math.random() * tree.length);
		var outside = Math.floor(Math.random() * otherNodes.length);
		
		graph[tree[inside]][otherNodes[outside]] = 1;
		tree.push(otherNodes[outside]);
		otherNodes.splice(outside, 1);	
		count++;
	}
	
	var rem = [];
	for (var i = 0; i < numNodes; i++)
	{
		for (var j = 0; j < numNodes; j++)
		{
			if (graph[i][j] == Number.MAX_VALUE)
			{
				rem.push(i + ", " + j);
			}
		}
	}
	
	while (count < numArcs)
	{
		var loc = Math.floor(Math.random() * rem.length);
		var i = rem[loc].split(", ")[0];
		var j = rem[loc].split(", ")[1];
		graph[i][j] = 1;
		rem.splice(loc, 1);
		count++;
	}
		
	return graph;
}

function tarjan(graph)
{
	for (var i = 0; i < graph.nodes.length; i++)
	{
		if (graph.nodes[i].label == -1)
		{
			graph = strCnt(graph, i);
		}
	}
	
	var label = new Array();
	for (var i = 0; i < graph.nodes.length; i++)
	{
		label[i] = graph.nodes[i].id;
	}
	return label;
}

function strCnt(graph, v)
{
	graph.nodes[v].label = graph.index;
	graph.nodes[v].lowLink = graph.index;
	graph.index = graph.index + 1;
	graph.stack = push(graph.stack, v);
	graph.nodes[v].onStack = true;
	
	for (var i = 0; i < graph.edges.length; i++)
	{
		if (graph.edges[i][0] == v)
		{
			if (graph.nodes[graph.edges[i][1]].label == -1)
			{
				graph = strCnt(graph, graph.edges[i][1]);
				graph.nodes[v].lowLink = Math.min(graph.nodes[v].lowLink, graph.nodes[graph.edges[i][1]].lowLink);
			}
			else if (graph.nodes[graph.edges[i][1]].onStack)
			{
				graph.nodes[v].lowLink = Math.min(graph.nodes[v].lowLink, graph.nodes[graph.edges[i][1]].label);
			}
		}
	}
	
	if (graph.nodes[v].lowLink == graph.nodes[v].label)
	{
		graph.currCmp++;
		var w;
		do
		{
			w = graph.stack.value;
			graph.stack = pop(graph.stack);
			graph.nodes[w].onStack = false;
			graph.nodes[w].id = graph.currCmp;
		}
		while (w != v);
	}
	
	return graph;
}

function disp(stack)
{
	var text = "";
	
	while (stack != null)
	{
		if (stack != null)
		{
			text += stack.value + ", ";
		}
		stack = stack.next;
	}
	
	return text;
}

function pop(curr)
{
	var temp = new Object();
	if (curr != null)
	{	
		temp = curr.next;
		curr = temp;
	}

	return curr;
}		

function push(curr, next)
{
	var newItem = new Object();
	var value = next;

	newItem.value = value;
	if (curr == null)
	{
		newItem.next = null;
	}
	else
	{
		newItem.next = curr;
	}
	curr = newItem;

	return curr;
}

function init(A)
{
	var graph = new Object();
	graph.edges = new Array();
	graph.nodes = new Array();
	
	var theta = new Array();
	var x = new Array();
	var y = new Array();
	
	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2*Math.PI*i) / A.length;
		
		graph.nodes[i] = new Object;
		graph.nodes[i].value = i;
		graph.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;
		graph.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;
		graph.nodes[i].label = -1;
		graph.nodes[i].onStack = false;
		graph.nodes[i].lowLink = -1;
		graph.nodes[i].id = -1;
		
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] != Number.MAX_VALUE && A[i][j] != -1)
			{
				var len = graph.edges.length;
				graph.edges[len] = new Array();
				graph.edges[len][0] = i;
				graph.edges[len][1] = j;
			}
		}
	}
	graph.index = 0;
	graph.currCmp = 0;
	graph.stack = null;
	
	drawGraph(graph);
	
	return graph;
}

function drawGraph(forest)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	var used = new Array(forest.nodes.length);
	
	for (var i = 0; i < used.length; i++)
	{
		used[i] = false;
	}

	ctx.clearRect (0, 0, c.width,  c.height);
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < A.length; j++)
		{
			var edge = new Array();
			edge[0] = forest.nodes[i];
			edge[1] = forest.nodes[j];
			var drawn = false;
			if (indexOf(forest, edge) == -1 && A[i][j] != Number.MAX_VALUE && A[i][j] >= 0)
			{
//				if (userAns.indexOf(edge[0].value) == -1 && userAns.indexOf(edge[1].value) == -1)
//				{
					ctx.lineWidth = 1;
					ctx.strokeStyle = "#000000";
					ctx.beginPath();
					ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);
					ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
					ctx.stroke();
					drawn = true;
//				}
				
				if (drawn)
				{
					var leftRight = true;
					
					if (forest.nodes[i].xVal > forest.nodes[j].xVal)
					{
						leftRight = false;
					}
					
					var headlen = 20;
					var slope1 = (forest.nodes[i].yVal - forest.nodes[j].yVal) / (forest.nodes[i].xVal - forest.nodes[j].xVal);
					var angle = Math.atan(slope1);
					
					if (leftRight)
					{
						ctx.beginPath();
						ctx.moveTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
						ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal - headlen * Math.sin(angle - Math.PI/7));

						//path from the side point of the arrow, to the other side point
						ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle + Math.PI/7), forest.nodes[j].yVal - headlen*Math.sin(angle + Math.PI/7));

						//path from the side point back to the tip of the arrow, and then again to the opposite side point
						ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
						ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal - headlen*Math.sin(angle - Math.PI/7));
					}
					else
					{
						ctx.beginPath();
						ctx.moveTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
						ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal + headlen * Math.sin(angle - Math.PI/7));

						//path from the side point of the arrow, to the other side point
						ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle + Math.PI/7), forest.nodes[j].yVal + headlen*Math.sin(angle + Math.PI/7));

						//path from the side point back to the tip of the arrow, and then again to the opposite side point
						ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
						ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal + headlen*Math.sin(angle - Math.PI/7));
					}

					//draws the paths created above
	//				ctx.strokeStyle = "#c0c0c0";
	//				ctx.lineWidth = 1;
					ctx.stroke();
					ctx.fillStyle = "#c0c0c0";
					ctx.fill();
					
	//				var slope1 = (forest.nodes[i].yVal - forest.nodes[j].yVal) / (forest.nodes[i].xVal - forest.nodes[j].xVal);
	//				var slope2 = -1 / slope1;
	//				insideX = forest.nodes[j].xVal - (forest.nodes[i].xVal + forest.nodes[j].xVal) / 16;
	//				insideY = slope2 * (insideX - forest.nodes[j].xVal) + forest.nodes[j].yVal;
				}
			}
		}
	}
	
	for (var i = 0; i < forest.nodes.length; i++)
	{
		ctx.strokeStyle = "#000000";
		ctx.beginPath();
		ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.stroke();

		if (used[i])
		{
			ctx.fillStyle = "#00FFFF";
		}
		else
		{
			ctx.fillStyle = "#c9c9c9";
		}
		ctx.beginPath();
		ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		if (forest.nodes[i].value == 0)
		{
			ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value+1)/Math.log(10))+1), forest.nodes[i].yVal+2);
		}
		else
		{
			ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value)/Math.log(10))+1), forest.nodes[i].yVal+2);
		}
	}
}

function dispMtrx(A)
{	
	var text = "<table>";
	text += "<tr>";
	for (var j = 0; j < A.length; j++)
	{
		text += "<td>" + j + "</td>";
	}
	text += "</tr>";

	for (var i = 0; i < A.length; i++)
	{	
		for (var j = 0; j < A.length; j++)
		{
			if (A[i][j] != M_VAL)
			{
				text += "<td>" + A[i][j] + "</td>";
			}	
			else
			{
				text += "<td>-</td>";
			}
		}
		text += "</tr>";
	}
	text += "</table>";

	return text;
}

function dispTable(graph, start)
{
	var text = "<table>";
	text += "<tr><td>Node</td><td>Order Visited</td><td>To Visit</td><td>Adding</td><td>Distance From Node " + start + "</td></tr>";
	for (var i = 0; i < graph.nodes.length; i++)
	{
		for (var j = 0; j < graph.nodes.length; j++)
		{
			if (graph.nodes[j].label == i)
			{
				text += "<tr><td>" + graph.nodes[j].value + "</td><td><center>" + graph.nodes[j].label + "</center></td><td>" + graph.nodes[j].stack + "</td><td>" + graph.nodes[j].adding + "</td><td>" + graph.nodes[j].dfsDist + "</td></tr>";
			}
		}
	}
	text += "</table>";
	
	return text;
}

function drawLabels(graph, labels)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");

	for (var i = 0; i < graph.nodes.length; i++)
	{
		ctx.fillStyle = colors[labels[i]];
		ctx.beginPath();
		ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.fill();
		
		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		if (graph.nodes[i].value == 0)
		{
			ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(10))+1), graph.nodes[i].yVal+2);
		}
		else
		{
			ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(10))+1), graph.nodes[i].yVal+2);
		}
	}
}

function used(list, num1, num2)
{
	var i, ans = false;
	for (i = 0; i < list.length && ans == false; i++)
	{
		if (EucDist(list[i][0], list[i][1], num1, num2) < 5)
//		if (list[i][0] == num1 && list[i][1] == num2)
			ans = true;
	}

	return ans;
}

function EucDist(point1_x, point1_y, point2_x, point2_y)
{
	var i, j, sumSq = 0;

	sumSq += Math.pow(point1_x - point2_x, 2);
	sumSq += Math.pow(point1_y - point2_y, 2);

	return Math.sqrt(sumSq);
}

function postProcess(A, pts)
{
	var text2 ='<table><tr><td>MST = ';
	var sol = Kruskal(A, A.length, document.getElementById('show').checked);
	for (i = 0; i < 2*(A.length-1);i+=2)
		text2 += '(' + sol[i] + ', ' + sol[i+1] + '), ';
	text2 += 'Cost = ' + sol[2*A.length-2] +'</td></tr></table>';
	document.getElementById('output').innerHTML += text2;drawAns(A, pts, sol);
}

function indexOf(forest, edge)
{
	var ans = -1;
	var i = 0;
	while (i < forest.edges.length && ans == -1)
	{
		if ((forest.edges[i][0] == edge[0] && forest.edges[i][1] == edge[1]))
		{
			ans = i;
		}
		i++;
	}
	
	return ans;
}

function addEdge(A)
{
	var edges = [];
	var nonEdges = [];
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] == Number.MAX_VALUE)
			{
				nonEdges.push(i + ", " + j);
			}
			else
			{
				edges.push(i + ", " + j);
			}
		}
	}
	
	var loc = Math.floor(Math.random() * nonEdges.length);
	var u = nonEdges[loc].split(", ")[0];
	var v = nonEdges[loc].split(", ")[1];
	
	A[u][v] = 1;
	
	return A;
}

function remEdge(A)
{
	var edges = [];
	var nonEdges = [];
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] == Number.MAX_VALUE)
			{
				nonEdges.push(i + ", " + j);
			}
			else
			{
				edges.push(i + ", " + j);
			}
		}
	}
	
	var loc = Math.floor(Math.random() * edges.length);
	var u = edges[loc].split(", ")[0];
	var v = edges[loc].split(", ")[1];
	
	A[u][v] = Number.MAX_VALUE;
	
	return A;
}

function dispLables(labels)
{
	var text = "";
	var scc = [];
	
	for (var i = 0; i < labels.length; i++)
	{
		if (!Array.isArray(scc[labels[i]]))
		{
			scc[labels[i]] = [];
		}
		scc[labels[i]].push(i);
	}
	
	text += "These are the strongly connected components: <br>";
	for (var i = 1; i < scc.length; i++)
	{
		text += scc[i] + "<br>";
	}
	
	document.getElementById("output").innerHTML += text;
}
</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" /><meta name="keywords" content="algorithm, computer science, JavaScript, math, operations research, programming, depth, first, search, graph, tarjan, strongly, connected, components" />
<meta name="description" content="This is a program that executes Tarjan's Strongly Connected Components Algorithm. " />
<title> at LEARNINGlover.com</title>
<script type="text/javascript">
//var M_VAL = 50000;
function generateDG()
{
	var numNodes = Math.floor(Math.random()*20)+5;
	var numArcs = Math.floor(Math.random() * ((numNodes * (numNodes-1))/2 - numNodes)) + numNodes;
	var graph = new Array(numNodes);
	var tree = new Array();
	var otherNodes = new Array();
	var count = 0;
	
	//rank is a list of the nodes that have already been placed in the graph.
	//This variable is called rank because in the DAG format we will only have arcs flowing one way and the rank ordering gives the direction. 
	var rank = new Array(numNodes);
	
	//rem is a list of the nodes remaining to be placed in the graph.
	var rem = new Array(numNodes);
	
	for (var i = 0; i < numNodes; i++)
	{
		rem.push(i);
	}
	
	//This next procedure
	//	(1) Randomly selects a node (loc is the location in rem of the node, rem[loc] is the node itself). 
	//	(2) Put that node at the end of rank.
	//	(3) Reove that node from rem. 
	for (var i = 0; i < numNodes; i++)
	{
		var loc = Math.floor(Math.random()*rem.length);
		rank.push(rem[loc]);
		rem[loc] = rem[rem.length-1];
		rem.length--;
	}
	
	//Now rem should be an empty array, so we can assign its value to null and remove it from the program. 
	rem = null;
	
	//Next we will set up an initial adjacency matrix with all values equal to infinity (Number.MAX_VALUE). 
	for (var i = 0; i < numNodes; i++)
	{
		graph[i] = new Array(numNodes);
		for (var j = 0; j < numNodes; j++)
		{
			graph[i][j] = Number.MAX_VALUE;
		}
	}
	
	//To build a connected graph, we will begin by connecting all nodes via a tree. 
	//Initially node 0 is in this tree and the remaining nodes are in otherNodes (outside the tree). 
	tree[0] = Math.floor(Math.random() * numNodes);
	for (var i = 0; i < numNodes; i++)
	{
		if (tree.indexOf(i) == -1)
		{
			otherNodes.push(i);
		}
	}
	
	//The purpose of this while loop is to connect all nodes to the tree. 
	//It operates by iteratively selecting a node inside the tree and a node outside the tree (both at random). 
	while (tree.length < numNodes)
	{
		var inside = Math.floor(Math.random() * tree.length);
		var outside = Math.floor(Math.random() * otherNodes.length);
		
		graph[tree[inside]][otherNodes[outside]] = 1;
		tree.push(otherNodes[outside]);
		otherNodes.splice(outside, 1);	
		count++;
	}
	
	var rem = [];
	for (var i = 0; i < numNodes; i++)
	{
		for (var j = 0; j < numNodes; j++)
		{
			if (graph[i][j] == Number.MAX_VALUE)
			{
				rem.push(i + ", " + j);
			}
		}
	}
	
	while (count < numArcs)
	{
		var loc = Math.floor(Math.random() * rem.length);
		var i = rem[loc].split(", ")[0];
		var j = rem[loc].split(", ")[1];
		graph[i][j] = 1;
		rem.splice(loc, 1);
		count++;
	}
		
	return graph;
}

function tarjan(graph)
{
	for (var i = 0; i < graph.nodes.length; i++)
	{
		if (graph.nodes[i].label == -1)
		{
			graph = strCnt(graph, i);
		}
	}
	
	var label = new Array();
	for (var i = 0; i < graph.nodes.length; i++)
	{
		label[i] = graph.nodes[i].id;
	}
	return label;
}

function strCnt(graph, v)
{
	graph.nodes[v].label = graph.index;
	graph.nodes[v].lowLink = graph.index;
	graph.index = graph.index + 1;
	graph.stack = push(graph.stack, v);
	graph.nodes[v].onStack = true;
	
	for (var i = 0; i < graph.edges.length; i++)
	{
		if (graph.edges[i][0] == v)
		{
			if (graph.nodes[graph.edges[i][1]].label == -1)
			{
				graph = strCnt(graph, graph.edges[i][1]);
				graph.nodes[v].lowLink = Math.min(graph.nodes[v].lowLink, graph.nodes[graph.edges[i][1]].lowLink);
			}
			else if (graph.nodes[graph.edges[i][1]].onStack)
			{
				graph.nodes[v].lowLink = Math.min(graph.nodes[v].lowLink, graph.nodes[graph.edges[i][1]].label);
			}
		}
	}
	
	if (graph.nodes[v].lowLink == graph.nodes[v].label)
	{
		graph.currCmp++;
		var w;
		do
		{
			w = graph.stack.value;
			graph.stack = pop(graph.stack);
			graph.nodes[w].onStack = false;
			graph.nodes[w].id = graph.currCmp;
		}
		while (w != v);
	}
	
	return graph;
}

function disp(stack)
{
	var text = "";
	
	while (stack != null)
	{
		if (stack != null)
		{
			text += stack.value + ", ";
		}
		stack = stack.next;
	}
	
	return text;
}

function pop(curr)
{
	var temp = new Object();
	if (curr != null)
	{	
		temp = curr.next;
		curr = temp;
	}

	return curr;
}		

function push(curr, next)
{
	var newItem = new Object();
	var value = next;

	newItem.value = value;
	if (curr == null)
	{
		newItem.next = null;
	}
	else
	{
		newItem.next = curr;
	}
	curr = newItem;

	return curr;
}

function init(A)
{
	var graph = new Object();
	graph.edges = new Array();
	graph.nodes = new Array();
	
	var theta = new Array();
	var x = new Array();
	var y = new Array();
	
	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2*Math.PI*i) / A.length;
		
		graph.nodes[i] = new Object;
		graph.nodes[i].value = i;
		graph.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;
		graph.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;
		graph.nodes[i].label = -1;
		graph.nodes[i].onStack = false;
		graph.nodes[i].lowLink = -1;
		graph.nodes[i].id = -1;
		
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] != Number.MAX_VALUE && A[i][j] != -1)
			{
				var len = graph.edges.length;
				graph.edges[len] = new Array();
				graph.edges[len][0] = i;
				graph.edges[len][1] = j;
			}
		}
	}
	graph.index = 0;
	graph.currCmp = 0;
	graph.stack = null;
	
	drawGraph(graph);
	
	return graph;
}

function drawGraph(forest)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	var used = new Array(forest.nodes.length);
	
	for (var i = 0; i < used.length; i++)
	{
		used[i] = false;
	}

	ctx.clearRect (0, 0, c.width,  c.height);
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < A.length; j++)
		{
			var edge = new Array();
			edge[0] = forest.nodes[i];
			edge[1] = forest.nodes[j];
			var drawn = false;
			if (indexOf(forest, edge) == -1 && A[i][j] != Number.MAX_VALUE && A[i][j] >= 0)
			{
//				if (userAns.indexOf(edge[0].value) == -1 && userAns.indexOf(edge[1].value) == -1)
//				{
					ctx.lineWidth = 1;
					ctx.strokeStyle = "#000000";
					ctx.beginPath();
					ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);
					ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
					ctx.stroke();
					drawn = true;
//				}
				
				if (drawn)
				{
					var leftRight = true;
					
					if (forest.nodes[i].xVal > forest.nodes[j].xVal)
					{
						leftRight = false;
					}
					
					var headlen = 20;
					var slope1 = (forest.nodes[i].yVal - forest.nodes[j].yVal) / (forest.nodes[i].xVal - forest.nodes[j].xVal);
					var angle = Math.atan(slope1);
					
					if (leftRight)
					{
						ctx.beginPath();
						ctx.moveTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
						ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal - headlen * Math.sin(angle - Math.PI/7));

						//path from the side point of the arrow, to the other side point
						ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle + Math.PI/7), forest.nodes[j].yVal - headlen*Math.sin(angle + Math.PI/7));

						//path from the side point back to the tip of the arrow, and then again to the opposite side point
						ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
						ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal - headlen*Math.sin(angle - Math.PI/7));
					}
					else
					{
						ctx.beginPath();
						ctx.moveTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
						ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal + headlen * Math.sin(angle - Math.PI/7));

						//path from the side point of the arrow, to the other side point
						ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle + Math.PI/7), forest.nodes[j].yVal + headlen*Math.sin(angle + Math.PI/7));

						//path from the side point back to the tip of the arrow, and then again to the opposite side point
						ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
						ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal + headlen*Math.sin(angle - Math.PI/7));
					}

					//draws the paths created above
	//				ctx.strokeStyle = "#c0c0c0";
	//				ctx.lineWidth = 1;
					ctx.stroke();
					ctx.fillStyle = "#c0c0c0";
					ctx.fill();
					
	//				var slope1 = (forest.nodes[i].yVal - forest.nodes[j].yVal) / (forest.nodes[i].xVal - forest.nodes[j].xVal);
	//				var slope2 = -1 / slope1;
	//				insideX = forest.nodes[j].xVal - (forest.nodes[i].xVal + forest.nodes[j].xVal) / 16;
	//				insideY = slope2 * (insideX - forest.nodes[j].xVal) + forest.nodes[j].yVal;
				}
			}
		}
	}
	
	for (var i = 0; i < forest.nodes.length; i++)
	{
		ctx.strokeStyle = "#000000";
		ctx.beginPath();
		ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.stroke();

		if (used[i])
		{
			ctx.fillStyle = "#00FFFF";
		}
		else
		{
			ctx.fillStyle = "#c9c9c9";
		}
		ctx.beginPath();
		ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		if (forest.nodes[i].value == 0)
		{
			ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value+1)/Math.log(10))+1), forest.nodes[i].yVal+2);
		}
		else
		{
			ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value)/Math.log(10))+1), forest.nodes[i].yVal+2);
		}
	}
}

function dispMtrx(A)
{	
	var text = "<table>";
	text += "<tr>";
	for (var j = 0; j < A.length; j++)
	{
		text += "<td>" + j + "</td>";
	}
	text += "</tr>";

	for (var i = 0; i < A.length; i++)
	{	
		for (var j = 0; j < A.length; j++)
		{
			if (A[i][j] != M_VAL)
			{
				text += "<td>" + A[i][j] + "</td>";
			}	
			else
			{
				text += "<td>-</td>";
			}
		}
		text += "</tr>";
	}
	text += "</table>";

	return text;
}

function dispTable(graph, start)
{
	var text = "<table>";
	text += "<tr><td>Node</td><td>Order Visited</td><td>To Visit</td><td>Adding</td><td>Distance From Node " + start + "</td></tr>";
	for (var i = 0; i < graph.nodes.length; i++)
	{
		for (var j = 0; j < graph.nodes.length; j++)
		{
			if (graph.nodes[j].label == i)
			{
				text += "<tr><td>" + graph.nodes[j].value + "</td><td><center>" + graph.nodes[j].label + "</center></td><td>" + graph.nodes[j].stack + "</td><td>" + graph.nodes[j].adding + "</td><td>" + graph.nodes[j].dfsDist + "</td></tr>";
			}
		}
	}
	text += "</table>";
	
	return text;
}

function drawLabels(graph, labels)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");

	for (var i = 0; i < graph.nodes.length; i++)
	{
		ctx.fillStyle = colors[labels[i]];
		ctx.beginPath();
		ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.fill();
		
		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		if (graph.nodes[i].value == 0)
		{
			ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(10))+1), graph.nodes[i].yVal+2);
		}
		else
		{
			ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(10))+1), graph.nodes[i].yVal+2);
		}
	}
}

function used(list, num1, num2)
{
	var i, ans = false;
	for (i = 0; i < list.length && ans == false; i++)
	{
		if (EucDist(list[i][0], list[i][1], num1, num2) < 5)
//		if (list[i][0] == num1 && list[i][1] == num2)
			ans = true;
	}

	return ans;
}

function EucDist(point1_x, point1_y, point2_x, point2_y)
{
	var i, j, sumSq = 0;

	sumSq += Math.pow(point1_x - point2_x, 2);
	sumSq += Math.pow(point1_y - point2_y, 2);

	return Math.sqrt(sumSq);
}

function postProcess(A, pts)
{
	var text2 ='<table><tr><td>MST = ';
	var sol = Kruskal(A, A.length, document.getElementById('show').checked);
	for (i = 0; i < 2*(A.length-1);i+=2)
		text2 += '(' + sol[i] + ', ' + sol[i+1] + '), ';
	text2 += 'Cost = ' + sol[2*A.length-2] +'</td></tr></table>';
	document.getElementById('output').innerHTML += text2;drawAns(A, pts, sol);
}

function indexOf(forest, edge)
{
	var ans = -1;
	var i = 0;
	while (i < forest.edges.length && ans == -1)
	{
		if ((forest.edges[i][0] == edge[0] && forest.edges[i][1] == edge[1]))
		{
			ans = i;
		}
		i++;
	}
	
	return ans;
}

function addEdge(A)
{
	var edges = [];
	var nonEdges = [];
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] == Number.MAX_VALUE)
			{
				nonEdges.push(i + ", " + j);
			}
			else
			{
				edges.push(i + ", " + j);
			}
		}
	}
	
	var loc = Math.floor(Math.random() * nonEdges.length);
	var u = nonEdges[loc].split(", ")[0];
	var v = nonEdges[loc].split(", ")[1];
	
	A[u][v] = 1;
	
	return A;
}

function remEdge(A)
{
	var edges = [];
	var nonEdges = [];
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] == Number.MAX_VALUE)
			{
				nonEdges.push(i + ", " + j);
			}
			else
			{
				edges.push(i + ", " + j);
			}
		}
	}
	
	var loc = Math.floor(Math.random() * edges.length);
	var u = edges[loc].split(", ")[0];
	var v = edges[loc].split(", ")[1];
	
	A[u][v] = Number.MAX_VALUE;
	
	return A;
}

function dispLables(labels)
{
	var text = "";
	var scc = [];
	
	for (var i = 0; i < labels.length; i++)
	{
		if (!Array.isArray(scc[labels[i]]))
		{
			scc[labels[i]] = [];
		}
		scc[labels[i]].push(i);
	}
	
	text += "These are the strongly connected components: <br>";
	for (var i = 1; i < scc.length; i++)
	{
		text += scc[i] + "<br>";
	}
	
	document.getElementById("output").innerHTML += text;
}
</script>
<h3><center></center></h3>
<p>This program generates a random graph and when you press the solve button, it will execute Tarjan's Strongly Connected Components Algorithm. The New Problem button will generate a new graph. 

The randomly generated graphs are not always interesting from a strongly connected components perspective. So I have added two buttons that add and remove a random edge from the graph an allow you to run the algorithm on the different (but close to the original) graph. </p>
<input type="hidden" id="numNodes" name="numNodes">
<p name="input" id="input"></p>
<canvas name="myCanvas"  id="myCanvas" width=550 height=550 style="border:1px solid #000000;">your browser does not support the canvas tag</canvas><br>
<script type="text/javascript">
	var colors = new Array();
	colors[0] = "#0000FF";
	colors[1] = "#00FF00";
	colors[2] = "#FF0000";
	colors[3] = "#00AAFF";
	colors[4] = "#005555";
	colors[5] = "#AA00AA";
	colors[6] = "#00AAAA";
	colors[7] = "#AAAA00";
	colors[8] = "#AA00FF";
	colors[9] = "#00FFFF";
	colors[10] = "#FFAA00";
	colors[11] = "#FF00FF";
	colors[12] = "#AAAAFF";
	colors[13] = "#D2691E";
	colors[14] = "#FFAAAA";
	colors[15] = "#4682BD";
	colors[16] = "#FFFF00";
	colors[17] = "#FFFFAA";
	colors[18] = "#0000AA";
	colors[19] = "#00AA00";
	colors[20] = "#AA0000";
	colors[21] = "#F0F8FF";
	colors[22] = "#F0F8FF";
	colors[23] = "#FAEBD7";
	colors[24] = "#DEB887";

var A = generateDG();
var graph = init(A);
</script><br>
<input type="button" onclick="document.getElementById('output').innerHTML = '';A = generateDG();graph = init(A);" value="New Problem">
<input type="button" onclick="var labels = tarjan(graph); dispLables(labels); drawLabels(graph, labels)" value="Solve">
<input type="button" onclick="document.getElementById('output').innerHTML = ''; A = addEdge(A); graph = init(A);" value="Add Random Edge">
<input type="button" onclick="document.getElementById('output').innerHTML = ''; A = remEdge(A); graph = init(A);" value="Remove Random Edge">
<p name="output"  id="output"></p>