<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
StreetCarDesignProblem<script type="text/javascript">
function maximum(option1, option2)
{
	if (option1 > option2)
	{
		return option1;
	}
	else
	{
		return option2;
	}
}

function minimum(option1, option2)
{
	if (option1 < option2)
	{
		return option1;
	}
	else
	{
		return option2;
	}
}

var M_VAL = 50000;
function generate()
{
	var numNodes = Math.floor(Math.random()*20)+5;
	var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/2) - numNodes)) + numNodes;
	var graph = new Array(numNodes);
	var tree = new Array();
	var otherNodes = new Array();
	var count = 0;
	
	for (var i = 0; i < numNodes; i++)
	{
		graph[i] = new Array(numNodes);
		for (var j = 0; j < numNodes; j++)
		{
			graph[i][j] = M_VAL;
		}
	}
	
	tree[0] = 0;
	for (var i = 1; i < numNodes; i++)
	{
		otherNodes[i-1] = i;
	}
	
	while(tree.length < numNodes)
	{
		var inside = Math.floor(Math.random()*tree.length);
		var outside = Math.floor(Math.random()*otherNodes.length);
		
		var value = Math.floor(Math.random()*25) + 1;
		graph[tree[inside]][otherNodes[outside]] = value;
		graph[otherNodes[outside]][tree[inside]] = value;
		
		tree[tree.length] = otherNodes[outside];
	
		otherNodes[outside] = otherNodes[otherNodes.length-1];
		otherNodes.length--;
	
		count++;
	}
		
	while (count < numArcs)
	{
		var loc1, loc2;
	
		do
		{
			var loc1 = Math.floor(Math.random()*numNodes);
			var loc2;
			var poss = new Array();
			for (var i = 0; i < graph.length; i++)
			{
				if (graph[loc1][i] == M_VAL && i != loc1)
				{
					poss[poss.length] = i;
				}
			}

			loc2 = Math.floor(Math.random()*poss.length);
		}
		while (poss.length == 0);
		
		var value = Math.floor(Math.random()*25) + 1;
		graph[loc1][poss[loc2]] = value;
		graph[poss[loc2]][loc1] = value;
		count++;
	}
	
	return graph;
}

function kruskal(forest, A)
{
	var min = M_VAL;
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < i; j++)
		{
			if (A[i][j] < min && forest.nodes[i].lookup != forest.nodes[j].lookup)
			{
				min = A[i][j];
				edge = new Array();
				edge[0] = forest.nodes[i];
				edge[1] = forest.nodes[j];
			}
		}
	}
	
	if (min != M_VAL)
	{
		forest = addEdge(forest, edge, min);
	}
	
	return forest;
}

function check(forest, A)
{
	var ans = document.getElementById("nextEdge").value.split("-");
	var costAns = A[ans[0]][ans[1]];
	var min = M_VAL;
	var newEdge = new Array();
	newEdge[0] = forest.nodes[ans[0]];
	newEdge[1] = forest.nodes[ans[1]];
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < i; j++)
		{
			if (A[i][j] < min && forest.nodes[i].lookup != forest.nodes[j].lookup)
			{
				min = A[i][j];
				edge = new Array();
				edge[0] = forest.nodes[i];
				edge[1] = forest.nodes[j];
			}
		}
	}
	
	var text = "";
	if (min != costAns)
	{
		text += "Sorry, but there is a cheaper edge than that.<br>";
	}
	else if (newEdge[0].lookup == newEdge[1].lookup)
	{
		text += "Sorry, but that edge forms a cycle in the tree.<br>";
	}
	else
	{
		text += "That's correct. <br>";
		forest = addEdge(forest, newEdge, min);
	}
	
	drawGraph(forest, A);
	
	var info = disp(forest);
	
	info = info.split("\n");
	
	text += "<table>";
	text += "<tr><td>" + info[1] + "</td><td>What Edge should be selected next?</td><td></td><td></td></tr>";
	text += "<tr><td>" + info[0] + "<td>" + dispEdges(A) + "</td><td><input type='button' value='Check' onclick='forest=check(forest, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>";
	text += "</table>";
	document.getElementById("output").innerHTML = text;
	
	return forest;
}

function dispEdges(A)
{
	var text = "";
	
	text += "<select name='nextEdge' id='nextEdge'>";
	
	var edgeList = new Array();
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < i; j++)
		{
			if (A[i][j] != M_VAL)
			{
//				var name = i + "-" + j;
//				text += "<option value='" + name + "'>Edge: (" + i + ", " + j + ") with cost " + A[i][j] + "</option>";
				var loc = edgeList.length; 
				edgeList[loc] = new Object();
				edgeList[loc].name = i + "-" + j;
				edgeList[loc].cost = A[i][j];
				edgeList[loc].text = i + ", " + j;
			}
		}
	}
	
	for (var i = 0; i < edgeList.length; i++)
	{
		for (var j = i+1; j < edgeList.length; j++)
		{
			if (edgeList[i].cost > edgeList[j].cost)
			{
				var temp = edgeList[i];
				edgeList[i] = edgeList[j];
				edgeList[j] = temp;
			}
		}
	}
	
	for (var i = 0; i < edgeList.length; i++)
	{
		text += "<option value='" + edgeList[i].name + "'>Edge: (" + edgeList[i].text + ") with cost " + edgeList[i].cost + "</option>";
	}
	
	text += "</select>";

	return text;
}

function init(A)
{
	var forest = new Object();
	forest.edges = new Array();
	forest.cost = 0;
	forest.trees = new Array();
	forest.nodes = new Array();
	
	var theta = new Array();
	var x = new Array();
	var y = new Array();
	
	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2*Math.PI*i) / A.length;
		
		forest.trees[i] = new Array();
		
		forest.nodes[i] = new Object;
		forest.nodes[i].value = i;
		forest.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;
		forest.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;
		forest.nodes[i].lookup = i;
		
		forest.trees[i][0] = forest.nodes[i];
	}
	
	drawGraph(forest);
	
	var info = disp(forest);
	
	info = info.split("\n");
	
	var text = "";
	text += "<table>";
	text += "<tr><td>" + info[0] + "</td><td>What Edge should be selected next?</td><td></td><td></td></tr>";
	text += "<tr><td>" + info[1] + "<td>" + dispEdges(A) + "</td><td><input type='button' value='Check' onclick='forest=check(forest, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>";
	text += "</table>";
	document.getElementById("output").innerHTML = text;
	
	return forest;
}

function drawGraph(forest)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	var used = new Array(forest.nodes.length);
	
	for (var i = 0; i < used.length; i++)
	{
		used[i] = false;
	}

	ctx.clearRect (0, 0, c.width,  c.height);
	
	for (var i = 0; i < forest.edges.length; i++)
	{
		ctx.lineWidth = 1;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(forest.edges[i][0].xVal, forest.edges[i][0].yVal);
		ctx.lineTo(forest.edges[i][1].xVal, forest.edges[i][1].yVal);
		ctx.stroke();
		used[forest.edges[i][0].value] = true;
		used[forest.edges[i][1].value] = true;
	}
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = i+1; j < A.length; j++)
		{
			var edge = new Array();
			edge[0] = forest.nodes[i];
			edge[1] = forest.nodes[j];
			if (indexOf(forest, edge) == -1)
			{
				ctx.lineWidth = 1;
				ctx.strokeStyle="#c0c0c0";
				ctx.beginPath();
				ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);
				ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
				ctx.stroke();
			}
		}
	}
	
	for (var i = 0; i < forest.nodes.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.stroke();

		if (used[i])
		{
			ctx.fillStyle = "#00FFFF";
		}
		else
		{
			ctx.fillStyle = "#c9c9c9";
		}
		ctx.beginPath();
		ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		if (forest.nodes[i].value == 0)
		{
			ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value+1)/Math.log(10))+1), forest.nodes[i].yVal+2);
		}
		else
		{
			ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value)/Math.log(10))+1), forest.nodes[i].yVal+2);
		}
	}

//	for (var i = 0; i < forest.nodes.length; i++)
//	{
//		ctx.fillText (forest.nodes[i].value, forest.nodes[i].xVal, forest.nodes[i].yVal);
//		document.getElementById ("output").innerHTML += forest.trees[i][0].xVal.toFixed (4) + ", " + forest.trees[i][0].yVal.toFixed (4) + "<br>";
//	}
}

function indexOf(forest, edge)
{
	var ans = -1;
	var i = 0;
	while (i < forest.edges.length && ans == -1)
	{
		if ((forest.edges[i][0] == edge[0] && forest.edges[i][1] == edge[1]) || (forest.edges[i][0] == edge[1] && forest.edges[i][1] == edge[0]))
		{
			ans = i;
		}
		i++;
	}
	
	return ans;
}

function length(forest)
{
	return forest.edges.length;
}

function addEdge(forest, edge, cost)
{
	initLen = forest.trees[forest.nodes[edge[0].value].lookup].length;
	initLook = forest.nodes[edge[0].value].lookup;
		
	for (var i = 0; i < initLen; i++)
	{
		forest.trees[forest.nodes[edge[1].value].lookup][forest.trees[forest.nodes[edge[1].value].lookup].length] = forest.trees[initLook][i];
		forest.nodes[forest.trees[initLook][i].value].lookup = forest.nodes[edge[1].value].lookup;
	}
	forest.edges[forest.edges.length] = edge;
	forest.cost += cost;
	
	return forest;
}

function disp(forest)
{
	var text = "";
	for (var i = 0; i < forest.edges.length; i++)
	{
		text += "(" + forest.edges[i][0].value + ", " + forest.edges[i][1].value + ")<br>";
	}
	text += "\nTotal cost: " + forest.cost + "<br>";
	
	return text;
}

function dispMtrx(A)
{	
	var text = "<table>";
	text += "<tr>";
	for (var j = 0; j < A.length; j++)
	{
		text += "<td>" + j + "</td>";
	}
	text += "</tr>";

	for (var i = 0; i < A.length; i++)
	{	
		for (var j = 0; j < A.length; j++)
		{
			if (A[i][j] != M_VAL)
			{
				text += "<td>" + A[i][j] + "</td>";
			}	
			else
			{
				text += "<td>-</td>";
			}
		}
		text += "</tr>";
	}
	text += "</table>";

	return text;
}

function newProb()
{
	A = generate();
	document.getElementById('input').innerHTML = dispMtrx(A);
	forest = init(A);
}
</script>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" />

<title> at LEARNINGlover.com</title>
<script type="text/javascript">
function maximum(option1, option2)
{
	if (option1 > option2)
	{
		return option1;
	}
	else
	{
		return option2;
	}
}

function minimum(option1, option2)
{
	if (option1 < option2)
	{
		return option1;
	}
	else
	{
		return option2;
	}
}

var M_VAL = 50000;
function generate()
{
	var numNodes = Math.floor(Math.random()*20)+5;
	var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/2) - numNodes)) + numNodes;
	var graph = new Array(numNodes);
	var tree = new Array();
	var otherNodes = new Array();
	var count = 0;
	
	for (var i = 0; i < numNodes; i++)
	{
		graph[i] = new Array(numNodes);
		for (var j = 0; j < numNodes; j++)
		{
			graph[i][j] = M_VAL;
		}
	}
	
	tree[0] = 0;
	for (var i = 1; i < numNodes; i++)
	{
		otherNodes[i-1] = i;
	}
	
	while(tree.length < numNodes)
	{
		var inside = Math.floor(Math.random()*tree.length);
		var outside = Math.floor(Math.random()*otherNodes.length);
		
		var value = Math.floor(Math.random()*25) + 1;
		graph[tree[inside]][otherNodes[outside]] = value;
		graph[otherNodes[outside]][tree[inside]] = value;
		
		tree[tree.length] = otherNodes[outside];
	
		otherNodes[outside] = otherNodes[otherNodes.length-1];
		otherNodes.length--;
	
		count++;
	}
		
	while (count < numArcs)
	{
		var loc1, loc2;
	
		do
		{
			var loc1 = Math.floor(Math.random()*numNodes);
			var loc2;
			var poss = new Array();
			for (var i = 0; i < graph.length; i++)
			{
				if (graph[loc1][i] == M_VAL && i != loc1)
				{
					poss[poss.length] = i;
				}
			}

			loc2 = Math.floor(Math.random()*poss.length);
		}
		while (poss.length == 0);
		
		var value = Math.floor(Math.random()*25) + 1;
		graph[loc1][poss[loc2]] = value;
		graph[poss[loc2]][loc1] = value;
		count++;
	}
	
	return graph;
}

function kruskal(forest, A)
{
	var min = M_VAL;
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < i; j++)
		{
			if (A[i][j] < min && forest.nodes[i].lookup != forest.nodes[j].lookup)
			{
				min = A[i][j];
				edge = new Array();
				edge[0] = forest.nodes[i];
				edge[1] = forest.nodes[j];
			}
		}
	}
	
	if (min != M_VAL)
	{
		forest = addEdge(forest, edge, min);
	}
	
	return forest;
}

function check(forest, A)
{
	var ans = document.getElementById("nextEdge").value.split("-");
	var costAns = A[ans[0]][ans[1]];
	var min = M_VAL;
	var newEdge = new Array();
	newEdge[0] = forest.nodes[ans[0]];
	newEdge[1] = forest.nodes[ans[1]];
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < i; j++)
		{
			if (A[i][j] < min && forest.nodes[i].lookup != forest.nodes[j].lookup)
			{
				min = A[i][j];
				edge = new Array();
				edge[0] = forest.nodes[i];
				edge[1] = forest.nodes[j];
			}
		}
	}
	
	var text = "";
	if (min != costAns)
	{
		text += "Sorry, but there is a cheaper edge than that.<br>";
	}
	else if (newEdge[0].lookup == newEdge[1].lookup)
	{
		text += "Sorry, but that edge forms a cycle in the tree.<br>";
	}
	else
	{
		text += "That's correct. <br>";
		forest = addEdge(forest, newEdge, min);
	}
	
	drawGraph(forest, A);
	
	var info = disp(forest);
	
	info = info.split("\n");
	
	text += "<table>";
	text += "<tr><td>" + info[1] + "</td><td>What Edge should be selected next?</td><td></td><td></td></tr>";
	text += "<tr><td>" + info[0] + "<td>" + dispEdges(A) + "</td><td><input type='button' value='Check' onclick='forest=check(forest, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>";
	text += "</table>";
	document.getElementById("output").innerHTML = text;
	
	return forest;
}

function dispEdges(A)
{
	var text = "";
	
	text += "<select name='nextEdge' id='nextEdge'>";
	
	var edgeList = new Array();
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < i; j++)
		{
			if (A[i][j] != M_VAL)
			{
//				var name = i + "-" + j;
//				text += "<option value='" + name + "'>Edge: (" + i + ", " + j + ") with cost " + A[i][j] + "</option>";
				var loc = edgeList.length; 
				edgeList[loc] = new Object();
				edgeList[loc].name = i + "-" + j;
				edgeList[loc].cost = A[i][j];
				edgeList[loc].text = i + ", " + j;
			}
		}
	}
	
	for (var i = 0; i < edgeList.length; i++)
	{
		for (var j = i+1; j < edgeList.length; j++)
		{
			if (edgeList[i].cost > edgeList[j].cost)
			{
				var temp = edgeList[i];
				edgeList[i] = edgeList[j];
				edgeList[j] = temp;
			}
		}
	}
	
	for (var i = 0; i < edgeList.length; i++)
	{
		text += "<option value='" + edgeList[i].name + "'>Edge: (" + edgeList[i].text + ") with cost " + edgeList[i].cost + "</option>";
	}
	
	text += "</select>";

	return text;
}

function init(A)
{
	var forest = new Object();
	forest.edges = new Array();
	forest.cost = 0;
	forest.trees = new Array();
	forest.nodes = new Array();
	
	var theta = new Array();
	var x = new Array();
	var y = new Array();
	
	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2*Math.PI*i) / A.length;
		
		forest.trees[i] = new Array();
		
		forest.nodes[i] = new Object;
		forest.nodes[i].value = i;
		forest.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;
		forest.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;
		forest.nodes[i].lookup = i;
		
		forest.trees[i][0] = forest.nodes[i];
	}
	
	drawGraph(forest);
	
	var info = disp(forest);
	
	info = info.split("\n");
	
	var text = "";
	text += "<table>";
	text += "<tr><td>" + info[0] + "</td><td>What Edge should be selected next?</td><td></td><td></td></tr>";
	text += "<tr><td>" + info[1] + "<td>" + dispEdges(A) + "</td><td><input type='button' value='Check' onclick='forest=check(forest, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>";
	text += "</table>";
	document.getElementById("output").innerHTML = text;
	
	return forest;
}

function drawGraph(forest)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	var used = new Array(forest.nodes.length);
	
	for (var i = 0; i < used.length; i++)
	{
		used[i] = false;
	}

	ctx.clearRect (0, 0, c.width,  c.height);
	
	for (var i = 0; i < forest.edges.length; i++)
	{
		ctx.lineWidth = 1;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(forest.edges[i][0].xVal, forest.edges[i][0].yVal);
		ctx.lineTo(forest.edges[i][1].xVal, forest.edges[i][1].yVal);
		ctx.stroke();
		used[forest.edges[i][0].value] = true;
		used[forest.edges[i][1].value] = true;
	}
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = i+1; j < A.length; j++)
		{
			var edge = new Array();
			edge[0] = forest.nodes[i];
			edge[1] = forest.nodes[j];
			if (indexOf(forest, edge) == -1)
			{
				ctx.lineWidth = 1;
				ctx.strokeStyle="#c0c0c0";
				ctx.beginPath();
				ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);
				ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);
				ctx.stroke();
			}
		}
	}
	
	for (var i = 0; i < forest.nodes.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.stroke();

		if (used[i])
		{
			ctx.fillStyle = "#00FFFF";
		}
		else
		{
			ctx.fillStyle = "#c9c9c9";
		}
		ctx.beginPath();
		ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		if (forest.nodes[i].value == 0)
		{
			ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value+1)/Math.log(10))+1), forest.nodes[i].yVal+2);
		}
		else
		{
			ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value)/Math.log(10))+1), forest.nodes[i].yVal+2);
		}
	}

//	for (var i = 0; i < forest.nodes.length; i++)
//	{
//		ctx.fillText (forest.nodes[i].value, forest.nodes[i].xVal, forest.nodes[i].yVal);
//		document.getElementById ("output").innerHTML += forest.trees[i][0].xVal.toFixed (4) + ", " + forest.trees[i][0].yVal.toFixed (4) + "<br>";
//	}
}

function indexOf(forest, edge)
{
	var ans = -1;
	var i = 0;
	while (i < forest.edges.length && ans == -1)
	{
		if ((forest.edges[i][0] == edge[0] && forest.edges[i][1] == edge[1]) || (forest.edges[i][0] == edge[1] && forest.edges[i][1] == edge[0]))
		{
			ans = i;
		}
		i++;
	}
	
	return ans;
}

function length(forest)
{
	return forest.edges.length;
}

function addEdge(forest, edge, cost)
{
	initLen = forest.trees[forest.nodes[edge[0].value].lookup].length;
	initLook = forest.nodes[edge[0].value].lookup;
		
	for (var i = 0; i < initLen; i++)
	{
		forest.trees[forest.nodes[edge[1].value].lookup][forest.trees[forest.nodes[edge[1].value].lookup].length] = forest.trees[initLook][i];
		forest.nodes[forest.trees[initLook][i].value].lookup = forest.nodes[edge[1].value].lookup;
	}
	forest.edges[forest.edges.length] = edge;
	forest.cost += cost;
	
	return forest;
}

function disp(forest)
{
	var text = "";
	for (var i = 0; i < forest.edges.length; i++)
	{
		text += "(" + forest.edges[i][0].value + ", " + forest.edges[i][1].value + ")<br>";
	}
	text += "\nTotal cost: " + forest.cost + "<br>";
	
	return text;
}

function dispMtrx(A)
{	
	var text = "<table>";
	text += "<tr>";
	for (var j = 0; j < A.length; j++)
	{
		text += "<td>" + j + "</td>";
	}
	text += "</tr>";

	for (var i = 0; i < A.length; i++)
	{	
		for (var j = 0; j < A.length; j++)
		{
			if (A[i][j] != M_VAL)
			{
				text += "<td>" + A[i][j] + "</td>";
			}	
			else
			{
				text += "<td>-</td>";
			}
		}
		text += "</tr>";
	}
	text += "</table>";

	return text;
}

function newProb()
{
	A = generate();
	document.getElementById('input').innerHTML = dispMtrx(A);
	forest = init(A);
}
</script>

<h3><center></center></h3>
<p></p>
<h3>
<center>A Step by Step Guide to Kruskal's Algorithm</center>
</h3>

<form name="data" id="data">
<input type=button onclick="A = init(A)" value="New Problem"><br>
<p name="input" id="input"></p>
<canvas name="myCanvas"  id="myCanvas" width=550 height=550 style="border:1px solid #000000;">your browser does not support the canvas tag</canvas>
<p name="output"  id="output"></p>
<script type="text/javascript">
var A = generate();
document.getElementById('input').innerHTML = dispMtrx(A);
//for (var i = 0; i < A.length; i++)
//{
//	document.getElementById("output").innerHTML += A[i] + "<br>";
//}
var forest = init(A);

drawGraph(forest);
</script><br>
<input type="button" onclick="forest=kruskal(forest, A); drawGraph(forest)" value="Next Step">
</FORM>
