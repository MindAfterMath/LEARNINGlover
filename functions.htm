<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta name="description" content="This page contains several scripts executing examples of computer science algorithms, as well as concepts from mathematics and probability." />
<meta name="keywords" content="mathematics, math, statistics, stats, probability, computer science, data mining, machine learning, games, algorithms, flash cards, flash, javascript, script, data structures, set theory, search, sort, clustering, coding theory, algebra, operations research, research, graph theory, graph, animation, programming" />
<title>Functions at LEARNINGlover.com</title>
<script type="text/javascript">
var fctns = new Array();
fctns[0] = new Object();
fctns[0].src = new Array();
fctns[0].title = new Array();
fctns[0].src[0] = "<style type='text/css'><br>.cred {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color: #FF0000;<br>}<br><br>.cwh {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color: #FFFFFF;<br>}<br><br>.cblk {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color: #000000;<br>}<br><br>.cblue {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color: #0000FF;<br>}<br>.cfin {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color: #FF00FF;<br>}<br>.cstart {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color: #00FFFF;<br>}<br>.cgreen {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color: #00FF00;<br>}<br>.rbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white-space:nowrap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>}<br>.cbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 0.5em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 0.5em;<br>}<br><br>td<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertical-align:top;<br>}<br><br></style><br><script type='text/javascript'>";
fctns[0].title[0] = "A-Star Algorithm - styleTags";
fctns[0].src[1] = " astar(grid, start, goal)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var closedSet = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var openSet = [start];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cameFrom = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameFrom.prev = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameFrom.elt = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var gScore = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gScore[0] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.cell = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.path = new Array();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fScore = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fScore[0] = new Array();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gScore[start.x][start.y] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fScore[start.x][start.y] = gScore[start.x][start.y] + hScore(start, goal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (openSet.length > 0 && count < 1000)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var textLen = wkthru.text.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cellLen = wkthru.cell.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] = '<center>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<table><tr><td style=\'border:1px solid\'>We are currently considering ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<table><tr><td>|Location|</td><td>|fScore|</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minOpen = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < openSet.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<tr><td>(' + openSet[zen].x + ', ' + openSet[zen].y + ')</td><td>' + fScore[openSet[zen].x][openSet[zen].y].toFixed(4) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (zen == 0 || (fScore[openSet[zen].x][openSet[zen].y] < fScore[minOpen.x][minOpen.y]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minOpen.x = openSet[zen].x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minOpen.y = openSet[zen].y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '</table></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var current = minOpen;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<tr><td style=\'border:1px solid\'>The cell with the minimum fScore is ' + current.x + ', ' + current.y + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (wkthru.cell.indexOf(current) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.cell[cellLen] = current;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (current.x == goal.x && current.y == goal.y)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<tr><td style=\'border:1px solid\'>We have reached the goal</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.path = makePath(cameFrom, goal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += 'Path is ' + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < wkthru.path.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '(' + wkthru.path[i].x + ', ' + wkthru.path[i].y + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != 0 && i != wkthru.path.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + wkthru.path[i].x + '_' + wkthru.path[i].y).style.backgroundColor = '#909090';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cell = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell.x = wkthru.path[i].x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell.y = wkthru.path[i].y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openSet = remove(openSet, current);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (current.x != start.x || current.y != start.y)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + current.x + '_' + current.y).style.backgroundColor = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;closedSet[closedSet.length] = current;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var neigh = neighbors(grid, current);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<tr><td style=\'border:1px solid\'>The neighbors of ' + current.x + ', ' + current.y + ' are ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < neigh.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '(' + neigh[zen].x + ', ' + neigh[zen].y + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (zen < neigh.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<table><tr><td>|Neighbor|</td><td>|gScore(' + current.x + ', ' + current.y + ')|</td><td>|Dist to Neighbor|</td><td>|gScore|</td><td>|In Queue|</td><td>|hScore|</td><td>|fScore|</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < neigh.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempGscr = gScore[current.x][current.y] + dist(current, neigh[zen]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(closedSet, neigh[zen]) == -1 || tempGscr < gScore[neigh[zen].x][neigh[zen].y])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(openSet, neigh[zen]) == -1 || (tempGscr < gScore[neigh[zen].x][neigh[zen].y]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = contains(cameFrom.elt, neigh[zen]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = cameFrom.prev.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameFrom.prev[len] = current;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameFrom.elt[len] = neigh[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameFrom.prev[loc] = current;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!Array.isArray(gScore[neigh[zen].x]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gScore[neigh[zen].x] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gScore[neigh[zen].x][neigh[zen].y] = tempGscr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!Array.isArray(fScore[neigh[zen].x]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fScore[neigh[zen].x] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fScore[neigh[zen].x][neigh[zen].y] = gScore[neigh[zen].x][neigh[zen].y] + hScore(neigh[zen], goal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<tr><td>' + neigh[zen].x + ', ' + neigh[zen].y + '</td><td>' + gScore[current.x][current.y].toFixed(4) + '</td><td>' + dist(current, neigh[zen]).toFixed(4) + '</td><td>' + tempGscr.toFixed(4) + '</td><td>N</td><td>' + hScore(neigh[zen], goal).toFixed(4) + '</td><td>' + fScore[neigh[zen].x][neigh[zen].y].toFixed(4) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(openSet, neigh[zen]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openSet[openSet.length] = neigh[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (contains(openSet, neigh[zen] != -1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<tr><td>' + neigh[zen].x + ', ' + neigh[zen].y + '</td><td>-----</td><td>-----</td><td>' + gScore[neigh[zen].x][neigh[zen].y].toFixed(4) + '</td><td>Y</td><td>' + hScore(neigh[zen], goal).toFixed(4) + '</td><td>' + fScore[neigh[zen].x][neigh[zen].y].toFixed(4) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tempGscr >= gScore[neigh[zen].x][neigh[zen].y])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<tr><td>' + neigh[zen].x + ', ' + neigh[zen].y + '</td><td>' + gScore[current.x][current.y].toFixed(4) + '</td><td>' + dist(current, neigh[zen]).toFixed(4) + '</td><td>' + tempGscr.toFixed(4) + '</td><td>N</td><td>' + hScore(neigh[zen], goal).toFixed(4) + '</td><td>' + fScore[neigh[zen].x][neigh[zen].y].toFixed(4) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tempGscr >= gScore[neigh[zen].x][neigh[zen].y])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<tr><td><i>' + neigh[zen].x + ', ' + neigh[zen].y + '</i></td><td><i>' + gScore[current.x][current.y].toFixed(4) + '</i></td><td><i>' + dist(current, neigh[zen]).toFixed(4) + '</i></td><td><i>' + tempGscr.toFixed(4) + '</i></td><td>N</td><td><i>' + hScore(neigh[zen], goal).toFixed(4) + '</i></td><td><i>' + fScore[neigh[zen].x][neigh[zen].y].toFixed(4) + '</i></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '</table></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru.text[textLen] += '</center>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += wkthru.text[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return wkthru;<br>}<br>";
fctns[0].title[1] = "A-Star Algorithm -  astar";
fctns[0].src[2] = " makePath(cameFrom, curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = contains(cameFrom.elt, curr);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'curr = ' + curr.x + ', ' + curr.y + '<br>';<br>   <br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < cameFrom.prev.length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'cameFrom.elt[' + i + '] = ' + cameFrom.elt[i].x + ', ' + cameFrom.elt[i].y + ', ';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'cameFrom.prev[' + i + '] = ' + cameFrom.prev[i].x + ', ' + cameFrom.prev[i].y + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'loc = ' + loc + '<br>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var p = makePath(cameFrom, cameFrom.prev[loc]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[p.length] = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var p = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[p.length] = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return p;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}";
fctns[0].title[2] = "A-Star Algorithm -  makePath";
fctns[0].src[3] = " hScore(start, goal)<br>{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'start = ' + start.x + ', ' + start.y + ', goal = ' + goal.x + ', ' + goal.y + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(Math.pow(start.x - goal.x, 2) + Math.pow(start.y - goal.y, 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.abs(start.x - goal.x) + Math.abs(start.y - goal.y);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.max(Math.abs(start.x - goal.x), Math.abs(start.y - goal.y));<br>}";
fctns[0].title[3] = "A-Star Algorithm -  hScore";
fctns[0].src[4] = " remove(set, elmt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < set.length && !(set[zen].x == elmt.x && set[zen].y == elmt.y); zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (; zen < set.length-1; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[zen] = set[zen+1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set;<br>}";
fctns[0].title[4] = "A-Star Algorithm -  remove";
fctns[0].src[5] = " neighbors(grid, node)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var neigh = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (node.x - 1 >= 0 && grid[node.x-1][node.y] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = neigh.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next  = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.x = node.x - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.y = node.y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(neigh, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'adding ' + next.x + ', ' + next.y + ' to neigh<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh[len] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (node.y - 1 >= 0 && grid[node.x][node.y-1] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = neigh.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next  = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.x = node.x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.y = node.y-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(neigh, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'adding ' + next.x + ', ' + next.y + ' to neigh<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh[len] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (node.x + 1 < grid.length && grid[node.x+1][node.y] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = neigh.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next  = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.x = node.x + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.y = node.y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(neigh, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'adding ' + next.x + ', ' + next.y + ' to neigh<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh[len] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (node.y + 1 < grid[0].length && grid[node.x][node.y+1] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = neigh.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next  = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.x = node.x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.y = node.y + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(neigh, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'adding ' + next.x + ', ' + next.y + ' to neigh<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh[len] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (node.x + 1 < grid.length && node.y + 1 < grid[0].length && grid[node.x+1][node.y+1] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = neigh.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next  = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.x = node.x + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.y = node.y + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(neigh, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'adding ' + next.x + ', ' + next.y + ' to neigh<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh[len] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (node.x - 1 >= 0 && node.y - 1 >= 0 && grid[node.x-1][node.y-1] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = neigh.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next  = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.x = node.x - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.y = node.y - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(neigh, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'adding ' + next.x + ', ' + next.y + ' to neigh<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh[len] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (node.x + 1 < grid.length && node.y - 1 >= 0 && grid[node.x+1][node.y-1] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = neigh.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next  = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.x = node.x + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.y = node.y - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(neigh, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'adding ' + next.x + ', ' + next.y + ' to neigh<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh[len] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (node.x - 1 >= 0 && node.y + 1 < grid[0].length && grid[node.x-1][node.y+1] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = neigh.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next  = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.x = node.x - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next.y = node.y + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(neigh, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'adding ' + next.x + ', ' + next.y + ' to neigh<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neigh[len] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return neigh;<br>}";
fctns[0].title[5] = "A-Star Algorithm -  neighbors";
fctns[0].src[6] = " contains(set, elmt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < set.length && !(set[zen].x == elmt.x && set[zen].y == elmt.y); zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (zen < set.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return zen;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}";
fctns[0].title[6] = "A-Star Algorithm -  contains";
fctns[0].src[7] = " dist(point1, point2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((point1.x == point2.x) && Math.abs(point1.y - point2.y) == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if ((point1.y == point2.y) && Math.abs(point1.x - point2.x) == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (Math.abs(point1.x - point2.x) == 1 && Math.abs(point1.y - point2.y) == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[0].title[7] = "A-Star Algorithm -  dist";
fctns[0].src[8] = " init(size, grid)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start.x = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start.y = 0;<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.x = size-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end.y = size-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < grid.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid[i] = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < grid[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numCells = (grid.length - 1) * (grid[0].length - 1) / 2;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numCells = Math.floor(Math.random()*numCells) + (grid.length - 1) * (grid[0].length - 1) / 4;<br>   <br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var lineStartX = Math.floor(Math.random()*Math.floor((size-1)/2)) + 1;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineStartX = 5;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var lineStartY = Math.floor(Math.random()*Math.floor((size-1)/2)) + 1;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineStartY = 1;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var lineEndX = Math.floor(Math.random()*Math.floor((size)/2)+Math.floor((size-1)/2));<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineEndX = 5;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var lineEndY = Math.floor(Math.random()*Math.floor((size)/2)+Math.floor((size-1)/2));<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineEndY = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < grid.length - 1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j < grid[0].length - 1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[rem.length] = i + ' ' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numCells; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*rem.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pos = rem[loc].split(' ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid[pos[0]][pos[1]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gridMaze').innerHTML = disp(grid, start, end);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wkthru = astar(grid, start, end);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = wkthru.text[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return grid;<br>}<br>";
fctns[0].title[8] = "A-Star Algorithm -  init";
fctns[0].src[9] = " chClr(cell)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell).class = 'cblk';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = cell.split('_');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc[0] = loc[0].substring(3, loc[0].length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid[loc[0]][loc[1]] = !grid[loc[0]][loc[1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gridMaze').innerHTML = disp(grid, start, end);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;astar(grid, start, end);<br>}<br>";
fctns[0].title[9] = "A-Star Algorithm -  chClr";
fctns[0].src[10] = " disp(grid, start, end)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '<center><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < grid.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < grid[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!grid[i][j] && (i != start.x || j != start.x) && (i != end.x || j != end.y))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td class='cwh' id='tdc' + i + '_' + j + '' onclick='chClr(\'tdc' + i + '_' + j + '\')'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (i == start.x && j == start.y)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td class='cgreen' id='tdc' + i + '_' + j + '' onclick='chClr(\'tdc' + i + '_' + j + '\')'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (i == end.x && j == end.y)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td class='cred' id='tdc' + i + '_' + j + '' onclick='chClr(\'tdc' + i + '_' + j + '\')'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td class='cblk' id='tdc' + i + '_' + j + '' onclick='chClr(\'tdc' + i + '_' + j + '\')'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table></center>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return output;<br>}<br>";
fctns[0].title[10] = "A-Star Algorithm -  disp";
fctns[0].src[11] = " disp_next(loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc + 1 >= wkthru.text.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(wkthru.path, wkthru.cell[loc]) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + wkthru.cell[loc].x + '_' + wkthru.cell[loc].y).style.backgroundColor = '#909090';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + wkthru.cell[loc].x + '_' + wkthru.cell[loc].y).style.backgroundColor = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = wkthru.text[loc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + wkthru.cell[loc].x + '_' + wkthru.cell[loc].y).style.backgroundColor = '#008B8B';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return loc;<br>}<br>";
fctns[0].title[11] = "A-Star Algorithm -  disp_next";
fctns[0].src[12] = " disp_prev(loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc - 1 < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (contains(wkthru.path, wkthru.cell[loc]) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + wkthru.cell[loc].x + '_' + wkthru.cell[loc].y).style.backgroundColor = '#909090';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + wkthru.cell[loc].x + '_' + wkthru.cell[loc].y).style.backgroundColor = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = wkthru.text[loc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + wkthru.cell[loc].x + '_' + wkthru.cell[loc].y).style.backgroundColor = '#008B8B';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return loc;<br>}<br></scr" + "ipt>";
fctns[0].title[12] = "A-Star Algorithm -  disp_prev";
fctns[0].loc = "http://learninglover.com/examples.php?id=77";
fctns[1] = new Object();
fctns[1].src = new Array();
fctns[1].title = new Array();
fctns[1].src[0] = "<script type='text/javascript'>";
fctns[1].title[0] = "Algebraic Group Theory Calculator - styleTags";
fctns[1].src[1] = " getPermStr(init, perm)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var strRep = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = init.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elmt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i] = init[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += '(';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += '0';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmt = init[loc1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = linsear(perm, elmt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = linsear(strRep, loc2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = linsear(rem, elmt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem = remove(rem, loc1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += '(';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = linsear(init, rem[0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += loc1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = linsear(rem, elmt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem = remove(rem, loc1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = strRep.split(')(');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var out = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < temp.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp[i].length > 2 || (temp[i].length == 2 && temp[i].indexOf('(') == -1 && temp[i].indexOf(')') == -1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp[i][0] != '(' && temp[i][temp[i].length - 1] != ')')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += '(' + temp[i] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp[i][0] != '(')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += '(' + temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp[i][temp[i].length - 1] != ')')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += temp[i] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (out == (''))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = '(1)';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return out;<br>}<br>";
fctns[1].title[1] = "Algebraic Group Theory Calculator -  getPermStr";
fctns[1].src[2] = " genSn()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = document.getElementById('snSize').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var locs = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var actions = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= len; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n *= i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('size').value = n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSize();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var testStr = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < len; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testStr += i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;locs[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;locs[i][0] = (i+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < locs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i+1; j < locs.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k1 = 0; k1 < locs[i].length; k1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k2 = 0; k2 < locs[j].length; k2++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k = actions.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actions[k] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actions[k] = '(' + locs[i][k1] + locs[j][k2] + ')'<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actions[k][0] = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actions[k][0][0] = locs[i][k1];<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actions[k][0][1] = locs[j][k2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < actions.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < actions.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = prod(len, actions[i], actions[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (linsear(actions, temp) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;actions[actions.length] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < actions.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elt' + (i+1)).value = actions[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setElts();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < actions.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < actions.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = prod(len, actions[i], actions[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prod' + (i+1) + '_' + (j+1)).value = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[1].title[2] = "Algebraic Group Theory Calculator -  genSn";
fctns[1].src[3] = " getNextPerm(firstTime) <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!firstTime)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var done = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var index = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (!done && (index < (ARRAY_COUNT - 1)))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveArray[index]++;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (moveArray[index] >= (ARRAY_COUNT - index))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveArray[index] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!done)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstTime = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ARRAY_COUNT - 1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var index1 = (ARRAY_COUNT - i - 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var index2 = moveArray[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = tempString[index1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index1 < index2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = index1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = index2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = index2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = index1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index1 != index2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempString = tempString.substring(0, loc1) + tempString[loc2] + tempString.substring(loc1+1, loc2) + tempString[loc1] + tempString.substring(loc2+1, tempString.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;<br>}<br>";
fctns[1].title[3] = "Algebraic Group Theory Calculator -  getNextPerm";
fctns[1].src[4] = " genZn(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('size').value = n;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSize();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elt' + (i+1)).value = i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setElts();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prod' + (i+1) + '_' + (j+1)).value = (i + j) % n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[1].title[4] = "Algebraic Group Theory Calculator -  genZn";
fctns[1].src[5] = " getOrder()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<b>Order Test</b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('size').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elts = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var order = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var generators = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cyclic = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elts[i] = document.getElementById('elt' + (i+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var iden = testIdentity();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mapsTo = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < size && mapsTo[j-1] != elts[iden-1]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapsTo[j] = document.getElementById('prod' + (i+1) + '_' + (iden)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = linsear(elts, mapsTo[j-1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapsTo[j] = document.getElementById('prod' + (i+1) + '_' + (loc+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order[i] = mapsTo.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The order of the elements are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (order[i] == size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclic = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += elts[i] + '&nbsp;&nbsp;&nbsp;&nbsp;' + order[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cyclic)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'This group is cyclic<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>}<br>";
fctns[1].title[5] = "Algebraic Group Theory Calculator -  getOrder";
fctns[1].src[6] = " genZnZm(n, m)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('size').value = parseInt(n)*parseInt(m);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('size').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSize();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < m; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elt' + (count+1)).value = i + '' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setElts();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elts[i] = document.getElementById('elt' + (i+1)).value;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prod' + (i+1) + '_' + (j+1)).value += ((parseInt(elts[i][0]) + parseInt(elts[j][0])) % n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prod' + (i+1) + '_' + (j+1)).value += ((parseInt(elts[i][1]) + parseInt(elts[j][1])) % m);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[1].title[6] = "Algebraic Group Theory Calculator -  genZnZm";
fctns[1].src[7] = " linsear(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[1].title[7] = "Algebraic Group Theory Calculator -  linsear";
fctns[1].src[8] = " prod(size, str1, str2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (str1.indexOf(i) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str1 += '(' + i + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (str2.indexOf(i) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str2 += '(' + i + ')';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('test').innerHTML += 'str1 = ' + str1 + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('test').innerHTML += 'str2 = ' + str2 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = str1 + str2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var strRep = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elmt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem = sort(rem);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < rem.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem[i] == '(' || rem[i] == ')' || (i + 1 < rem.length && rem[i] == rem[i+1]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem = remove(rem, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'rem = ' + rem + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += '(';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmt = rem[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += elmt;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = linsear(str2, elmt);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'loc1 = ' + loc1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmt = str2[loc1 + 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elmt == ')')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = loc1; str2[j] != '('; j--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmt = str2[j+1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'elmt = ' + elmt + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = linsear(str1, elmt);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'loc2 = ' + loc2 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmt = str1[loc2 + 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elmt == ')')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = loc2; str1[j] != '('; j--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmt = str1[j+1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'elmt = ' + elmt + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = linsear(strRep, elmt);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'found = ' + found + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += ')';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'strRep = ' + strRep + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = linsear(rem, elmt);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'loc1 = ' + loc1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem = remove(rem, loc1);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'rem = ' + rem + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += '(';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'strRep = ' + strRep + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmt = rem[0];<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'elmt = ' + elmt + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = linsear(str2, elmt);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'loc1 = ' + loc1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += elmt;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'strRep = ' + strRep + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strRep += elmt;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'strRep = ' + strRep + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = strRep.split(')(');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var out = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < temp.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp[i].length > 2 || (temp[i].length == 2 && temp[i].indexOf('(') == -1 && temp[i].indexOf(')') == -1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp[i][0] != '(' && temp[i][temp[i].length - 1] != ')')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += '(' + temp[i] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp[i][0] != '(')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += '(' + temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp[i][temp[i].length - 1] != ')')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += temp[i] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (out == (''))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = '(1)';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return out;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[1].title[8] = "Algebraic Group Theory Calculator -  prod";
fctns[1].src[9] = " remove (set, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, len = set.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = loc; i < len; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i] = set[i+1];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set.length--;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set;<br>}<br>";
fctns[1].title[9] = "Algebraic Group Theory Calculator -  remove ";
fctns[1].src[10] = " reset()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('namesLbl').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elts').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elts').innerHTML = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('cayleyLbl').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('cayley').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('cayley').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('outputLbl').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>}<br>";
fctns[1].title[10] = "Algebraic Group Theory Calculator -  reset";
fctns[1].src[11] = " setElts()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('size').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var names = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('cayleyLbl').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('cayley').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('cayley').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + document.getElementById('elt' + i).value + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + document.getElementById('elt' + j).value + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td><input name='prod' + i + '_' + j + '' id='prod' + i + '_' + j + '' size=3></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<input type=checkbox name=show id=show>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<label>Show Work?</label>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<input type=button onClick=testGroup() value='Test Group'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('cayley').innerHTML += text;<br>}<br>";
fctns[1].title[11] = "Algebraic Group Theory Calculator -  setElts";
fctns[1].src[12] = " setSize()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('size').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('namesLbl').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elts').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elts').innerHTML += '<label name='elt' + i + 'Lbl' id='elt' + i + 'Lbl'>Element ' + i + '</label>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elts').innerHTML += '<input name='elt' + i + '' id='elt' + i + '' size=3><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('elts').innerHTML += '<input type=button onclick='setElts()' value='Set'>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[1].title[12] = "Algebraic Group Theory Calculator -  setSize";
fctns[1].src[13] = " sort(A) <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var left = new Array();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, min;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < left.length-1; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i+1; j < left.length; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left[j] < left[min])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = j;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = left[i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = left[min];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[min] = temp;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (swap)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left; <br>}<br>";
fctns[1].title[13] = "Algebraic Group Theory Calculator -  sort";
fctns[1].src[14] = " testAssoc()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<b>Associativity Test</b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('size').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elts = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elts[i] = document.getElementById('elt' + (i+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size && ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < size && ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < size && ans; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elmt1 = document.getElementById('prod' + (i+1) + '_' + (j+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = linsear(elts, elmt1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elmt2 = document.getElementById('prod' + (loc1+1) + '_' +(k+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = linsear(elts, elmt2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elmt3 = document.getElementById('prod' + (j+1) + '_' +(k+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc3 = linsear(elts, elmt3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elmt4 = document.getElementById('prod' + (i+1) + '_' +(loc3+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc4 = linsear(elts, elmt4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '((' + elts[i] + ' * ' + elts[j] + ') * ' + elts[k] + ') = ' + elts[loc1] + ' * ' + elts[k] + ' = ' + elts[loc2] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '(' + elts[i] + ' * (' + elts[j] + ' * ' + elts[k] + ')) = ' + elts[i] + ' * ' + elts[loc3] + ' = ' + elts[loc4] + '<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elmt2 != elmt4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = !ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[1].title[14] = "Algebraic Group Theory Calculator -  testAssoc";
fctns[1].src[15] = " testClosed()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<b>Closure Test</b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('size').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elts = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elts[i] = document.getElementById('elt' + (i+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size && ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < size && ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt = document.getElementById('prod' + (i+1) + '_' + (j+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = linsear(elts, elt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = !ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[1].title[15] = "Algebraic Group Theory Calculator -  testClosed";
fctns[1].src[16] = " testGroup()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var closed = testClosed();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var assoc = testAssoc();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ident = testIdentity();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inv = testInverse();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('outputLbl').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (closed && assoc && ident != -1 && inv)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'This is a group<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'Do you want to know the order of the elements?';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<input type=button onClick=getOrder() value='Get Order'><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!closed)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The operator is not closed on this set<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!assoc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The operator is not associative on this set<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ident)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'There is no identity element<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!inv)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'There exists at least one element with no inverse<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[1].title[16] = "Algebraic Group Theory Calculator -  testGroup";
fctns[1].src[17] = " testIdentity()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<b>Identity Test</b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('size').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elts = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elts[i] = document.getElementById('elt' + (i+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt1 = document.getElementById('elt' + (i+1)).value;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = linsear(elts, elt1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < size && !ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt2 = document.getElementById('prod' + (i+1) + '_' + (j+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = linsear(elts, elt2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += elts[i] + ' * ' + elts[j] + ' = ' + elts[loc] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elts[j] == elt2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans2++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans2 == size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = !ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[1].title[17] = "Algebraic Group Theory Calculator -  testIdentity";
fctns[1].src[18] = " testInverse()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<b>Inverse Test</b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('size').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elts = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elts[i] = document.getElementById('elt' + (i+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var iden = testIdentity();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (iden != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = !ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The identity of this group is ' + elts[iden] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans2 = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < size && !ans2; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt =  document.getElementById('prod' + (i+1) + '_' + (j+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = linsear(elts, elt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += elts[i] + ' * ' + elts[j] + ' = ' + elts[loc] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elts[loc] == elts[iden])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans2 = !ans2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (count == size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br></scr" + "ipt><br></head>";
fctns[1].title[18] = "Algebraic Group Theory Calculator -  testInverse";
fctns[1].loc = "http://learninglover.com/examples.php?id=30";
fctns[2] = new Object();
fctns[2].src = new Array();
fctns[2].title = new Array();
fctns[2].src[0] = "<script type='text/javascript'>";
fctns[2].title[0] = "Apriori Algorithm - styleTags";
fctns[2].src[1] = " apriori(numItems, numTrans, minSup, poss, itemSep, oneVal)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setSize = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'Apriori algorithm has started.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSize++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = getPoss(setSize, numItems, poss, tree);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = ans[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree = ans[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = getFreq(setSize, numItems, numTrans, poss, tree);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = ans[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree = ans[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poss.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'Frequent ' + setSize + '-itemsets <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poss.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '(' + poss[i] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(poss.length > 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].yval < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('There were too many Frequent ItemSets to display\\nRestart a higher minimum support');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minSup = 2*minSup;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('minSprt').value = minSup;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apriori(numItems, numTrans, minSup, poss, itemSep, oneVal)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < setSize; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLines(tree[i], j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < setSize; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawNodes(tree[i], j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[2].title[1] = "Apriori Algorithm -  apriori";
fctns[2].src[2] = " clearRect()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#F1F1F1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>}<br>";
fctns[2].title[2] = "Apriori Algorithm -  clearRect";
fctns[2].src[3] = " getPoss(n, numItems, poss, tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempPoss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var str1, str2; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var st1, st2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var i = 0; i < numItems; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPoss[i] = i+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i] = initTree(tempPoss[i], 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree = setXvals(tree);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (n == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var i = 0; i < poss.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str1 = poss[i]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var j = i + 1; j < poss.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str2 = poss[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPoss[tempPoss.length] = str1 + ' ' + str2;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += poss[i] + ' and ' + poss[j] + ' combine to make ' + tempPoss[tempPoss.length-1] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = joinBinTree(tree[i], tree[j], tempPoss[tempPoss.length-1], n-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tooclose(tree, tree.length-1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length-1].yval = tree[tree.length-1].yval - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var i = 0; i < poss.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var j = i + 1; j < poss.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str1 = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str2 = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st1 = poss[i].split(' ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st2 = poss[j].split(' ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var s = 0; s < n - 2; s++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str1 = str1 + ' ' + st1[s];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str2 = str2 + ' ' + st2[s];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (str2 == str1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPoss[tempPoss.length] = str1 + ' ' + st1[s] + ' ' + st2[s];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tempPoss.length > 0 && tempPoss[tempPoss.length-1].charAt(0) == ' ')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPoss[tempPoss.length-1] = tempPoss[tempPoss.length-1].substring(1, tempPoss[tempPoss.length-1].length);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (str1 == str2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += poss[i] + ' and ' + poss[j] + ' combine to make ' + tempPoss[tempPoss.length-1] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = joinBinTree(tree[linsear(tree, poss[i])], tree[linsear(tree, poss[j])], tempPoss[tempPoss.length-1], n-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tooclose(tree, tree.length-1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length-1].yval = tree[tree.length-1].yval - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = tempPoss;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = poss;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = tree;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[2].title[3] = "Apriori Algorithm -  getPoss";
fctns[2].src[4] = " linsear(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i].value == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[2].title[4] = "Apriori Algorithm -  linsear";
fctns[2].src[5] = " remove (set, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, len = set.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = loc; i < len; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i] = set[i+1];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set.length--;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set;<br>}<br>";
fctns[2].title[5] = "Apriori Algorithm -  remove ";
fctns[2].src[6] = " getFreq(n, numItems, numTrans, poss, tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var possFreq = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var input;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var match, ans = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var trans = new Array(numItems); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = new Array(poss.length); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var toOutput = '', bld1 = '', bld2 = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < count.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[i] = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = document.getElementById('transa').innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numTrans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input = temp.split(' ');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var j = 0; j < numItems; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (input[i*numItems + j] == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[j] = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[j] = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var c = 0; c < poss.length; c++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = false; <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poss[c].length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st = poss[c].split(' ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;st[0] = poss[c];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var d = 0; d < st.length; d++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;match = (trans[parseInt(st[d])-1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!match)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (match) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[c]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toOutput += '-----<table>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var i = 0; i < poss.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if( (count[i] / numTrans) >= minSup)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possFreq[possFreq.length] = poss[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[linsear(tree, poss[i])].prob = count[i] / numTrans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bld1 = '<b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bld2 = '</b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'removing element ' + tree[linsear(tree, poss[i])].value + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(tree, linsear(tree, poss[i]));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bld1 = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bld2 = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toOutput += '<tr><td>' + bld1 + poss[i] + bld2 + '</td><td>|</td><td>' + bld1 + Math.floor(((count[i] / numTrans)*100))/100 + bld2 + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toOutput += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += toOutput;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = possFreq;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = poss;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = tree;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[2].title[6] = "Apriori Algorithm -  getFreq";
fctns[2].src[7] = " genData(clms, rows)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('transa').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < rows; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < clms; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('transa').innerHTML += Math.floor(Math.random()*2) + ' ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('transa').innerHTML += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[2].title[7] = "Apriori Algorithm -  genData";
fctns[2].src[8] = " initTree(val, prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.value = val;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.left = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.right = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.xval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.yval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.prob = prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.order = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.parent = null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[2].title[8] = "Apriori Algorithm -  initTree";
fctns[2].src[9] = " joinBinTree(tree1, tree2, val, order)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree3 = new Object();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.value = val;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.left = tree1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.left.parent = tree3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.right = tree2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.right.parent = tree3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.code = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.xval = (tree1.xval + tree2.xval) / 2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree1.yval <= tree2.yval)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.yval = tree1.yval - 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.yval = tree2.yval - 50;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.prob = tree1.prob + tree2.prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.order = order;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.drawn = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.parent = null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree3;<br>}<br>";
fctns[2].title[9] = "Apriori Algorithm -  joinBinTree";
fctns[2].src[10] = " display(tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += tree.value + ' | ' + tree.xval + ' | ' + tree.yval + ' | ' + tree.order + ' | ' + tree.drawn + ' | ' + tree.value.length + '; ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[2].title[10] = "Apriori Algorithm -  display";
fctns[2].src[11] = " tooclose(tree, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false, dist = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < tree.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != loc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist = Math.sqrt(Math.pow(tree[loc].xval - tree[i].xval, 2) + Math.pow(tree[loc].yval - tree[i].yval, 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist < 40)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[2].title[11] = "Apriori Algorithm -  tooclose";
fctns[2].src[12] = " drawLines(tree, order)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (order == '-..')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.order == order)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left != null && tree.right != null && tree.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(tree.xval - 3*tree.value.length + tree.value.length/2, tree.yval + 4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left.order == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(tree.left.xval+3*(Math.floor(Math.log(1)/Math.log(10))+2), tree.left.yval-4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(tree.left.xval + 3*tree.left.value.length - tree.left.value.length/2, tree.left.yval - 4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(tree.xval + 3*tree.value.length - tree.value.length/2, tree.yval + 4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.right.order == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(tree.right.xval-3*(Math.floor(Math.log(1)/Math.log(10))+2), tree.right.yval-4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(tree.right.xval - 3*tree.right.value.length + tree.right.value.length/2, tree.right.yval - 4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[2].title[12] = "Apriori Algorithm -  drawLines";
fctns[2].src[13] = " drawNodes(tree, order)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (order == '-..')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (order == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left == null && tree.right == null && tree.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree.xval, tree.yval, 7, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree.xval, tree.yval, 7, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.value != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(tree.value)/Math.log(10))+1), tree.yval+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), tree.yval+4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree.prob.toFixed(2), tree.xval-10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.order == order)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left != null && tree.right != null && tree.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree.xval, tree.yval, 3*tree.value.length, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree.xval, tree.yval, 3*tree.value.length, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree.value, tree.xval-3*(tree.value.length)+tree.value.length/2, tree.yval+4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree.prob.toFixed(2), tree.xval-10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[2].title[13] = "Apriori Algorithm -  drawNodes";
fctns[2].src[14] = " setXvals(tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var orig = 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxim = c.width - 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var incr = (maxim - orig) / (tree.length-1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].xval = orig + i*incr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].yval = c.height - 150;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br></scr" + "ipt>";
fctns[2].title[14] = "Apriori Algorithm -  setXvals";
fctns[2].loc = "http://learninglover.com/examples.php?id=28";
fctns[3] = new Object();
fctns[3].src = new Array();
fctns[3].title = new Array();
fctns[3].src[0] = "<script type='text/javascript'>";
fctns[3].title[0] = "Arithmetic Sequences - styleTags";
fctns[3].src[1] = " generate(first, diff, terms)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = first;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i < terms; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i] = ans[0] + i*diff;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[3].title[1] = "Arithmetic Sequences -  generate";
fctns[3].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var first = Math.floor(Math.random()*50);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fsign = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!fsign)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first *= -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var diff = Math.floor(Math.random()*10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dsign = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!dsign)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diff *= -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var seq = generate(first, diff, 6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += disp(seq) + '<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pos = Math.floor(Math.random()*20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ques = Math.floor(Math.random()*3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (ques)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'What is term a<sub>' + pos + '</sub> of this sequence ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'What is sum S<sub>' + pos + '</sub> of this sequence ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'What is the common difference? ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = seq;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ques;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = pos;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[3].title[2] = "Arithmetic Sequences -  init";
fctns[3].src[3] = " disp(seq)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < seq.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += seq[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < seq.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return output;<br>}<br>";
fctns[3].title[3] = "Arithmetic Sequences -  disp";
fctns[3].src[4] = " solve(ques, seq, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (ques)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'The formula for term a<sub>n</sub> of a sequence is a<sub>n</sub> = a<sub>1</sub> + d*(n - 1)<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>1</sub> = ' + seq[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'n = ' + n + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'd = ' + seq[1] + ' - ' + seq[0] + ' = ' + (seq[1] - seq[0]) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'This evaluates to: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += term(seq, n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'The formula for sum S<sub>n</sub> of a sequence is S<sub>n</sub> = n(a<sub>1</sub> + a<sub>n</sub>)/2 = n[2*a<sub>1</sub> + d*(n - 1)]/2<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>1</sub> = ' + seq[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'n = ' + n + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'd = ' + seq[1] + ' - ' + seq[0] + ' = ' + (seq[1] - seq[0]) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'This evaluates to: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += sum(seq, n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'To calculate the common difference in an arithmetic sequence, we need to subtract any two terms. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'By subtracting the first two terms we get: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>1</sub> = ' + seq[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>2</sub> = ' + seq[1] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'd = ' + seq[1] + ' - ' + seq[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += getDiff(seq);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = ans;<br>}<br>";
fctns[3].title[4] = "Arithmetic Sequences -  solve";
fctns[3].src[5] = " term(seq, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var diff = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var first = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first = seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diff = seq[1] - seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = first + (n - 1)*diff;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[3].title[5] = "Arithmetic Sequences -  term";
fctns[3].src[6] = " sum(seq, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var diff = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var first = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first = seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diff = seq[1] - seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = (1/2)*n*(2*first + (n-1)*diff);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[3].title[6] = "Arithmetic Sequences -  sum";
fctns[3].src[7] = " getDiff(seq)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var diff = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diff = seq[1] - seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return diff;<br>}<br>";
fctns[3].title[7] = "Arithmetic Sequences -  getDiff";
fctns[3].src[8] = " clearAll()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>}<br></scr" + "ipt>";
fctns[3].title[8] = "Arithmetic Sequences -  clearAll";
fctns[3].loc = "http://learninglover.com/examples.php?id=33";
fctns[4] = new Object();
fctns[4].src = new Array();
fctns[4].title = new Array();
fctns[4].src[0] = "<script type='text/javascript'>";
fctns[4].title[0] = "Assembly Line Scheduling Problem - styleTags";
fctns[4].src[1] = " getData()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numStages = Math.floor(Math.random()*5)+3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.entry = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.exit = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('stage1');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[i] = new Array(numStages);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[i] = new Array(numStages-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i] = new Array(numStages);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[i] = new Array(numStages);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numStages; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[i][j] = Math.floor(Math.random()*5) + 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < numStages-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[i][j] = Math.floor(Math.random()*3) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i][j] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i][j].yLoc = j*75 + 70;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i][j].xLoc = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i][j].xLoc = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.entry[i] = Math.floor(Math.random()*3) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.exit[i] = Math.floor(Math.random()*3) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td></td><td>Assembly line 1</td><td>Assembly line 2</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Entry Cost</td><td>' + prob.entry[0] + '</td><td>' + prob.entry[1] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numStages; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Assembly Cost</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + prob.assemb[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numStages-1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Transfer Cost</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + prob.transf[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Exit Cost</td><td>' + prob.exit[0] + '</td><td>' + prob.exit[1] + '</td></tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[4].title[1] = "Assembly Line Scheduling Problem -  getData";
fctns[4].src[2] = " sample()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numStages = 6;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.entry = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.exit = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('stage1');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[i] = new Array(numStages);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[i] = new Array(numStages-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i] = new Array(numStages);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[i] = new Array(numStages);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numStages; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i][j] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i][j].yLoc = j*75 + 70;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i][j].xLoc = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.stages[i][j].xLoc = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.entry[0] = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.entry[1] = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[0][0] = 7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[0][1] = 9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[0][2] = 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[0][3] = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[0][4] = 8;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[0][5] = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[1][0] = 8;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[1][1] = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[1][2] = 6;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[1][3] = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[1][4] = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.assemb[1][5] = 7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[0][0] = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[0][1] = 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[0][2] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[0][3] = 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[0][4] = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[1][0] = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[1][1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[1][2] = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[1][3] = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.transf[1][4] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.exit[0] = 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.exit[1] = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td></td><td>Assembly line 1</td><td>Assembly line 2</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Entry Cost</td><td>' + prob.entry[0] + '</td><td>' + prob.entry[1] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numStages; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Assembly Cost</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + prob.assemb[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numStages-1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Transfer Cost</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + prob.transf[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Exit Cost</td><td>' + prob.exit[0] + '</td><td>' + prob.exit[1] + '</td></tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('B9').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('B10').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('B11').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('B12').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[4].title[2] = "Assembly Line Scheduling Problem -  sample";
fctns[4].src[3] = " fastestWay(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numStages = prob.stages[0].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[i] = new Array(numStages+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[0][0] = prob.entry[0] + prob.assemb[0][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[1][0] = prob.entry[1] + prob.assemb[1][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j < numStages; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob.cost[0][j-1] + prob.assemb[0][j] <= prob.cost[1][j-1] + prob.transf[1][j-1] + prob.assemb[0][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[0][j] = prob.cost[0][j-1] + prob.assemb[0][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[0][j-1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[0][j] = prob.cost[1][j-1] + prob.transf[1][j-1] + prob.assemb[0][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[0][j-1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob.cost[1][j-1] + prob.assemb[1][j] <= prob.cost[0][j-1] + prob.transf[0][j-1] + prob.assemb[1][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[1][j] = prob.cost[1][j-1] + prob.assemb[1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[1][j-1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[1][j] = prob.cost[0][j-1] + prob.transf[0][j-1] + prob.assemb[1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[1][j-1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob.cost[0][numStages-1] + prob.exit[0] <= prob.cost[1][numStages-1] + prob.exit[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[0][numStages] = prob.cost[0][numStages-1] + prob.exit[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[1][numStages] = prob.cost[1][numStages-1] + prob.exit[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[0][numStages-1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[1][numStages-1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[0][numStages] = prob.cost[0][numStages-1] + prob.exit[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.cost[1][numStages] = prob.cost[1][numStages-1] + prob.exit[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[0][numStages-1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.route[1][numStages-1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numStages; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>Station ' + (i+1) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>TotalCost</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>cost<sub>1</sub>(j)</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= numStages; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + prob.cost[0][i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr><td>cost<sub>2</sub>(j)</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= numStages; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + prob.cost[1][i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numStages; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>Station ' + (i+1) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>Finish</td></tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>line<sub>1</sub>(j)</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= numStages-1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + (prob.route[0][i]+1) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr><td>line<sub>2</sub>(j)</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= numStages-1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + (prob.route[1][i]+1) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[4].title[3] = "Assembly Line Scheduling Problem -  fastestWay";
fctns[4].src[4] = " resetBoard()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML='';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('arrs').innerHTML='';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('lens').innerHTML='';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('rbss').innerHTML='';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resetCanvas(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawStage1(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawStage2(prob);<br>}<br>";
fctns[4].title[4] = "Assembly Line Scheduling Problem -  resetBoard";
fctns[4].src[5] = " drawStage1(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('stage1');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('Assembly Line 1', (0 + c.width) / 5 - 30, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('Assembly Line 2', 4*(0 + c.width) / 5-30, 20);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(c.width/2, prob.stages[0][0].yLoc/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[1][0].xLoc - 10, prob.stages[1][0].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(c.width/2, prob.stages[0][0].yLoc/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[0][0].xLoc + 10, prob.stages[0][0].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.entry[0], 2*(0 + c.width) / 5, (prob.stages[0][0].yLoc/2 + prob.stages[0][0].yLoc) / 2 - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.entry[1], 3*(0 + c.width) / 5, (prob.stages[0][0].yLoc/2 + prob.stages[0][0].yLoc) / 2 - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob.stages[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(prob.stages[0][j].xLoc,prob.stages[0][j].yLoc,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(prob.stages[0][j].xLoc,prob.stages[0][j].yLoc,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(prob.stages[1][j].xLoc,prob.stages[1][j].yLoc,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(prob.stages[1][j].xLoc,prob.stages[1][j].yLoc,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.assemb[0][j], prob.stages[0][j].xLoc-3*(Math.floor(Math.log(prob.assemb[0][j])/Math.log(10))+1), prob.stages[0][j].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.assemb[1][j], prob.stages[1][j].xLoc-3*(Math.floor(Math.log(prob.assemb[1][j])/Math.log(10))+1), prob.stages[0][j].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('station S', prob.stages[0][j].xLoc-3*(Math.floor(13/Math.log(10))+1)-60, prob.stages[0][j].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('station S', prob.stages[1][j].xLoc-3*(Math.floor(13/Math.log(10))+1)+35, prob.stages[1][j].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '6pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('1, ' + (j+1), prob.stages[0][j].xLoc-3*(Math.floor(13/Math.log(10))+1)-18, prob.stages[0][j].yLoc+4+3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('2, ' + (j+1), prob.stages[1][j].xLoc-3*(Math.floor(13/Math.log(10))+1)+77, prob.stages[1][j].yLoc+4+3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[1][prob.stages[0].length-1].xLoc - 10, prob.stages[1][prob.stages[0].length-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width/2, prob.stages[0][prob.stages[0].length-1].yLoc + 35);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[0][prob.stages[0].length-1].xLoc + 10, prob.stages[0][prob.stages[0].length-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width/2, prob.stages[1][prob.stages[0].length-1].yLoc + 35);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.exit[0], 2*(0 + c.width) / 5, (prob.stages[0][prob.stages[0].length-1].yLoc + prob.stages[1][prob.stages[0].length-1].yLoc + 35) / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.exit[1], 3*(0 + c.width) / 5, (prob.stages[0][prob.stages[0].length-1].yLoc + prob.stages[1][prob.stages[0].length-1].yLoc + 35) / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob.stages[0].length-1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[0][j].xLoc + 10, prob.stages[0][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[1][j+1].xLoc - 10, prob.stages[1][j+1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[1][j].xLoc - 10, prob.stages[1][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[0][j+1].xLoc + 10, prob.stages[0][j+1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[0][j].xLoc + 10, prob.stages[0][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[0][j+1].xLoc + 10, prob.stages[0][j+1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[1][j].xLoc - 10, prob.stages[1][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[1][j+1].xLoc - 10, prob.stages[1][j+1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.transf[0][j], 2*(0 + c.width) / 5, (prob.stages[0][j].yLoc + prob.stages[0][j+1].yLoc) / 2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.transf[1][j], 3*(0 + c.width) / 5, (prob.stages[1][j].yLoc + prob.stages[1][j+1].yLoc) / 2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('stage1').focus();<br>}<br>";
fctns[4].title[5] = "Assembly Line Scheduling Problem -  drawStage1";
fctns[4].src[6] = " drawStage1Sol(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('stage1');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('Assembly Line 1', (0 + c.width) / 5 - 30, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('Assembly Line 2', 4*(0 + c.width) / 5-30, 20);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(c.width/2, prob.stages[0][0].yLoc/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[1][0].xLoc - 10, prob.stages[1][0].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(c.width/2, prob.stages[0][0].yLoc/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[0][0].xLoc + 10, prob.stages[0][0].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.entry[0], 2*(0 + c.width) / 5, (prob.stages[0][0].yLoc/2 + prob.stages[0][0].yLoc) / 2 - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.entry[1], 3*(0 + c.width) / 5, (prob.stages[0][0].yLoc/2 + prob.stages[0][0].yLoc) / 2 - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob.stages[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(prob.stages[0][j].xLoc,prob.stages[0][j].yLoc,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(prob.stages[0][j].xLoc,prob.stages[0][j].yLoc,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(prob.stages[1][j].xLoc,prob.stages[1][j].yLoc,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(prob.stages[1][j].xLoc,prob.stages[1][j].yLoc,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.assemb[0][j], prob.stages[0][j].xLoc-3*(Math.floor(Math.log(prob.assemb[0][j])/Math.log(10))+1), prob.stages[0][j].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.assemb[1][j], prob.stages[1][j].xLoc-3*(Math.floor(Math.log(prob.assemb[1][j])/Math.log(10))+1), prob.stages[0][j].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('station S', prob.stages[0][j].xLoc-3*(Math.floor(13/Math.log(10))+1)-60, prob.stages[0][j].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('station S', prob.stages[1][j].xLoc-3*(Math.floor(13/Math.log(10))+1)+35, prob.stages[1][j].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '6pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('1, ' + (j+1), prob.stages[0][j].xLoc-3*(Math.floor(13/Math.log(10))+1)-18, prob.stages[0][j].yLoc+4+3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('2, ' + (j+1), prob.stages[1][j].xLoc-3*(Math.floor(13/Math.log(10))+1)+77, prob.stages[1][j].yLoc+4+3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[1][prob.stages[0].length-1].xLoc - 10, prob.stages[1][prob.stages[0].length-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width/2, prob.stages[0][prob.stages[0].length-1].yLoc + 35);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[0][prob.stages[0].length-1].xLoc + 10, prob.stages[0][prob.stages[0].length-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width/2, prob.stages[1][prob.stages[0].length-1].yLoc + 35);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.exit[0], 2*(0 + c.width) / 5, (prob.stages[0][prob.stages[0].length-1].yLoc + prob.stages[1][prob.stages[0].length-1].yLoc + 35) / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.exit[1], 3*(0 + c.width) / 5, (prob.stages[0][prob.stages[0].length-1].yLoc + prob.stages[1][prob.stages[0].length-1].yLoc + 35) / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob.stages[0].length-1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[0][j].xLoc + 10, prob.stages[0][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[1][j+1].xLoc - 10, prob.stages[1][j+1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[1][j].xLoc - 10, prob.stages[1][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[0][j+1].xLoc + 10, prob.stages[0][j+1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[0][j].xLoc + 10, prob.stages[0][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[0][j+1].xLoc + 10, prob.stages[0][j+1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[1][j].xLoc - 10, prob.stages[1][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[1][j+1].xLoc - 10, prob.stages[1][j+1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '8pt Calibri';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.transf[0][j], 2*(0 + c.width) / 5, (prob.stages[0][j].yLoc + prob.stages[0][j+1].yLoc) / 2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob.transf[1][j], 3*(0 + c.width) / 5, (prob.stages[1][j].yLoc + prob.stages[1][j+1].yLoc) / 2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var route = prob.route[0][prob.route[0].length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (route)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[route][prob.stages[0].length-1].xLoc - 10, prob.stages[route][prob.stages[0].length-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width/2, prob.stages[0][prob.stages[0].length-1].yLoc + 35);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[route][prob.stages[0].length-1].xLoc + 10, prob.stages[route][prob.stages[0].length-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width/2, prob.stages[0][prob.stages[0].length-1].yLoc + 35);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = prob.route[0].length-1; j >= 1; j--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'l[' + (route+1) + '][' + (j+2) + '] = ' + (prob.route[route][j]+1) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;route = prob.route[route][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob.route[route][j-1] == 0 && prob.route[route][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[prob.route[route][j-1]][j-1].xLoc + 10, prob.stages[prob.route[route][j-1]][j-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[prob.route[route][j]][j].xLoc - 10, prob.stages[prob.route[route][j]][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (prob.route[route][j-1] == 1 && prob.route[route][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[prob.route[route][j-1]][j-1].xLoc - 10, prob.stages[prob.route[route][j-1]][j-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[prob.route[route][j]][j].xLoc + 10, prob.stages[prob.route[route][j]][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (prob.route[route][j-1] == 1 && prob.route[route][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[prob.route[route][j-1]][j-1].xLoc - 10, prob.stages[prob.route[route][j-1]][j-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[prob.route[route][j]][j].xLoc - 10, prob.stages[prob.route[route][j]][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (prob.route[route][j-1] == 0 && prob.route[route][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(prob.stages[prob.route[route][j-1]][j-1].xLoc + 10, prob.stages[prob.route[route][j-1]][j-1].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[prob.route[route][j]][j].xLoc + 10, prob.stages[prob.route[route][j]][j].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob.route[route][0] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(c.width/2, prob.stages[0][0].yLoc/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[prob.route[route][0]][0].xLoc + 10, prob.stages[prob.route[route][0]][0].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(c.width/2, prob.stages[0][0].yLoc/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(prob.stages[prob.route[route][0]][0].xLoc - 10, prob.stages[prob.route[route][0]][0].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('stage1').focus();<br>}<br><br>";
fctns[4].title[6] = "Assembly Line Scheduling Problem -  drawStage1Sol";
fctns[4].src[7] = " resetCanvas(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('stage1');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#F8F8F8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>}<br></scr" + "ipt>";
fctns[4].title[7] = "Assembly Line Scheduling Problem -  resetCanvas";
fctns[4].loc = "http://learninglover.com/examples.php?id=59";
fctns[5] = new Object();
fctns[5].src = new Array();
fctns[5].title = new Array();
fctns[5].src[0] = "<script type='text/javascript'>";
fctns[5].title[0] = "Bayes' Theorem - styleTags";
fctns[5].src[1] = " bayes(set1, set2, caus)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var top = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bottom = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common, temp, line1 = '', line2 = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top.num = set1[caus].num * set2[caus].num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top.den = set1[caus].den * set2[caus].den;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(top.den, top.num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top.num = top.num / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top.den = top.den / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Pr(B<sub>' + caus + '</sub>)*Pr(A | B<sub>' + caus + '</sub>) = (' + set1[caus].num + '/' + set1[caus].den + ')*(' + set2[caus].num + '/' + set2[caus].den + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' = ' + top.num + '/' + top.den + '<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<img src='http://www.learninglover.com/chars/csigma.gif'> Pr(B<sub>i</sub>) Pr(A | B<sub>i</sub>) = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bottom.num = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bottom.den = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line2 = ' = ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < set2.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.num = set1[j].num * set2[j].num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.den = set1[j].den * set2[j].den;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(temp.den, temp.num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.num = temp.num / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.den = temp.den / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show && temp.num != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line1 += 'Pr(B<sub>' + j + '</sub>)*Pr(A | B<sub>' + j + '</sub>)';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line2 += '(' + set1[j].num + '*' + set2[j].num + ')/(' + set1[j].den + '*' + set2[j].den + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < set2.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line1 += ' + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line2 += ' + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bottom = fractAdd(bottom, temp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(bottom.den, bottom.num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bottom.num = bottom.num / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bottom.den = bottom.den / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.substring(text.length-3, text.length) == ' + ')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.substring(0, text.length-3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += line1 + '<br>' + line2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' = ' + bottom.num + '/' + bottom.den + '<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.num = top.num*bottom.den;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.den = top.den*bottom.num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(ans.den, ans.num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.num = ans.num / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.den = ans.den / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[5].title[1] = "Bayes' Theorem -  bayes";
fctns[5].src[2] = " gcd(u, v)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return u;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return gcd(v, u % v);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[5].title[2] = "Bayes' Theorem -  gcd";
fctns[5].src[3] = " fractAdd(fract1, fract2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fract1.den != fract2.den)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fract1.den > fract2.den)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(fract1.den, fract2.den);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(fract2.den, fract1.den);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mult1 = fract1.den/common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mult2 = fract2.den/common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fract1.den = fract1.den*mult2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fract1.num = fract1.num*mult2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fract2.den = fract2.den*mult1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fract2.num = fract2.num*mult1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.den = fract2.den;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.num = fract1.num + fract2.num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.den = fract1.den;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.num = fract1.num + fract2.num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(ans.den, ans.num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.num = ans.num / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.den = ans.den / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[5].title[3] = "Bayes' Theorem -  fractAdd";
fctns[5].src[4] = " clearRect()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>}<br>";
fctns[5].title[4] = "Bayes' Theorem -  clearRect";
fctns[5].src[5] = " display(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '{';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[5].title[5] = "Bayes' Theorem -  display";
fctns[5].src[6] = " dispClusters(items, k, clusters, labels)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < clusters.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td width=150><b>Cluster ' + i + ':</b></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td width=150><b>(' + clusters[i][0].toFixed + ', ' + clusters[i][1].toFixed + ')</b></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < items.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (labels[j] == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td width=150>(' + items[j][0] + ', ' + items[j][1] + ')</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[5].title[6] = "Bayes' Theorem -  dispClusters";
fctns[5].src[7] = " circlePts(input)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < input.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(input[i].xLoc, c.height-input[i].yLoc, 15, 0, Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[5].title[7] = "Bayes' Theorem -  circlePts";
fctns[5].src[8] = " dispPts(input)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < input.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(input[i].xLoc,c.height-input[i].yLoc,10,0,Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle=input[0].color;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(input[i].xLoc,c.height-input[i].yLoc,10,0,Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(input[i].value, input[i].xLoc-3*(Math.floor(Math.log(input[i].value)/Math.log(10))+1), c.height-input[i].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[5].title[8] = "Bayes' Theorem -  dispPts";
fctns[5].src[9] = " drawLines(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i].xLoc < 250)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(275, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc + 30, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc + 30, c.height-set[i].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc + 15, c.height-set[i].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(275, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc - 30, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc - 30, c.height-set[i].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc - 15, c.height-set[i].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(275, 20,15,0,Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(275,20,15,0,Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='15px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('A', 275-4*(Math.floor(Math.log(1)/Math.log(10))+1), 24);<br>}<br>";
fctns[5].title[9] = "Bayes' Theorem -  drawLines";
fctns[5].src[10] = " generate(univ, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*univ.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (search(A, univ[next]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = univ[next];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[5].title[10] = "Bayes' Theorem -  generate";
fctns[5].src[11] = " init(B, set1, set2, k1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var univ = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var total = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var colors = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[0] = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[1] = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[2] = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[3] = '#00AAFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[4] = '#005555';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[5] = '#AA00AA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[6] = '#00AAAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[7] = '#AAAA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[8] = '#AA00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[9] = '#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[10] = '#FFAA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[11] = '#FF00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[12] = '#AAAAFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[13] = '#D2691E';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[14] = '#FFAAAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[15] = '#4682BD';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[16] = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[17] = '#FFFFAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[18] = '#0000AA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[19] = '#00AA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[20] = '#AA0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[21] = '#F0F8FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[22] = '#F0F8FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[23] = '#FAEBD7';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[24] = '#DEB887';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i < 100; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;univ[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var select = document.getElementById('sets');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < k1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;select.options[select.options.length] = new Option(i, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k2 = Math.floor(Math.random()*6)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = generate(univ, k2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < temp.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j].color = colors[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j].value = temp[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = search(univ, B[i][j].value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;univ[loc1] = univ[univ.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;univ.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total[total.length] = B[i][j].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = setLocs(B[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(B[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = B;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k2 = Math.floor(Math.random()*10)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = generate(total, k2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < temp.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i].value = temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = setLocs(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circlePts(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLines(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < k1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set1[i] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set1[i].num = B[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set1[i].den = total.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set2[i] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set2[i].num = intersect(A, B[i]).length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set2[i].den = B[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = set1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = set2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = total;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[4] = A;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < k1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td bgcolor='' + colors[i] + ''>B<sub>' + i + '</sub></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr><td>Pr(B<sub>i</sub>)</td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < k1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set1.length - 1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + set1[i].num + '/' + set1[i].den + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + set1[i].num + '/' + set1[i].den + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Pr(A | B<sub>i</sub>)</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set2.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + set2[i].num + '/' + set2[i].den + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + set2[i].num + '/' + set2[i].den + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = text;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[5].title[11] = "Bayes' Theorem -  init";
fctns[5].src[12] = " intersect(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < set1.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set2[i].value == set1[j].value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set2[i].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[5].title[12] = "Bayes' Theorem -  intersect";
fctns[5].src[13] = " search(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[5].title[13] = "Bayes' Theorem -  search";
fctns[5].src[14] = " setLocs(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i].yLoc = (Math.floor(set[i].value / 10)) * 35 + 25;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i].xLoc = (set[i].value % 10) * 55 + 25;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set;<br>}<br>";
fctns[5].title[14] = "Bayes' Theorem -  setLocs";
fctns[5].src[15] = " union(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[i] = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (search(set3, set2[i]) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br></scr" + "ipt>";
fctns[5].title[15] = "Bayes' Theorem -  union";
fctns[5].loc = "http://learninglover.com/examples.php?id=26";
fctns[6] = new Object();
fctns[6].src = new Array();
fctns[6].title = new Array();
fctns[6].src[0] = "<script id='sc1' type='text/javascript'> ";
fctns[6].title[0] = "Bellman-Ford Algorithm - styleTags";
fctns[6].src[1] = " bellmanFord(A, n, show) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B = [];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;change = 1;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M_VAL = 50000;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = [];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == 0)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = M_VAL;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = A[i][j];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T = [];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E = [];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = [];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p = [];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[i] = M_VAL;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[i] = -1;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[0] = 0;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (k < n && change)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;change = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = M_VAL;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (B[i][j] != M_VAL && w[i] + B[i][j] < w[j])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;change++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'w[' + i + '] + B[' + i + '][' + j + '] < w[' + j + '], ';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += w[i] + ' + ' + B[i][j] + ' < ' + w[j] + '<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[j] = w[i] + B[i][j];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = j;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[j] = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T[T.length] = k;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show && change)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'w = ' + w + '<BR>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'k = ' + k + '<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error = 0;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (w[i] + B[i][j] < w[j])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error = 1;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[i] = M_VAL;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'There is a negative cycle<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return w;<br>}<br>";
fctns[6].title[1] = "Bellman-Ford Algorithm -  bellmanFord";
fctns[6].src[2] = " direct(A) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;direction = Math.floor(Math.random()*3);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (direction == 2)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (direction == 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[j][i] = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = Math.floor(Math.random()*25);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neg = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0 || A[j][i] != 0)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign = Math.floor(Math.random()*2);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;direc = Math.floor(Math.random()*2);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (neg >= Math.floor(A.length/5))<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign = 1;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!sign && direc)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] *= -1;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neg++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (!sign && !direc)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[j][i] *= -1;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;neg++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[6].title[2] = "Bellman-Ford Algorithm -  direct";
fctns[6].src[3] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br>";
fctns[6].title[3] = "Bellman-Ford Algorithm -  EucDist";
fctns[6].src[4] = " disp(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>node </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr><td>path length</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + set[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[6].title[4] = "Bellman-Ford Algorithm -  disp";
fctns[6].src[5] = " used(list, num1, num2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < list.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(list[i][0], list[i][1], num1, num2) < 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[6].title[5] = "Bellman-Ford Algorithm -  used";
fctns[6].src[6] = " drawGraph(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2 * Math.PI * i) / A.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = 255 * Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = 255 * Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[i][0], points[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[j][0], points[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[6].title[6] = "Bellman-Ford Algorithm -  drawGraph";
fctns[6].src[7] = " drawNodes(A, points)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[6].title[7] = "Bellman-Ford Algorithm -  drawNodes";
fctns[6].src[8] = " drawLines(A, points)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[i][0], points[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[j][0], points[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[6].title[8] = "Bellman-Ford Algorithm -  drawLines";
fctns[6].src[9] = " drawAns(A, points, ans, start)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawNodes(A, points);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((start + 2) >= ans.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start += 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A, points, ans, start);drawNodes(A, points);};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = setTimeout(f, 2000);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;<br>}<br></scr" + "ipt>";
fctns[6].title[9] = "Bellman-Ford Algorithm -  drawAns";
fctns[6].loc = "http://learninglover.com/examples.php?id=7";
fctns[7] = new Object();
fctns[7].src = new Array();
fctns[7].title = new Array();
fctns[7].src[0] = "<script type='text/javascript'>";
fctns[7].title[0] = "Binary Search Algorithm - styleTags";
fctns[7].src[1] = " generate(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!linsear(A, next))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[7].title[1] = "Binary Search Algorithm -  generate";
fctns[7].src[2] = " linsear(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[7].title[2] = "Binary Search Algorithm -  linsear";
fctns[7].src[3] = " disp(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set = {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[7].title[3] = "Binary Search Algorithm -  disp";
fctns[7].src[4] = " binsear(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subset = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mid = Math.floor(set.length / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 'Element Not Found';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We are now going to test ' + elmnt + ' against the middle element of this set, which is ' + set[mid] + '.<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elmnt > set[mid])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Since ' + elmnt + ' > ' + set[mid] + ', we are going to run the Binary Search Algorithm on the upper half of the array. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = mid+1; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset[i-(mid+1)] = set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += disp(subset) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subset.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = binsear(subset, elmnt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (elmnt < set[mid])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Since ' + elmnt + ' < ' + set[mid] + ', we are going to run the Binary Search Algorithm on the lower half of the array. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < mid; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset[i] = set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += disp(subset) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subset.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = binsear(subset, elmnt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (elmnt == set[mid])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We have now found the element. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'Element Found';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[7].title[4] = "Binary Search Algorithm -  binsear";
fctns[7].src[5] = " quickSort(A, left, right, nest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i = left, j = right;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tmp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nest == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pivot = A[Math.floor((left + right) / 2)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i <= j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (A[i] < pivot)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (A[j] > pivot)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i <= j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = A[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = A[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[j] = tmp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left < j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = quickSort(A, left, j, nest+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < right)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = quickSort(A, i, right, nest+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[7].title[5] = "Binary Search Algorithm -  quickSort";
fctns[7].src[6] = " init(set, k1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set = generate(k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set = quickSort(set, 0, k1-1, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var torf = Math.floor((Math.random())*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elmnt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!torf)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmnt = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmnt = Math.floor((Math.random())*k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmnt = set[elmnt];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'k1 = ' + k1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set = {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'element = ' + elmnt + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = elmnt;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[7].title[6] = "Binary Search Algorithm -  init";
fctns[7].src[7] = " retreive(set, start, finish)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = start; i < finish; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br></scr" + "ipt>";
fctns[7].title[7] = "Binary Search Algorithm -  retreive";
fctns[7].loc = "http://learninglover.com/examples.php?id=21";
fctns[8] = new Object();
fctns[8].src = new Array();
fctns[8].title = new Array();
fctns[8].src[0] = "<script type='text/javascript'><br>var t;";
fctns[8].title[0] = "Binary Search Trees - styleTags";
fctns[8].src[1] = " buildBST(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var head = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = insert(head, set[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = inorder(head);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = 2; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (loc2 != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = text.indexOf(')', loc1+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc2 != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = text.substring(loc1, loc2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('set').options[document.getElementById('set').options.length] = new Option(temp, temp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = loc2+3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('set').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('pset').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[1].hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[2].hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[3].hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[4].hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[5].hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[6].hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[7].hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[8].hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return head;<br>}<br>";
fctns[8].title[1] = "Binary Search Trees -  buildBST";
fctns[8].src[2] = " clearRect(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.drawn = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null && head.left != null && head.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = clearRect(head.left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = clearRect(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head != null && head.left == null && head.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = clearRect(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head != null && head.left != null && head.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = clearRect(head.left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return head;<br>}<br>";
fctns[8].title[2] = "Binary Search Trees -  clearRect";
fctns[8].src[3] = " concat(array1, array2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < array2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;array1[array1.length] = array2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return array1;<br>}<br>";
fctns[8].title[3] = "Binary Search Trees -  concat";
fctns[8].src[4] = " count(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans++;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[8].title[4] = "Binary Search Trees -  count";
fctns[8].src[5] = " depth(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp1 = depth(head.left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp2 = depth(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp1 > temp2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += temp1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += temp2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[8].title[5] = "Binary Search Trees -  depth";
fctns[8].src[6] = " draw(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null && head.left == null && head.right == null && head.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(head.xval, head.yval, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.drawn = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.value != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(head.value, head.xval-3*(Math.floor(Math.log(head.value)/Math.log(10))+1), head.yval+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(head.value, head.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), head.yval+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head != null && head.left != null && head.right == null && head.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(head.xval, head.yval, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.drawn = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(head.xval, head.yval+10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(head.left.xval, head.left.yval-10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.value != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(head.value, head.xval-3*(Math.floor(Math.log(head.value)/Math.log(10))+1), head.yval+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(head.value, head.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), head.yval+4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(head.left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head != null && head.left == null && head.right != null && head.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(head.xval, head.yval, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.drawn = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(head.xval, head.yval+10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(head.right.xval, head.right.yval-10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.value != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(head.value, head.xval-3*(Math.floor(Math.log(head.value)/Math.log(10))+1), head.yval+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(head.value, head.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), head.yval+4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head != null && head.left != null && head.right != null && head.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(head.xval, head.yval, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.drawn = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(head.xval, head.yval+10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(head.left.xval, head.left.yval-10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(head.xval, head.yval+10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(head.right.xval, head.right.yval-10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.value != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(head.value, head.xval-3*(Math.floor(Math.log(head.value)/Math.log(10))+1), head.yval+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(head.value, head.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), head.yval+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(head.left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;<br>}<br>";
fctns[8].title[6] = "Binary Search Trees -  draw";
fctns[8].src[7] = " generate(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (linsear(A, next) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[A.length] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[8].title[7] = "Binary Search Trees -  generate";
fctns[8].src[8] = " getLeafs(tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var leafs = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left == null && tree.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leafs[leafs.length] = tree.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left != null && tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leafs = concat(leafs, getLeafs(tree.left));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leafs = concat(leafs, getLeafs(tree.right));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leafs = concat(leafs, getLeafs(tree.left));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leafs = concat(leafs, getLeafs(tree.right));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return leafs;<br>}<br>";
fctns[8].title[8] = "Binary Search Trees -  getLeafs";
fctns[8].src[9] = " init(curr, k1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = generate(k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while(search(curr, next));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('next').value = next;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'set = {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < curr.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < curr.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += curr[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += curr[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br>";
fctns[8].title[9] = "Binary Search Trees -  init";
fctns[8].src[10] = " inorder(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += inorder(head.left) + '(' + head.value + ')' + inorder(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '.';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[8].title[10] = "Binary Search Trees -  inorder";
fctns[8].src[11] = " insert(head, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elmnt > head.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = insert(head.right, elmnt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right.parent = head;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (elmnt < head.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = insert(head.left, elmnt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left.parent = head;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Element is already present.');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.value = elmnt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.drawn = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.parent = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return head;<br>}<br>";
fctns[8].title[11] = "Binary Search Trees -  insert";
fctns[8].src[12] = " linsear(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[8].title[12] = "Binary Search Trees -  linsear";
fctns[8].src[13] = " maxValue(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = head.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = maxValue(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[8].title[13] = "Binary Search Trees -  maxValue";
fctns[8].src[14] = " minValue(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = head.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.left != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = minValue(head.left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[8].title[14] = "Binary Search Trees -  minValue";
fctns[8].src[15] = " operate(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var orig = 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxim = c.width - 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var leafs;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('alg').value == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('alg').options[1].hidden == true)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = clearRect(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = buildBST(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leafs = getLeafs(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var incr = (maxim - orig) / (leafs.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = setXCrds(curr, leafs, incr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = setYCrds(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('alg').value == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = clearRect(curr);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = insert(curr, document.getElementById('next').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while(search(curr, next));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('next').value = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leafs = getLeafs(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var incr = (maxim - orig) / (leafs.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = setXCrds(curr, leafs, incr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = setYCrds(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = inorder(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = 2; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('set').options.length = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (loc2 != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = text.indexOf(')', loc1+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc2 != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = text.substring(loc1, loc2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('set').options[document.getElementById('set').options.length] = new Option(temp, temp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = loc2+3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = clearRect(curr);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = remove(curr, document.getElementById('set').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leafs = getLeafs(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var incr = Math.floor((maxim - orig) / (leafs.length));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = setXCrds(curr, leafs, incr)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = setYCrds(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = inorder(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = 2; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('set').options.length = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (loc2 != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = text.indexOf(')', loc1+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc2 != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = text.substring(loc1, loc2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('set').options[document.getElementById('set').options.length] = new Option(temp, temp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = loc2+3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The depth of this tree is currently ' + depth(curr) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The maximum value of this tree is currently ' + maxValue(curr) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The minimum value of this tree is currently ' + minValue(curr) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 6)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The preorder traversal of this tree is <br>' + preorder(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 7)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The inorder traversal of this tree is <br>' + inorder(curr);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 8)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The postorder traversal of this tree is <br>' + postorder(curr);<br><br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br>";
fctns[8].title[15] = "Binary Search Trees -  operate";
fctns[8].src[16] = " postorder(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += postorder(head.left) + postorder(head.right) + '(' + head.value + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '.';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[8].title[16] = "Binary Search Trees -  postorder";
fctns[8].src[17] = " preorder(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + head.value + ')' + preorder(head.left) + preorder(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '.';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[8].title[17] = "Binary Search Trees -  preorder";
fctns[8].src[18] = " remove(head, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.value == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.left == null && head.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head.left == null && head.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right.parent = head.parent;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = head.right;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head.left != null && head.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left.parent = head.parent;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = head.left;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head.left != null && head.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.value = minValue(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = remove(head.right, head.value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (elmnt > head.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = remove(head.right, elmnt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (elmnt < head.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = remove(head.left, elmnt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return head;<br>}<br>";
fctns[8].title[18] = "Binary Search Trees -  remove";
fctns[8].src[19] = " resetPage()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('set').hidden = true; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('pset').hidden = true; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[0].selected = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[1].hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[2].hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[3].hidden = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[4].hidden = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[5].hidden = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[6].hidden = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[7].hidden = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('alg').options[8].hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>}<br>";
fctns[8].title[19] = "Binary Search Trees -  resetPage";
fctns[8].src[20] = " retreive(set, start, finish)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = start; i < finish; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[8].title[20] = "Binary Search Trees -  retreive";
fctns[8].src[21] = " search(head, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.value == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (elmnt > head.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = search(head.right, elmnt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (elmnt < head.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = search(head.left, elmnt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[8].title[21] = "Binary Search Trees -  search";
fctns[8].src[22] = " setXCrds(head, leafs, incr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var orig = 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.left == null && head.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = linsear(leafs, head.value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.xval = orig + count*incr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head.left != null && head.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = setXCrds(head.left, leafs, incr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = setXCrds(head.right, leafs, incr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.xval = (head.left.xval + head.right.xval) / 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head.left != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = setXCrds(head.left, leafs, incr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.xval = (head.left.xval)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (head.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = setXCrds(head.right, leafs, incr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.xval = (head.right.xval)-5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return head;<br>}<br>";
fctns[8].title[22] = "Binary Search Trees -  setXCrds";
fctns[8].src[23] = " setYCrds(head)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (head.parent == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.yval = 30;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = setYCrds(head.left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = setYCrds(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.yval = head.parent.yval + 40;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.left = setYCrds(head.left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head.right = setYCrds(head.right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return head;<br>}<br><br></scr" + "ipt><br>";
fctns[8].title[23] = "Binary Search Trees -  setYCrds";
fctns[8].loc = "http://learninglover.com/examples.php?id=24";
fctns[9] = new Object();
fctns[9].src = new Array();
fctns[9].title = new Array();
fctns[9].src[0] = "<style type='text/css'><br>.c {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.rbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white-space:nowrap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.cbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>p<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display: inline;<br>}<br></style><br><script type='text/javascript'><br>var M_VAL = 50000;";
fctns[9].title[0] = "Breadth First Search  - styleTags";
fctns[9].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numNodes = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/4) - numNodes)) + numNodes;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var otherNodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i] = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numNodes; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(tree.length < numNodes)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inside = Math.floor(Math.random()*tree.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outside = Math.floor(Math.random()*otherNodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = otherNodes[outside];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[outside] = otherNodes[otherNodes.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < numArcs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random()*numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph[loc1][i] == M_VAL && i != loc1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (poss.length == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[i] = i;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[9].title[1] = "Breadth First Search  -  generate";
fctns[9].src[2] = " dequeue(queue)<br>{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next = queue[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[i-1] = queue[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return queue;<br>}<br>";
fctns[9].title[2] = "Breadth First Search  -  dequeue";
fctns[9].src[3] = " enqueue(queue, node)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[queue.length] = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return queue;<br>}<br>";
fctns[9].title[3] = "Breadth First Search  -  enqueue";
fctns[9].src[4] = " breadthFirst(graph, start)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[queue.length] = start;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var currLbl = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[start].label = currLbl;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[start].bfsDist = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currLbl++;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (queue.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next = queue[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue = dequeue(queue);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[next].queue[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[next].queue[i] = queue[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[next].queue.length = queue.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var adding = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.edges.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var toAdd;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.edges[i][0] == next)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toAdd = graph.edges[i][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (graph.edges[i][1] == next)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toAdd = graph.edges[i][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.nodes[toAdd].bfsDist != M_VAL || queue.indexOf(toAdd) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adding[adding.length] = toAdd;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[toAdd].bfsDist = graph.nodes[next].bfsDist + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[toAdd].label = currLbl;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[toAdd].parent = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue = enqueue(queue, toAdd);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currLbl++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[next].adding = adding;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[9].title[4] = "Breadth First Search  -  breadthFirst";
fctns[9].src[5] = " init(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.edges = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var x = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var y = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = document.getElementById('start');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2*Math.PI*i) / A.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i] = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].value = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].label = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].bfsDist = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].queue = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].adding = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].dfsDist = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = graph.edges.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.edges[len] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.edges[len][0] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.edges[len][1] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sel.options.length < A.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[sel.options.length] = new Option('Node ' + i, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(graph);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[9].title[5] = "Breadth First Search  -  init";
fctns[9].src[6] = " drawGraph(graph)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.edges.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(graph.nodes[graph.edges[i][0]].xVal, graph.nodes[graph.edges[i][0]].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(graph.nodes[graph.edges[i][1]].xVal, graph.nodes[graph.edges[i][1]].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c9c9c9';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.nodes[i].value == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(20))+1), graph.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(20))+1), graph.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[9].title[6] = "Breadth First Search  -  drawGraph";
fctns[9].src[7] = " dispMtrx(A)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[9].title[7] = "Breadth First Search  -  dispMtrx";
fctns[9].src[8] = " newProb()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = generate(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clqs = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest=init(A); <br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest);<br>}<br>";
fctns[9].title[8] = "Breadth First Search  -  newProb";
fctns[9].src[9] = " dispClqs()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clqs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'clique ' + i + ') ' + clqs[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[9].title[9] = "Breadth First Search  -  dispClqs";
fctns[9].src[10] = " dispTable(graph, start)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Node</td><td>Order Visited</td><td>To Visit</td><td>Adding</td><td>Distance From Node ' + start + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < graph.nodes.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.nodes[j].label == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + graph.nodes[j].value + '</td><td><center>' + graph.nodes[j].label + '</center></td><td>' + graph.nodes[j].queue + '</td><td>' + graph.nodes[j].adding + '</td><td>' + graph.nodes[j].bfsDist + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[9].title[10] = "Breadth First Search  -  dispTable";
fctns[9].src[11] = " drawLabels(graph)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = colors[graph.nodes[i].bfsDist];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.nodes[i].label == 0)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(graph.nodes[i].bfsDist, graph.nodes[i].xVal+20*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(20))+1), graph.nodes[i].yVal-20);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(graph.nodes[i].bfsDist, graph.nodes[i].xVal+20*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(20))+1), graph.nodes[i].yVal-20);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[9].title[11] = "Breadth First Search  -  drawLabels";
fctns[9].loc = "http://learninglover.com/examples.php?id=88";
fctns[10] = new Object();
fctns[10].src = new Array();
fctns[10].title = new Array();
fctns[10].src[0] = "<script type='text/javascript'>";
fctns[10].title[0] = "Bubble Sort Algorithm - styleTags";
fctns[10].src[1] = " bubbleSort(A) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>' + count + ')</td>' + disp(A) + '</tr></table>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = left.length-1; i >= 0; i--)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j = 1; j <= i; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left[j-1] > left[j])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = left[j-1];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j-1] = left[j];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j] = temp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (swap > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[count] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var k = 0; k < left.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[count][k] = left[k];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left; <br>}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
fctns[10].title[1] = "Bubble Sort Algorithm -  bubbleSort";
fctns[10].src[2] = " getMax(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || list[i] > list[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return list[maxLoc];<br>}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
fctns[10].title[2] = "Bubble Sort Algorithm -  getMax";
fctns[10].src[3] = " plotGraph(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < list.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mycanvas = document.createElement('canvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.id = 'canvas' + k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.height = '200';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.width = '500';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.style='border:1px solid #d3d3d3;'<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').appendChild(mycanvas);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('canvas' + k);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var barWidth = Math.floor(c.width / (list[k].length + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var unitHght = Math.floor(c.height / (getMax(list[k]) + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = Math.floor(Math.random()*16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clr[j] == 10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 11)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 12)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 13)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 14)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'E'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 15)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'F'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list[k].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#' + clr[0] + clr[1] + clr[2] + clr[3] + clr[4] + clr[5];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(i*barWidth + barWidth/2 + i, c.height - unitHght * list[k][i] - unitHght, barWidth, unitHght * list[k][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(list[k][i], i*barWidth + barWidth + i - 2, c.height - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[10].title[3] = "Bubble Sort Algorithm -  plotGraph";
fctns[10].loc = "http://learninglover.com/examples.php?id=17";
fctns[11] = new Object();
fctns[11].src = new Array();
fctns[11].title = new Array();
fctns[11].src[0] = "<style type='text/css'><br>.c {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.rbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white-space:nowrap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.cbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>p<br>{<br>        display: inline;<br>}<br></style><br><script type='text/javascript'><br>var M_VAL = 50000;";
fctns[11].title[0] = "Clique Problem Puzzles - styleTags";
fctns[11].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numNodes = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/4) - numNodes)) + numNodes;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var otherNodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i] = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numNodes; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(tree.length < numNodes)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inside = Math.floor(Math.random()*tree.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outside = Math.floor(Math.random()*otherNodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = otherNodes[outside];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[outside] = otherNodes[otherNodes.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < numArcs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random()*numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((graph[loc1][i] == M_VAL)&&(i != loc1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (poss.length == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[i] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[11].title[1] = "Clique Problem Puzzles -  generate";
fctns[11].src[2] = " BKAlg(A, R, P, X, nest)<br>{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') R = {' + R + '}, ' + R.length + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') P = {' + P + '}, ' + P.length + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') X = {' + X + '}, ' + X.length + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (P.length == 0 && X.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') P and X are both empty, returning R, ' + R + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clqs[clqs.length] = R;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var u = Math.floor(Math.random()*(P.length + X.length));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var uVal = -1;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') u = ' + u + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (u >= P.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = u - P.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uVal = X[u];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uVal = P[u];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') uVal = ' + uVal + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var v = 0; v < P.length; v++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val = P[v];<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') v = ' + v + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') P[v] = ' + val + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') A[P[v]][u] = ' + A[val][u] + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') R = ' + R + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[val][uVal] == M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempR = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < R.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempR[i] = R[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tempR.length == 0 || tempR.indexOf(val) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempR[tempR.length] = val;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') tempR = ' + tempR + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempP = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[val][j] == 1 && P.indexOf(j) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempP[tempP.length] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') tempP = ' + tempP + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempX = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][val] == 1 && X.indexOf(i) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempX[tempX.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') tempX = ' + tempX + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BKAlg(A, tempR, tempP, tempX, nest + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[v] = -1;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') P = ' + P + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (X.indexOf(val) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[X.length] = val;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += nest + ') X = ' + X + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[11].title[2] = "Clique Problem Puzzles -  BKAlg";
fctns[11].src[3] = " isClique(userAns, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < userAns.length && ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < userAns.length && ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var node1 = userAns[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var node2 = userAns[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[node1][node2] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[11].title[3] = "Clique Problem Puzzles -  isClique";
fctns[11].src[4] = " check(userAns, A)<br>{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'userAns = ' + userAns + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BKAlg(A, R, P, X, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxSize = getMaxClq();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'max = ' + max + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isClique(userAns, A) && userAns.length == maxSize.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'You have found a maximum clique!<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'Sorry, but this is not a maximum clique.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[i] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[11].title[4] = "Clique Problem Puzzles -  check";
fctns[11].src[5] = " dispNodes(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nodeList = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = nodeList.length; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc].name = 'node' + i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc].text = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < nodeList.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='c' name='node_' + nodeList[i].text + '' id='node_' + nodeList[i].text + '' onclick=\'changecolor('node_' + i + ''); drawGraph(forest)\'>' + nodeList[i].text + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[11].title[5] = "Clique Problem Puzzles -  dispNodes";
fctns[11].src[6] = " init(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var forest = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.edges = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var x = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var y = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2*Math.PI*i) / A.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i] = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].value = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].lookup = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[i][0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var info = disp(forest);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info = info.split('<br>');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + info[0] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>What node should be selected next?</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispNodes(A) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><input type='button' value='Check' onclick='check(userAns, A)'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><input type=button onclick=\'newProb();\' value=\'New Problem\'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[11].title[6] = "Clique Problem Puzzles -  init";
fctns[11].src[7] = " drawGraph(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var edge = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[1] = forest.nodes[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns.indexOf(edge[0].value) == -1 && userAns.indexOf(edge[1].value) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns.indexOf(edge[0].value) == -1 || userAns.indexOf(edge[1].value) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FFCC00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#C8A2C8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns.indexOf(i) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#C8A2C8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c9c9c9';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (forest.nodes[i].value == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value+1)/Math.log(20))+1), forest.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value)/Math.log(20))+1), forest.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}";
fctns[11].title[7] = "Clique Problem Puzzles -  drawGraph";
fctns[11].src[8] = " dispMtrx(A)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[11].title[8] = "Clique Problem Puzzles -  dispMtrx";
fctns[11].src[9] = " newProb()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = generate(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clqs = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest=init(A); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest);<br>}<br>";
fctns[11].title[9] = "Clique Problem Puzzles -  newProb";
fctns[11].src[10] = " dispClqs()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clqs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'clique ' + i + ') ' + clqs[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[11].title[10] = "Clique Problem Puzzles -  dispClqs";
fctns[11].src[11] = " changecolor(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var node = parseInt(id.split('_')[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#C8A2C8' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    document.getElementById(id).style.background == 'rgb(200, 162, 200)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(200, 162, 200)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(200, 162, 200) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[userAns.indexOf(node)] = userAns[userAns.length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns.length --;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#C8A2C8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[userAns.length] = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>";
fctns[11].title[11] = "Clique Problem Puzzles -  changecolor";
fctns[11].src[12] = " getMaxClq()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLen = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clqs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clqs[i].length > maxLen)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLen = clqs[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return clqs[maxLoc];<br>}<br></scr" + "ipt><br>";
fctns[11].title[12] = "Clique Problem Puzzles -  getMaxClq";
fctns[11].loc = "http://learninglover.com/examples.php?id=87";
fctns[12] = new Object();
fctns[12].src = new Array();
fctns[12].title = new Array();
fctns[12].src[0] = "<style type='text/css'><br>.c {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 3.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 3.0em;<br><br>}<br></style><br><script type='text/javascript'>";
fctns[12].title[0] = "Corral Puzzles - styleTags";
fctns[12].src[1] = " generate2()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var total = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bdr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = '<table border = '1'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='c' name='tdc' + i + j + '' id='tdc' + i + j + '' onclick=changecolor('tdc' + i + j + '')><p name='c' + i + j + '' id='c' + i + j + ''></p></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('toSolve').innerHTML = prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[bdr.length] = i + ', ' + size;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[bdr.length] = size + ', ' + i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[bdr.length] = i + ', 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[bdr.length] = '1, ' + i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numShade = Math.floor(size*size/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fpcount = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numShade; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pos = Math.floor(Math.random()*bdr.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt = bdr[pos].split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[pos] = bdr[bdr.length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var incr = parseInt(elt[0])+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var incc = parseInt(elt[1])+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var decr = parseInt(elt[0])-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var decc = parseInt(elt[1])-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elt[0] < size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[bdr.length] = incr + ', ' + elt[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elt[0] > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[bdr.length] = decr + ', ' + elt[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elt[1] < size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[bdr.length] = elt[0] + ', ' + incc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elt[1] > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bdr[bdr.length] = elt[0] + ', ' + decc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[elt[0]][elt[1]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (label(ans)[1] > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[elt[0]][elt[1]] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fpcount++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fpcount >= size*size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vis = visib(ans);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[i][j] == '0')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total[total.length] = i + ', ' + j + ', 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ans[i][j] == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total[total.length] = i + ', ' + j + ', 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var covers = getCovers(vis);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob[0] = covers;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob[1] = total;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elts = greedy(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < elts.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < elts.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = elts[i].split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + loc[0] + loc[1]).innerHTML = vis[loc[0]][loc[1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[12].title[1] = "Corral Puzzles -  generate2";
fctns[12].src[2] = " label(ans)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var glabel = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glabel[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glabel[i][j] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size && loc.length == 0; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size && loc.length == 0; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc[0] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc[1] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glabel[loc[0]][loc[1]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[i][j] == 0 && glabel[i][j] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i > 1 && ans[i-1][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glabel[i][j] = glabel[i-1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (j > 1 && ans[i][j-1] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glabel[i][j] = glabel[i][j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glabel[i][j] = count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j > 1 && ans[i][j] == 0 && ans[i][j-1] == 0 && glabel[i][j] != glabel[i][j-1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp1, temp2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (glabel[i][j-1] < glabel[i][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp1 = glabel[i][j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp2 = glabel[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp1 = glabel[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp2 = glabel[i][j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i1 = 1; i1 <= size; i1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j1 = 1; j1 <= size; j1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (glabel[i1][j1] == temp2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glabel[i1][j1] = temp1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var toRet = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toRet[0] = glabel;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toRet[1] = count-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return toRet;<br>}<br>";
fctns[12].title[2] = "Corral Puzzles -  label";
fctns[12].src[3] = " visib(ans)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vis = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vis[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var r_up = i; r_up >= 1 && ans[r_up][j] == 0; r_up--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var r_down = i; r_down <= size && ans[r_down][j] == 0; r_down++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var c_left = j; c_left >= 1 && ans[i][c_left] == 0; c_left--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var c_right = j; c_right <= size && ans[i][c_right] == 0; c_right++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vis[i][j] = count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vis[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return vis;<br>}<br>";
fctns[12].title[3] = "Corral Puzzles -  visib";
fctns[12].src[4] = " setDim()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = document.getElementById('dim');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 3; i <= 10; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[sel.options.length] = new Option(i + ' by ' + i, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[1].selected = true;<br>}<br><br>";
fctns[12].title[4] = "Corral Puzzles -  setDim";
fctns[12].src[5] = " clearcells()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background = '#ffffff';<br>}<br>";
fctns[12].title[5] = "Corral Puzzles -  clearcells";
fctns[12].src[6] = " changecolor(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#FF0000' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(255, 0, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(255, 0, 0)' ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(255, 0, 0) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById(id).style.background == '#00ffff' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(0, 255, 255)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(0, 255, 255)' ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(0, 255, 255) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#00ffff';<br><br>}<br>";
fctns[12].title[6] = "Corral Puzzles -  changecolor";
fctns[12].src[7] = " disp(ans)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[i][j] == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + i + j).style.background = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + i + j).style.background = '#00FFFF';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[12].title[7] = "Corral Puzzles -  disp";
fctns[12].src[8] = " checkProg(ans)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var userAns = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var retVal = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i] = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('tdc'+i+j).style.background == '#FF0000' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'none repeat scroll 0% 0% rgb(255, 0, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(255, 0, 0) none repeat scroll 0% 0%' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(255, 0, 0)' )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('tdc'+i+j).style.background == '#00FFFF' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'none repeat scroll 0% 0% rgb(0, 255, 255)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(0, 255, 255) none repeat scroll 0% 0%' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(0, 255, 255)' )<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'user Ans = <table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + userAns[i][j] + '</td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var userVis = visib(userAns);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'user Vis = <table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + userVis[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'ans Ans = <table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + ans[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var retVal = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size && retVal; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size && retVal; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('c'+i+j).innerHTML != '' && document.getElementById('c'+i+j).innerHTML != userVis[i][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is incorrect :-(');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns[i][j] == '0' || userAns[i][j] == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (retVal && count == (size)*(size))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is correct!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (retVal && count != (size)*(size))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is correct, so far!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is incorrect :-(');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[12].title[8] = "Corral Puzzles -  checkProg";
fctns[12].src[9] = " clearBoth()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('toSolve').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').innerHTML = '';<br>}<br>";
fctns[12].title[9] = "Corral Puzzles -  clearBoth";
fctns[12].src[10] = " getCovers(path)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sets = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = path.length-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = 'size = ' + size + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (path[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; j+k <= size && path[i][j+k] != 0; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (path[i][j+k] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = i + ', ' + (j+k) + ', 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j+k <= size && path[i][j+k] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = i + ', ' + (j+k) + ', 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 1; k <= size && j-k >= 1 && path[i][j-k] != 0; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (path[i][j-k] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = i + ', ' + (j-k) + ', 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j-k >= 1 && path[i][j-k] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = i + ', ' + (j-k) + ', 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 1; i+k <= size && path[i+k][j] != 0; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (path[i+k][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = (i+k) + ', ' + j + ', 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i+k <= size && path[i+k][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = (i+k) + ', ' + j + ', 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 1; k <= size && i-k >= 1 && path[i-k][j] != 0; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (path[i-k][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = (i-k) + ', ' + j + ', 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i-k >= 1 && path[i-k][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = (i-k) + ', ' + j + ', 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'sets[' + i + ', ' + j + '] = ' + temp + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = sets.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets[loc] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < temp.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets[loc][k] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets[loc][k].loc = i + ', ' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets[loc][k].value = temp[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sets;<br>}<br>";
fctns[12].title[10] = "Corral Puzzles -  getCovers";
fctns[12].src[11] = " sortDec(arr2d)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr2d.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < arr2d.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr2d[i][1] < arr2d[j][1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = arr2d[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[i] = arr2d[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr2d;<br>}<br>";
fctns[12].title[11] = "Corral Puzzles -  sortDec";
fctns[12].src[12] = " greedy(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[1].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i] = prob[1][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var itms = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numElim;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numAdded = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratios = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0][i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < rem.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem[k] == prob[0][i][j].value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = rem[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][0] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][1] = temp.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][2] = prob[0][i][0].loc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios = sortDec(ratios);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (chosen.indexOf(ratios[0][2]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = ratios[0][2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numAdded++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0][ratios[0][0]].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < rem.length && loc == -1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem[j] == prob[0][ratios[0][0]][i].value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = rem[loc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[rem.length-1] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numElim++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (numAdded != 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rem.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt = rem[i].split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elt[2] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = elt[0] + ', ' + elt[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return chosen;<br>}<br></scr" + "ipt>";
fctns[12].title[12] = "Corral Puzzles -  greedy";
fctns[12].loc = "http://learninglover.com/examples.php?id=62";
fctns[13] = new Object();
fctns[13].src = new Array();
fctns[13].title = new Array();
fctns[13].src[0] = "<script type='text/javascript'>";
fctns[13].title[0] = "Covariance of Vectors - styleTags";
fctns[13].src[1] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById ('input').innerHTML = ''; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById ('output').innerHTML = ''; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearPts (); <br>    var k1 = Math.floor(Math.random()*20)+5;<br>    var text = '<table>';<br>    <br>    var set1 = new Array();<br>    var set2 = new Array();<br>    <br>    for (var i = 0; i < k1; i++)<br>    {<br>        set1[i] = Math.floor(Math.random()*100)+1;<br>        set2[i] = Math.floor(Math.random()*24)+1;<br>    }<br><br>text += '<tr><td>x</td>';<br>for (var i = 0; i < set1.length; i++)<br>{<br>    text += '<td>' + set1[i] + '</td>';<br>}<br>text += '</tr>';<br><br>text += '<tr><td>y</td>';<br><br>for (var i = 0; i < set2.length; i++)<br>{<br>    text += '<td>' + set2[i] + '</td>';<br>}<br>text += '</tr>';<br>    <br>    text += '</table>';<br>    <br>//    for (var i = 0; i < k1; i++)<br>//        text += set1[i] + ', ';<br>        <br>//    text += '<br>';<br>//    for (var i = 0; i < k1; i++)<br>//        text += set2[i] + ', ';<br>    <br>    document.getElementById('input').innerHTML = text;<br>    <br>    var ans = new Array();<br>    ans[0] = set1;<br>    ans[1] = set2;<br>    <br>    dispPts(ans);<br>    <br>    return ans;<br>}<br>";
fctns[13].title[1] = "Covariance of Vectors -  init";
fctns[13].src[2] = " mean(set, show)<br>{<br>    var text = '';<br>    if (show)<br>        text += '';<br>        <br>    var mean = 0;<br>    for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>        mean += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' = ' + mean + '<br>';<br>        <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Now we divide by the number of elements in the vector to get<br>';<br>    mean = mean / set.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'mean = ' + Math.floor(mean*1000)/1000 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>    <br>    return mean;<br>}<br>";
fctns[13].title[2] = "Covariance of Vectors -  mean";
fctns[13].src[3] = " covar(set1, set2, show)<br>{<br>    var text = '';<br>    if (show)<br>        document.getElementById('output').innerHTML += '<br>We first calculate the mean of x<br>';<br>    var mean1 = mean(set1, show);<br>    <br>    if (show)<br>        document.getElementById('output').innerHTML += '<br>Next, we calcuate the mean of y<br>';<br>    var mean2 = mean(set2, show);<br>    <br>    var nvec = new Array(), sum = 0;<br>    <br>    if (show)<br>    {<br>        text += '<br>To calculate the covariance, we first compute how far each element of each vector is from its mean<br>'<br>        text += '<table width=400><tr><td>x</td><td>x - <img src='http://www.learninglover.com/chars/mu.gif'><sub>x</sub></td><td>y</td><td>y - <img src='http://www.learninglover.com/chars/mu.gif'><sub>y</sub></td><td>(x - <img src='http://www.learninglover.com/chars/mu.gif'><sub>x</sub>)(y - <img src='http://www.learninglover.com/chars/mu.gif'><sub>y</sub>)</td></tr>';<br>    }<br>    <br>    for (var i = 0; i < set1.length; i++)<br>    {<br>        if (show)<br>            text += '<tr><td>' + set1[i] + '</td><td>' + Math.floor((set1[i] - mean1)*1000)/1000 + '</td><td>' + set2[i] + '</td><td>' + Math.floor((set2[i] - mean2)*1000)/1000 + '</td><td>' + Math.floor(((set1[i] - mean1)*(set2[i] - mean2))*1000)/1000 + '</td></tr>';<br>        sum += ((set1[i] - mean1)*(set2[i] - mean2));<br>    }<br>    text += '</table>';<br>    <br>    if (show)<br>        text += '<br>Now to calculate the covariance, we simply simply add the terms in this last column and divide by ' + set1.length + '<br>';<br>        <br>    sum = sum / (set1.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>And we see that the covariance of these two vectors is ' + Math.floor(sum*1000)/1000 + '<br>';<br>    <br>    document.getElementById('output').innerHTML += text;<br>    <br>    return sum;<br>}<br>";
fctns[13].title[3] = "Covariance of Vectors -  covar";
fctns[13].src[4] = " dispPts(inp)<br>{<br>    var i, c = document.getElementById('myCanvas');<br>    var ctx = c.getContext('2d');<br><br>    var text = '';<br>    <br>    ctx.clearRect(0, 0, 500, 600);<br>    ctx.fillStyle='#000000';<br><br>    for (i = 0; i < inp[0].length; i++)<br>    {<br>        text += i + ' - (' + (4.8*inp[0][i]+10) + ', ' + (600-24*inp[1][i]+12) + ')<br>';<br>        ctx.beginPath();<br>        ctx.arc(4.8*inp[0][i]+10,600-24*inp[1][i]+12,5,0,Math.PI*2,true);<br>        ctx.fillText(i, 4.8*inp[0][i]+10,600-24*inp[1][i]-5+12);<br>        ctx.closePath();<br>        ctx.fill();<br>    }<br>    <br>//    document.getElementById('output').innerHTML = text;<br>}<br>";
fctns[13].title[4] = "Covariance of Vectors -  dispPts";
fctns[13].src[5] = " process()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>    var ans = new Array();<br>    var text = '<table><tr><td></td><td>x</td><td>y</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>    for (var i = 0; i < prob.length; i++)<br>    {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elt1 = 'x';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elt1 = 'y';<br>        text += '<tr><td>' + elt1 + '</td>';<br>        ans[i] = new Array();<br>        for (var j = 0; j < prob.length; j++)<br>        {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elt2 = 'x';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elt2 = 'y';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'Calculating the Covariance of ' + elt1 + ' and ' + elt2 + '.<br>';<br>            ans[i][j] = covar(prob[i], prob[j], show);<br>            text += '<td>' + Math.floor(ans[i][j]*1000)/1000 + '</td>';<br>        }<br>        text += '</tr>';<br>    }<br>    text += '</table>';<br>    <br>    document.getElementById('output').innerHTML += 'Covariance Matrix = ' + text;<br>}<br><br>";
fctns[13].title[5] = "Covariance of Vectors -  process";
fctns[13].src[6] = " clearPts()<br>{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>}<br></scr" + "ipt>";
fctns[13].title[6] = "Covariance of Vectors -  clearPts";
fctns[13].loc = "http://learninglover.com/examples.php?id=42";
fctns[14] = new Object();
fctns[14].src = new Array();
fctns[14].title = new Array();
fctns[14].src[0] = "<style type='text/css'><br>.c {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.rbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white-space:nowrap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.cbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>p<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display: inline;<br>}<br></style><br><script type='text/javascript'><br>var M_VAL = 50000;";
fctns[14].title[0] = "Depth First Search - styleTags";
fctns[14].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numNodes = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/4) - numNodes)) + numNodes;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var otherNodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i] = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numNodes; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(tree.length < numNodes)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inside = Math.floor(Math.random()*tree.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outside = Math.floor(Math.random()*otherNodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = otherNodes[outside];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[outside] = otherNodes[otherNodes.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < numArcs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random()*numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph[loc1][i] == M_VAL && i != loc1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (poss.length == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[i] = i;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[14].title[1] = "Depth First Search -  generate";
fctns[14].src[2] = " pop(stack)<br>{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next = queue[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < stack.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack[i-1] = stack[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return stack;<br>}<br>";
fctns[14].title[2] = "Depth First Search -  pop";
fctns[14].src[3] = " push(stack, node)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = stack.length-1; i >= 0; i--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack[i+1] = stack[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack[0] = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return stack;<br>}<br>";
fctns[14].title[3] = "Depth First Search -  push";
fctns[14].src[4] = " depthFirst(graph, start)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var stack = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;push(stack, start);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var currLbl = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[start].label = currLbl;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[start].dfsDist = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currLbl++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (stack.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next = stack[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack = pop(stack);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[next].label = currLbl;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currLbl++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[next].stack = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < stack.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[next].stack[i] = stack[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var adding = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.edges.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var toAdd = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.edges[i][0] == next)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toAdd = graph.edges[i][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (graph.edges[i][1] == next)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toAdd = graph.edges[i][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (toAdd == -1 || (graph.nodes[toAdd].dfsDist != M_VAL || stack.indexOf(toAdd) != -1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adding = push(adding, toAdd);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[toAdd].dfsDist = graph.nodes[next].dfsDist + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[toAdd].parent = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack = push(stack, toAdd);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[next].adding = adding;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[14].title[4] = "Depth First Search -  depthFirst";
fctns[14].src[5] = " init(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.edges = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var x = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var y = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = document.getElementById('start');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2*Math.PI*i) / A.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i] = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].value = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].label = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].dfsDist = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].stack = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].adding = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.nodes[i].parent = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = graph.edges.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.edges[len] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.edges[len][0] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph.edges[len][1] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sel.options.length < A.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[sel.options.length] = new Option('Node ' + i, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(graph);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[14].title[5] = "Depth First Search -  init";
fctns[14].src[6] = " drawGraph(graph)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.edges.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(graph.nodes[graph.edges[i][0]].xVal, graph.nodes[graph.edges[i][0]].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(graph.nodes[graph.edges[i][1]].xVal, graph.nodes[graph.edges[i][1]].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c9c9c9';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.nodes[i].value == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(20))+1), graph.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(graph.nodes[i].value, graph.nodes[i].xVal-3*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(20))+1), graph.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[14].title[6] = "Depth First Search -  drawGraph";
fctns[14].src[7] = " dispMtrx(A)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[14].title[7] = "Depth First Search -  dispMtrx";
fctns[14].src[8] = " newProb()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = generate(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clqs = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest=init(A); <br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest);<br>}<br>";
fctns[14].title[8] = "Depth First Search -  newProb";
fctns[14].src[9] = " dispClqs()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clqs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'clique ' + i + ') ' + clqs[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[14].title[9] = "Depth First Search -  dispClqs";
fctns[14].src[10] = " dispTable(graph, start)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Node</td><td>Order Visited</td><td>To Visit</td><td>Adding</td><td>Distance From Node ' + start + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < graph.nodes.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.nodes[j].label == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + graph.nodes[j].value + '</td><td><center>' + graph.nodes[j].label + '</center></td><td>' + graph.nodes[j].stack + '</td><td>' + graph.nodes[j].adding + '</td><td>' + graph.nodes[j].dfsDist + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[14].title[10] = "Depth First Search -  dispTable";
fctns[14].src[11] = " drawLabels(graph)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = colors[graph.nodes[i].dfsDist];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(graph.nodes[i].xVal, graph.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph.nodes[i].label == 0)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(graph.nodes[i].bfsDist, graph.nodes[i].xVal+20*(Math.floor(Math.log(graph.nodes[i].value+1)/Math.log(20))+1), graph.nodes[i].yVal-20);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(graph.nodes[i].bfsDist, graph.nodes[i].xVal+20*(Math.floor(Math.log(graph.nodes[i].value)/Math.log(20))+1), graph.nodes[i].yVal-20);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[14].title[11] = "Depth First Search -  drawLabels";
fctns[14].loc = "http://learninglover.com/examples.php?id=89";
fctns[15] = new Object();
fctns[15].src = new Array();
fctns[15].title = new Array();
fctns[15].src[0] = "<script type='text/javascript'>";
fctns[15].title[0] = "Descriptive Statistics - styleTags";
fctns[15].src[1] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = Math.floor(Math.random()*25) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list[i] = Math.floor(Math.random()*50);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sign = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sign == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list[i] = list[i] * sign;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var out = '<center><table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += '<td>' + list[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += '</tr></table></center>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = out;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return list;<br>}<br>";
fctns[15].title[1] = "Descriptive Statistics -  init";
fctns[15].src[2] = " getMin(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (minLoc == -1 || list[i] < list[minLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return list[minLoc];<br>}<br>";
fctns[15].title[2] = "Descriptive Statistics -  getMin";
fctns[15].src[3] = " getMax(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || list[i] > list[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return list[maxLoc];<br>}<br>";
fctns[15].title[3] = "Descriptive Statistics -  getMax";
fctns[15].src[4] = " getMean(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var avgVal = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avgVal += list[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avgVal = avgVal / list.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return avgVal;<br>}<br>";
fctns[15].title[4] = "Descriptive Statistics -  getMean";
fctns[15].src[5] = " getMode(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = sort(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var counts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[0] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1] = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < temp.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (counts[0].indexOf(temp[i]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = counts[0].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[0][loc] = temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1][loc] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = counts[0].indexOf(temp[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1][loc] ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var modes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < counts[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || counts[1][i] >= counts[1][maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modes[modes.length] = counts[0][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return modes;<br>}<br>";
fctns[15].title[5] = "Descriptive Statistics -  getMode";
fctns[15].src[6] = " getMedian(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = sort(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return temp[Math.floor(temp.length/2)];<br>}<br>";
fctns[15].title[6] = "Descriptive Statistics -  getMedian";
fctns[15].src[7] = " getStdDev(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dev = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mean = getMean(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev += (list[i] - mean)*(list[i] - mean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev = dev / list.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev = Math.sqrt(dev);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dev;<br>}<br>";
fctns[15].title[7] = "Descriptive Statistics -  getStdDev";
fctns[15].src[8] = " getVarnce(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dev = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mean = getMean(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev += (list[i] - mean)*(list[i] - mean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dev = dev / list.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(dev);<br>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>";
fctns[15].title[8] = "Descriptive Statistics -  getVarnce";
fctns[15].src[9] = " plotHist1(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = sort(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var counts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[0] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < temp.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (counts[0].indexOf(temp[i]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = counts[0].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[0][loc] = temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1][loc] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = counts[0].indexOf(temp[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1][loc] ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var barWidth = Math.floor(c.width / (counts[0].length + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var unitHght = Math.floor(c.height / (getMax(counts[1]) + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < counts[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'filling ' + eval(i*barWidth) + ' to ' + eval((i+1)*barWidth) + ' with height '  + counts[1][i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#0033FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(i*barWidth + barWidth/2 + i, c.height - unitHght * counts[1][i] - unitHght, barWidth, unitHght * counts[1][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(counts[0][i], i*barWidth + barWidth + i - 2, c.height - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br>// 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11 <br>//-5, -4, -3, -2, -1, -0,  0,  1,  2,  3,  4,  5<br>// 5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6<br><br>// I want the point 10 on the x scale to correspond to the minimum in the set of values<br>// I want the point 590 on the x scale to correspond to the maximum in the set of values<br>// So point 11 should be min + 1 / (max - min)<br><br>";
fctns[15].title[9] = "Descriptive Statistics -  plotHist1";
fctns[15].src[10] = " plotBoxWhis(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = getMin(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var max = getMax(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var avg = getMean(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var quart1 = (max - min) / 4 + min;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var quart3 = 3*(max - min) / 4 + min;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var scale = (c.width - 20)/ (101);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var offset = 10 - -50*scale;<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(min*scale + offset, c.height / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(min*scale + offset, c.height / 2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(min*scale + offset, c.height / 2 - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(quart1*scale + offset, c.height / 2 - 10);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(quart1*scale + offset, c.height/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(quart1*scale + offset, c.height/2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(quart1*scale + offset, c.height/2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(quart3*scale + offset, c.height/2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(quart3*scale + offset, c.height/2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(quart3*scale + offset, c.height/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(quart3*scale + offset, c.height/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(quart1*scale + offset, c.height/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(avg*scale + offset, c.height / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(avg*scale + offset, c.height / 2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(max*scale + offset, c.height / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(max*scale + offset, c.height / 2 - 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(max*scale + offset, c.height / 2 - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(quart3*scale + offset, c.height / 2 - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(min, min*scale + offset, c.height / 2 + 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(quart1, quart1*scale + offset, c.height / 2 + 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(avg.toFixed(4), avg*scale + offset, c.height / 2 + 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(quart3, quart3*scale + offset, c.height / 2 + 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(max, max*scale + offset, c.height / 2 + 20);<br>}<br>";
fctns[15].title[10] = "Descriptive Statistics -  plotBoxWhis";
fctns[15].src[11] = " plotHist2(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = sort(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var counts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[0] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < temp.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (counts[0].indexOf(temp[i]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = counts[0].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[0][loc] = temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1][loc] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = counts[0].indexOf(temp[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[1][loc] ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var barWidth = Math.floor(c.width / (counts[0].length + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var unitHght = Math.floor(c.height / (getMax(counts[1]) + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = Math.floor(Math.random()*16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clr[j] == 10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 11)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 12)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 13)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 14)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'E'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 15)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'F'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < counts[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#' + clr[0] + clr[1] + clr[2] + clr[3] + clr[4] + clr[5];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(i*barWidth + barWidth/2 + i, c.height - unitHght * counts[1][i] - unitHght, barWidth, unitHght * counts[1][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(counts[0][i], i*barWidth + barWidth + i - 2, c.height - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[15].title[11] = "Descriptive Statistics -  plotHist2";
fctns[15].src[12] = " sort(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[i] = list[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp[i] < temp[j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp2 = temp[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[i] = temp[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[j] = temp2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return temp;<br>}<br>";
fctns[15].title[12] = "Descriptive Statistics -  sort";
fctns[15].src[13] = " plotStemLeaf(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var plot = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot.left = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot.right = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '14px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var out = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list = sort(list);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.floor(list[i] / 10) >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (plot.left.indexOf(Math.floor(list[i] / 10)) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot.left[plot.left.length] = Math.floor(list[i] / 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = plot.left.length-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (Math.floor(list[i]) < 0 && Math.floor(list[i]) > -10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (plot.left.indexOf('-0') == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot.left[plot.left.length] = '-0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = plot.left.length-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (plot.left.indexOf(Math.ceil(list[i] / 10)) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot.left[plot.left.length] = Math.ceil(list[i] / 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = plot.left.length-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Now we're sure that the left index is in the left array of the plot object. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!Array.isArray(plot.right[loc]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot.right[loc] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot.right[loc][0] = Math.floor(list[i] % 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = plot.right[loc].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plot.right[loc][temp] = Math.floor(list[i] % 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vgap = c.height - 16 * plot.left.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < plot.left.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(plot.left[i] + '|' + plot.right[i], 20, vgap/2 + 18*i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[15].title[13] = "Descriptive Statistics -  plotStemLeaf";
fctns[15].src[14] = " process()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cmd = parseInt(document.getElementById('doWhat').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var out = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (cmd)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The minimum of a list is the value that is less than all other points in that list. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The minimum of ' + list + ' is ' + getMin(list) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The maximum of a list is the value that is greater than all other points in that list. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The maximum of ' + list + ' is ' + getMax(list) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The arithmetic mean of ' + list + ' is ' + getMean(list).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The arithmetic mean of  a set of n numbers {a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>} is the sum of the numbers divided by n: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += '<table><tr><td>a<sub>1</sub> + a<sub>2</sub> + ... + a<sub>n</sub></td></tr><tr><td><hr></td></tr><tr><td>n</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The mode of a list of numbers s the number that occurs most frequently in that list. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The mode of ' + list + ' is ' + getMode(list) + '<br>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 4:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The median of a list of n numbers is the number such that just as many numbers are greater than it as are less than it. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The median of ' + list + ' is ' + getMedian(list)  + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 5:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The standard deviation is used to measure the amount of variation in a list, particularly how close the values are to the mean of that list. It is the square root of the variance of that list. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The standard deviation of ' + list + ' is ' + getStdDev(list).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 6:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The variance is a measure of how widespread a list are likely to be. It is given by fhe following formula: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += '<table><tr><td>(a<sub>1</sub> - <img src='http://www.learninglover.com/chars/mu.gif'>)<sup>2</sup> + (a<sub>2</sub> - <img src='http://www.learninglover.com/chars/mu.gif'>)<sup>2</sup> + ... + (a<sub>n</sub> - <img src='http://www.learninglover.com/chars/mu.gif'>)<sup>2</sup></td></tr><tr><td><hr></td></tr><tr><td>n</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += 'where <img src='http://www.learninglover.com/chars/mu.gif'> represents the mean. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The variance of ' + list + ' is ' + getVarnce(list).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 7:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'A histogram is a bar diagram wherethe horizontal axis shows different categories of values, and the height of each bar is related to the<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += 'number of observations in the corresponding category. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plotHist2(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 8:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'A box-and-whisker plot for a list of numbers consists of a rectangle whose left edge is at the first quartile of the data and whose right edge is at the third quartile, <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += 'with a left whisker sticking out to the smallest value, and a right whisker sticking out to the largest value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plotBoxWhis(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 9:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The coefficient of variation of a set of numbers is equal to the standard deviation for those numbers divided by the mean. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += 'It  indicates how big the dispersion is in comparison to the mean';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The coefficient of variation of ' + list + ' is ' + getCoeffVaf(list).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 10:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'A stem and leaf plot illustrates the distribution of a group of numbers by arranging the numbers in categories based on the first digit. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plotStemLeaf(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 11: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The Kurtosis measures how 'peaked' a distribution is.'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The Kurtosis of ' + list + ' is ' + getKurt(list).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 12:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = 'The Skewness measures how symmetric a distrubtion is.'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = 'The Skewness of ' + list + ' is ' + getSkew(list).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = out + '<br>' + ans + '<br>';<br>}<br>";
fctns[15].title[14] = "Descriptive Statistics -  process";
fctns[15].src[15] = " getCoeffVaf(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dev = getStdDev(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mean = getMean(list);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var coeff = dev / mean;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return coeff;<br>}<br>";
fctns[15].title[15] = "Descriptive Statistics -  getCoeffVaf";
fctns[15].src[16] = " getKurt(list)<br>{<br>    var mean = getMean(list);    <br>    var dev = getStdDev(list);<br>    <br>    var sum = 0;<br>    for (var i = 0; i < list.length; i++)<br>    {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = (list[i] - mean) / dev;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += Math.pow(temp, 4);<br>    }<br>    <br>    sum /= list.length;<br>    <br>    return sum;<br>}<br>";
fctns[15].title[16] = "Descriptive Statistics -  getKurt";
fctns[15].src[17] = " getSkew(list)<br>{<br>    var mean = getMean(list);    <br>    var dev = getStdDev(list);<br>    <br>    var sum = 0;<br>    for (var i = 0; i < list.length; i++)<br>    {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = (list[i] - mean) / dev;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += Math.pow(temp, 3);<br>    }<br>    <br>    sum /= list.length;<br>    <br>    return sum;<br>}<br></scr" + "ipt>";
fctns[15].title[17] = "Descriptive Statistics -  getSkew";
fctns[15].loc = "http://learninglover.com/examples.php?id=85";
fctns[16] = new Object();
fctns[16].src = new Array();
fctns[16].title = new Array();
fctns[16].src[0] = "<script id='sc1' type='text/javascript'>";
fctns[16].title[0] = "Dijkstra's Algorithm - styleTags";
fctns[16].src[1] = " Dijkstra(A, n, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;M_VAL = 50000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T[T.length] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[i] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[i] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[1] = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (k < n)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < T.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == T[k] || j == T[k])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (count)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bb = '<b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bbe = '</b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bb = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bbe = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (B[i][j] == M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + bb + '-' + bbe + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + bb + B[i][j] + bbe + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = M_VAL;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < T.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (w[T[i]] + B[T[i]][j] < m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = w[T[i]] + B[T[i]][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = T[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (m == M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T[T.length] = v;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = u;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = v;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w[v] = w[u] + B[u][v];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p[v] = u;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < T.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < T.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[T[i]][T[j]] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'w = ' + disp(w) + '<BR>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'e = (' + u + ', ' + v + ')<br>----------<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return E;<br>}";
fctns[16].title[1] = "Dijkstra's Algorithm -  Dijkstra";
fctns[16].src[2] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br>";
fctns[16].title[2] = "Dijkstra's Algorithm -  EucDist";
fctns[16].src[3] = " disp(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>node </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr><td>path length</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + set[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[16].title[3] = "Dijkstra's Algorithm -  disp";
fctns[16].src[4] = " used(list, num1, num2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < list.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(list[i][0], list[i][1], num1, num2) < 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[16].title[4] = "Dijkstra's Algorithm -  used";
fctns[16].src[5] = " drawGraph(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2 * Math.PI * i) / A.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = 255 * Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = 255 * Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[i][0], points[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[j][0], points[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[16].title[5] = "Dijkstra's Algorithm -  drawGraph";
fctns[16].src[6] = " drawNodes(A, points)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[16].title[6] = "Dijkstra's Algorithm -  drawNodes";
fctns[16].src[7] = " drawLines(A, points)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[i][0], points[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[j][0], points[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[16].title[7] = "Dijkstra's Algorithm -  drawLines";
fctns[16].src[8] = " drawAns(A, points, ans, start)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawNodes(A, points);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((start + 2) >= ans.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start += 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A, points, ans, start);drawNodes(A, points);};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = setTimeout(f, 2000);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;<br>}<br></scr" + "ipt>";
fctns[16].title[8] = "Dijkstra's Algorithm -  drawAns";
fctns[16].loc = "http://learninglover.com/examples.php?id=6";
fctns[17] = new Object();
fctns[17].src = new Array();
fctns[17].title = new Array();
fctns[17].src[0] = "<style type='text/css'><br>.clrd {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solidCy;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br></style><br><script type='text/javascript'>";
fctns[17].title[0] = "Discrete-time Markov Chains - styleTags";
fctns[17].src[1] = " GElim(A) <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = new Array();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var x = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xvars = A.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < xvars; i++) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= xvars; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, k, rowmax;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < xvars; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowmax = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i + 1; j < xvars; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.abs(B[j][i]) > Math.abs(B[rowmax][i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowmax = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rowmax != i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = i; k < xvars+1; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = B[i][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][k] = B[rowmax][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[rowmax][k] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.abs(B[i][i]) < 0.00001)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Matrix is singular, so we cannot perform Gaussian Elimination on this problem. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom = B[i][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = i; k < xvars+1; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][k] = (B[i][k] / denom);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j1 = i+1; j1 < xvars; j1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = xvars; k >= i; k--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j1][k] -= B[i][k] * B[j1][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = xvars-1; j >= 0; j--) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = 0.0; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = j+1; k < xvars; k++) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += B[j][k] * x[k]; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[j] = (B[j][xvars]-temp) / B[j][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return x;<br>}<br>";
fctns[17].title[1] = "Discrete-time Markov Chains -  GElim";
fctns[17].src[2] = " transpose(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ATrans = new Array(A[0].length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ATrans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ATrans[i] = new Array(A.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < ATrans[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ATrans[i][j] = A[j][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ATrans;<br>}<br>";
fctns[17].title[2] = "Discrete-time Markov Chains -  transpose";
fctns[17].src[3] = " indexOf(arr, elt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var temp in arr)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[temp] == elt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc == arr.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return loc;<br>}<br>";
fctns[17].title[3] = "Discrete-time Markov Chains -  indexOf";
fctns[17].src[4] = " randInst()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var trans = getTransMtrx();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var start = Math.floor(Math.random() * starts.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = Math.floor(Math.random() * 15) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var order = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order[0] = start;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < len; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = Math.random();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < trans[order[i-1]].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob >= sum && prob < (sum + trans[order[i-1]][j]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order[i] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += trans[order[i-1]][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var end = Math.floor (Math.random() * ends.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order[len] = end;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table><tr><td style='background-color:#C0C0C0; width:1.2em'></td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < order.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='clrd' style='background-color:' + clrs [order[i]] + ''></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td style='background-color:#000000; width:1.2em'></td></tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output2').innerHTML += text;<br>}<br>    <br>";
fctns[17].title[4] = "Discrete-time Markov Chains -  randInst";
fctns[17].src[5] = " markov()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var trans = getTransMtrx();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numClrs; i++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[i][i] -= 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans = transpose(trans);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numClrs; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[i][numClrs] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = trans.length-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[loc] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numClrs; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[loc][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[loc][numClrs] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numClrs; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= numClrs; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < numClrs-1) if (trans[i][j] != 0) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += trans[i][j].toFixed(4) + 'x<sub>' + j + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (j == numClrs-1) if (trans[i][j] != 0) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += trans[i][j].toFixed(4) + 'x<sub>' + j + '</sub> = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (j == numClrs)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += trans[i][j].toFixed(4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>'; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output2').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('button4').style.visibility = 'visible';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return trans;<br>}<br>";
fctns[17].title[5] = "Discrete-time Markov Chains -  markov";
fctns[17].src[6] = " randomColor()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var letters = '0123456789ABCDEF'.split('');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var color = '#';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 6; i++ ) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color += letters[Math.floor(Math.random() * letters.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return color;<br>}<br>";
fctns[17].title[6] = "Discrete-time Markov Chains -  randomColor";
fctns[17].src[7] = " colorDist(clrs, newClr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var num1 = newClr.split('');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minDist = Number.MIN_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var norm1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < clrs.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var num2 = clrs[j].split('');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var norm2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < num1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num1[i] = parseInt(num1[i], 16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num2[i] = parseInt(num2[i], 16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += (num1[i] * num2[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm1 += (num1[i] * num1[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm2 += (num2[i] * num2[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm1 = Math.sqrt(norm1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm2 = Math.sqrt(norm2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = ans / (norm1 * norm2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output2').innerHTML += '<table><tr><td style='background-color:' + newClr + '; width: 1.2em; height: 1.2em;'></td><td style='background-color:' + clrs[j] + '; width: 1.2em; height: 1.2em;'></td><td>' + ans + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans > minDist)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minDist = ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return minDist;<br>}<br>";
fctns[17].title[7] = "Discrete-time Markov Chains -  colorDist";
fctns[17].src[8] = " buildProfile()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.floor(Math.random()*15) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numClms = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numClrs = Math.floor(Math.random()*10) + 5;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var first = randomColor();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[0] = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[1] = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[2] = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[3] = '#00AAFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[4] = '#005555';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[5] = '#AA00AA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[6] = '#00AAAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[7] = '#AAAA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[8] = '#AA00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[9] = '#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[10] = '#FFAA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[11] = '#FF00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[12] = '#AAAAFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[13] = '#D2691E';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[14] = '#FFAAAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[15] = '#4682BD';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[16] = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[17] = '#FFFFAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[18] = '#0000AA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[19] = '#00AA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[20] = '#AA0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[21] = '#F0F8FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[22] = '#F0F8FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[23] = '#FAEBD7';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs[24] = '#DEB887';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrs.length = numClrs;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numRows; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>(' + i + ')</td><td style='background-color:#C0C0C0; width:1.2em'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numClms[i] = Math.floor(Math.random()*15) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numClms[i]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='clrd' id='cell' + i + '-' + j + ''  style='background-color:' + clrs[Math.floor(Math.random()*clrs.length)] + ''></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td style='background-color:#000000; width:1.2em'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This person used ' + clrs.length + ' colors <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[17].title[8] = "Discrete-time Markov Chains -  buildProfile";
fctns[17].src[9] = " toColorString(rgbCode)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clrStr = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rgbCode.startsWith(')'))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rgbCode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (rgbCode.startsWith('rgb')) if (rgbCode.endsWith(')'))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrStr = rgbCode.substring(4, rgbCode.length-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (rgbCode.startsWith('none repeat scroll 0% 0% rgb'))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrStr = rgbCode.substring(29, rgbCode.length-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (rgbCode.startsWith('rgb')) if (rgbCode.endsWith('none repeat scroll 0% 0%'))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrStr = rgbCode.substring(4, rgbCode.length-26);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clrStr = clrStr.split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 3; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr1 = Math.floor(clrStr[i] / 16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr2 = clrStr[i] - clr1*16;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clr1 == 10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i] = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr1 == 11)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i] = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr1 == 12)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i] = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr1 == 13)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i] = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr1 == 14)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i] = 'E'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr1 == 15)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i] = 'F'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i] = clr1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clr2 == 10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i + 1] = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr2 == 11)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i + 1] = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr2 == 12)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i + 1] = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr2 == 13)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i + 1] = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr2 == 14)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i + 1] = 'E'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr2 == 15)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i + 1] = 'F'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2*i + 1] = clr2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return '#' + ans[0] + ans[1] + ans[2] + ans[3] + ans[4] + ans[5];<br>}<br>";
fctns[17].title[9] = "Discrete-time Markov Chains -  toColorString";
fctns[17].src[10] = " getTransMtrx()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var trans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var counts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;starts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ends = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numClrs; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;starts[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ends[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numClrs; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numRows; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;starts[clrs.indexOf(toColorString(document.getElementById('cell' + i + '-' + 0).style.backgroundColor))]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numClms[i]-1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = clrs.indexOf(toColorString(document.getElementById('cell' + i + '-' + j).style.backgroundColor));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = clrs.indexOf(toColorString(document.getElementById('cell' + i + '-' + (j+1)).style.backgroundColor));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[loc1][loc2]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[loc1]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ends[clrs.indexOf(toColorString(document.getElementById('cell' + i + '-' + (numClms[i]-1)).style.backgroundColor))]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numClrs; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;starts[i] /= numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numClrs; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans[i][j] /= counts[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ends[i] /= numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return trans;<br>}<br>";
fctns[17].title[10] = "Discrete-time Markov Chains -  getTransMtrx";
fctns[17].src[11] = " disp(x)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>'; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numClrs; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>x<sub>' + j + '</sub> = ' + x[j].toFixed(4) + '</td><td style='background-color:' + clrs[j] + '; width: 1.2em; height: 1.2em;'></td></tr>'; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output2').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[17].title[11] = "Discrete-time Markov Chains -  disp";
fctns[17].src[12] = " drawGraph()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width,  c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var trans = getTransMtrx();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xVals = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yVals = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numClrs + 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2*Math.PI*i) / (numClrs + 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xVals[i] = 200*Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yVals[i] = 200*Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numClrs + 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numClrs + 2; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < numClrs) if (j < numClrs) if (trans[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (i == j) if (i < numClrs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slope = (275 - yVals[i])/(275 - xVals[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ang = Math.atan(slope);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ptx, pty;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (xVals[i] < 275) if (yVals[i] == 275)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptx = xVals[i] - 20;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pty = 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[i] > 275) if (yVals[i] == 275)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptx = xVals[i] + 20;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pty = 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[i] == 275) if (yVals[i] > 275)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptx = 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pty = yVals[i] + 20;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[i] == 275) if (yVals[i] < 275)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptx = 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pty = yVals[i] - 20;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (slope < 0) if (yVals[i] < 275)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptx = 20*Math.cos(ang) + xVals[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pty = 20*Math.sin(ang) + yVals[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (slope > 0) if (yVals[i] < 275)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptx = -20*Math.cos(ang) + xVals[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pty = -20*Math.sin(ang) + yVals[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (slope < 0) if (yVals[i] > 275)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptx = -20*Math.cos(ang) + xVals[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pty = -20*Math.sin(ang) + yVals[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (slope > 0) if (yVals[i] > 275)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptx = 20*Math.cos(ang) + xVals[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pty = 20*Math.sin(ang) + yVals[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(ptx, pty, 25, 0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (!(i >= numClrs || j >= numClrs || trans[i][j] == 0) || !(i != numClrs || j >= numClrs || starts[j] <= 0) || !(i >= numClrs || j != numClrs + 1 || ends[i] <= 0))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slope1 = (yVals[j] - yVals[i])/(xVals[j] - xVals[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slope2 = -1/slope1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (slope1 == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slope2 = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ang2 = Math.atan(slope2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ang1 = Math.atan(slope1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var x5 = -1, y5 = -1, x6 = -1, y6 = -1, x7 = -1, y7 = -1, x8 = -1, y8 = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (xVals[j] > xVals[i]) if (yVals[j] < yVals[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x7 = -20*Math.cos(ang1) + xVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y7 = -20*Math.sin(ang1) + yVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x8 = 10*Math.cos(ang2) + x7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y8 = 10*Math.sin(ang2) + y7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[j] < xVals[i]) if (yVals[j] < yVals[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x7 = 20*Math.cos(ang1) + xVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y7 = 20*Math.sin(ang1) + yVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x8 = 10*Math.cos(ang2) + x7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y8 = 10*Math.sin(ang2) + y7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[j] > xVals[i]) if (yVals[j] > yVals[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x7 = -20*Math.cos(ang1) + xVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y7 = -20*Math.sin(ang1) + yVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x8 = 10*Math.cos(ang2) + x7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y8 = 10*Math.sin(ang2) + y7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[j] < xVals[i]) if (yVals[j] > yVals[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x7 = 20*Math.cos(ang1) + xVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y7 = 20*Math.sin(ang1) + yVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x8 = 10*Math.cos(ang2) + x7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y8 = 10*Math.sin(ang2) + y7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[j] > xVals[i]) if (yVals[j] == yVals[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x7 = -20*Math.cos(ang1) + xVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y7 = 0*Math.sin(ang1) + yVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x8 = 0*Math.cos(ang2) + x7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y8 = 10*Math.sin(ang2) + y7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[j] < xVals[i]) if (yVals[j] == yVals[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x7 = 20*Math.cos(ang1) + xVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y7 = 0*Math.sin(ang1) + yVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x8 = 0*Math.cos(ang2) + x7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y8 = 10*Math.sin(ang2) + y7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[j] == xVals[i]) if (yVals[j] > yVals[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x7 = 0*Math.cos(ang1) + xVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y7 = 20*Math.sin(ang1) + yVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x8 = 10*Math.cos(ang2) + x7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y8 = 0*Math.sin(ang2) + y7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (xVals[j] == xVals[i]) if (yVals[j] < yVals[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x7 = 0*Math.cos(ang1) + xVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y7 = -20*Math.sin(ang1) + yVals[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x8 = 10*Math.cos(ang2) + x7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y8 = 0*Math.sin(ang2) + y7;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < numClrs) if (j < numClrs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(xVals[i], yVals[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(xVals[j], yVals[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(xVals[j], yVals[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(xVals[i], yVals[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (i == numClrs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(xVals[i], yVals[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(xVals[j], yVals[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(xVals[j], yVals[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(xVals[i], yVals[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (j == numClrs + 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(xVals[i], yVals[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(xVals[j], yVals[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(xVals[j], yVals[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(xVals[i], yVals[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < numClrs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = clrs[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (i == numClrs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#C0C0C0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (j == numClrs + 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(x7, y7);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(x8, y8);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(xVals[j], yVals[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numClrs + 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < numClrs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(xVals[i], yVals[i], 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = clrs[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(xVals[i], yVals[i], 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (i == numClrs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(xVals[i], yVals[i], 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#C0C0C0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(xVals[i], yVals[i], 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (i == numClrs + 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(xVals[i], yVals[i], 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(xVals[i], yVals[i], 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[17].title[12] = "Discrete-time Markov Chains -  drawGraph";
fctns[17].loc = "http://learninglover.com/examples.php?id=98";
fctns[18] = new Object();
fctns[18].src = new Array();
fctns[18].title = new Array();
fctns[18].src[0] = "<style type='text/css'><br>#table {<br>  border-collapse: collapse;<br>  border-spacing: 0;<br>}<br><br>.c {<br>    width: 1.0em;<br>    height: 1.0em;<br>}<br><br>.nmv {<br>    color:#FF0000;<br>}<br><br>.omv {<br>    color:#000000;<br>}<br><br></style><br><script type='text/javascript'>";
fctns[18].title[0] = "Dots and Boxes - styleTags";
fctns[18].src[1] = " buildTable(rows, clms)<br>{<br>    var table = '<table cellpadding='0' cellspacing='0' border='0'>';<br>    rem = new Array(rows);<br>    own = new Array(rows-1);<br>    last = '';<br>    <br>    for (var yin = 0; yin < 2*rows - 1; yin++)<br>    {<br>        rem[yin] = new Array(clms);<br>        if (yin % 2 == 1)<br>        {<br>            own[Math.floor(yin / 2)] = new Array(clms-1);<br>        }<br>        table += '<tr>';<br>        for (var yang = 0; yang < 2*clms - 1; yang++)<br>        {<br>            rem[yin][yang] = 1;<br>            if (yin % 2 == 0 && yang % 2 == 0)<br>            {<br>                //This is a dot in the table. <br>                table += '<td class='c' name='tdc' + yin + '_' + yang + '' id='tdc' + yin + '_' + yang + ''><center>\u2022</center></td>';<br>            }<br>            else if (yin % 2 == 0 && yang % 2 == 1)<br>            {<br>                //This is an on_click_make_horizontal cell. <br>                //and an on_mouse_over_make_grey_horizontal cell. <br>                table += '<td class='c' name='tdc' + yin + '_' + yang + '' id='tdc' + yin + '_' + yang + '' onclick=makeHoriz('' + yin + '_' + yang + '','P')><p name='c' + yin + '_' + yang + '' id='c' + yin + '_' + yang + ''></p></td>';<br>            }<br>            else if (yin % 2 == 1 && yang % 2 == 0)<br>            {<br>                //This is an on_click_make_vertical cell. <br>                //and an on_mouse_over_make_grey_vertical cell. <br>                table += '<td class='c' name='tdc' + yin + '_' + yang + '' id='tdc' + yin + '_' + yang + '' onclick=makeVert('' + yin + '_' + yang + '','P')><p name='c' + yin + '_' + yang + '' id='c' + yin + '_' + yang + ''></p></td>';<br>            }<br>            else if (yin % 2 == 1 && yang % 2 == 1)<br>            {<br>                //This is a cell that will change colors when all 4 sides are clicked. <br>                table += '<td class='c' name='tdc' + yin + '_' + yang + '' id='tdc' + yin + '_' + yang + ''><center></center></td>';<br>            }<br>//            prob += '<td class='c' name='tdc' + yin + '_' + yang + '' id='tdc' + yin + '_' + yang + '' onclick=changecolor('tdc' + yin + '_' + yang + '')><p name='c' + yin + '_' + yang + '' id='c' + yin + '_' + yang + ''></p></td>';<br>        }<br>        table += '</tr>';<br>    }<br>    table += '</table>';<br>    <br>    document.getElementById('table').innerHTML = table;<br>}<br>";
fctns[18].title[1] = "Dots and Boxes -  buildTable";
fctns[18].src[2] = " makeHoriz(loc, user)<br>{<br>    var dtls = loc.split('_');<br>    var row = parseInt(dtls[0]);<br>    var clm = parseInt(dtls[1]);<br>    var found1 = false;<br>    var found2 = false;<br><br>    if (row % 2 == 1 || clm % 2 == 0)<br>    {<br>        return;<br>    }<br><br>    if (rem[row][clm] == 0)<br>    {<br>        return;<br>    }<br>    <br>    rem[row][clm] = 0;<br>    <br>    if (last != '')<br>    {<br>        var ldtls = last.split('_');<br>        var lrow = parseInt(ldtls[0]);<br>        var lclm = parseInt(ldtls[1]);<br>        if (lrow % 2 == 1 && lclm % 2 == 0)<br>        {<br>            document.getElementById('tdc' + last).className = 'omv';<br>        }<br>        else if (lrow % 2 == 0 && lclm % 2 == 1)<br>        {<br>            document.getElementById('tdc' + last).className = 'omv';<br>        }<br>    }<br>    <br>    if (user == 'P')<br>    {<br>        document.getElementById('tdc' + loc).innerHTML = '<center>\u2014</center>';<br>    }<br>    else<br>    {<br>        document.getElementById('tdc' + loc).innerHTML = '<center>\u2014</center>';<br>        document.getElementById('tdc' + loc).className = 'nmv';<br>        last = loc;<br>    }<br>    <br>    if (eval(row+1) < rem.length)<br>    {<br>        found1 = checkRect(eval(row+1) + '_' + clm, user);<br>    }<br><br>//    dispTbl(rem);<br>    <br>    if (eval(row-1) >= 0)<br>    {<br>        found2 = checkRect(eval(row-1) + '_' + clm, user);<br>    }<br>    <br>//    dispTbl(rem);<br>    <br>    if ((!found1 && !found2 && user == 'P') || ((found1 || found2) && user == 'C'))<br>    {<br>        cpuMove();<br>    }<br>    else<br>    {<br>        checkDone();<br>    }<br>}<br>";
fctns[18].title[2] = "Dots and Boxes -  makeHoriz";
fctns[18].src[3] = " makeVert(loc, user)<br>{<br>    var dtls = loc.split('_');<br>    var row = parseInt(dtls[0]);<br>    var clm = parseInt(dtls[1]);<br>    var found1 = false;<br>    var found2 = false;<br>    <br>    if (row % 2 == 0 || clm % 2 == 1)<br>    {<br>        return;<br>    }<br><br>    if (rem[row][clm] == 0)<br>    {<br>        return;<br>    }<br>    <br>    rem[row][clm] = 0;<br><br>    document.getElementById('tdc' + loc).innerHTML = '<center>|</center>';    <br>    <br>    if (last != '')<br>    {<br>        var ldtls = last.split('_');<br>        var lrow = parseInt(ldtls[0]);<br>        var lclm = parseInt(ldtls[1]);<br>        if (lrow % 2 == 1 && lclm % 2 == 0)<br>        {<br>            document.getElementById('tdc' + last).className = 'omv';<br>        }<br>        else if (lrow % 2 == 0 && lclm % 2 == 1)<br>        {<br>            document.getElementById('tdc' + last).className = 'omv';<br>        }<br>    }<br>    <br>    <br>    if (user == 'C')<br>    {<br>        document.getElementById('tdc' + loc).className = 'nmv';<br>        last = loc;<br>    }<br>    else<br>    {<br>        document.getElementById('tdc' + loc).className = 'omv';<br>    }<br>    <br>//    dispTbl(rem);<br>    <br>    if (eval(clm+1) < rem[row].length)<br>    {<br>        found1 = checkRect(row + '_' + eval(clm+1), user);<br>    }<br>    <br>//    dispTbl(rem);<br>    <br>    if (eval(clm-1) >= 0)<br>    {<br>        found2 = checkRect(row + '_' + eval(clm-1), user);<br>    }<br>    <br>    if ((!found1 && !found2 && user == 'P') || ((found1 || found2) && user == 'C'))<br>    {<br>        cpuMove();<br>    }<br>    else<br>    {<br>        checkDone();<br>    }<br>}<br>";
fctns[18].title[3] = "Dots and Boxes -  makeVert";
fctns[18].src[4] = " dispTbl(rem)<br>{<br>    var table = '<table>';<br>    for (var yin = 0; yin < rem.length; yin++)<br>    {<br>        table += '<tr>';<br>        for (var yang = 0; yang < rem[yin].length; yang++)<br>        {<br>            table += '<td>' + rem[yin][yang] + '</td>';<br>        }<br>        table += '</tr>';<br>    }<br>    table += '</table>';<br>    <br>    document.getElementById('table').innerHTML += table;<br>}<br>";
fctns[18].title[4] = "Dots and Boxes -  dispTbl";
fctns[18].src[5] = " checkRect(loc, user)<br>{<br>    var dtls = loc.split('_');<br>    var row = parseInt(dtls[0]);<br>    var clm = parseInt(dtls[1]);<br>    var found = false;<br>        <br>    if (row % 2 == 0 || clm % 2 == 0)<br>    {<br>        return;<br>    }<br>    <br>    if (!rem[row-1][clm] && !rem[row+1][clm] && !rem[row][clm-1] && !rem[row][clm+1])<br>    {<br>        found = true;<br>        if (user == 'P')<br>        {<br>            document.getElementById('tdc' + row + '_' + clm).bgColor = '#00FF00';<br>            own[Math.floor(row/2)][Math.floor(clm/2)] = 'P';<br>        }<br>        else<br>        {<br>            document.getElementById('tdc' + row + '_' + clm).bgColor = '#FF0000';<br>            own[Math.floor(row/2)][Math.floor(clm/2)] = 'C';<br>        }<br>    }<br>    <br>    return found;<br>}<br>";
fctns[18].title[5] = "Dots and Boxes -  checkRect";
fctns[18].src[6] = " cpuMove()<br>{<br>    if (checkDone() != false)<br>    {<br>        return;<br>    }<br><br>    var poss0 = new Array();<br>    var poss1 = new Array();<br>    var poss2 = new Array();<br>    var poss3 = new Array();<br>    var poss4 = new Array();<br>    <br>    for (var yin = 0; yin < rem.length; yin ++)<br>    {<br>        for (var yang = 0; yang < rem[yin].length; yang++)<br>        {<br>            if (yin % 2 == 1 && yang % 2 == 1)<br>            {<br>                if (!rem[yin-1][yang] && !rem[yin+1][yang] && !rem[yin][yang-1] && !rem[yin][yang+1])<br>                {<br>                    poss4[poss4.length] = yin + '_' + yang;<br>                }<br>                else if (!rem[yin-1][yang] && !rem[yin+1][yang] && !rem[yin][yang-1])<br>                {<br>                    poss3[poss3.length] = yin + '_' + eval(yang+1);<br>                }<br>                else if (!rem[yin-1][yang] && !rem[yin+1][yang] && !rem[yin][yang+1])<br>                {<br>                    poss3[poss3.length] = yin + '_' + eval(yang-1);<br>                }<br>                else if (!rem[yin-1][yang] && !rem[yin][yang-1] && !rem[yin][yang+1])<br>                {<br>                    poss3[poss3.length] = eval(yin+1) + '_' + yang;<br>                }<br>                else if (!rem[yin+1][yang] && !rem[yin][yang-1] && !rem[yin][yang+1])<br>                {<br>                    poss3[poss3.length] = eval(yin-1) + '_' + yang;<br>                }<br>                else if (!rem[yin-1][yang] && !rem[yin+1][yang])<br>                {<br>                    poss2[poss2.length] = yin + '_' + eval(yang-1);<br>                    poss2[poss2.length] = yin + '_' + eval(yang+1);<br>                }<br>                else if (!rem[yin-1][yang] && !rem[yin][yang-1])<br>                {<br>                    poss2[poss2.length] = eval(yin+1) + '_' + yang;<br>                    poss2[poss2.length] = yin + '_' + eval(yang+1);<br>                }<br>                else if (!rem[yin-1][yang] && !rem[yin][yang+1])<br>                {<br>                    poss2[poss2.length] = eval(yin+1) + '_' + yang;<br>                    poss2[poss2.length] = yin + '_' + eval(yang-1);<br>                }<br>                else if (!rem[yin+1][yang] && !rem[yin][yang-1])<br>                {<br>                    poss2[poss2.length] = eval(yin-1) + '_' + yang;<br>                    poss2[poss2.length] = yin + '_' + eval(yang+1);<br>                }<br>                else if (!rem[yin+1][yang] && !rem[yin][yang+1])<br>                {<br>                    poss2[poss2.length] = eval(yin-1) + '_' + yang;<br>                    poss2[poss2.length] = yin + '_' + eval(yang-1);<br>                }<br>                else if (!rem[yin][yang-1] && !rem[yin][yang+1])<br>                {<br>                    poss2[poss2.length] = eval(yin+1) + '_' + yang;<br>                    poss2[poss2.length] = eval(yin-1) + '_' + yang;<br>                }<br>                else if (!rem[yin-1][yang])<br>                {<br>                    poss1[poss1.length] = eval(yin+1) + '_' + yang;<br>                    poss1[poss1.length] = yin + '_' + eval(yang-1);<br>                    poss1[poss1.length] = yin + '_' + eval(yang+1);<br>                }<br>                else if (!rem[yin+1][yang])<br>                {<br>                    poss1[poss1.length] = eval(yin-1) + '_' + yang;<br>                    poss1[poss1.length] = yin + '_' + eval(yang-1);<br>                    poss1[poss1.length] = yin + '_' + eval(yang+1);<br>                }<br>                else if (!rem[yin][yang-1])<br>                {<br>                    poss1[poss1.length] = eval(yin+1) + '_' + yang;<br>                    poss1[poss1.length] = eval(yin-1) + '_' + yang;<br>                    poss1[poss1.length] = yin + '_' + eval(yang+1);<br>                }<br>                else if (!rem[yin][yang+1])<br>                {<br>                    poss1[poss1.length] = eval(yin+1) + '_' + yang;<br>                    poss1[poss1.length] = eval(yin-1) + '_' + yang;<br>                    poss1[poss1.length] = yin + '_' + eval(yang-1);<br>                }<br>                else<br>                {<br>                    poss0[poss0.length] = eval(yin+1) + '_' + yang;<br>                    poss0[poss0.length] = eval(yin-1) + '_' + yang;<br>                    poss0[poss0.length] = yin + '_' + eval(yang-1);<br>                    poss0[poss0.length] = yin + '_' + eval(yang+1);<br>                }<br>            }<br>        }<br>    }<br>    <br>    var found = false;<br>    if (poss3.length > 0)<br>    {<br>        var row = parseInt(poss3[0].split('_')[0]);<br>        var clm = parseInt(poss3[0].split('_')[1]);<br>        <br>        if (row % 2 == 0 && clm % 2 == 1)<br>        {<br>            makeHoriz(poss3[0], 'C');<br>            return;<br>        }<br>        else<br>        {<br>            makeVert(poss3[0], 'C');<br>            return;<br>        }<br>    }<br>    <br>    if (poss0.length > 0 || poss1.length > 0)<br>    {<br>        var loc;<br>        var redo = false;<br>        do<br>        {<br>            var inP1 = false;<br>            redo = false;<br>            loc = Math.floor(Math.random()*(poss0.length + poss1.length));<br>            if (loc >= poss0.length)<br>            {<br>//                document.getElementById('table').innerHTML += 'loc = ' + loc + ', poss0 = ' + poss0 + '<br>poss1 = ' + poss1 + '<br>';<br>                loc = loc - poss0.length<br>//                document.getElementById('table').innerHTML += 'loc = ' + loc + '<br>';<br>                inP1 = true;<br>            }<br>            else<br>            {<br>                inP1 = false;<br>            }<br>            <br>            if ((!inP1 && poss2.indexOf(poss0[loc]) != -1) || (inP1 && poss2.indexOf(poss1[loc]) != -1))<br>            {<br>                redo = true;<br>                if (inP1)<br>                {<br>                    poss1[loc] = poss1[poss1.length-1];<br>                    poss1.length--;<br>                }<br>                else<br>                {<br>                    poss0[loc] = poss0[poss0.length-1];<br>                    poss0.length--;<br>                }<br>            }<br>        }<br>        while (redo);<br>        <br>        if (!inP1)<br>        {<br>//            document.getElementById('table').innerHTML += 'loc = ' + loc + ', p0 = ' + poss0 + '<br>';;<br>            var row = parseInt(poss0[loc].split('_')[0]);<br>            var clm = parseInt(poss0[loc].split('_')[1]);<br>        <br>            if (row % 2 == 0 && clm % 2 == 1)<br>            {<br>                makeHoriz(poss0[loc], 'C');<br>                return;<br>            }<br>            else<br>            {<br>                makeVert(poss0[loc], 'C');<br>                return;<br>            }<br>        }<br>        else if (poss1.length > 0)<br>        {<br>//            document.getElementById('table').innerHTML += 'loc = ' + loc + ', p1 = ' + poss1 + '<br>';;<br>            var row = parseInt(poss1[loc].split('_')[0]);<br>            var clm = parseInt(poss1[loc].split('_')[1]);<br>        <br>            if (row % 2 == 0 && clm % 2 == 1)<br>            {<br>                makeHoriz(poss1[loc], 'C');<br>                return;<br>            }<br>            else<br>            {<br>                makeVert(poss1[loc], 'C');<br>                return;<br>            }<br>        }<br>    }<br>    <br>    if (poss2.length > 0)<br>    {<br>        var loc = Math.floor(Math.random()*poss2.length);<br>        var row = parseInt(poss2[loc].split('_')[0]);<br>        var clm = parseInt(poss2[loc].split('_')[1]);<br>        <br>        if (row % 2 == 0 && clm % 2 == 1)<br>        {<br>            makeHoriz(poss2[loc], 'C');<br>            return;<br>        }<br>        else<br>        {<br>            makeVert(poss2[loc], 'C');<br>            return;<br>        }<br>    }<br>}<br>";
fctns[18].title[6] = "Dots and Boxes -  cpuMove";
fctns[18].src[7] = " checkDone()<br>{<br>    var poss4 = new Array();<br>    <br>    for (var yin = 0; yin < rem.length; yin ++)<br>    {<br>        for (var yang = 0; yang < rem[yin].length; yang++)<br>        {<br>            if (yin % 2 == 1 && yang % 2 == 1)<br>            {<br>                if (!rem[yin-1][yang] && !rem[yin+1][yang] && !rem[yin][yang-1] && !rem[yin][yang+1])<br>                {<br>                    poss4[poss4.length] = yin + '_' + yang;<br>                }<br>            }<br>        }<br>    }<br>    <br>    if (poss4.length == (rows - 1) * (clms - 1))<br>    {<br>        var cCnt = 0;<br>        var pCnt = 0;<br>        for (var yin = 0; yin < own.length; yin++)<br>        {<br>            for (var yang = 0; yang < own[yin].length; yang++)<br>            {<br>                if (own[yin][yang] == 'P')<br>                {<br>                    pCnt++;<br>                }<br>                else<br>                {<br>                    cCnt++;<br>                }<br>            }<br>        }<br>        <br>        if (pCnt > cCnt)<br>        {<br>            document.getElementById('table').innerHTML += '<h3>You Win!!!!!</h3>';<br>            return 'P';<br>        }<br>        else <br>        {<br>            document.getElementById('table').innerHTML += '<h3>Sorry, You Lose!!!!!</h3>';<br>            return 'C';<br>        }<br>    }<br>    <br>    return false;<br>}<br></scr" + "ipt>";
fctns[18].title[7] = "Dots and Boxes -  checkDone";
fctns[18].loc = "http://learninglover.com/examples.php?id=69";
fctns[19] = new Object();
fctns[19].src = new Array();
fctns[19].title = new Array();
fctns[19].src[0] = "<style><br>td {border-style:none; text-align:center}<br>td.frac {border-bottom-style:solid; text-align:cnter}<br>td.none {border-bottom-style:none; text-align:center}<br></style><br><script type='text/javascript'>";
fctns[19].title[0] = "Fraction Arithmetic - styleTags";
fctns[19].src[1] = " sum(num1, den1, num2, den2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = num1*den2 + den1*num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = den1*den2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>The formula to add two fractions of the form </td><td class='none'><table><tr><td class='frac'> a </td></tr><tr><td class='none'> b </td></tr></table></td><td class='none'> + </td><td class='none'><table><tr><td class='frac'> c </td></tr><tr><td class='none'> d </td></tr></table></td><td class='none'> is </td><td class='none'><table><tr><td class='frac'>a*d + b*c </td></tr><tr><td class='none'> b*d </td></tr></table></td><td class='none'>, which equals </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td><td class='none'><table><tr><td class='frac'>' + num1 + '</td></tr><tr><td class='none'>' + den1 + '</td></tr></table></td><td class='none'> + </td><td class='none'><table><tr><td class='frac'>' + num2 + '</td></tr><tr><td class='none'>' + den2 + '</td></tr></table></td><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + num1 + '*' + den2 + ' + ' + den1 + '*' + num2 + '</td></tr><tr><td class='none'>' + den1 + '*' + den2 + '</td></tr></table></td><td class='none'><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[1] + '</td></tr></table></td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(ans[0], ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem0 = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1 && document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[0] + ' = <b>' + common + '</b> * ' + rem0 + ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[1] + ' = <b>' + common + '</b> * ' + rem1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>So </td><td class='none'><table><tr><td class='frac'>' + num1 + '</td></tr><tr><td class='none'>' + den1 + '</td></tr></table></td><td class='none'> + </td><td class='none'><table><tr><td class='frac'>' + num2 + '</td></tr><tr><td class='none'>' + den2 + '</td></tr></table></td><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[1] + '</td></tr></table></td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[19].title[1] = "Fraction Arithmetic -  sum";
fctns[19].src[2] = " diff(num1, den1, num2, den2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = num1*den2 - den1*num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = den1*den2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>The formula to subtract two fractions of the form </td><td class='none'><table><tr><td class='frac'> a </td></tr><tr><td class='none'> b </td></tr></table></td><td class='none'> - </td><td class='none'><table><tr><td class='frac'> c </td></tr><tr><td class='none'> d </td></tr></table></td><td class='none'> is </td><td class='none'><table><tr><td class='frac'>a*d - b*c </td></tr><tr><td class='none'> b*d </td></tr></table></td><td class='none'>, which equals </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td><td class='none'><table><tr><td class='frac'>' + num1 + '</td></tr><tr><td class='none'>' + den1 + '</td></tr></table></td><td class='none'> - </td><td class='none'><table><tr><td class='frac'>' + num2 + '</td></tr><tr><td class='none'>' + den2 + '</td></tr></table></td><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + num1 + '*' + den2 + ' - ' + den1 + '*' + num2 + '</td></tr><tr><td class='none'>' + den1 + '*' + den2 + '</td></tr></table></td><td class='none'><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[1] + '</td></tr></table></td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(ans[0], ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem0 = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1 && document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[0] + ' = <b>' + common + '</b> * ' + rem0 + ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[1] + ' = <b>' + common + '</b> * ' + rem1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>So </td><td class='none'><table><tr><td class='frac'>' + num1 + '</td></tr><tr><td class='none'>' + den1 + '</td></tr></table></td><td class='none'> - </td><td class='none'><table><tr><td class='frac'>' + num2 + '</td></tr><tr><td class='none'>' + den2 + '</td></tr></table></td><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[1] + '</td></tr></table></td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[19].title[2] = "Fraction Arithmetic -  diff";
fctns[19].src[3] = " prod(num1, den1, num2, den2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = num1*num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = den1*den2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>The formula to multiply two fractions of the form </td><td class='none'><table><tr><td class='frac'> a </td></tr><tr><td class='none'> b </td></tr></table></td><td class='none'> * </td><td class='none'><table><tr><td class='frac'> c </td></tr><tr><td class='none'> d </td></tr></table></td><td class='none'> is </td><td class='none'><table><tr><td class='frac'>a*c </td></tr><tr><td class='none'> b*d </td></tr></table></td><td class='none'>, which equals </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td><td class='none'><table><tr><td class='frac'>' + num1 + '</td></tr><tr><td class='none'>' + den1 + '</td></tr></table></td><td class='none'> * </td><td class='none'><table><tr><td class='frac'>' + num2 + '</td></tr><tr><td class='none'>' + den2 + '</td></tr></table></td><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + num1 + '*' + num2 + '</td></tr><tr><td class='none'>' + den1 + '*' + den2 + '</td></tr></table></td><td class='none'><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[1] + '</td></tr></table></td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(ans[0], ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem0 = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1 && document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[0] + ' = <b>' + common + '</b> * ' + rem0 + ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[1] + ' = <b>' + common + '</b> * ' + rem1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>So </td><td class='none'><table><tr><td class='frac'>' + num1 + '</td></tr><tr><td class='none'>' + den1 + '</td></tr></table></td><td class='none'> * </td><td class='none'><table><tr><td class='frac'>' + num2 + '</td></tr><tr><td class='none'>' + den2 + '</td></tr></table></td><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[1] + '</td></tr></table></td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[19].title[3] = "Fraction Arithmetic -  prod";
fctns[19].src[4] = " quot(num1, den1, num2, den2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = num1*den2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = num2*den1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>The formula to divide two fractions of the form </td><td class='none'><table><tr><td class='frac'> a </td></tr><tr><td class='none'> b </td></tr></table></td><td class='none'> / </td><td class='none'><table><tr><td class='frac'> c </td></tr><tr><td class='none'> d </td></tr></table></td><td class='none'> is </td><td class='none'><table><tr><td class='frac'>a*d</td></tr><tr><td class='none'>b*c</td></tr></table></td><td class='none'>, which equals </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td><td class='none'><table><tr><td class='frac'>' + num1 + '</td></tr><tr><td class='none'>' + den1 + '</td></tr></table></td><td class='none'> / </td><td class='none'><table><tr><td class='frac'>' + num2 + '</td></tr><tr><td class='none'>' + den2 + '</td></tr></table></td><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + num1 + '*' + den2 + '</td></tr><tr><td class='none'>' + den1 + '*' + num2 + '</td></tr></table></td><td class='none'><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[1] + '</td></tr></table></td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(ans[0], ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem0 = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1 && document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[0] + ' = <b>' + common + '</b> * ' + rem0 + ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[1] + ' = <b>' + common + '</b> * ' + rem1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>So </td><td class='none'><table><tr><td class='frac'>' + num1 + '</td></tr><tr><td class='none'>' + den1 + '</td></tr></table></td><td class='none'> / </td><td class='none'><table><tr><td class='frac'>' + num2 + '</td></tr><tr><td class='none'>' + den2 + '</td></tr></table></td><td class='none'> = </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[1] + '</td></tr></table></td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br><br>";
fctns[19].title[4] = "Fraction Arithmetic -  quot";
fctns[19].src[5] = " gcd(u, v)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return u;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return gcd(v, u % v);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[19].title[5] = "Fraction Arithmetic -  gcd";
fctns[19].src[6] = " clr()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>}<br>";
fctns[19].title[6] = "Fraction Arithmetic -  clr";
fctns[19].src[7] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = Math.floor(Math.random()*20)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = Math.floor(Math.random()*20)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = Math.floor(Math.random()*20)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = Math.floor(Math.random()*20)+1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[4] = Math.floor(Math.random()*4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (ans[4])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += '<table><tr><td class='none'>What is </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[2] + '</td></tr></table></td><td class='none'> + </td><td class='none'><table><tr><td class='frac'>' + ans[1] + '</td></tr><tr><td class='none'>' + ans[3] + '</td></tr></table></td><td class='none'></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += '<table><tr><td class='none'>What is </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[2] + '</td></tr></table></td><td class='none'> - </td><td class='none'><table><tr><td class='frac'>' + ans[1] + '</td></tr><tr><td class='none'>' + ans[3] + '</td></tr></table></td><td class='none'></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += '<table><tr><td class='none'>What is </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[2] + '</td></tr></table></td><td class='none'> * </td><td class='none'><table><tr><td class='frac'>' + ans[1] + '</td></tr><tr><td class='none'>' + ans[3] + '</td></tr></table></td><td class='none'></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += '<table><tr><td class='none'>What is </td><td class='none'><table><tr><td class='frac'>' + ans[0] + '</td></tr><tr><td class='none'>' + ans[2] + '</td></tr></table></td><td class='none'> / </td><td class='none'><table><tr><td class='frac'>' + ans[1] + '</td></tr><tr><td class='none'>' + ans[3] + '</td></tr></table></td><td class='none'></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br></scr" + "ipt><br>";
fctns[19].title[7] = "Fraction Arithmetic -  init";
fctns[19].loc = "http://learninglover.com/examples.php?id=31";
fctns[20] = new Object();
fctns[20].src = new Array();
fctns[20].title = new Array();
fctns[20].src[0] = "<script id='sc1' type='text/javascript'>";
fctns[20].title[0] = "Gaussian Elimination - styleTags";
fctns[20].src[1] = " GElim(A, show) <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = new Array();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var x = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xvars = A.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = ''; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < xvars; i++) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= xvars; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, k, rowmax;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '<table>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < xvars; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < xvars+1; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + B[j][k].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < xvars; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowmax = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i + 1; j < xvars; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.abs(B[j][i]) > Math.abs(B[rowmax][i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rowmax = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The remaining row with the largest first remaining value is row ' + (rowmax+1) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rowmax != i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'So we will swap rows ' + (rowmax + 1) + ' and ' + (i + 1) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rowmax != i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = i; k < xvars+1; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = B[i][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][k] = B[rowmax][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[rowmax][k] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < xvars; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < xvars+1; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + B[j][k].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.abs(B[i][i]) < 0.00001)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Matrix is singular, so we cannot perform Gaussian Elimination on this problem. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Divide row ' + (i+1) + ' by ' + B[i][i].toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom = B[i][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = i; k < xvars+1; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][k] = (B[i][k] / denom);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < xvars; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < xvars+1; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + B[j][k].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < xvars; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Multiply row ' + (i+1) + ' by ' + B[j][i].toFixed(3) + ' and subtract it from row ' + (j+1) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = xvars; k >= i; k--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][k] -= B[i][k] * B[j][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var r = 0; r < xvars; r++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var c = 0; c < xvars+1; c++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + B[r][c].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = xvars-1; j >= 0; j--) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = 0.0; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = j+1; k < xvars; k++) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += B[j][k] * x[k]; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x[j] = ((B[j][xvars]-temp) / B[j][j]); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == xvars-1 || show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>'; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < xvars; j++) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>'; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < xvars+1; k++) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + B[j][k].toFixed(3) + '</td>'; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x<sub>' + j + '</sub> = ' + x[j].toFixed(3) + '</td></tr>'; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text; <br>} <br>";
fctns[20].title[1] = "Gaussian Elimination -  GElim";
fctns[20].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xvars = Math.floor(Math.random()*10+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < xvars; i++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = new Array(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= xvars; j++) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = Math.floor(Math.random()*25); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sign = Math.floor(Math.random()*2); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sign == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = A[i][j]*-1; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < xvars-1) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + j + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (j == xvars-1) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + j + '</sub> = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>'; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br></scr" + "ipt> ";
fctns[20].title[2] = "Gaussian Elimination -  init";
fctns[20].loc = "http://learninglover.com/examples.php?id=1";
fctns[21] = new Object();
fctns[21].src = new Array();
fctns[21].title = new Array();
fctns[21].src[0] = "<script type='text/javascript'>";
fctns[21].title[0] = "Geometric Sequences - styleTags";
fctns[21].src[1] = " generate(first, ratio, terms)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = first;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i < terms; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i] = ans[0]*Math.pow(ratio, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[21].title[1] = "Geometric Sequences -  generate";
fctns[21].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var first;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first = Math.floor(Math.random()*50);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (first == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fsign = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!fsign)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first *= -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratio;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = Math.floor(Math.random()*10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (ratio == 0 || ratio == 1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rsign = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!rsign)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio *= -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var seq = generate(first, ratio, 6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += disp(seq) + '<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pos = Math.floor(Math.random()*20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ques = Math.floor(Math.random()*3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (ques)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'What is term g<sub>' + pos + '</sub> of this sequence ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'What is sum S<sub>' + pos + '</sub> of this sequence ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'What is the common ratio? ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = seq;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ques;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = pos;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[21].title[2] = "Geometric Sequences -  init";
fctns[21].src[3] = " disp(seq)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < seq.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += seq[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < seq.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return output;<br>}<br>";
fctns[21].title[3] = "Geometric Sequences -  disp";
fctns[21].src[4] = " solve(ques, seq, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (ques)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'The formula for term g<sub>n</sub> of a sequence is g<sub>n</sub> = a<sub>1</sub> * r<sup>(n - 1)</sup><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>1</sub> = ' + seq[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'n = ' + n + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'r = ' + (seq[1] / seq[0]) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'This evaluates to: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>' + n + '</sub> = ' + term(seq, n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'The formula for sum S<sub>n</sub> of a sequence is S<sub>n</sub> = a<sub>1</sub>*(1 - r<sup>n+1</sup>)/(1 - r)<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>1</sub> = ' + seq[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'n = ' + n + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'r = ' + (seq[1] / seq[0]) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'This evaluates to: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'S<sub>' + n + '</sub> = ' + sum(seq, n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'To calculate the common ratio in a geometric sequence, we need to divide two consecucetive terms. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'By dividing the second term by the first term we get: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>1</sub> = ' + seq[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'a<sub>2</sub> = ' + seq[1] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += 'r = ' + seq[1] + ' / ' + seq[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += ' = ' + getRat(seq);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = ans;<br>}<br>";
fctns[21].title[4] = "Geometric Sequences -  solve";
fctns[21].src[5] = " term(seq, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratio = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var first = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first = seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = seq[1] / seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = first*Math.pow(ratio, (n - 1));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[21].title[5] = "Geometric Sequences -  term";
fctns[21].src[6] = " sum(seq, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratio = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var first = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;first = seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = seq[1] / seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = first*(1-Math.pow(ratio, n+1))/(1-ratio);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[21].title[6] = "Geometric Sequences -  sum";
fctns[21].src[7] = " getRat(seq)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratio = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (seq.length > 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = seq[1] / seq[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ratio;<br>}<br>";
fctns[21].title[7] = "Geometric Sequences -  getRat";
fctns[21].src[8] = " clearAll()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>}<br></scr" + "ipt>";
fctns[21].title[8] = "Geometric Sequences -  clearAll";
fctns[21].loc = "http://learninglover.com/examples.php?id=34";
fctns[22] = new Object();
fctns[22].src = new Array();
fctns[22].title = new Array();
fctns[22].src[0] = "<script type='text/javascript'>";
fctns[22].title[0] = "Gram-Schmidt Orthogonal Vectors - styleTags";
fctns[22].src[1] = " GramSchmidt(A, n, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V[i] = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < V.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'i = ' + i + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;projd = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < V[j].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;projd += V[j][k]*V[j][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[k] = V[j][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[k] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'v<sub>' + j + '</sub> <img src='http://www.learninglover.com/chars/cdot.png'> v<sub>' + j + '</sub> = ' + Math.floor(projd*100)/100 + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;projn = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < V[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;projn += V[i][k]*V[j][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'v<sub>' + i + '</sub> <img src='http://www.learninglover.com/chars/cdot.png'> v<sub>' + j + '</sub> = ' + Math.floor(projn*100)/100 + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'proj<sub>u<sub>' + i + '</sub></sub>(v<sub>' + j + '</sub>) = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < V[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[k] = temp[k]*(projn/projd);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[k] += temp[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += temp[k].toFixed(3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k < V[i].length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'u<sub>' + i + '</sub> = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < V[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V[i][k] = V[i][k] - sum[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += V[i][k].toFixed(3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k < V[i].length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return V;<br>}<br>";
fctns[22].title[1] = "Gram-Schmidt Orthogonal Vectors -  GramSchmidt";
fctns[22].src[2] = " normalize(vec)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var norm = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vec.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm += vec[i]*vec[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm = Math.sqrt(norm);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vec.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vec[i] = vec[i] / norm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return vec;<br>}<br>";
fctns[22].title[2] = "Gram-Schmidt Orthogonal Vectors -  normalize";
fctns[22].src[3] = " postProcess()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 = 'Orthogonal Basis = <table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol = GramSchmidt(A, xvars, document.getElementById('show').checked);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<tr><td>v<sub>' + i + '</sub><sup>T</sup> = (</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var j = 0; j < sol[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<td>' + sol[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<td>)<sup>T</sup></td></tr>'; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += 'Orthonormal Basis = <table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[i] = normalize(sol[i]); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<tr><td>v<sub>' + i + '</sub><sup>T</sup> = (</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j = 0; j < sol[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<td>' + sol[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<td>)<sup>T</sup></td></tr>'; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text2;<br>}<br><br></scr" + "ipt>";
fctns[22].title[3] = "Gram-Schmidt Orthogonal Vectors -  postProcess";
fctns[22].loc = "http://learninglover.com/examples.php?id=41";
fctns[23] = new Object();
fctns[23].src = new Array();
fctns[23].title = new Array();
fctns[23].src[0] = "<script id='sc1' type='text/javascript'>";
fctns[23].title[0] = "Greatest Common Divisor - styleTags";
fctns[23].src[1] = " gcd(u, v, show) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return u; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Now calling GCD(' + v + ', ' + (u % v) + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return gcd(v, u % v, show); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>} <br></scr" + "ipt> ";
fctns[23].title[1] = "Greatest Common Divisor -  gcd";
fctns[23].loc = "http://learninglover.com/examples.php?id=2";
fctns[24] = new Object();
fctns[24].src = new Array();
fctns[24].title = new Array();
fctns[24].src[0] = "<script type='text/javascript'>";
fctns[24].title[0] = "Hidden Markov Models: The Backwards Algorithm - styleTags";
fctns[24].src[1] = " newHMM(numDie, stateBhv, diceWght)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var model = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.numStates = numDie;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.sigma = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= 6; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.sigma[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.initProbs = new Array(numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numDie; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.initProbs[i] = (1 / (numDie));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (stateBhv == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 0.9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = (1/numDie)*0.10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (stateBhv == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 1 / (numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = (1/numDie)*0.9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 0.10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i] = new Array(model.sigma.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.sigma.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (diceWght == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < (6 - i))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (diceWght == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dice = new Array;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice[0] = 0; dice[1] = 1; dice[2] = 2; dice[3] = 3; dice[4] = 4; dice[5] = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < i; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][dice[loc]] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice[loc] = dice[dice.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < dice.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][dice[k]] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / 6;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return model;<br>}<br><br>/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This is the backward algorithm. Given an output sequence, this algorithm <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;determines the probability that a given model has emitted a sequence of<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observations by building a matrix of probabilities starting with the final<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observations and incrementally adding an observation at each previous step. <br>*/<br>";
fctns[24].title[1] = "Hidden Markov Models: The Backwards Algorithm -  newHMM";
fctns[24].src[2] = " bkwdAlg(model, observ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = observ.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha_{t, i} is the probability that the model has output the final <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t observations, given that the current state is state i. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var beta = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < beta.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First, we initialize the variables. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that for all N states and all times before T, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta_{T, i} = 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta[numPeriods-1][i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now for the recursion. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that for all N states and all times before T, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta_{t, i} = sum_{j in States} beta_{t+1, j} * transProbs_{i, j} * emissProbs_{j, observ_{j, t+1}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = numPeriods-2; t >= 0; t--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta[t][i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta[t][i] += beta[t+1][j] * model.transProbs[i][j] * model.emissProbs[j][observ[t+1]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return beta;<br>}<br>";
fctns[24].title[2] = "Hidden Markov Models: The Backwards Algorithm -  bkwdAlg";
fctns[24].src[3] = " genDie()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numDie = Math.floor(Math.random()*4) + 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var likely = new Array(6*numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//First, we need to generate the die. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numDie; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fair = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fair)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = (1/6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = (1/6) + likely[i*6 + j - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = Math.floor(Math.random()*6)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = Math.floor(Math.random()*6)+1 + likely[i*6 + j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = likely[i*6+(j-1)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6+j] = likely[i*6+j] / sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return likely;<br>}<br>";
fctns[24].title[3] = "Hidden Markov Models: The Backwards Algorithm -  genDie";
fctns[24].src[4] = " genOutput(likely)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numDie = Math.floor(likely.length / 6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var roll;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Next, we need to roll the die<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dieRolled = Math.floor(Math.random()*numDie);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = Math.random();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp >= 0 && temp <= likely[dieRolled*6+0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+0] && temp <= likely[dieRolled*6+1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+1] && temp <= likely[dieRolled*6+2])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+2] && temp <= likely[dieRolled*6+3])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+3] && temp <= likely[dieRolled*6+4])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+4] && temp <= likely[dieRolled*6+5])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 6;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return roll;<br>}<br>";
fctns[24].title[4] = "Hidden Markov Models: The Backwards Algorithm -  genOutput";
fctns[24].src[5] = " dispHMM(model)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = newHMM(die.length/6, document.getElementById('stateTrans').value, document.getElementById('emissTrans').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var initMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</tr><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + model.initProbs[i].toExponential(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var transMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<tr><td></td>';<br>    for (var j = 0; j < model.numStates; j++)<br>    {<br>        transMtrx += '<td>' + j + '</td>';<br>    }<br>    transMtrx += '</tr>';<br><br>    var emissMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<tr><td></td>';<br>    for (var j = 0; j < model.sigma.length; j++)<br>    {<br>        emissMtrx += '<td>' + model.sigma[j] + '</td>';<br>    }<br>    emissMtrx += '</tr>';<br>    <br>    for (var i = 0; i < model.numStates; i++)<br>    {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<tr><td>' + i + '</td>';<br>        for (var j = 0; j < model.numStates; j++)<br>        {<br>            transMtrx += '<td>' + model.transProbs[i][j].toExponential(4) + '</td>';<br>        }<br>        transMtrx += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<tr><td>' + i + '</td>';<br>        for (var j = 0; j < model.sigma.length; j++)<br>        {<br>            emissMtrx += '<td>' + model.emissProbs[i][j].toExponential(4) + '</td>';<br>        }<br>        emissMtrx += '</tr>'; <br>    }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Initial Probabilities</td><td>' + initMtrx + '</td></tr><tr><td>Transition Matrix</td><td>' + transMtrx + '</td></tr><tr><td>Emission Matrix</td><td>' + emissMtrx + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>}<br>";
fctns[24].title[5] = "Hidden Markov Models: The Backwards Algorithm -  dispHMM";
fctns[24].src[6] = " dispRolls(roll)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < roll.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += roll[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < roll.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += '<br>';<br>}<br>";
fctns[24].title[6] = "Hidden Markov Models: The Backwards Algorithm -  dispRolls";
fctns[24].src[7] = " postProcess()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = newHMM(die.length/6, document.getElementById('stateTrans').value, document.getElementById('emissTrans').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bkwdAns = bkwdAlg(model, roll);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var totalProb = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalProb += bkwdAns[0][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The result of the Backward Algorithm is: <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table><tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < bkwdAns.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + eval(i+1) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < bkwdAns[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + bkwdAns[i][j].toExponential(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The total probability that this model generated this output is ' + totalProb.toExponential(4) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[24].title[7] = "Hidden Markov Models: The Backwards Algorithm -  postProcess";
fctns[24].src[8] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = ''; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var die = genDie();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var roll = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numPeriods; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll[i] = genOutput(die);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Assume the casino has ' + (die.length/6) + ' different die. You are interested in determining the weights of the different die as well as how often the casino changes die. '<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'To help answer this question, you constructed 9 Hidden Markov Models, with each state corresponding to the likelihood that the casino used a given dice. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Each of these models has its own set of transition probabilities between states and its own set of emission probabilities. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'There were ' + numPeriods + ' rolls that went as follows.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispRolls(roll);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Which model do you think generated this set of rolls? ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = die;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = numPeriods;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = roll;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br><br></scr" + "ipt><br>";
fctns[24].title[8] = "Hidden Markov Models: The Backwards Algorithm -  init";
fctns[24].loc = "http://learninglover.com/examples.php?id=46";
fctns[25] = new Object();
fctns[25].src = new Array();
fctns[25].title = new Array();
fctns[25].src[0] = "<script type='text/javascript'>";
fctns[25].title[0] = "Hidden Markov Models: The Baum-Welch Algorithm - styleTags";
fctns[25].src[1] = " newHMM(numDie, stateBhv, diceWght)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var model = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.numStates = numDie;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.sigma = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= 6; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.sigma[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.initProbs = new Array(numDie + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numDie; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.initProbs[i] = (1 / (numDie));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (stateBhv == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 0.9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = (1/(numDie-1))*0.10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (stateBhv == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 1 / (numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = (1/numDie)*0.9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 0.10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i] = new Array(model.sigma.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.sigma.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (diceWght == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < (6 - i))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (diceWght == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dice = new Array;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice[0] = 0; dice[1] = 1; dice[2] = 2; dice[3] = 3; dice[4] = 4; dice[5] = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < i; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][dice[loc]] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice[loc] = dice[dice.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < dice.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][dice[k]] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / 6;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return model;<br>}<br>";
fctns[25].title[1] = "Hidden Markov Models: The Baum-Welch Algorithm -  newHMM";
fctns[25].src[2] = " fwdAlg(model, observ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = observ.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha_{t, i} is the probability that the model has output the initial <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t observations, given that the current state is state i. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var alpha = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < alpha.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that alpha_{1, j} = initProb_j * emissProb_{j, observ_1}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha[0][i] = model.initProbs[i] * model.emissProbs[i][observ[0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now for the recursion. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that for all N states and all times before T, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha_{t+1, j} = b_{j, observ_{t+1}} * (\sum_{i = 1 to N} alpha_{t, i}) * transProb_{i, j}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 1; t < numPeriods; t++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 0; t < numPeriods-1; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += alpha[t-1][i] * model.transProbs[i][j];<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += alpha[t][i] * model.transProbs[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha[t][j] = model.emissProbs[j][model.sigma.indexOf(observ[t])] * temp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha[t+1][j] = model.emissProbs[j][model.sigma.indexOf(observ[t+1])] * temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return alpha;<br>}<br>";
fctns[25].title[2] = "Hidden Markov Models: The Baum-Welch Algorithm -  fwdAlg";
fctns[25].src[3] = " bkwdAlg(model, observ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = observ.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha_{t, i} is the probability that the model has output the final <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t observations, given that the current state is state i. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var beta = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < beta.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First, we initialize the variables. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that for all N states and all times before T, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta_{T, i} = 1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta[numPeriods-1][i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now for the recursion. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that for all N states and all times before T, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta_{t, i} = sum_{j in States} beta_{t+1, j} * transProbs_{i, j} * emissProbs_{j, observ_{j, t+1}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = numPeriods-2; t >= 0; t--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta[t][i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta[t][i] += beta[t+1][j] * model.transProbs[i][j] * model.emissProbs[j][observ[t+1]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return beta;<br>}<br>";
fctns[25].title[3] = "Hidden Markov Models: The Baum-Welch Algorithm -  bkwdAlg";
fctns[25].src[4] = " baumWelch(model, observ, iter)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = observ.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newModel = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var alpha, beta, gamma, squiggly;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.numStates = model.numStates;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.sigma = model.sigma;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var s = 0; s < iter; s++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha = fwdAlg(model, observ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beta = bkwdAlg(model, observ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gamma = gammaVars(alpha, beta);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;squiggly = squigglyVars(model, alpha, beta, observ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[pi bar]_{i} = gamma_{1, i}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.initProbs = new Array(newModel.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < newModel.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.initProbs[i] = gamma[0][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[a bar]_{i, j} = Sigma_{t = 1 to T-1} (squiggly_{t, i, j}) / Sigma_{t = 1 to T - 1} (gamma_{t, i} 1 <= i <= N, 1 <= j <= N<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.transProbs = new Array(newModel.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < newModel.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.transProbs[i] = new Array(newModel.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < newModel.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 0; t < numPeriods-1; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp1 += gamma[t][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < newModel.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 0; t < numPeriods-1; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp2 += squiggly[t][i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp1 != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.transProbs[i][j] = temp2 / temp1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.transProbs[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[b bar]_{j, k} = Sigma_{t = 1 to T, o_t = o_k} gamma_{t, j} / Sigma_{t = 1 to T} gamma_{t, j}, 1 <= j <= N, 1 <= k <= M<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.emissProbs = new Array(newModel.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < newModel.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.emissProbs[j] = new Array(newModel.sigma.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < newModel.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < newModel.sigma.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 0; t < numPeriods; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newModel.sigma[k] == observ[t])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp1 += gamma[t][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp2 += gamma[t][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp2 != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.emissProbs[j][k] = temp1 / temp2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newModel.emissProbs[j][k] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return newModel;<br>}<br>";
fctns[25].title[4] = "Hidden Markov Models: The Baum-Welch Algorithm -  baumWelch";
fctns[25].src[5] = " gammaVars(alpha, beta)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gamma_{t, i} = (alpha_{t, i} * beta_{t, i}) / (Sigma_{j = 1 to N} (alpha_{t, j} * beta_{t, j})<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = alpha.length; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var gamma = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <gamma.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gamma[i] = new Array(alpha[i].length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 0; t < numPeriods; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < gamma[t].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gamma[t][i] = (alpha[t][i] * beta[t][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < gamma[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += (alpha[t][j] * beta[t][j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gamma[t][i] = gamma[t][i] / temp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'gamma[' + t + '][' + i + '] = ' + gamma[t][i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return gamma;<br>}<br>";
fctns[25].title[5] = "Hidden Markov Models: The Baum-Welch Algorithm -  gammaVars";
fctns[25].src[6] = " squigglyVars(model, alpha, beta, observ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var out = '';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xi_{t, i, j} = (alpha_{t, i} * a_{i, j} * beta_{t+1, j} + b_{j, o_{t+1}}) / (Sigma_{i' = 1 to N} Sigma_{j' = 1 to N} (alpha_{t, i'} * a_{i', j'} * beta_{t+1, j'} * b_{j', o_{t+1}}))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = observ.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var squiggly = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 0; t < numPeriods; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;squiggly[t] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < squiggly[t].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;squiggly[t][i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 0; t < numPeriods-1; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < squiggly[t].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < squiggly[t][i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;squiggly[t][i][j] = alpha[t][i] * model.transProbs[i][j] * beta[t+1][j] * model.emissProbs[j][model.sigma.indexOf(observ[t+1])];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i1 = 0; i1 < model.numStates; i1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j1 = 0; j1 < model.numStates; j1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += alpha[t][i1] * model.transProbs[i1][j1] * beta[t+1][j1] * model.emissProbs[j1][model.sigma.indexOf(observ[t+1])];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;squiggly[t][i][j] = squiggly[t][i][j] / temp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out += 'squiggly[' + t + '][' + i + '][' + j + '] = ' + squiggly[t][i][j] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += out;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return squiggly;<br>}<br>";
fctns[25].title[6] = "Hidden Markov Models: The Baum-Welch Algorithm -  squigglyVars";
fctns[25].src[7] = " genDie()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numDie = Math.floor(Math.random()*4) + 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var likely = new Array(6*numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//First, we need to generate the die. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numDie; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fair = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fair)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = (1/6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = (1/6) + likely[i*6 + j - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = Math.floor(Math.random()*6)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = Math.floor(Math.random()*6)+1 + likely[i*6 + j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = likely[i*6+(j-1)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6+j] = likely[i*6+j] / sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return likely;<br>}<br>";
fctns[25].title[7] = "Hidden Markov Models: The Baum-Welch Algorithm -  genDie";
fctns[25].src[8] = " genOutput(likely)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numDie = Math.floor(likely.length / 6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var roll;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Next, we need to roll the die<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dieRolled = Math.floor(Math.random()*numDie);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = Math.random();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp >= 0 && temp <= likely[dieRolled*6+0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+0] && temp <= likely[dieRolled*6+1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+1] && temp <= likely[dieRolled*6+2])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+2] && temp <= likely[dieRolled*6+3])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+3] && temp <= likely[dieRolled*6+4])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+4] && temp <= likely[dieRolled*6+5])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 6;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return roll;<br>}<br>";
fctns[25].title[8] = "Hidden Markov Models: The Baum-Welch Algorithm -  genOutput";
fctns[25].src[9] = " dispHMM(model, disp)<br>{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = newHMM(die.length/6, document.getElementById('stateTrans').value, document.getElementById('emissTrans').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var initMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</tr><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += model.initProbs[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + model.initProbs[i].toFixed(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + sum + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var transMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<tr><td></td>';<br>    for (var j = 0; j < model.numStates; j++)<br>    {<br>        transMtrx += '<td>' + j + '</td>';<br>    }<br>    transMtrx += '</tr>';<br><br>    var emissMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<tr><td></td>';<br>    for (var j = 0; j < model.sigma.length; j++)<br>    {<br>        emissMtrx += '<td>' + model.sigma[j] + '</td>';<br>    }<br>    emissMtrx += '</tr>';<br>    <br>    for (var i = 0; i < model.numStates; i++)<br>    {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<tr><td>' + i + '</td>';<br>        for (var j = 0; j < model.numStates; j++)<br>        {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<td>' + model.transProbs[i][j].toFixed(4) + '</td>';<br>        }<br>        transMtrx += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<tr><td>' + i + '</td>';<br>        for (var j = 0; j < model.sigma.length; j++)<br>        {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<td>' + model.emissProbs[i][j].toFixed(4) + '</td>';<br>        }<br>        emissMtrx += '</tr>'; <br>    }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Initial Probabilities</td><td>' + initMtrx + '</td></tr><tr><td>Transition Matrix</td><td>' + transMtrx + '</td></tr><tr><td>Emission Matrix</td><td>' + emissMtrx + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (disp == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[25].title[9] = "Hidden Markov Models: The Baum-Welch Algorithm -  dispHMM";
fctns[25].src[10] = " dispRolls(roll)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < roll.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += roll[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < roll.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += '<br>';<br>}<br>";
fctns[25].title[10] = "Hidden Markov Models: The Baum-Welch Algorithm -  dispRolls";
fctns[25].src[11] = " postProcess()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = newHMM(die.length/6, document.getElementById('stateTrans').value, document.getElementById('emissTrans').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = baumWelch(model, roll, document.getElementById('numIter').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The result of the BaumWelch Algorithm is: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = dispHMM(model, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += ans;<br>}<br>";
fctns[25].title[11] = "Hidden Markov Models: The Baum-Welch Algorithm -  postProcess";
fctns[25].src[12] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = ''; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var die = genDie();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var roll = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numPeriods; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll[i] = genOutput(die);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Assume the casino has ' + (die.length/6) + ' different die. You are interested in determining the weights of the different die as well as how often the casino changes die. '<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'To help answer this question, you constructed 9 Hidden Markov Models, with each state corresponding to the likelihood that the casino used a given dice. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Each of these models has its own set of transition probabilities between states and its own set of emission probabilities. <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'There were ' + numPeriods + ' rolls that went as follows.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispRolls(roll);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Which model do you think generated this set of rolls? ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = die;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = numPeriods;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = roll;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br><br></scr" + "ipt>";
fctns[25].title[12] = "Hidden Markov Models: The Baum-Welch Algorithm -  init";
fctns[25].loc = "http://learninglover.com/examples.php?id=48";
fctns[26] = new Object();
fctns[26].src = new Array();
fctns[26].title = new Array();
fctns[26].src[0] = "<script type='text/javascript'>";
fctns[26].title[0] = "Hidden Markov Models: The Forward Algorithm - styleTags";
fctns[26].src[1] = " newHMM(numDie, stateBhv, diceWght)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var model = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.numStates = numDie;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.sigma = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= 6; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.sigma[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.initProbs = new Array(numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numDie; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.initProbs[i] = (1 / (numDie));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (stateBhv == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 0.9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = (1/numDie)*0.10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (stateBhv == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 1 / (numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = (1/numDie)*0.9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 0.10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i] = new Array(model.sigma.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.sigma.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (diceWght == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < (6 - i))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (diceWght == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dice = new Array;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice[0] = 0; dice[1] = 1; dice[2] = 2; dice[3] = 3; dice[4] = 4; dice[5] = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < i; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][dice[loc]] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice[loc] = dice[dice.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < dice.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][dice[k]] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / 6;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return model;<br>}<br><br>/*<br>This is the forward algorithm. Given an output sequence, this algorithm <br>determines the probability that a given model has emitted a sequence of<br>observations by building a matrix of probabilities starting with the initial<br>observations and incrementally adding an observation at each step. <br>*/";
fctns[26].title[1] = "Hidden Markov Models: The Forward Algorithm -  newHMM";
fctns[26].src[2] = " fwdAlg(model, observ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = observ.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha_{t, i} is the probability that the model has output the initial <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t observations, given that the current state is state i. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var alpha = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < alpha.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that alpha_{1, j} = initProb_j * emissProb_{j, observ_1}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha[0][i] = model.initProbs[i] * model.emissProbs[i][observ[0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now for the recursion. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that for all N states and all times before T, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha_{t+1, j} = b_{j, observ_{t+1}} * (\sum_{i = 1 to N} alpha_{t, i}) * transProb_{i, j}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 1; t < numPeriods; t++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 0; t < numPeriods-1; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += alpha[t-1][i] * model.transProbs[i][j];<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += alpha[t][i] * model.transProbs[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha[t][j] = model.emissProbs[j][model.sigma.indexOf(observ[t])] * temp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha[t+1][j] = model.emissProbs[j][model.sigma.indexOf(observ[t+1])] * temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return alpha;<br>}<br><br>";
fctns[26].title[2] = "Hidden Markov Models: The Forward Algorithm -  fwdAlg";
fctns[26].src[3] = " genDie()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numDie = Math.floor(Math.random()*4) + 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var likely = new Array(6*numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//First, we need to generate the die. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numDie; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fair = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fair)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = (1/6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = (1/6) + likely[i*6 + j - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = Math.floor(Math.random()*6)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = Math.floor(Math.random()*6)+1 + likely[i*6 + j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = likely[i*6+(j-1)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6+j] = likely[i*6+j] / sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return likely;<br>}<br>";
fctns[26].title[3] = "Hidden Markov Models: The Forward Algorithm -  genDie";
fctns[26].src[4] = " genOutput(likely)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numDie = Math.floor(likely.length / 6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var roll;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Next, we need to roll the die<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dieRolled = Math.floor(Math.random()*numDie);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = Math.random();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp >= 0 && temp <= likely[dieRolled*6+0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+0] && temp <= likely[dieRolled*6+1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+1] && temp <= likely[dieRolled*6+2])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+2] && temp <= likely[dieRolled*6+3])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+3] && temp <= likely[dieRolled*6+4])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+4] && temp <= likely[dieRolled*6+5])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 6;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return roll;<br>}<br>";
fctns[26].title[4] = "Hidden Markov Models: The Forward Algorithm -  genOutput";
fctns[26].src[5] = " dispHMM(model)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = newHMM(die.length/6, document.getElementById('stateTrans').value, document.getElementById('emissTrans').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var initMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</tr><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + model.initProbs[i].toExponential(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var transMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var emissMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.sigma.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<td>' + model.sigma[j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '</tr>';<br>    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<tr><td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<td>' + model.transProbs[i][j].toExponential(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<tr><td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.sigma.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<td>' + model.emissProbs[i][j].toExponential(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '</tr>'; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Initial Probabilities</td><td>' + initMtrx + '</td></tr><tr><td>Transition Matrix</td><td>' + transMtrx + '</td></tr><tr><td>Emission Matrix</td><td>' + emissMtrx + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>}<br>";
fctns[26].title[5] = "Hidden Markov Models: The Forward Algorithm -  dispHMM";
fctns[26].src[6] = " dispRolls(roll)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < roll.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += roll[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < roll.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += '<br>';<br>}<br>";
fctns[26].title[6] = "Hidden Markov Models: The Forward Algorithm -  dispRolls";
fctns[26].src[7] = " postProcess()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = newHMM(die.length/6, document.getElementById('stateTrans').value, document.getElementById('emissTrans').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fwdAns = fwdAlg(model, roll);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var totalProb = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalProb += fwdAns[fwdAns.length-1][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The result of the Forward Algorithm is: <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table><tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + i + ' BAD Die</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < fwdAns.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + eval('i+1') + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < fwdAns[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + fwdAns[i][j].toExponential(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The total probability that this model generated this output is ' + totalProb.toExponential(4) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[26].title[7] = "Hidden Markov Models: The Forward Algorithm -  postProcess";
fctns[26].src[8] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = ''; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var die = genDie();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var roll = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numPeriods; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll[i] = genOutput(die);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Assume the casino has ' + (die.length/6) + ' different die. You are interested in determining the weights of the different die as well as how often the casino changes die. '<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'To help answer this question, you constructed 9 Hidden Markov Models, each with each state corresponding to the likelihood that the casino used a given dice. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Each of these models has its own set of transition probabilities between states and its own set of emission probabilities. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'There were ' + numPeriods + ' rolls that went as follows.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispRolls(roll);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Which model do you think generated this set of rolls? ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = die;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = numPeriods;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = roll;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br><br></scr" + "ipt>";
fctns[26].title[8] = "Hidden Markov Models: The Forward Algorithm -  init";
fctns[26].loc = "http://learninglover.com/examples.php?id=45";
fctns[27] = new Object();
fctns[27].src = new Array();
fctns[27].title = new Array();
fctns[27].src[0] = "<script type='text/javascript'>";
fctns[27].title[0] = "Hidden Markov Models: The Viterbi Algorithm - styleTags";
fctns[27].src[1] = " newHMM(numDie, stateBhv, diceWght)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var model = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.numStates = numDie;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.sigma = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= 6; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.sigma[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.initProbs = new Array(numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numDie; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.initProbs[i] = (1 / (numDie));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (stateBhv == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 0.9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = (1/numDie)*0.10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (stateBhv == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 1 / (numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = (1/numDie)*0.9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.transProbs[i][j] = 0.10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i] = new Array(model.sigma.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.sigma.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (diceWght == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < (6 - i))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (diceWght == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dice = new Array;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice[0] = 0; dice[1] = 1; dice[2] = 2; dice[3] = 3; dice[4] = 4; dice[5] = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < i; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][dice[loc]] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice[loc] = dice[dice.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dice.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < dice.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][dice[k]] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / 6;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 2 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.emissProbs[i][j] = 1 / (6 + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return model;<br>}<br>";
fctns[27].title[1] = "Hidden Markov Models: The Viterbi Algorithm -  newHMM";
fctns[27].src[2] = " Viterbi(model, observ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = observ.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta_{t, i} is the maximum probability over the first t-1 states that the <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t(th) state is can have, given the first t-1 states and the first t-1 <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observations and the model.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < delta.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;First, we initialize the variables. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that for all N states and all times before T, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta_{1, j} = initProbs_j * emissProbs_{j, observ_{1}};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta[0][i] = model.initProbs[i] * model.emissProbs[i][model.sigma.indexOf(observ[0])];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now for the recursion. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We know that for all N states and all times before T, <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta_{t+1, j} = b_{j, observ_{t+1}} * max_{1 [<=] i [<=] N} delta_{t, i}*transProbs_{i, j}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var max = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var statePtr = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < statePtr.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statePtr[i] = new Array(model.numStates);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var t = 1; t <= numPeriods-1; t++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < model.numStates; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxDelta = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = delta[t-1][i] * model.transProbs[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp > maxDelta)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDelta = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statePtr[t][j] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delta[t][j] = model.emissProbs[j][model.sigma.indexOf(observ[t])] * maxDelta;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var p_max = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var iLast = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (delta[numPeriods-1][i] > p_max)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_max = delta[numPeriods-1][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iLast = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol = new Array(numPeriods);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[numPeriods-1] = iLast;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (t = numPeriods-2; t >= 0; t--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[t] = statePtr[t+1][sol[t+1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = delta;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = sol;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;;<br>}<br>";
fctns[27].title[2] = "Hidden Markov Models: The Viterbi Algorithm -  Viterbi";
fctns[27].src[3] = " genDie()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numDie = Math.floor(Math.random()*4) + 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var likely = new Array(6*numDie);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//First, we need to generate the die. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numDie; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fair = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fair)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = (1/6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = (1/6) + likely[i*6 + j - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = Math.floor(Math.random()*6)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6 + j] = Math.floor(Math.random()*6)+1 + likely[i*6 + j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = likely[i*6+(j-1)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;likely[i*6+j] = likely[i*6+j] / sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return likely;<br>}<br>";
fctns[27].title[3] = "Hidden Markov Models: The Viterbi Algorithm -  genDie";
fctns[27].src[4] = " genOutput(likely)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numDie = Math.floor(likely.length / 6);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var roll;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Next, we need to roll the die<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dieRolled = Math.floor(Math.random()*numDie);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = Math.random();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp >= 0 && temp <= likely[dieRolled*6+0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+0] && temp <= likely[dieRolled*6+1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+1] && temp <= likely[dieRolled*6+2])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+2] && temp <= likely[dieRolled*6+3])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+3] && temp <= likely[dieRolled*6+4])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp > likely[dieRolled*6+4] && temp <= likely[dieRolled*6+5])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll = 6;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return roll;<br>}<br>";
fctns[27].title[4] = "Hidden Markov Models: The Viterbi Algorithm -  genOutput";
fctns[27].src[5] = " dispHMM(model)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = newHMM(die.length/6, document.getElementById('stateTrans').value, document.getElementById('emissTrans').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var initMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</tr><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '<td>' + model.initProbs[i].toExponential(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initMtrx += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var transMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<tr><td></td>';<br>    for (var j = 0; j < model.numStates; j++)<br>    {<br>        transMtrx += '<td>' + j + '</td>';<br>    }<br>    transMtrx += '</tr>';<br><br>    var emissMtrx = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<tr><td></td>';<br>    for (var j = 0; j < model.sigma.length; j++)<br>    {<br>        emissMtrx += '<td>' + model.sigma[j] + '</td>';<br>    }<br>    emissMtrx += '</tr>';<br>    <br>    for (var i = 0; i < model.numStates; i++)<br>    {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '<tr><td>' + i + '</td>';<br>        for (var j = 0; j < model.numStates; j++)<br>        {<br>            transMtrx += '<td>' + model.transProbs[i][j].toExponential(4) + '</td>';<br>        }<br>        transMtrx += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '<tr><td>' + i + '</td>';<br>        for (var j = 0; j < model.sigma.length; j++)<br>        {<br>            emissMtrx += '<td>' + model.emissProbs[i][j].toExponential(4) + '</td>';<br>        }<br>        emissMtrx += '</tr>'; <br>    }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transMtrx += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emissMtrx += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Initial Probabilities</td><td>' + initMtrx + '</td></tr><tr><td>Transition Matrix</td><td>' + transMtrx + '</td></tr><tr><td>Emission Matrix</td><td>' + emissMtrx + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>}<br>";
fctns[27].title[5] = "Hidden Markov Models: The Viterbi Algorithm -  dispHMM";
fctns[27].src[6] = " dispRolls(roll)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < roll.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += roll[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < roll.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += '<br>';<br>}<br>";
fctns[27].title[6] = "Hidden Markov Models: The Viterbi Algorithm -  dispRolls";
fctns[27].src[7] = " postProcess()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model = newHMM(die.length/6, document.getElementById('stateTrans').value, document.getElementById('emissTrans').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = Viterbi(model, roll);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vitSteps = ans[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vitAns = ans[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The result of the Viterbi Algorithm is: <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table><tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < model.numStates; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + i + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vitSteps.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + eval('i+1') + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < vitSteps[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + vitSteps[i][j].toExponential(4) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The most likely sequence of states that would have generated this output is ' + vitAns + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[27].title[7] = "Hidden Markov Models: The Viterbi Algorithm -  postProcess";
fctns[27].src[8] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = ''; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var die = genDie();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPeriods = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var roll = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numPeriods; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;roll[i] = genOutput(die);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Assume the casino has ' + (die.length/6) + ' different die. You are interested in determining the weights of the different die as well as how often the casino changes die. '<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'To help answer this question, you constructed 9 Hidden Markov Models, with each state corresponding to the likelihood that the casino used a given dice. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Each of these models has its own set of transition probabilities between states and its own set of emission probabilities. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'There were ' + numPeriods + ' rolls that went as follows.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispRolls(roll);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += 'Which model do you think generated this set of rolls? ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = die;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = numPeriods;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = roll;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br><br></scr" + "ipt>";
fctns[27].title[8] = "Hidden Markov Models: The Viterbi Algorithm -  init";
fctns[27].loc = "http://learninglover.com/examples.php?id=47";
fctns[28] = new Object();
fctns[28].src = new Array();
fctns[28].title = new Array();
fctns[28].src[0] = "<script type='text/javascript'><br>var M = 1000000;<br>var text = '';<br>";
fctns[28].title[0] = "Hierarchical Clustering - styleTags";
fctns[28].src[1] = " clearRect()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c3c3c3';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>}<br>";
fctns[28].title[1] = "Hierarchical Clustering -  clearRect";
fctns[28].src[2] = " EucDist(point1, point2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (point1.length != point2.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return M;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < point1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(Math.abs(point1[i] - point2[i]), 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br>";
fctns[28].title[2] = "Hierarchical Clustering -  EucDist";
fctns[28].src[3] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('points').value = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPts = document.getElementById('nopts').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < numPts; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[i][0] = Math.floor(Math.random()*document.getElementById('myCanvas').width + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[i][1] = Math.floor(Math.random()*document.getElementById('myCanvas').height + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('points').value += '(' + inp[i][0] + ', ' + inp[i][1] + '), ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(inp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return inp;<br>}<br>";
fctns[28].title[3] = "Hierarchical Clustering -  generate";
fctns[28].src[4] = " dispPts(input)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < input.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(input[i][0],c.height-input[i][1],5,0,Math.PI*2,true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('point ' + i + ': ' + input[i][0] + ', ' + input[i][1] + ' drawn.');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[28].title[4] = "Hierarchical Clustering -  dispPts";
fctns[28].src[5] = " dispClusters(items, clusters, labels)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clusters.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clusters[i].length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td width=200><b>Cluster ' + i + ':</b></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td width=200>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < clusters[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + items[clusters[i][j]][0].toFixed(3) + ', ' + items[clusters[i][j]][1].toFixed(3) + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[28].title[5] = "Hierarchical Clustering -  dispClusters";
fctns[28].src[6] = " hierClust(items, maxVal, clusters, labels)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Each node is initially in its own tree (lookup). <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.height, c.width);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(items);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Similarity Matrix is <table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i1 = 0; i1 < items.length; i1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i2 = 0; i2 < items.length; i2++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i1][i2] = EucDist(items[i1], items[i2]);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i1][i2].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[i][0] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labels[i] = i;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Element ' + i + ' is initially in cluster ' + i + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var E = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var last = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (last < maxVal || last == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//First find the maximum weight edge. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = Number.MAX_VALUE;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] < m && labels[i] != labels[j] && A[i][j] > Number.MIN_VALUE && A[i][j] < maxVal)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (m == Number.MAX_VALUE)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = maxVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The minimum edge is ' + u + ', ' + v + ' with a value of ' + m.toFixed(3) + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The node ' + u + ' belongs to the cluster ' + labels[u] + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'clusters[' + labels[u] + '] = ' + clusters[labels[u]] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initLen = clusters[labels[u]].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initLook = labels[u];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = initLen - 1; i >= 0; i--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[labels[v]][clusters[labels[v]].length] = clusters[initLook][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labels[clusters[initLook][i]] = labels[v];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = u;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = v;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = A[u][v];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[u][v] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[v][u] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += m;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clusters.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < clusters[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clusters[i][j] != i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[clusters[i][j]] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += dispClusters(items, clusters, labels);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clusters.length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < clusters[i].length; j++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + clusters[i][j] + '</td>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxDist = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var centers = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clusters.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centers[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centers[i][0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centers[i][1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j1 = 0; j1 < clusters[i].length; j1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centers[i][0] += items[clusters[i][j1]][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centers[i][1] += items[clusters[i][j1]][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centers[i][0] = centers[i][0] / clusters[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centers[i][1] = centers[i][1] / clusters[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clusters.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDist[i] = Number.MIN_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < clusters[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(centers[i], items[clusters[i][j]]) > maxDist[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDist[i] = EucDist(centers[i], items[clusters[i][j]]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < clusters.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(centers[i][0], c.height - centers[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < clusters[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(items[clusters[i][j]][0], c.height-items[clusters[i][j]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(centers[i][0], c.height - centers[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(centers[i][0],c.height-centers[i][1],2,0,Math.PI*2,true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(centers[i][0],c.height-centers[i][1],maxDist[i],0,Math.PI*2,true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt><br>";
fctns[28].title[6] = "Hierarchical Clustering -  hierClust";
fctns[28].loc = "http://learninglover.com/examples.php?id=74";
fctns[29] = new Object();
fctns[29].src = new Array();
fctns[29].title = new Array();
fctns[29].src[0] = "<script type='text/javascript'><br>var t;";
fctns[29].title[0] = "Huffman's Coding Algorithm - styleTags";
fctns[29].src[1] = " generate(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, rep, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rep = Math.floor((Math.random())*10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < rep; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[A.length] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[29].title[1] = "Huffman's Coding Algorithm -  generate";
fctns[29].src[2] = " linsear(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i].value == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[29].title[2] = "Huffman's Coding Algorithm -  linsear";
fctns[29].src[3] = " remove (set, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, len = set.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = loc; i < len; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i] = set[i+1];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set.length--;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set;<br>}<br>";
fctns[29].title[3] = "Huffman's Coding Algorithm -  remove ";
fctns[29].src[4] = " insert(set, loc, val)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, len = set.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = len; i >= loc; i--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i] = set[i-1];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[loc] = val;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set;<br>}<br>";
fctns[29].title[4] = "Huffman's Coding Algorithm -  insert";
fctns[29].src[5] = " initTree(val, prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.value = val;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.left = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.right = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.code = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.xval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.yval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.prob = prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.order = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.parent = null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[29].title[5] = "Huffman's Coding Algorithm -  initTree";
fctns[29].src[6] = " joinBinTree(tree1, tree2, val, order)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree3 = new Object();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.value = val;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree1 = code(tree1, '0');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree2 = code(tree2, '1');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.left = tree1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.left.parent = tree3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.right = tree2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.right.parent = tree3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.code = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.xval = (tree1.xval + tree2.xval) / 2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree1.yval <= tree2.yval)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.yval = tree1.yval - 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.yval = tree2.yval - 50;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.prob = tree1.prob + tree2.prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.order = order;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.drawn = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree3.parent = null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree3;<br>}<br>";
fctns[29].title[6] = "Huffman's Coding Algorithm -  joinBinTree";
fctns[29].src[7] = " display(tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left == null && tree.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += tree.value + ' - ' + tree.code + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += display(tree.left);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += display(tree.right);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[29].title[7] = "Huffman's Coding Algorithm -  display";
fctns[29].src[8] = " code(tree, val)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.code = val + tree.code;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.left = code(tree.left, val);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.right = code(tree.right, val);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[29].title[8] = "Huffman's Coding Algorithm -  code";
fctns[29].src[9] = " tooclose(tree, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false, dist = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < tree.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != loc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist = Math.sqrt(Math.pow(tree[loc].xval - tree[i].xval, <br><br>2) + Math.pow(tree[loc].yval - tree[i].yval, 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist < 50)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[29].title[9] = "Huffman's Coding Algorithm -  tooclose";
fctns[29].src[10] = " count(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans++;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[29].title[10] = "Huffman's Coding Algorithm -  count";
fctns[29].src[11] = " prob(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = count(set, elmnt) / set.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[29].title[11] = "Huffman's Coding Algorithm -  prob";
fctns[29].src[12] = " setXvals(tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var orig = 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxim = c.width - 50;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var incr = (maxim - orig) / (tree.length-1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].xval = orig + i*incr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].yval = c.height - 150;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[29].title[12] = "Huffman's Coding Algorithm -  setXvals";
fctns[29].src[13] = " draw(tree, order)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (order == '-..')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (order == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left != null && tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.left, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.right, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left == null && tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.right, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left != null && tree.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.left, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.right, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left == null && tree.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (order == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left == null && tree.right == null && tree.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.value != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(tree.value)/Math.log(10))+1), tree.yval+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), tree.yval+4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-<br><br>10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left != null && tree.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.left, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left == null && tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.right, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left != null && tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.left, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.right, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.order == order)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.left != null && tree.right == null && tree.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(tree.xval, tree.yval);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(tree.left.xval, tree.left.yval);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-<br><br>10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left == null && tree.right != null && tree.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(tree.xval, tree.yval);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(tree.right.xval, tree.right.yval);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-<br><br>10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left != null && tree.right != null && tree.drawn == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.drawn = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(tree.xval, tree.yval);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(tree.left.xval, tree.left.yval);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(tree.xval, tree.yval);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(tree.right.xval, tree.right.yval);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-<br><br>10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left != null && tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.left, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.right, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left != null && tree.right == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.left, order);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.left == null && tree.right != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = draw(tree.right, order);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.parent == null && tree.drawn == true)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree.parent != null || (tree.parent == null && tree.drawn == false))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order += 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree.parent == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var f = function(){t = draw(tree, order);};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = setTimeout(f, 2000);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;<br>}<br>";
fctns[29].title[13] = "Huffman's Coding Algorithm -  draw";
fctns[29].src[14] = " huffman(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var curr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var probs = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '', loc1, loc2, val;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var order = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, ans = false, sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (linsear(tree, set[i]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = initTree(set[i], prob(set, set[i]));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += tree[tree.length-1].prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i; j < tree.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].prob < tree[j].prob)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = tree[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i] = tree[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'sum = ' + sum + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree = setXvals(tree);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(tree[tree.length-1].prob < .99998)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;order++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + (Math.round(tree[i].prob*100)/100) + '</td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + display(tree[i]) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table><hr><br><br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc1 = tree.length - 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = tree.length - 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < tree.length && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].prob < tree[loc1].prob + tree[loc2].prob)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insert(tree, i-1, joinBinTree(tree[loc1], tree[loc2], '(' + tree[loc1].value + '|' + tree[loc2].value + ')', order));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tooclose(tree, i-1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i-1].yval = tree[i-1].yval - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(tree, tree.length-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(tree, tree.length-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw(tree[tree.length-1], 0);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return display(tree[tree.length-1]);<br>}<br>";
fctns[29].title[14] = "Huffman's Coding Algorithm -  huffman";
fctns[29].src[15] = " init(set, k1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(t);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set = generate(k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set = {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[29].title[15] = "Huffman's Coding Algorithm -  init";
fctns[29].src[16] = " retreive(set, start, finish)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = start; i < finish; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br></scr" + "ipt>";
fctns[29].title[16] = "Huffman's Coding Algorithm -  retreive";
fctns[29].loc = "http://learninglover.com/examples.php?id=19";
fctns[30] = new Object();
fctns[30].src = new Array();
fctns[30].title = new Array();
fctns[30].src[0] = "<style><br>span <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor:pointer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color:blue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:underline;<br>}<br><br>th.rotate <br>{<br>  /* Something you can count on */<br>  height: 140px;<br>  white-space: nowrap;<br>}<br><br>th.rotate > div <br>{<br>  transform: <br>    /* Magic Numbers */<br>    translate(25px, 51px)<br>    /* 45 is really 360 - 45 */<br>    rotate(315deg);<br>  width: 30px;<br>}<br>th.rotate > div > span <br>{<br>  border-bottom: 1px solid #ccc;<br>  padding: 5px 10px;<br>}<br><br>.csstransforms & th.rotate {<br>  height: 140px;<br>  white-space: nowrap;<br>}<br></style><br><script type='text/javascript'>";
fctns[30].title[0] = "ID3 Algorithm - styleTags";
fctns[30].src[1] = " getName(poss, name)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var index = poss.indexOf(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index = poss.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[index] = name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return index;<br>}<br>";
fctns[30].title[1] = "ID3 Algorithm -  getName";
fctns[30].src[2] = " linsear(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[30].title[2] = "ID3 Algorithm -  linsear";
fctns[30].src[3] = " getLocs(poss, data, clmn)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var names = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var index;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var element;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element = poss[clmn][data[i][clmn]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index = linsear(names, element);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;names[names.length] = element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var locs = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < names.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element = names[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;locs[i] = linsear(poss[clmn], element);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return locs;<br>}<br>";
fctns[30].title[3] = "ID3 Algorithm -  getLocs";
fctns[30].src[4] = " matchArr(data, clmn, val)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subset = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset.features = data.features;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset.options = data.options;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset.names = data.names;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset.values = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.values.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data.values[i][clmn] == val)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = subset.values.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset.values[temp] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < data.values[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset.values[temp][j] = data.values[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return subset;<br>}<br>";
fctns[30].title[4] = "ID3 Algorithm -  matchArr";
fctns[30].src[5] = " updateData(data)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numRows = data.values.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var resClmn = data.values[0].length - 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numRows; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.values[i][resClmn] = document.getElementById('out' + i).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data;<br>}<br>";
fctns[30].title[5] = "ID3 Algorithm -  updateData";
fctns[30].src[6] = " entropy1(numPoss, data, clmn, text)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numRows = data.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'There are ' + numRows + ' rows in this data.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numPoss; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < data.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data[j][clmn] == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[i]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob[i] = count[i] / data.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'Outcome ' + i + ' occurs ' + count[i] + ' times in this data, giving it a probability of ' + prob[i].toFixed(4) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (count[i] > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += -prob[i] * (Math.log(prob[i]) / Math.log(2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'The formula for entropy gives entropy = <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numPoss; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '-(' + prob[i].toFixed(4) + ') * log<sub>2</sub>(' + prob[i].toFixed(4) + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < numPoss - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += ' + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<br>' + ans.toFixed(4) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[30].title[6] = "ID3 Algorithm -  entropy1";
fctns[30].src[7] = " entropy2(numPoss, clmn, text)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clmn.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'There are ' + clmn.length + ' rows in this data.<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numPoss; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < clmn.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clmn[j] == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[i]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob[i] = count[i] / clmn.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'Outcome ' + i + ' occurs ' + count[i] + ' times in this data, giving it a probability of ' + prob[i].toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (count[i] > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += -prob[i] * (Math.log(prob[i]) / Math.log(2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'The formula for entropy gives entropy = <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numPoss; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '-(' + prob[i].toFixed(4) + ') * log<sub>2</sub>(' + prob[i].toFixed(4) + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < numPoss - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += ' + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[30].title[7] = "ID3 Algorithm -  entropy2";
fctns[30].src[8] = " used(history, attrib)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < history.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (history[i][0] == attrib)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>}<br>";
fctns[30].title[8] = "ID3 Algorithm -  used";
fctns[30].src[9] = " buildTree(data, asmpts, ans, id, text)<br>{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<span onclick=showHideDiv('div' + id[0] + '');>Step ' + id[0] + ': Overall Entropy</span><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<div id='div' + id[0] + '' style='display:none;'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'The data is now <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] +=  dispData(data, 0);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var optEnt = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosenAttr = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numRows = data.values.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numFtrs = data.features.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outcome = numFtrs - 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var avgEnt = new Array(), subEnt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subset = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numRows; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset[i] = data.values[i][outcome];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var entrTxt = [''];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var entr = entropy2(data.options[outcome].length, subset, entrTxt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += entrTxt;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'The overall entropy is ' + entr.toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '</div>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id[0]++;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (entr == 0 && numRows > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[0] = asmpts;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[1] = data.values[0][outcome];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = temp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numFtrs - 1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (used(asmpts, i))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avgEnt[i] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<span onclick=showHideDiv('div' + id[0] + '');>Step ' + id[0] + ': ' + data.names[i] + ' Information Gain</span><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<div id='div' + id[0] + '' style='display:none;'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ftrSize = data.options[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avgEnt[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subEnt = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sizes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < ftrSize; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span onclick=showHideDiv('div' + id[0] + '-' + j + '');>Step ' + id[0] + '-' + j + ': ' + data.names[i] + ' = ' + j + '</span><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<div id='div' + id[0] + '-' + j + '' style='display:none;'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'First, ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'Next, ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'we will consider the subset when ' + data.names[i] + ' is ' + j + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subset = matchArr(data, i, j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizes[j] = subset.values.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += dispData(subset, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subset.values.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entrTxt = [''];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subEnt[j] = entropy1(data.options[outcome].length, subset.values, outcome, entrTxt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avgEnt[i] += subEnt[j] * subset.values.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += entrTxt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avgEnt[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '</div>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span onclick=showHideDiv('div' + id[0] + '-' + ftrSize + '');>Step ' + id[0] + '-' + ftrSize + ': ' + data.names[i] + ' Calculations</span><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<div id='div' + id[0] + '-' + ftrSize + '' style='display:none;'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < ftrSize; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sizes[j] > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '(' + subEnt[j].toFixed(4) + ' * ' + sizes[j] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '(0.0000)';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < ftrSize - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += ' + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<br> = ' + avgEnt[i].toFixed(4) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avgEnt[i] = avgEnt[i] / numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'We now divide this by the total number of rows, ' + numRows + ', to get ' + avgEnt[i].toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'Then, we subtract ' + avgEnt[i].toFixed(4) + ' from the overall entropy, ' + entr.toFixed(4) + ', to get the information gain for this feature. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;avgEnt[i] = entr - avgEnt[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += data.names[i] + ''s Information Gain is ' + avgEnt[i].toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '</div>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '</div>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id[0]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!sel)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optEnt = avgEnt[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosenAttr = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (avgEnt[i] > optEnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optEnt = avgEnt[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosenAttr = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sel)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<span onclick=showHideDiv('div' + id[0] + '');>Step ' + id[0] + ': Selecting the Pivot Attribute</span><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '<div id='div' + id[0] + '' style='display:none;'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numFtrs - 1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (avgEnt[i] != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'The Information Gain of ' + data.names[i] + ' is ' + avgEnt[i].toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += 'The Feature with the greatest Information Gain is ' + data.names[chosenAttr] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[0] += '</div>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id[0]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numPoss = data.options[chosenAttr].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = asmpts.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numPoss; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newAsmt = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newAsmt[0] = chosenAttr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newAsmt[1] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sub = matchArr(data, chosenAttr, j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sub.values.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subAsmpts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < asmpts.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subAsmpts[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < asmpts[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subAsmpts[i][k] = asmpts[i][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;subAsmpts[len] = newAsmt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buildTree(sub, subAsmpts, ans, id, text);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[30].title[9] = "ID3 Algorithm -  buildTree";
fctns[30].src[10] = " createData()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dataSet = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.features = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.features.length = Math.floor(Math.random()*10)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outputClm = dataSet.features.length - 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var feats = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[0] = 'Abstract';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[1] = 'Adaptable';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[2] = 'Aggressive';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[3] = 'Ambition';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[4] = 'Anxiety';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[5] = 'Artistic';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[6] = 'Cautious';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[7] = 'Decisive';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[8] = 'Honesty';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[9] = 'Dutiful';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[10] = 'Fitness';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[11] = 'Intellect';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[12] = 'Independent';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[13] = 'Introverted';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[14] = 'Lively';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[15] = 'Open-minded';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[16] = 'Orderly';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[17] = 'Paranoid';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[18] = 'Perfectionist';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[19] = 'Romantic';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[20] = 'Sensitive';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[21] = 'Stable';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[22] = 'Tension';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[23] = 'Warmth';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;feats[24] = 'Wealthy';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.options = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.names = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < dataSet.features.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numOptions = 4;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == outputClm)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numOptions = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.options[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numOptions; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.options[i][j] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*rem.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != outputClm)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.names[i] = feats[rem[loc]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.names[i] = 'Outcome';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var hero = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var viln = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < dataSet.options.length - 1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hero[i] = Math.floor(Math.random() * dataSet.options[i].length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viln[i] = 4 - hero[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.values = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rows = Math.floor(Math.random()*5)+15;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rows; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.values[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < outputClm; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.values[i][j] = Math.floor(Math.random()*dataSet.options[j].length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var heroDist = dist(dataSet.values[i], hero);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vilnDist = dist(dataSet.values[i], viln);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (heroDist < vilnDist)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.values[i][outputClm] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataSet.values[i][outputClm] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dataSet;<br>}<br>";
fctns[30].title[10] = "ID3 Algorithm -  createData";
fctns[30].src[11] = " dist(vctr1, vctr2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vctr1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += Math.pow((vctr1[i] - vctr2[i]), 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = Math.sqrt(ans);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[30].title[11] = "ID3 Algorithm -  dist";
fctns[30].src[12] = " showHideDiv(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val = document.getElementById(id).style.display;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (val == 'none')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('case1');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.display = 'block';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('case2');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.display = 'none';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[30].title[12] = "ID3 Algorithm -  showHideDiv";
fctns[30].src[13] = " dispData(data, box)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '<table><tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.options.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<th class='rotate'><div><b>' + data.names[i] + '</b></div></th>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.values.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < data.values[i].length - 1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td><center>' + data.values[i][j] + '</center></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (box)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td><center><select id='out' + i + ''><option value=1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var heroVln = data.values[i][data.values[i].length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (heroVln == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' selected';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '>Hero</option><option value=0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (heroVln == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' selected';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '>Villain</option></select></center></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td><center>' + data.values[i][data.values[i].length - 1] + '</center></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[30].title[13] = "ID3 Algorithm -  dispData";
fctns[30].src[14] = " createDecTree(data)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rules = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var work = [''];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buildTree(data, new Array(), rules, [1], work);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<p>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rules.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'else ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'if (';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < rules[i][0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += data.names[rules[i][0][j][0]] + ' == ' + rules[i][0][j][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < rules[i][0].length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ') then ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rules[i][1] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Hero';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Villain';<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</p?';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += work;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}<br><br></scr" + "ipt>";
fctns[30].title[14] = "ID3 Algorithm -  createDecTree";
fctns[30].loc = "http://learninglover.com/examples.php?id=91";
fctns[31] = new Object();
fctns[31].src = new Array();
fctns[31].title = new Array();
fctns[31].src[0] = "<script type='text/javascript'>";
fctns[31].title[0] = "Insertion Sort Algorithm - styleTags";
fctns[31].src[1] = " insertionSort(A) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>' + count + ')</td>' + disp(A) + '</tr></table>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i < left.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = left[i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (left[j - 1] > v)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j] = left[j-1];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j] = v;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (swap > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[count] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var k = 0; k < left.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[count][k] = left[k];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left; <br>}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
fctns[31].title[1] = "Insertion Sort Algorithm -  insertionSort";
fctns[31].src[2] = " getMax(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || list[i] > list[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return list[maxLoc];<br>}";
fctns[31].title[2] = "Insertion Sort Algorithm -  getMax";
fctns[31].src[3] = " disp(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<td width=50>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set = </td><td>(';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ')</td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[31].title[3] = "Insertion Sort Algorithm -  disp";
fctns[31].src[4] = " plotGraph(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < list.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mycanvas = document.createElement('canvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.id = 'canvas' + k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.height = '200';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.width = '500';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.style='border:1px solid #d3d3d3;'<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').appendChild(mycanvas);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('canvas' + k);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var barWidth = Math.floor(c.width / (list[k].length + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var unitHght = Math.floor(c.height / (getMax(list[k]) + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = Math.floor(Math.random()*16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clr[j] == 10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 11)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 12)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 13)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 14)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'E'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 15)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'F'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list[k].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#' + clr[0] + clr[1] + clr[2] + clr[3] + clr[4] + clr[5];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(i*barWidth + barWidth/2 + i, c.height - unitHght * list[k][i] - unitHght, barWidth, unitHght * list[k][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(list[k][i], i*barWidth + barWidth + i - 2, c.height - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[31].title[4] = "Insertion Sort Algorithm -  plotGraph";
fctns[31].loc = "http://learninglover.com/examples.php?id=16";
fctns[32] = new Object();
fctns[32].src = new Array();
fctns[32].title = new Array();
fctns[32].src[0] = "<script type='text/javascript'><br>var M_VAL = 50000;<br>";
fctns[32].title[0] = "Interactive Dijkstra's Algorithm - styleTags";
fctns[32].src[1] = " newProb()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = generate();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = disp(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree = init(A);<br>}<br>";
fctns[32].title[1] = "Interactive Dijkstra's Algorithm -  newProb";
fctns[32].src[2] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numNodes = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/2) - numNodes)) + numNodes;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var otherNodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i] = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numNodes; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(tree.length < numNodes)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inside = Math.floor(Math.random()*tree.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outside = Math.floor(Math.random()*otherNodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = Math.floor(Math.random()*25) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = otherNodes[outside];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[outside] = otherNodes[otherNodes.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < numArcs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random()*numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph[loc1][i] == M_VAL && i != loc1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (poss.length == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = Math.floor(Math.random()*25) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[32].title[2] = "Interactive Dijkstra's Algorithm -  generate";
fctns[32].src[3] = " indexOf(tree, elt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].node == elt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[32].title[3] = "Interactive Dijkstra's Algorithm -  indexOf";
fctns[32].src[4] = " dijkstra2(tree, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newNode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var other = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pred = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].cost + A[tree[i].node][j] < min && A[tree[i].node][j] != M_VAL && indexOf(tree, j) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = tree[i].cost + A[tree[i].node][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newNode = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].pred.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < tree[i].pred.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[k] = tree[i].pred[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[pred.length] = tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[0] = tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = tree.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].node = newNode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].cost = min;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].pred = pred;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].xVal = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].yVal = (i+1)*(0 + c.height) / (tree.length+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (indexOf(tree, i) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = other.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].node = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].xVal = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].yVal = (loc+1)*((0 + c.height) / (A.length - tree.length + 1));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph2(tree, other, A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispCurrTree(tree) + '</td><td>' + dispAdjEdges(tree, A) + '</td><td><input type='button' value='Check' onclick='tree=check(tree, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[32].title[4] = "Interactive Dijkstra's Algorithm -  dijkstra2";
fctns[32].src[5] = " check(tree, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = document.getElementById('nextEdge').value.split('-');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var costAns = A[ans[0]][ans[1]] + tree[indexOf(tree, ans[0])].cost;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newNode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var other = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pred = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].cost + A[tree[i].node][j] < min && A[tree[i].node][j] != M_VAL && indexOf(tree, j) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = tree[i].cost + A[tree[i].node][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newNode = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].pred.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < tree[i].pred.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[k] = tree[i].pred[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[pred.length] = tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[0] = tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min != costAns)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Sorry, but there is a cheaper edge than that.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'That's correct. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = tree.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].node = newNode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].cost = min;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].pred = pred;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].xVal = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].yVal = (i+1)*(0 + c.height) / (tree.length+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (indexOf(tree, i) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = other.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].node = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].xVal = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].yVal = (loc+1)*((0 + c.height) / (A.length - tree.length + 1));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph2(tree, other, A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispCurrTree(tree) + '</td><td>' + dispAdjEdges(tree, A) + '</td><td><input type='button' value='Check' onclick='tree=check(tree, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[32].title[5] = "Interactive Dijkstra's Algorithm -  check";
fctns[32].src[6] = " drawGraph2(tree, other, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var claimed = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < other.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[tree[i].node][other[j].node] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#555555';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(tree[i].xVal, tree[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(other[j].xVal, other[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slope = (tree[i].yVal - other[j].yVal) / (tree[i].xVal - other[j].xVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;claimed[count] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dist = Math.floor(Math.random()*((other[j].xVal - tree[i].xVal)/2 - 20));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;claimed[count].xLoc = (tree[i].xVal + other[j].xVal)/2 + dist;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;claimed[count].yLoc = (tree[i].yVal + other[j].yVal)/2 + dist*slope;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[tree[i].node][other[j].node], claimed[count].xLoc, claimed[count].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < other.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < other.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[other[i].node][other[j].node] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(other[i].xVal,Math.abs(other[i].yVal - other[j].yVal)/2 + other[i].yVal,Math.abs(other[i].yVal - other[j].yVal)/2,1.5*Math.PI,0.5*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < tree.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[tree[i].node][tree[j].node] != M_VAL && tree[j].pred[tree[j].pred.length-1] != tree[i].node && tree[i].pred[tree[i].pred.length-1] != tree[j].node)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree[i].xVal,Math.abs(tree[i].yVal - tree[j].yVal)/2 + tree[i].yVal,Math.abs(tree[i].yVal - tree[j].yVal)/2,0.5*Math.PI,1.5*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree[j].pred[tree[j].pred.length-1] == tree[i].node || tree[i].pred[tree[i].pred.length-1] == tree[j].node)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree[i].xVal,Math.abs(tree[i].yVal - tree[j].yVal)/2 + tree[i].yVal,Math.abs(tree[i].yVal - tree[j].yVal)/2,0.5*Math.PI,1.5*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree[i].xVal,tree[i].yVal,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree[i].xVal,tree[i].yVal,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].node == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree[i].node,tree[i].xVal-3*(Math.floor(Math.log(tree[i].node+1)/Math.log(10))+1),tree[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree[i].node,tree[i].xVal-3*(Math.floor(Math.log(tree[i].node)/Math.log(10))+1),tree[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < other.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(other[i].xVal,other[i].yVal,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#c9c9c9';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(other[i].xVal,other[i].yVal,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (other[i].node == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(other[i].node,other[i].xVal-3*(Math.floor(Math.log(other[i].node+1)/Math.log(10))+1),other[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(other[i].node,other[i].xVal-3*(Math.floor(Math.log(other[i].node)/Math.log(10))+1),other[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree[i].cost,tree[i].xVal - 25,tree[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[32].title[6] = "Interactive Dijkstra's Algorithm -  drawGraph2";
fctns[32].src[7] = " init(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var other = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].node = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].xVal = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].yVal = (0 + c.height) / 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].cost = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].pred = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[i-1] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[i-1].node = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[i-1].xVal = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[i-1].yVal = i*(0 + c.height) / (A.length - tree.length + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph2(tree, other, A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispCurrTree(tree) + '</td><td>' + dispAdjEdges(tree, A) + '</td><td><input type='button' value='Check' onclick='tree=check(tree, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[32].title[7] = "Interactive Dijkstra's Algorithm -  init";
fctns[32].src[8] = " disp(A)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[32].title[8] = "Interactive Dijkstra's Algorithm -  disp";
fctns[32].src[9] = " dispCurrTree(tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Node</td><td>Shortest Path to Node</td><td>Cost of Shortest Path</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + tree[i].node + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prev = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < tree[i].pred.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev += tree[i].pred[j] + ' -> ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev += tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + prev + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + tree[i].cost + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[32].title[9] = "Interactive Dijkstra's Algorithm -  dispCurrTree";
fctns[32].src[10] = " dispAdjEdges(tree, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'What Edge should be selected next?<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<select name='nextEdge' id='nextEdge'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (indexOf(tree, j) == -1 && A[tree[i].node][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var name = tree[i].node + '-' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<option value='' + name + ''>Edge: (' + tree[i].node + ', ' + j + ') with cost ' + A[tree[i].node][j] + '</option>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</select>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br><br></scr" + "ipt>";
fctns[32].title[10] = "Interactive Dijkstra's Algorithm -  dispAdjEdges";
fctns[32].loc = "http://learninglover.com/examples.php?id=56";
fctns[33] = new Object();
fctns[33].src = new Array();
fctns[33].title = new Array();
fctns[33].src[0] = "<script type='text/javascript'><br>var M_VAL = 50000;";
fctns[33].title[0] = "Interactive Kruskal's Algorithm - styleTags";
fctns[33].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numNodes = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/2) - numNodes)) + numNodes;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var otherNodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i] = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numNodes; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(tree.length < numNodes)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inside = Math.floor(Math.random()*tree.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outside = Math.floor(Math.random()*otherNodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = Math.floor(Math.random()*25) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = otherNodes[outside];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[outside] = otherNodes[otherNodes.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < numArcs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random()*numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph[loc1][i] == M_VAL && i != loc1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (poss.length == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = Math.floor(Math.random()*25) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[33].title[1] = "Interactive Kruskal's Algorithm -  generate";
fctns[33].src[2] = " kruskal(forest, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] < min && forest.nodes[i].lookup != forest.nodes[j].lookup)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[1] = forest.nodes[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest = addEdge(forest, edge, min);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[33].title[2] = "Interactive Kruskal's Algorithm -  kruskal";
fctns[33].src[3] = " check(forest, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = document.getElementById('nextEdge').value.split('-');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var costAns = A[ans[0]][ans[1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newEdge = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newEdge[0] = forest.nodes[ans[0]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newEdge[1] = forest.nodes[ans[1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] < min && forest.nodes[i].lookup != forest.nodes[j].lookup)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[1] = forest.nodes[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min != costAns)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Sorry, but there is a cheaper edge than that.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (newEdge[0].lookup == newEdge[1].lookup)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Sorry, but that edge forms a cycle in the tree.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'That's correct. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest = addEdge(forest, newEdge, min);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest, A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var info = disp(forest);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info = info.split('<bbr>');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + info[1] + '</td><td>What Edge should be selected next?</td><td></td><td></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + info[0] + '<td>' + dispEdges(A) + '</td><td><input type='button' value='Check' onclick='forest=check(forest, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[33].title[3] = "Interactive Kruskal's Algorithm -  check";
fctns[33].src[4] = " dispEdges(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<select name='nextEdge' id='nextEdge'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var edgeList = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var name = i + '-' + j;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<option value='' + name + ''>Edge: (' + i + ', ' + j + ') with cost ' + A[i][j] + '</option>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = edgeList.length; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgeList[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgeList[loc].name = i + '-' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgeList[loc].cost = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgeList[loc].text = i + ', ' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < edgeList.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < edgeList.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (edgeList[i].cost > edgeList[j].cost)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = edgeList[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgeList[i] = edgeList[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgeList[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < edgeList.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<option value='' + edgeList[i].name + ''>Edge: (' + edgeList[i].text + ') with cost ' + edgeList[i].cost + '</option>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</select>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[33].title[4] = "Interactive Kruskal's Algorithm -  dispEdges";
fctns[33].src[5] = " init(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var forest = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.edges = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.cost = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var x = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var y = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2*Math.PI*i) / A.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i] = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].value = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].lookup = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[i][0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var info = disp(forest);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info = info.split('<bbr>');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + info[0] + '</td><td>What Edge should be selected next?</td><td></td><td></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + info[1] + '<td>' + dispEdges(A) + '</td><td><input type='button' value='Check' onclick='forest=check(forest, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[33].title[5] = "Interactive Kruskal's Algorithm -  init";
fctns[33].src[6] = " drawGraph(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var used = new Array(forest.nodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < used.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[i] = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width,  c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.edges.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.edges[i][0].xVal, forest.edges[i][0].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.edges[i][1].xVal, forest.edges[i][1].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[forest.edges[i][0].value] = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[forest.edges[i][1].value] = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var edge = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[1] = forest.nodes[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (indexOf(forest, edge) == -1 && A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (used[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c9c9c9';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (forest.nodes[i].value == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value+1)/Math.log(10))+1), forest.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value)/Math.log(10))+1), forest.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.nodes.length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText (forest.nodes[i].value, forest.nodes[i].xVal, forest.nodes[i].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById ('output').innerHTML += forest.trees[i][0].xVal.toFixed (4) + ', ' + forest.trees[i][0].yVal.toFixed (4) + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[33].title[6] = "Interactive Kruskal's Algorithm -  drawGraph";
fctns[33].src[7] = " indexOf(forest, edge)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i < forest.edges.length && ans == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((forest.edges[i][0] == edge[0] && forest.edges[i][1] == edge[1]) || (forest.edges[i][0] == edge[1] && forest.edges[i][1] == edge[0]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[33].title[7] = "Interactive Kruskal's Algorithm -  indexOf";
fctns[33].src[8] = " length(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest.edges.length;<br>}<br>";
fctns[33].title[8] = "Interactive Kruskal's Algorithm -  length";
fctns[33].src[9] = " addEdge(forest, edge, cost)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initLen = forest.trees[forest.nodes[edge[0].value].lookup].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initLook = forest.nodes[edge[0].value].lookup;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < initLen; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[forest.nodes[edge[1].value].lookup][forest.trees[forest.nodes[edge[1].value].lookup].length] = forest.trees[initLook][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[forest.trees[initLook][i].value].lookup = forest.nodes[edge[1].value].lookup;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.edges[forest.edges.length] = edge;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.cost += cost;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[33].title[9] = "Interactive Kruskal's Algorithm -  addEdge";
fctns[33].src[10] = " disp(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.edges.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + forest.edges[i][0].value + ', ' + forest.edges[i][1].value + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<bbr>Total cost: ' + forest.cost + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[33].title[10] = "Interactive Kruskal's Algorithm -  disp";
fctns[33].src[11] = " dispMtrx(A)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[33].title[11] = "Interactive Kruskal's Algorithm -  dispMtrx";
fctns[33].src[12] = " newProb()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = generate();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = dispMtrx(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest = init(A);<br>}<br></scr" + "ipt><br>";
fctns[33].title[12] = "Interactive Kruskal's Algorithm -  newProb";
fctns[33].loc = "http://learninglover.com/examples.php?id=58";
fctns[34] = new Object();
fctns[34].src = new Array();
fctns[34].title = new Array();
fctns[34].src[0] = "<script type='text/javascript'><br>var M_VAL = 50000;<br>";
fctns[34].title[0] = "Interactive Prim's Algorithm - styleTags";
fctns[34].src[1] = " newProb()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = generate();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = disp(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree = init(A);<br>}<br>";
fctns[34].title[1] = "Interactive Prim's Algorithm -  newProb";
fctns[34].src[2] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numNodes = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/2) - numNodes)) + numNodes;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var otherNodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i] = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numNodes; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(tree.length < numNodes)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inside = Math.floor(Math.random()*tree.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outside = Math.floor(Math.random()*otherNodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = Math.floor(Math.random()*25) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = otherNodes[outside];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[outside] = otherNodes[otherNodes.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < numArcs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random()*numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph[loc1][i] == M_VAL && i != loc1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (poss.length == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = Math.floor(Math.random()*25) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[34].title[2] = "Interactive Prim's Algorithm -  generate";
fctns[34].src[3] = " indexOf(tree, elt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].node == elt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[34].title[3] = "Interactive Prim's Algorithm -  indexOf";
fctns[34].src[4] = " prim2(tree, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newNode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var other = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pred = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[tree[i].node][j] < min && A[tree[i].node][j] != M_VAL && indexOf(tree, j) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = A[tree[i].node][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newNode = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].pred.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < tree[i].pred.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[k] = tree[i].pred[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[pred.length] = tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[0] = tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = tree.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].node = newNode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].pred = pred;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].xVal = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].yVal = (i+1)*(0 + c.height) / (tree.length+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (indexOf(tree, i) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = other.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].node = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].xVal = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].yVal = (loc+1)*((0 + c.height) / (A.length - tree.length + 1));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph2(tree, other, A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispCurrTree(tree) + '</td><td>' + dispAdjEdges(tree, A) + '</td><td><input type='button' value='Check' onclick='tree=check(tree, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[34].title[4] = "Interactive Prim's Algorithm -  prim2";
fctns[34].src[5] = " check(tree, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = document.getElementById('nextEdge').value.split('-');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var costAns = A[ans[0]][ans[1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newNode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var other = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pred = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[tree[i].node][j] < min && A[tree[i].node][j] != M_VAL && indexOf(tree, j) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = A[tree[i].node][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newNode = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].pred.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < tree[i].pred.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[k] = tree[i].pred[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[pred.length] = tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pred[0] = tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min != costAns)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Sorry, but there is a cheaper edge than that.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'That's correct. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = tree.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].node = newNode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[loc].pred = pred;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].xVal = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[i].yVal = (i+1)*(0 + c.height) / (tree.length+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (indexOf(tree, i) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = other.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].node = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].xVal = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[loc].yVal = (loc+1)*((0 + c.height) / (A.length - tree.length + 1));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph2(tree, other, A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispCurrTree(tree) + '</td><td>' + dispAdjEdges(tree, A) + '</td><td><input type='button' value='Check' onclick='tree=check(tree, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[34].title[5] = "Interactive Prim's Algorithm -  check";
fctns[34].src[6] = " drawGraph2(tree, other, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var claimed = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < other.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[tree[i].node][other[j].node] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#555555';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(tree[i].xVal, tree[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(other[j].xVal, other[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slope = (tree[i].yVal - other[j].yVal) / (tree[i].xVal - other[j].xVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;claimed[count] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dist = Math.floor(Math.random()*((other[j].xVal - tree[i].xVal)/2 - 20));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;claimed[count].xLoc = (tree[i].xVal + other[j].xVal)/2 + dist;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;claimed[count].yLoc = (tree[i].yVal + other[j].yVal)/2 + dist*slope;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[tree[i].node][other[j].node], claimed[count].xLoc, claimed[count].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < other.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < other.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[other[i].node][other[j].node] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(other[i].xVal,Math.abs(other[i].yVal - other[j].yVal)/2 + other[i].yVal,Math.abs(other[i].yVal - other[j].yVal)/2,1.5*Math.PI,0.5*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < tree.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[tree[i].node][tree[j].node] != M_VAL && tree[j].pred[tree[j].pred.length-1] != tree[i].node && tree[i].pred[tree[i].pred.length-1] != tree[j].node)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree[i].xVal,Math.abs(tree[i].yVal - tree[j].yVal)/2 + tree[i].yVal,Math.abs(tree[i].yVal - tree[j].yVal)/2,0.5*Math.PI,1.5*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tree[j].pred[tree[j].pred.length-1] == tree[i].node || tree[i].pred[tree[i].pred.length-1] == tree[j].node)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree[i].xVal,Math.abs(tree[i].yVal - tree[j].yVal)/2 + tree[i].yVal,Math.abs(tree[i].yVal - tree[j].yVal)/2,0.5*Math.PI,1.5*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree[i].xVal,tree[i].yVal,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(tree[i].xVal,tree[i].yVal,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tree[i].node == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree[i].node,tree[i].xVal-3*(Math.floor(Math.log(tree[i].node+1)/Math.log(10))+1),tree[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree[i].node,tree[i].xVal-3*(Math.floor(Math.log(tree[i].node)/Math.log(10))+1),tree[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < other.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(other[i].xVal,other[i].yVal,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#c9c9c9';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(other[i].xVal,other[i].yVal,10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (other[i].node == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(other[i].node,other[i].xVal-3*(Math.floor(Math.log(other[i].node+1)/Math.log(10))+1),other[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(other[i].node,other[i].xVal-3*(Math.floor(Math.log(other[i].node)/Math.log(10))+1),other[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(tree[i].cost,tree[i].xVal - 25,tree[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[34].title[6] = "Interactive Prim's Algorithm -  drawGraph2";
fctns[34].src[7] = " init(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var other = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].node = Math.floor(Math.random()*A.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].xVal = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].yVal = (0 + c.height) / 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0].pred = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[i-1] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[i-1].node = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[i-1].xVal = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[i-1].yVal = i*(0 + c.height) / (A.length - tree.length + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph2(tree, other, A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispCurrTree(tree) + '</td><td>' + dispAdjEdges(tree, A) + '</td><td><input type='button' value='Check' onclick='tree=check(tree, A)'></td><td><input type='button' value='New Problem' onclick='newProb()'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tree;<br>}<br>";
fctns[34].title[7] = "Interactive Prim's Algorithm -  init";
fctns[34].src[8] = " disp(A)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[34].title[8] = "Interactive Prim's Algorithm -  disp";
fctns[34].src[9] = " dispCurrTree(tree)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>Node</td><td>Path to Node</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + tree[i].node + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prev = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < tree[i].pred.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev += tree[i].pred[j] + ' -> ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev += tree[i].node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + prev + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[34].title[9] = "Interactive Prim's Algorithm -  dispCurrTree";
fctns[34].src[10] = " dispAdjEdges(tree, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'What Edge should be selected next?<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<select name='nextEdge' id='nextEdge'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < tree.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (indexOf(tree, j) == -1 && A[tree[i].node][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var name = tree[i].node + '-' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<option value='' + name + ''>Edge: (' + tree[i].node + ', ' + j + ') with cost ' + A[tree[i].node][j] + '</option>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</select>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br></scr" + "ipt>";
fctns[34].title[10] = "Interactive Prim's Algorithm -  dispAdjEdges";
fctns[34].loc = "http://learninglover.com/examples.php?id=57";
fctns[35] = new Object();
fctns[35].src = new Array();
fctns[35].title = new Array();
fctns[35].src[0] = "<script type='text/javascript'>";
fctns[35].title[0] = "JavaScript Code Samples - styleTags";
fctns[35].src[1] = " getCode()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var input = document.getElementById('pgrm').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outut = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output2 = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (input == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'Hello, World!<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += 'Hello, World!<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'Hello,\' + \'World!<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = '<h2>Hello, World!</h2>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>There are a number of ways to output text in JavaScript, but the recommended way to do it is using the innerHTML method of a paragraph block. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The innerHTML property of an HTML object (like the paragraph tag we use above) contains all the HTML code inside that particular block. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'We can access this HTML code in javascript by calling the 'document.getElementById' method, and passing the id of the paragraph we wish to change. (i.e. document.getElementById(\'output\')). ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In the code above we begin the body section of HTML with a paragraph tag that we gave the id of \'output\'. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>&lt;p id=\'output\'&gt;&lt;/p&gt;</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'We could have just easily named this paragraph \'foo\' or \'bar\' or any other valid javascript name and have the same desired effect. I do encourage you however to use descriptive names to make your code easier to understand. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In the above code, you will see that we make calls to document.getElementById(\'output\').innerHTML. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'We can display text by changing the HTML code assigned to this object using the '=' or '+=' operators. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>document.getElementById(\'output\').innerHTML += 'Hello, World!&lt;br&gt;'</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Click the Run Code button to see how this program executes</p>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>Notice that the Javascript modifying the paragrapm the the tag \'output\' comes after we've already created this paragrapm. We must always place the code modifying an object after we've created that object because otherwise JavaScript will not know where the object is</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '2')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<title>Comments in JavaScript</title>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Comments in JavaScript\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//This is a single line comment, everything after the // is ignored by the computer. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'This line will be printed. <br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//document.getElementById(\'output\').innerHTML += \'This line will NOT be printed. \';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '/*This \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'is \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'a \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'multiple \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'line \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'comment. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'This line will NOT be printed. \';*/\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//In a multiple ilne comment, everything between /* and */ is ignored by the computer\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'Hello, World!\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = '<h2>Comments in JavaScript</h2>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>There are two ways to write comments in JavaScript.';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<ol>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li><b>Single Line Comments:</b> Some comments start with a // sybmol. Everything after the // sign is ignored. The // can either go on at the beginning of a line or a comment can go after a JavaScript statement';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>//This is a single line comment</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li><b>Multiple Line Comments:</b> Other comments can go between /* and */ statements. In a these comments, everything between /* and */ is ignored by the computer';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>/*This <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'a <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'multiple <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'line <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'comment. */</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</ol>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '3')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<title>Variables in Javascript</title>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Variables in Javascript\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Variables store data in memory.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//In order to do this you need to give the variable a name so you can retrieve the information later. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//These names must start with either a capital letter (A-Z), a lowercase letter(a-z)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//, an underscore (_), or a dollar sign ($)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//and can only contain letters, numbers and the underscore symbol or the dollar sign. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Variable names are case sensitive. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Variables can be declared using the 'var' keyword. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Declaring variables is not required, but suggested avoid confusing code well as to understand scope of variables\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var nothing;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'nothing = \' + nothing + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var Num = 8;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'Num = \' + Num + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var number_zero = 0;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'number_zero = \' + number_zero + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var frac_num = 2.7;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'frac_num = \' + frac_num + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var logical = false;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'logical = \' + logical + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Notice that Num and num are different variables. \n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = '<h2>Variables in JavaScript</h2>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>Variables store data in memory. In order to do this, you need to give the variable a name so that you can';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'retrieve the information later. These names must: </p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<ol>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li>Start witH either a capital letter (A-Z), a lower case letter (a-z), an underscore (_) or a dollar sign ($). ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li>Can only contain letters, numbers and the underscore symbol or the dollar sign. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li>Variable names are case sensitive.';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</ol>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4a')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Data Types in JavaScript\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//JavaScript has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Booleans\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Arrays\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Objects\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Numbers can be integer or decimal (called float)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Integers are used for standard operations on \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//(positive and negative) whole numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'int_num1 = 8\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'int_num1 = \' + int_num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'int_num2 = -27\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'int_num2 = \' + int_num2 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Floats are used for floating point numbers, or rational \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//numbers that are not whole numbers. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'float_num = 3.14159\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'float_num = \' + float_num + '<br>';\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//You can also declare numbers as fractions and they become floats\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'float_num2 = 22/7\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'float_num2 = \' + float_num2 + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = '<h2>Data Types in JavaScript</h2>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<ol>JavaScript has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li>Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li>Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li>Booleans\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li>Arrays\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '&nbsp;&nbsp;<li>Objects\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</ol>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>Numbers can be integer or decimal (called float). <br>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Integers are used for standard operations on \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(positive and negative) whole numbers<br>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>int_num1 = 8</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>int_num1 = -27</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Floats are used for floating point numbers, or rational \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'numbers that are not whole numbers. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>float_num = 3.14159</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>float_num2 = 22/7</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4b')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Data Types in JavaScript\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//JavaScript has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Booleans\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Arrays\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Objects\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Strings are characters between a pair of (single or double) quotes\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'str1 = \'This is a string\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'str1 = \' + str1 + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'str2 = 'This is also a string'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'str2 = \' + str2 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//There are several operations you can do on strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//You can access the characters inside a string by bracket notation: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'str3 = 'This is a third string'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'str3[0] = \' + str3[0] + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//You can also use formatting to display numbers correctly:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var cmpl = 292/473\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var player = 'Cam Newton'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var year = '2013'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  player + 's accuracy in ' + year + ' was ' + cmpl.toFixed(2) + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The + operator concatenates two strings:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'first = 'Bruce'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'last = 'Leroy'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'full_name = first + ' ' + last\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'full_name = \' + full_name + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The length property tells the number of characters the string\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var movie =\'The Last Dragon\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'The number of characters in \' + movie + \' is \' + movie.length + \'<br>\'\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The indexOf property tells the first location that a character appears in a string (noting that the first character is at position 0). If a character not found, this method returns -1.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var poem = \'Still I Rise\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'The character 'e' first appears at position \' + poem.indexOf('e') + \' in \' + poem + \'<br>\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'The character 'C' first appears at position \' + poem.indexOf('r') + \' in \' + poem + \'<br>\'\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The substring method takes wo numbers input and returns the string of characters that begin at the first number and end at the second.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var poem2 = \'I Know Why The Caged Bird Sings\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'The substring beginning at position 0 and ending at position 10 is '\' + poem2.substring(0, 10) + \'' in '\' + poem2 + \''<br>\'\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The parseInt function will convert a string that looks like a whole number into a whole number that can then be operated on using math operations instead of string operations.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var num1 = \'27\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var num2 = \'3\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'As strings, \' +      num1 + \' + \' +      num2 + \' is \' + (     num1 +      num2) + \', but as numbers,      num1 +      num2 is \' + eval(  parseInt(     num1) + parseInt(       num2)) + \'<br>\';\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The parseFloat function will convert a string that a looks like a rational number into a number that can then be operated on using math operations instead of string operations.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var numFloat1 = \'27.33\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var numFloat2 = \'3.23\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'As strings, \' + numFloat1 + \' + \' + numFloat2 + \' is \' + (numFloat1 + numFloat2) + \', but as numbers, numFloat1 + numFloat2 is \' + eval(parseFloat(numFloat1) + parseFloat(numFloat2)) + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = '<h2>Data Types in JavaScript</h2>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'JavaScript has 5 basic data types: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Booleans<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Arrays<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Objects<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Strings are characters between a pair of (single or double) quotes<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>str1 = \'This is a string\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'str1 = \' + str1 + '&lt;br&gt;';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'str2 = 'This is also a string'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'str2 = \' + str2 + '&lt;br&gt;';\n\n</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There are several operations you can do on strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can access the characters inside a string by bracket notation: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>str3 = 'This is a third string'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'str3[0] = \' + str3[0] + '&lt;br&gt;';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can also use formatting to display numbers correctly:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var cmpl = 292/473\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'var player = 'Cam Newton'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'var year = '2013'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  player + 's accuracy in ' + year + ' was ' + cmpl.toFixed(2) + '&lt;br&gt;';</pre>\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The + operator concatenates two strings:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>first = 'Bruce'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'last = 'Leroy'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'full_name = first + ' ' + last\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'full_name = \' + full_name + '&lt;br&gt;';</pre>\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The length property tells the number of characters the string\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var movie =\'The Last Dragon\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'The number of characters in \' + movie + \' is \' + movie.length + \'&lt;br&gt;\';</pre>\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The indexOf property tells the first location that a character appears in a string (noting that the first character is at position 0). If a character not found, this method returns -1.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var poem = \'Still I Rise\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'The character 'e' first appears at position \' + poem.indexOf('e') + \' in \' + poem + \'&lt;br&gt;\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'The character 'C' first appears at position \' + poem.indexOf('r') + \' in \' + poem + \'&lt;br&gt;\';</pre>\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The substring method takes two numbers input and returns the string of characters that begin at the first number and end at the second.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var poem2 = \'I Know Why The Caged Bird Sings\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'The substring beginning at position 0 and ending at position 10 is '\' + poem2.substring(0, 10) + \'' in '\' + poem2 + \''&lt;br&gt;\';</pre>\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The parseInt function will convert a string that looks like a whole number into a whole number that can then be operated on using math operations instead of string operations.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var num1 = \'27\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'var num2 = \'3\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'As strings, \' +      num1 + \' + \' +      num2 + \' is \' + (     num1 +      num2) + \', but as numbers,      num1 +      num2 is \' + eval(  parseInt(     num1) + parseInt(       num2)) + \'&lt;br&gt;\';</pre>\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '//The parseFloat function will convert a string that a looks like a rational number into a number that can then be operated on using math operations instead of string operations.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var numFloat1 = \'27.33\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'var numFloat2 = \'3.23\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'As strings, \' + numFloat1 + \' + \' + numFloat2 + \' is \' + (numFloat1 + numFloat2) + \', but as numbers, numFloat1 + numFloat2 is \' + eval(parseFloat(numFloat1) + parseFloat(numFloat2)) + \'&lt;br&gt;\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4c')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The boolean data type evaluates a given expression to true or false. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - If the expression is a conditional, then the expression will be evaluated to a true or false result.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - If the expression is not a conditional, then the Boolean type returns false if the expression is any of the following (called falsy): the empty string (\'\'), null, undefined, NaN, +0, -0 and false\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - If the expression is not a conditional, then the Boolean type returns true if it is not any of the values listed above (called truthy). \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of true, based on the expression. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool1 = Boolean(1 > 0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool1 = \' + bool1 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of false, based on the expression. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool2 = Boolean(1 < 0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool2 = \' + bool2 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of true, because the expression is not a conditional and the number 8 is not a falsy. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool3 = Boolean(8);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool3 = \' + bool3 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Similarly, the following code will display the value of true, because the expression is not a conditional and the number 0.5 is not a falsy. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool4 = Boolean(0.5);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool5 = \' + bool4 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Similarly, the following code will display the value of true, because the expression is not a conditional and -3 is not a falsy. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool5 = Boolean(-3)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool5 = \' + bool5 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Similarly, the following code will display the value of true, because the expression is not a conditional and \'This is a string\' is not a falsy. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool6 = Boolean(\'This is a string\')\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool6 = \' + bool6 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of false because 0 is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool7 = Boolean(0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool7 = \' + bool7 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of false because -0 is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool8 = Boolean(-0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool8 = \' + bool8 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of false because the empty string is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool9 = Boolean(\'\');\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool9 = \' + bool9 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of false because null is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool10 = Boolean(null);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool10 = \' + bool10 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of false because false is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool11 = Boolean(false);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool11 = \' + bool11 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of true because 10/0 returns Infinity which is not a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool12 = Boolean(10/0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool12 = \' + bool12 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The following code will display the value of true because 10/0 returns NAN which is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var bool13 = Boolean(10/\'this is a string\');\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'bool13 = \' + bool13 + \'<br>\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'The boolean data type evaluates a given expression to true or false. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - If the expression is a conditional, then the expression will be evaluated to a true or false result.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - If the expression is not a conditional, then the Boolean type returns false if the expression is any of the following (called falsy): the empty string (\'\'), null, undefined, NaN, +0, -0 and false<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - If the expression is not a conditional, then the Boolean type returns true if it is not any of the values listed above (called truthy). <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of true, based on the expression. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool1 = Boolean(1 > 0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool1 = \' + bool1 + \'<br>\';</pre><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of false, based on the expression. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool2 = Boolean(1 < 0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool2 = \' + bool2 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of true, because the expression is not a conditional and the number 8 is not a falsy. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool3 = Boolean(8);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool3 = \' + bool3 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Similarly, the following code will display the value of true, because the expression is not a conditional and the number 0.5 is not a falsy. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool4 = Boolean(0.5);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool5 = \' + bool4 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Similarly, the following code will display the value of true, because the expression is not a conditional and -3 is not a falsy. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool5 = Boolean(-3)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool5 = \' + bool5 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Similarly, the following code will display the value of true, because the expression is not a conditional and \'This is a string\' is not a falsy. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool6 = Boolean(\'This is a string\')\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool6 = \' + bool6 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of false because 0 is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool7 = Boolean(0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool7 = \' + bool7 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of false because -0 is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool8 = Boolean(-0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool8 = \' + bool8 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of false because the empty string is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool9 = Boolean(\'\');\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool9 = \' + bool9 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of false because null is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool10 = Boolean(null);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool10 = \' + bool10 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of false because false is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool11 = Boolean(false);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool11 = \' + bool11 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of true because 10/0 returns Infinity which is not a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool12 = Boolean(10/0);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool12 = \' + bool12 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The following code will display the value of true because 10/0 returns NAN which is a falsy.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var bool13 = Boolean(10/\'this is a string\');\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'bool13 = \' + bool13 + \'<br>\';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</' + 'script>;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4d')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Data Types in JavaScript\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//JavaScript has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Booleans\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Arrays\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Objects\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Arrays are used to store a finite sequence of variables under the same variable name. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//One way they can be declared is by listing the items separated by a comma between square brackets\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'first_primes = [2, 3, 5]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  first_primes  + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_movies = ['Shawshank Redemption', 'Friday', 'Godfather 2']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'fav_movies = \' + fav_movies + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The items in a list can be of different types\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_things = [\'Music\', [\'Raindrops on roses\', \'Whiskers on Kittens\']]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//You can access the elements of a list, individually with the first \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//value having location 0. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'first_primes[2] = \' + first_primes[2] + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Arrays can also be declared without knowing the elements \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'var tracks = new Array()\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'tracks[0] = \'Ribbon in the Sky\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'tracks[1] = \'As\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'tracks[2] = \'Isn't She Lovely\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'tracks =\' + tracks + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//You can change the elements of a list\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_movies[0] = 'The Wood'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'Now, fav_movies = \' + fav_movies + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//To add an element to an array, you just assign the value to the location of the current length of the array.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_movies[fav_movies.length] = 'Harry Potter'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'After append, fav_movies = \' + fav_movies + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<h2>Data Types in JavaScript</h2>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'JavaScript has 5 basic data types: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Booleans<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Arrays<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Objects<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Arrays are used to store a finite sequence of variables under the same variable name. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'One way they can be declared is by listing the items separated by a comma between square brackets<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>first_primes = [2, 3, 5]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  first_primes  + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'fav_movies = ['Shawshank Redemption', 'Friday', 'Godfather 2']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'fav_movies = \' + fav_movies + '<br>';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>The items in a list can be of different types\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'fav_things = [\'Music\', [\'Raindrops on roses\', \'Whiskers on Kittens\']];</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can access the elements of a list, individually with the first value having location 0. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>document.getElementById(\'output\').innerHTML += \'first_primes[2] = \' + first_primes[2] + '<br>';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Arrays can also be declared without knowing the elements \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>var tracks = new Array()\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'tracks[0] = \'Ribbon in the Sky\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'tracks[1] = \'As\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'tracks[2] = \'Isn't She Lovely\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'tracks =\' + tracks + '<br>';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can change the elements of a list\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>fav_movies[0] = 'The Wood'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'Now, fav_movies = \' + fav_movies + '<br>';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'To add an element to an array, you just assign the value to the location of the current length of the array.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>fav_movies[fav_movies.length] = 'Harry Potter'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += \'After append, fav_movies = \' + fav_movies + '<br>';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4e')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Data Types in JavaScript\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//JavaScript has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Booleans\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Arrays\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Objects\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//In JavaScript, objects are similar to arrays in that they allow programmers to store many things that all relate to the same subject under a single variable name. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//There are some major differences between arrays and the more general concept of an object. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - first, objects allow the programmer to decide how the elements are indexed. Remember that in arrays, elements are indexed numerically beginning at 0. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - second, in addition to members, objects can also have methods which are functions defined on the object and it's members. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//There are several ways to define objects:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - inside curly brackets, where the item will be a key, a colon and then a value\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'gameLog = {'Wall' : '28 points', 'Beal' : '16 points', 'Gortat' : '9 points'}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  \'Game Points: <br>Wall : \' + gameLog['Wall'] + '<br>Beal : ' + gameLog['Beal'] + '<br>Gortat :' + gameLog['Gortat'] + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - using dot notation, property is indicated by the variable name, then a dot, then the property name. It is assigned values using the equals symbol. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - We can also define methods inside an object by declaring the property as a function. To access the properties of the Object, use the this keyword to refer to the object itself. The methods can then be later called by using the property name followed by parenthesis. We will talk more about functions later. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'book = new Object()\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'book.title = \'Native Son\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'book.author = \'Richard Wright\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'book.country = \'United States\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'book.language = \'English\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'book.pubDate = \'March 1, 1940\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'book.disp = function (){return this.title + \', by \' + this.author + \', written in \' + this.country + \' in the \' + this.language + \' language on \' + this.pubDate};\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += \'Title: \' + book.title + '<br>' + \'Author: \' + book.author + '<br>' + \'Country: \' + book.country + '<br>' + \'Language: \' + book.language + '<br>' + \'Publication Date: \' + book.pubDate + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += book.disp() + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Data Types in JavaScript<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'JavaScript has 5 basic data types: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Booleans<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Arrays<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Objects<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In JavaScript, objects are similar to arrays in that they allow programmers to store many things that all relate to the same subject under a single variable name. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There are some major differences between arrays and the more general concept of an object. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - first, objects allow the programmer to decide how the elements are indexed. Remember that in arrays, elements are indexed numerically beginning at 0. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - second, in addition to members, objects can also have methods which are functions defined on the object and it's members. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There are several ways to define objects:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - inside curly brackets, where the item will be a key, a colon and then a value\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>gameLog = {'Wall' : '28 points', 'Beal' : '16 points', 'Gortat' : '9 points'}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  gameLog['Wall'] + '<br>' + gameLog['Beal'] + '<br>' + gameLog['Gortat'] + '<br>';</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - using dot notation, property is indicated by the variable name, then a dot, then the property name. It is assigned values using the equals symbol. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - We can also define methods inside an object by declaring the property as a function. To access the properties of the Object, use the this keyword to refer to the object itself. The methods can then be later called by using the property name followed by parenthesis. We will talk more about functions later. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>book = new Object()\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'book.title = \'Native Son\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'book.author = \'Richard Wright\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'book.country = \'United States\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'book.language = \'English\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'book.pubDate = \'March 1, 1940\';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'book.disp = function (){return this.title + \', by \' + this.author + \', written in \' + this.country + \' in the \' + this.language + \' language on \' + this.pubDate};</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '5a')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Basic Operations in JavaScript: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Arithmetic\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The basic operations in JavaScript are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// addition (+), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// subtraction (-), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// multiplication (*), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// division (/), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// modulus (%), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// and exponent (**).\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Given two numbers, the addition operation returns their sum\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 3.14\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 2.71\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 + num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num1 + ' + ' + num2 + ' = ' + num3 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Given two numbers, the subtraction operation returns their difference\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 16\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 25\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 - num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num1 + ' - ' + num2 + ' = ' + num3 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Given two numbers, the multiplication operation returns their product\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 4\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 11\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 * num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num1 + ' * ' + num2 + ' = ' + num3 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Given two numbers, the division operation returns \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//the floor of the quotient of num1 divided by num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 5\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = Math.floor(num1 / num2)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'Math.floor(' + num1 + ' / ' + num2 + ') = ' + num3 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Given two numbers, (float(num1)/num2) returns the result of \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//num1 divided by num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 5\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 / num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=   num1 + ' / ' + num2 + ' = ' + num3 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Given two integer numbers, the modulus operation returns their \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//remainder when num1 is divided by num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 16\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 3\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 % num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=   num1 + ' % ' + num2 + ' = ' + num3 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//JavaScript also has an exponent operator given by ^\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 4\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 ^ num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=   num1 + '^' + num2 + ' = ' + num3 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Basic Operations in JavaScript: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Arithmetic<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The basic operations in JavaScript are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' addition (+), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' subtraction (-), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' multiplication (*), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' division (/), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' modulus (%), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' and exponent (**).<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, the addition operation returns their sum<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 3.14\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 2.71\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 + num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=   num1 + ' + ' + num2 + ' = ' + num3 + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, the subtraction operation returns their difference<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 16\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 25\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 - num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=   num1 + ' - ' + num2 + ' = ' + num3 + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, the multiplication operation returns their product<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 4\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 11\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 * num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=   num1 + ' * ' + num2 + ' = ' + num3 + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, the division operation returns <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the floor of the quotient of num1 divided by num2<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 5\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = Math.floor(num1 / num2)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=   num1 + ' / ' + num2 + ' = ' + num3 + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, (Math.floor(num1/num2) returns the result of <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 divided by num2<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 5\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = float(num1) / num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'Math.flor(' + num1 + ' + ' + num2 + ') = ' + num3 + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two integer numbers, the modulus operation returns their <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'remainder when num1 is divided by num2<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 16\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 3\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 % num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=   num1 + ' % ' + num2 + ' = ' + num3 + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'JavaScript also has an exponent operator given by **<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 4\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 ^ num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=   num1 + '^' + num2 + ' = ' + num3 + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '5b')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Basic Operations in JavaScript: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Comparison\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//There are six basic comparison operations in JavaScript: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//These are :\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - greater than (>), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - less than (<), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - equals (==) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - not equals (!=) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - greater than or equal to (>=) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - less than or equal to (<=) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The less than operator compares two objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//the value in the left term is smaller than the value in the right \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//(however 'smaller' is defined for those objects). \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_lt = num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num1 + ' < ' + num2 + ' = ' + op_lt + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The greater than operator compares two objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//the value in the left term is larger than the value in the right \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//(however 'larger' is defined for those objects). \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_gt = num1 > num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num1 + ' < ' + num2 + ' = ' + op_gt + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The equals operator compares two objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//the value in the left term is equal to value in the right \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//(however 'equal' is defined for those objects. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_eq = num1 == num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num1 + ' < ' + num2 + ' = ' + op_eq + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The not equals operator compares two objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//the value in the left term is not equal to value in the right \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//(however 'equal' is defined for those objects. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_neq = num1 != num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num1 + ' < ' + num2 + ' = ' + op_neq + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//In addition, we can join together multiple logical operators \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//using and, or and not terminology.  \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The and operator compares two logical objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//both these logical objects are true. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_and = num3 < num1 && num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num3 + ' < ' + num1 + ' and ' + num1 + ' < ' + num2 + ' = ' + op_and + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The or operator compares two logical objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//one of these logical objects is true. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = 30\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_or = num3 < num1 || num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  num3 + ' < ' + num1 + ' or ' + num1 + ' < ' + num2 + ' = ' + op_or + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The not operator returns the logical negation of a logical operator. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_not = !(10 < 20)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  '!(' + num1 + ' < ' + num2 + ')' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Basic Operations in JavaScript: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Comparison<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There are six basic comparison operations in JavaScript: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'These are :<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - greater than (>), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - less than (<), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - equals (==) <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - not equals (!=) <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - greater than or equal to (>=) <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - less than or equal to (<=) <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The less than operator compares two objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the value in the left term is smaller than the value in the right <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(however 'smaller' is defined for those objects). <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_lt = num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  num1 + ' < ' + num2 + ' = ' + op_lt + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The greater than operator compares two objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the value in the left term is larger than the value in the right <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(however 'larger' is defined for those objects). <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_gt = num1 > num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  num1 + ' < ' + num2 + ' = ' + op_gt + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The equals operator compares two objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the value in the left term is equal to value in the right <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(however 'equal' is defined for those objects. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_eq = num1 == num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  num1 + ' < ' + num2 + ' = ' + op_eq + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The not equals operator compares two objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the value in the left term is not equal to value in the right <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(however 'equal' is defined for those objects. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_neq = num1 != num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  num1 + ' < ' + num2 + ' = ' + op_neq + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In addition, we can join together multiple logical operators <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'using and, or and not terminology.  <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The and operator compares two logical objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'both these logical objects are true. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_and = num3 < num1 && num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  num3 + ' < ' + num1 + ' && ' + num1 + ' < ' + num2 + ' = ' + op_and + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The or operator compares two logical objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'one of these logical objects is true. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = 30\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_or = num3 < num1 || num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  num3 + ' < ' + num1 + ' || ' + num1 + ' < ' + num2 + ' = ' + op_or + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The not operator returns the logical negation of a logical operator. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_not = !(10 < 20)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  '!(' + num1 + ' < ' + num2 + ')' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '5c')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Basic Operations in JavaScript: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - Assignment\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//There are basic assignment operations in JavaScript are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - = , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - += , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - -= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - *= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - /= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - %= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - **= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The '='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assigns the value on the right hand side to \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//the variable on the left hand side. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The '+=' is used as a += b and assigns the value of a + b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 += 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The '-=' is used as a -= b and assigns the value of a - b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 -= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The '*=' is used as a *= b and assigns the value of a * b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 *= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The '/=' is used as a /= b and assigns the value of a / b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 /= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The '%=' is used as a %= b and assigns the value of a % b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 %= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The '^=' is used as a ^= b and assigns the value of a ^ b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 ^= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Basic Operations in JavaScript: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Assignment<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There are basic assignment operations in JavaScript are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - = , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - += , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - -= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - *= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - /= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - %= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - **= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '=' assigns the value on the right hand side to <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the variable on the left hand side. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '+=' is used as a += b and assigns the value of a + b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 += 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '-=' is used as a -= b and assigns the value of a - b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 -= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '*=' is used as a *= b and assigns the value of a * b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 *= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '/=' is used as a /= b and assigns the value of a / b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 /= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '%=' is used as a %= b and assigns the value of a % b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 %= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '**=' is used as a ^= b and assigns the value of a ^ b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 ^= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '6')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Conditionals in JavaScript: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//There two basic conditional statements in JavaScript are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - if statements \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - if else statements \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//An if statement works as if conditional followed by a block of code. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//If there are multiple lines in this block of code, \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//In an if statement, if the condition is true, then the block of code that \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//follows is executed, otherwise it is ignored.  \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'if (num1 != 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'Inside first If, num1 is NOT ten' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tnum1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Consider the next example, where all that is changed is the space in \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//front of the line 'num1 = 20' is removed\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'if (num1 != 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'Inside second If, num1 is NOT ten' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'Outside second If, num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//In an if ... else statement, if the condition after the if statement is \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//true, then the first block of code is executed. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//If this condition is false, then the  alternative set of actions located \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//after the else statement is executed. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'if (num1 != 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'Inside 3rd If, num1 is NOT ten' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tnum1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'else\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'Inside 3rd Else, num1 is ten' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tnum1 = 30\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1 + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Conditionals in JavaScript: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There two basic conditional statements in JavaScript are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - if statements <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - if else statements <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'An if statement works as if conditional followed by a block of code. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'If there are multiple lines in this block of code, they need to have <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the same number of spaces in front of the first non-whitespace character. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In an if statement, if the condition is true, then the block of code that <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'follows is executed, otherwise it is ignored.  <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'if (num1 != 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tdocument.getElementById(\'output\').innerHTML +=  'Inside first If, num1 is NOT ten' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tnum1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1);</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Consider the next example, where all that is changed is the space in <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'front of the line 'num1 = 20' is removed<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'if (num1 != 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tdocument.getElementById(\'output\').innerHTML +=  'Inside second If, num1 is NOT ten' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'Outside second If, num1 = ' + num1);</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In an if ... else statement, if the condition after the if statement is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'true, then the first block of code is executed. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'If this condition is false, then the  alternative set of actions located <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'after the else statement is executed. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'if (num1 != 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tdocument.getElementById(\'output\').innerHTML +=  'Inside 3rd If, num1 is NOT ten' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tnum1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'else \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tdocument.getElementById(\'output\').innerHTML +=  'Inside 3rd Else, num1 is ten' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tnum1 = 30\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'num1 = ' + num1);</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '7a')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Loops in JavaScript: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The two types of loops we'll consider in JavaScript are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - for loops\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The purpose of a for loop is to iterate once for each item in a sequence. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//This sequqnce can be a string, a list, or a tuple. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Like with 'if' statements, if there are multiple lines in this block of \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//code, they need to have the same number of spaces in front of the first \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//non-whitespace character. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'school = 'Morehouse'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'about to begin for loop 1' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for (var i = 0; i < school.length; i++) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  school[i] + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 1' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'list1 = ['facebook', 'linkedin', 'meetup', 'twitter', 'google']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'about to begin for loop 2' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for (var i = 0; i < list1.length; i++) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'loop2:' + company + ' does social media' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 2' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'about to begin for loop 3' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for (var i = 0; i < list1.length; i++) \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'loop3: ' + list1[i] + ' does social media' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 3' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//A for loop can be interrupted by a break statement. This will stop the \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//current execution of the loop and continue at the next block of \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//program code. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'about to begin for loop 4' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for (var i = 0; i < list1.length; i++) \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tif (list1[i] == 'linkedin')\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\tbreak\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'loop4: ' + list1[i] + ' does social media' + '<br>';\n\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 4' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//A for loop can also be interrupted by a continue statement. This will \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//stop the current iteration and begin execution at the \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//beginning of the next iteration. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'about to begin for loop 5' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for (var i = 0; i < list1.length; i++) \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tif (list1[i] == 'linkedin')\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\tcontinue\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'loop5: ' + list1[i] + ' does social media' + '<br>';\n\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 5' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Loops in JavaScript: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The two types of loops we'll consider in JavaScript are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - for loops<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - while loops<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The purpose of a for loop is to iterate once for each item in a sequence. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'This sequqnce can be a string, a list, or a tuple. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Like with 'if' statements, if there are multiple lines in this block of <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'code, they need to have the same number of spaces in front of the first <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'non-whitespace character. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>school = 'Morehouse'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'about to begin for loop 1' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for letter in school: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' document.getElementById(\'output\').innerHTML +=  letter + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 1' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'list1 = ['facebook', 'linkedin', 'meetup', 'twitter', 'google']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'about to begin for loop 2' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for company in list1 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' document.getElementById(\'output\').innerHTML +=  'loop2:' + company + ' does social media' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 2' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'about to begin for loop 3' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' document.getElementById(\'output\').innerHTML +=  'loop3: ' + list1[i] + ' does social media' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 3');</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A for loop can be interrupted by a break statement. This will stop the <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'current execution of the loop and continue at the next block of <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'program code. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>document.getElementById(\'output\').innerHTML +=  'about to begin for loop 4' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' if list1[i] == 'linkedin':\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '  break\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' document.getElementById(\'output\').innerHTML +=  'loop4: ' + list1[i] + ' does social media' + '<br>';\n\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 4' + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A for loop can also be interrupted by a continue statement. This will <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'stop the current iteration and begin execution at the <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'beginning of the next iteration. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>document.getElementById(\'output\').innerHTML +=  'about to begin for loop 5' + '<br>')\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' if list1[i] == 'linkedin':\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '  continue\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' document.getElementById(\'output\').innerHTML +=  'loop5: ' + list1[i] + ' does social media' + '<br>';\n\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'we have finished for loop 5' + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '7b')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Loops in JavaScript: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//The two types of loops we'll consider in JavaScript are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '// - while loops\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//A while loop is similar to an if statement, in that it checks that a \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//condition is true and executes a block of code if this condition is true.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Unlike an if statement, however, a while loop will continue to execute this \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//block of code as long as the condition remains true. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Similar to 'if' statements and 'for' loops, if there are multiple lines in \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//this block of code, they need to have the same number of spaces in front of \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//the first non-whitespace character. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'about to begin while loop 1' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'while (count < 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  count + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tcount += 1\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'we have finished while loop 1' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//A while loop can be interrupted by a break statement. This will stop the current \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//execution of the loop and continue at the next block of program code. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'about to begin while loop 2' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'while (count < 10) \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tcount += 1\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tif (count % 2 == 0)\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\tbreak\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'loop2: ' + count + '<br>';\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'we have finished while loop 2' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//A while loop can also be interrupted by a continue statement. This will stop the\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//current iteration and begin execution at the beginning of the next iteration. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'about to begin while loop 3' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'while (count < 10) \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tcount += 1\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tif (count % 2 == 0)\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\tcontinue\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'loop3: ' + count + '<br>';\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML +=  'we have finished while loop 3' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Loops in JavaScript: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The two types of loops we'll consider in JavaScript are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - while loops<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A while loop is similar to an if statement, in that it checks that a <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'condition is true and executes a block of code if this condition is true.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Unlike an if statement, however, a while loop will continue to execute this <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'block of code as long as the condition remains true. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Similar to 'if' statements and 'for' loops, if there are multiple lines in <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'this block of code, they need to have the same number of spaces in front of <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the first non-whitespace character. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'about to begin while loop 1' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'while count < 10: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' document.getElementById(\'output\').innerHTML +=  count + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' count += 1\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'we have finished while loop 1' + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A while loop can be interrupted by a break statement. This will stop the current <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'execution of the loop and continue at the next block of program code. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>document.getElementById(\'output\').innerHTML +=  'about to begin while loop 2' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'while (count < 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tcount += 1\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tif count % 2 == 0:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\t\tbreak\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tdocument.getElementById(\'output\').innerHTML +=  'loop2: ' + count + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'we have finished while loop 2' + '<br>';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A while loop can also be interrupted by a continue statement. This will stop the<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'current iteration and begin execution at the beginning of the next iteration. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>document.getElementById(\'output\').innerHTML +=  'about to begin while loop 3' + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'while (count < 10) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tcount += 1\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tif (count % 2 == 0)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\t\tcontinue\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tdocument.getElementById(\'output\').innerHTML +=  'loop3: ' + count + '<br>';\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML +=  'we have finished while loop 3' + '<br>';</pre>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '8')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Functions in JavaScript: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//A function is a block of code that can be called repeatedly. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//In JavaScript, functions are defined by the word 'def', followed by the function name, \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//then the parameters in parenthesis and a colon\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//Like loops and if statements, blocks of function code need to be equally indented. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function printByline(author)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  'written by ' + author + '. ' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '//A function can be like above and not return a value, or like below and return a value. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function squareNunmber(num)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\treturn num*num;\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'name = 'AfterMath'\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'printByline(name);\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num = 12;\n'';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'document.getElementById(\'output\').innerHTML += num + \' squared is \' + squareNumber(num) + \'<br>\';';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Functions in JavaScript: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A function is a block of code that can be called repeatedly. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In JavaScript, functions are defined by the word 'def', followed by the function name, <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'then the parameters in parenthesis and a colon<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Like loops and if statements, blocks of function code need to be equally indented. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>function printByline(author));\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\tdocument.getElementById(\'output\').innerHTML +=  'written by ' + author + '. ' + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A function can be like above and not return a value, or like below and return a value. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>function squareNunmber(num)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '\treturn num*num;\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'name = 'AfterMath'\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'printByline(name);';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num = 12;\n'';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'document.getElementById(\'output\').innerHTML += num + \' squared is \' + squareNumber(num) + \'<br>\';</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '9a')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function writeLeft()\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'Loutput\').innerHTML =  'We have text on the Left<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'Routput\').innerHTML =  '_________________________';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function writeRight()\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'Routput\').innerHTML =  'We have text on the Right<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'Loutput\').innerHTML =  '_________________________';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<table><tr><td><p id=\'Loutput\'></p></td><td><p id=\'Routput\'></p></td></tr></table>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<input type=\'button\' value=\'Write Left\' onClick=\'writeLeft()\'><br>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<input type=\'button\' value=\'Write Right\' onClick=\'writeRight()\'><br>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '9b')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function addTwo(num1, num2)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  num1 + ' + ' + num2 + ' = ' + eval(parseInt(num1) + parseInt(num2)) + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function subTwo(num1, num2)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  num1 + ' - ' + num2 + ' = ' + eval(parseInt(num1) - parseInt(num2)) + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function multTwo(num1, num2)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  num1 + ' * ' + num2 + ' = ' + eval(parseInt(num1) * parseInt(num2)) + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function divTwo(num1, num2)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  num1 + ' / ' + num2 + ' = ' + eval(parseInt(num1) / parseInt(num2)) + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function modTwo(num1, num2)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.getElementById(\'output\').innerHTML +=  num1 + ' % ' + num2 + ' = ' + eval(parseInt(num1) % parseInt(num2)) + '<br>';\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function process()\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tvar num1 = document.getElementById(\'number1\').value;';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tvar num2 = document.getElementById(\'number2\').value;';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tvar op = document.getElementById(\'operation\').value;';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tif (op == 1)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\taddTwo(num1, num2);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\telse if (op == 2)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\tsubTwo(num1, num2);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\telse if (op == 3)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\tmultTwo(num1, num2);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\telse if (op == 4)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\tdivTwo(num1, num2);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\telse if (op == 5)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t\tmodTwo(num1, num2);\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\t}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<title>Using Forms in JavaScript</title>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name=\'output\' id=\'output\'></p>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<form>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<label>Enter Number 1: </label><input id=\'number1\'><br>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<label>Enter Number 2: </label><input id=\'number2\'><br>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<select id=\'operation\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=1>Add</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=2>Subtract</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=3>Multiply</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=4>Divide</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=5>Mod</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</select>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<input type=\'button\' value=\'Calculate\' onClick=\'process()\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</form>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Functions in JavaScript: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In HTML much of the interaction with users is through forms. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'This allows web page designers to take responses in the form of input boxes,\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'select boxes, buttons, text areas, and a number of other form elements. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'This page takes advantage of the onClick method of the buttons. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '9c')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '<html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<script type=\'text/javascript\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'function process()\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '{\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tvar nClr = document.getElementById(\'newClr\').value;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\tdocument.bgColor=nClr;\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</' + 'script>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</head>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Try it now: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<select id=\'newClr\' onChange=\'process()\'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'choose\'>set background color</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#FF0000\'>Red</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#0000FF\'>Blue</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#FFFF00\'>Yellow</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#008000\'>Green</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#FFA500\'>Orange</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#800080\'>Purple</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#A52A2A\'>Brown</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#000000\'>Black</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#FFFFFF\'>White</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#00FFFF\'>Aqua</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#006400\'>Dark Green</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#8B0000\'>Dark Red</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#FA8072\'>Salmon</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#D2B48C\'>Tan</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#C0C0C0\'>Silver</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#DA70D6\'>Orchid</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#FF4500\'>OrangeRed</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#C71585\'>MediumVioletRed</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  <option value=\'#483D8B\'>DarkStlateBlue</option>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</select>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</body>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</html>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Functions in JavaScript: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In HTML much of the interaction with users is through forms. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'This allows web page designers to take responses in the form of input boxes,\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'select boxes, buttons, text areas, and a number of other form elements. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'This page takes advantage of the onChange method of the select boxes. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<p>I encourage you to save the programs on your computer, modify the JavaScript code and open the new program up in a browser to see if it performs as you wish</p>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('code').value = output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('wlkthrgh').innerHTML = output2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('submitBtn').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return output;<br>}<br>var pgrmCode;<br></scr" + "ipt>";
fctns[35].title[1] = "JavaScript Code Samples - styleTags";
fctns[35].loc = "http://learninglover.com/examples.php?id=75";
fctns[36] = new Object();
fctns[36].src = new Array();
fctns[36].title = new Array();
fctns[36].src[0] = "<script type='text/javascript'><br>var text = '';<br>";
fctns[36].title[0] = "K Means Clustering for 2013 NFL Stats - styleTags";
fctns[36].src[1] = " EucDist(point1, point2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (point1.length != point2.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clms = new Array(5, 6, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < clms.length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(Math.abs(point1[clms[yin]] - point2[clms[yin]]), 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br>";
fctns[36].title[1] = "K Means Clustering for 2013 NFL Stats -  EucDist";
fctns[36].src[2] = " generate()<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[0] = 'Greg Zuerlein, STL, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1] = 'Pacman Jones, CIN, 30, 16, 17, 0, 3, 60, 1, 60, 14, 1, 0, 2, 43, 0, 51, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[2] = 'Jared Allen, MIN, 31, 16, 16, 11.5, 0, 0, 0, 0, 6, 2, 0, 0, 0, 0, 33, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[3] = 'Nate Allen, PHI, 26, 16, 16, 1, 1, 43, 0, 43, 7, 1, 0, 0, 0, 0, 65, 24, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[4] = 'Kiko Alonso, BUF, 23, 16, 16, 2, 4, 38, 0, 32, 5, 1, 0, 2, 13, 0, 87, 72, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[5] = 'Tyson Alualu, JAX, 26, 16, 16, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 34, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[6] = 'Prince Amukamara, NYG, 24, 16, 16, 0, 1, -4, 0, -4, 14, 2, 0, 0, 0, 0, 76, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[7] = 'James Anderson, CHI, 30, 16, 16, 4, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 85, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[8] = 'Jason Babin, JAX, 33, 16, 16, 7.5, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 31, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[9] = 'Jonathan Babineaux, ATL, 32, 16, 16, 1, 0, 0, 0, 0, 0, 1, 0, 2, 8, 0, 28, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[10] = 'Khalif Barnes, OAK, 31, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[11] = 'Connor Barwin, PHI, 27, 16, 16, 5, 1, -2, 0, -2, 12, 2, 0, 1, 0, 0, 48, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[12] = 'Zane Beadles, DEN, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[13] = 'William Beatty, NYG, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[14] = 'Yeremiah Bell, ARI, 35, 16, 16, 1, 2, 6, 0, 6, 10, 0, 0, 0, 0, 0, 61, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[15] = 'Antoine Bethea, IND, 29, 16, 16, 1, 2, 48, 0, 46, 8, 0, 0, 1, 0, 0, 89, 35, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[16] = 'Anquan Boldin, SFO, 33, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[17] = 'Alex Boone, SFO, 26, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[18] = 'Kevin Boothe, NYG, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[19] = 'NaVorro Bowman*+, SFO, 25, 16, 16, 5, 2, 93, 1, 89, 9, 6, 0, 2, 0, 0, 141, 39, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[20] = 'Tom Brady*, NWE, 36, 16, 16, 0, 0, 0, 0, 0, 0, 0, 10, 5, -10, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[21] = 'Michael Brockers, STL, 23, 16, 16, 5.5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 38, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[22] = 'Ahmad Brooks*, SFO, 29, 16, 16, 8.5, 1, 22, 0, 22, 7, 2, 1, 1, 0, 0, 63, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[23] = 'Dez Bryant*, DAL, 25, 16, 16, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[24] = 'Vontaze Burfict*, CIN, 23, 16, 16, 3, 1, 12, 0, 12, 8, 1, 0, 2, 13, 1, 115, 62, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[25] = 'Kevin Burnett, OAK, 31, 16, 16, 2.5, 1, 0, 0, 0, 4, 3, 0, 1, 3, 0, 82, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[26] = 'Jermon Bushrod, CHI, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[27] = 'Calais Campbell, ARI, 27, 16, 16, 9, 0, 0, 0, 0, 6, 1, 0, 2, 2, 0, 45, 13, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[28] = 'Brandon Carr, DAL, 27, 16, 16, 0, 3, 49, 1, 49, 13, 0, 0, 1, 21, 0, 60, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[29] = 'Kam Chancellor*, SEA, 25, 16, 16, 0, 3, 78, 0, 32, 12, 1, 0, 0, 0, 0, 80, 54, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[30] = 'Gosder Cherilus, IND, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[31] = 'Chris Chester, WAS, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[32] = 'Barry Church, DAL, 25, 16, 16, 0, 1, 0, 0, 0, 6, 3, 0, 1, 27, 1, 107, 28, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[33] = 'Ryan Clark, PIT, 34, 16, 16, 0, 2, 50, 0, 37, 4, 0, 0, 1, 0, 0, 60, 45, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[34] = 'Adrian Clayborn, TAM, 25, 16, 16, 6, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 44, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[35] = 'Chris Clemons, MIA, 28, 16, 16, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 62, 30, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[36] = 'Barry Cofield, WAS, 29, 16, 16, 2.5, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 17, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[37] = 'Trent Cole, PHI, 31, 16, 16, 8, 0, 0, 0, 0, 6, 3, 0, 0, 0, 0, 48, 12, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[38] = 'Daryn Colledge, ARI, 32, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[39] = 'Willie Colon, NYJ, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[40] = 'Chris Conte, CHI, 24, 16, 16, 0, 3, 48, 0, 35, 7, 2, 0, 0, 0, 0, 73, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[41] = 'Fletcher Cox, PHI, 23, 16, 16, 3, 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 32, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[42] = 'Antonio Cromartie*, NYJ, 29, 16, 16, 0, 3, 20, 0, 20, 10, 1, 0, 0, 0, 0, 35, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[43] = 'Andy Dalton, CIN, 26, 16, 16, 0, 0, 0, 0, 0, 0, 0, 6, 1, -14, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[44] = 'Karlos Dansby, ARI, 32, 16, 16, 6.5, 4, 48, 2, 23, 19, 1, 0, 1, 0, 0, 113, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[45] = 'Demario Davis, NYJ, 24, 16, 16, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 63, 44, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[46] = 'Thomas Davis, CAR, 30, 16, 16, 4, 2, -2, 0, 0, 8, 1, 0, 0, 0, 0, 89, 42, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[47] = 'Vontae Davis, IND, 25, 16, 16, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 45, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[48] = 'Eric Decker, DEN, 26, 16, 16, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[49] = 'Louis Delmas, DET, 26, 16, 16, 2, 3, 44, 0, 42, 9, 0, 0, 0, 0, 0, 49, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[50] = 'Darnell Dockett, ARI, 32, 16, 16, 4.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[51] = 'Demar Dotson, TAM, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[52] = 'Paul Fanaika, ARI, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[53] = 'D'Brickashaw Ferguson, NYJ, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[54] = 'Larry Fitzgerald*, ARI, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[55] = 'Joe Flacco, BAL, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[56] = 'London Fletcher, WAS, 38, 16, 16, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 62, 48, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[57] = 'Michael Floyd, ARI, 24, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[58] = 'Matt Forte*, CHI, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[59] = 'Travis Frederick, DAL, 22, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[60] = 'Doug Free, DAL, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[61] = 'Jerrell Freeman, IND, 27, 16, 16, 5.5, 2, 13, 0, 13, 7, 6, 0, 2, 24, 0, 93, 51, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[62] = 'Pierre Garcon, WAS, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 7, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[63] = 'Marcus Gilchrist, SDG, 25, 16, 16, 1, 2, 43, 0, 26, 5, 1, 0, 1, 0, 0, 69, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[64] = 'Tony Gonzalez*, ATL, 37, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[65] = 'Jonathan Goodwin, SFO, 35, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[66] = 'Frank Gore*, SFO, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[67] = 'Gino Gradkowski, BAL, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 2, 1, -20, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[68] = 'A.J. Green*, CIN, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[69] = 'BenJarvus Green-Ellis, CIN, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[70] = 'Chad Greenway, MIN, 30, 16, 16, 3, 3, 23, 0, 23, 3, 0, 0, 0, 0, 0, 83, 51, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[71] = 'Brent Grimes*, MIA, 30, 16, 16, 0, 4, 102, 1, 94, 16, 0, 0, 0, 0, 0, 52, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[72] = 'Jordan Gross*, CAR, 33, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[73] = 'Ben Grubbs*, NOR, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[74] = 'DeAngelo Hall, WAS, 30, 16, 16, 0, 4, 49, 2, 26, 13, 3, 0, 1, 75, 1, 57, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[75] = 'Nick Hardwick, SDG, 32, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[76] = 'David Harris, NYJ, 29, 16, 16, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 70, 52, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[77] = 'Damon Harrison, NYJ, 25, 16, 16, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 36, 30, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[78] = 'A.J. Hawk, GNB, 29, 16, 16, 5, 1, 7, 0, 7, 4, 1, 0, 1, 0, 0, 79, 45, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[79] = 'Nick Hayden, DAL, 27, 16, 16, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 25, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[80] = 'Todd Herremans, PHI, 31, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[81] = 'Akiem Hicks, NOR, 24, 16, 16, 4.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 31, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[82] = 'DeAndre Hopkins, HOU, 21, 16, 16, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[83] = 'Lamarr Houston, OAK, 26, 16, 16, 6, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 56, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[84] = 'Austin Howard, NYJ, 26, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[85] = 'James Ihedigbo, BAL, 30, 16, 16, 0, 3, 54, 0, 37, 11, 1, 0, 2, 0, 0, 62, 38, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[86] = 'George Iloka, CIN, 23, 16, 16, 0, 1, -1, 0, -1, 6, 2, 0, 1, 0, 0, 43, 25, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[87] = 'D'Qwell Jackson, CLE, 30, 16, 16, 1.5, 1, 0, 0, 0, 7, 1, 0, 1, 0, 0, 75, 65, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[88] = 'DeSean Jackson*, PHI, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[89] = 'Vincent Jackson, TAM, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[90] = 'Janoris Jenkins, STL, 25, 16, 16, 1, 1, 5, 0, 5, 14, 0, 0, 1, 0, 0, 54, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[91] = 'M.D. Jennings, GNB, 25, 16, 16, 1, 0, 0, 0, 0, 0, 0, 0, 1, 24, 1, 59, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[92] = 'Tim Jennings*, CHI, 30, 16, 16, 0, 4, 111, 2, 48, 13, 2, 0, 1, 0, 0, 48, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[93] = 'Andre Johnson*, HOU, 32, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[94] = 'Chris Johnson, TEN, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[95] = 'Chandler Jones, NWE, 23, 16, 16, 11.5, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 42, 40, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[96] = 'Reshad Jones, MIA, 25, 16, 16, 1.5, 1, 25, 1, 25, 4, 0, 0, 0, 0, 0, 84, 23, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[97] = 'Cameron Jordan*, NOR, 24, 16, 16, 12.5, 0, 0, 0, 0, 5, 2, 0, 2, 11, 0, 35, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[98] = 'Colin Kaepernick, SFO, 26, 16, 16, 0, 0, 0, 0, 0, 0, 0, 9, 2, -4, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[99] = 'Ryan Kalil*+, CAR, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[100] = 'Ryan Kerrigan, WAS, 25, 16, 16, 8.5, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 47, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[101] = 'Terrance Knighton, DEN, 27, 16, 16, 3, 1, 2, 0, 2, 1, 0, 0, 1, 13, 0, 28, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[102] = 'Paul Kruger, CLE, 27, 16, 16, 4.5, 0, 0, 0, 0, 5, 2, 0, 0, 0, 0, 26, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[103] = 'Luke Kuechly*+, CAR, 22, 16, 16, 2, 4, 33, 0, 30, 8, 0, 0, 0, 0, 0, 96, 70, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[104] = 'Brandon LaFell, CAR, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[105] = 'Dawan Landry, NYJ, 31, 16, 16, 1, 1, 38, 0, 38, 7, 0, 0, 0, 0, 0, 63, 37, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[106] = 'T.J. Lang, GNB, 26, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[107] = 'Kendall Langford, STL, 27, 16, 16, 5, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 36, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[108] = 'James Laurinaitis, STL, 27, 16, 16, 3.5, 2, 9, 0, 9, 8, 0, 0, 2, 43, 0, 85, 32, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[109] = 'Ronald Leary, DAL, 24, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[110] = 'Andy Levitre, TEN, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[111] = 'DeAndre Levy, DET, 26, 16, 16, 0, 6, 76, 1, 66, 15, 0, 0, 0, 0, 0, 85, 32, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[112] = 'Keenan Lewis, NOR, 27, 16, 16, 0, 4, 34, 0, 20, 13, 1, 0, 0, 0, 0, 44, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[113] = 'Kory Lichtensteiger, WAS, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[114] = 'Corey Liuget, SDG, 23, 16, 16, 5.5, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 39, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[115] = 'Curtis Lofton, NOR, 27, 16, 16, 2, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 89, 48, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[116] = 'Star Lotulelei, CAR, 24, 16, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[117] = 'Andrew Luck*, IND, 24, 16, 16, 0, 0, 0, 0, 0, 0, 0, 6, 2, 2, 1, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[118] = 'Marshawn Lynch*, SEA, 27, 16, 16, 0, 0, 0, 0, 0, 0, 1, 4, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[119] = 'Alex Mack*, CLE, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 1, -14, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[120] = 'Nick Mangold*, NYJ, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, -29, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[121] = 'Logan Mankins*, NWE, 31, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[122] = 'Eli Manning, NYG, 32, 16, 16, 0, 0, 0, 0, 0, 0, 0, 7, 1, -6, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[123] = 'Peyton Manning*+, DEN, 37, 16, 16, 0, 0, 0, 0, 0, 0, 0, 11, 2, -4, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[124] = 'Sen'Derrick Marks, JAX, 26, 16, 16, 4, 0, 0, 0, 0, 8, 2, 0, 3, 15, 0, 28, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[125] = 'Robert Mathis*+, IND, 32, 16, 16, 19.5, 0, 0, 0, 0, 2, 10, 0, 0, 0, 0, 46, 18, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[126] = 'Jason McCourty, TEN, 26, 16, 16, 0, 0, 0, 0, 0, 10, 1, 0, 1, 77, 1, 54, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[127] = 'Gerald McCoy*+, TAM, 25, 16, 16, 9, 0, 0, 0, 0, 4, 0, 0, 1, 12, 0, 35, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[128] = 'LeSean McCoy*+, PHI, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[129] = 'Rodney McLeod, STL, 23, 16, 16, 0, 2, 2, 0, 2, 7, 2, 0, 2, 9, 0, 63, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[130] = 'Brandon Mebane, SEA, 28, 16, 16, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 26, 27, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[131] = 'Brad Meester, JAX, 36, 16, 16, 0, 0, 0, 0, 0, 0, 0, 2, 1, -9, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[132] = 'Whitney Mercilus, HOU, 23, 16, 16, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[133] = 'Jordan Mills, CHI, 23, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[134] = 'Will Montgomery, WAS, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[135] = 'William Moore, ATL, 28, 16, 16, 2, 3, 36, 0, 19, 8, 3, 0, 2, 0, 0, 66, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[136] = 'Alfred Morris*, WAS, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[137] = 'Captain Munnerlyn, CAR, 25, 16, 16, 3, 2, 86, 2, 45, 12, 1, 0, 1, 0, 0, 52, 25, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[138] = 'Jordy Nelson, GNB, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[139] = 'Cam Newton*, CAR, 24, 16, 16, 0, 0, 0, 0, 0, 0, 0, 3, 1, -8, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[140] = 'Derek Newton, HOU, 26, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[141] = 'Rob Ninkovich, NWE, 29, 16, 16, 8, 0, 0, 0, 0, 0, 2, 0, 2, 3, 0, 45, 49, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[142] = 'Uche Nwaneri, JAX, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[143] = 'Alec Ogletree, STL, 22, 16, 16, 1.5, 1, 98, 1, 98, 9, 6, 0, 0, 0, 0, 95, 23, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[144] = 'Michael Oher, BAL, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[145] = 'Calvin Pace, NYJ, 33, 16, 16, 10, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 37, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[146] = 'Carson Palmer, ARI, 34, 16, 16, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[147] = 'Erik Pears, BUF, 31, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[148] = 'Domata Peko, CIN, 29, 16, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 28, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[149] = 'Julius Peppers, CHI, 33, 16, 16, 7.5, 1, 14, 0, 14, 3, 2, 0, 1, 42, 1, 31, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[150] = 'Jason Peters*+, PHI, 31, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[151] = 'Patrick Peterson*+, ARI, 23, 16, 16, 0, 3, 59, 0, 43, 13, 0, 3, 2, 0, 0, 40, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[152] = 'Ryan Pickett, GNB, 34, 16, 16, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 19, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[153] = 'Troy Polamalu*, PIT, 32, 16, 16, 2, 2, 36, 1, 19, 11, 5, 0, 1, 0, 0, 50, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[154] = 'Bernard Pollard, TEN, 29, 16, 16, 0.5, 3, 36, 0, 32, 10, 0, 0, 0, 0, 0, 77, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[155] = 'Tyler Polumbus, WAS, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[156] = 'Tracy Porter, OAK, 27, 16, 16, 1.5, 2, 44, 1, 43, 13, 0, 0, 0, 0, 0, 53, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[157] = 'Jerraud Powers, ARI, 26, 16, 16, 0, 1, 9, 0, 9, 18, 1, 0, 0, 0, 0, 60, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[158] = 'Justin Pugh, NYG, 23, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[159] = 'Glover Quin, DET, 27, 16, 16, 2, 3, 57, 0, 42, 9, 1, 0, 1, 0, 0, 44, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[160] = 'Robert Quinn*+, STL, 23, 16, 16, 19, 0, 0, 0, 0, 1, 7, 0, 2, 33, 1, 50, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[161] = 'Dominic Raiola, DET, 35, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[162] = 'B.J. Raji, GNB, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[163] = 'Manuel Ramirez, DEN, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, -14, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[164] = 'Brooks Reed, HOU, 26, 16, 16, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 43, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[165] = 'Eric Reid*, SFO, 22, 16, 16, 0, 4, 54, 0, 53, 12, 0, 0, 2, 0, 0, 73, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[166] = 'Riley Reiff, DET, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[167] = 'Darrelle Revis*, TAM, 28, 16, 16, 1, 2, 3, 0, 3, 11, 2, 0, 1, 0, 0, 43, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[168] = 'Kendall Reyes, SDG, 24, 16, 16, 5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 26, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[169] = 'Perry Riley, WAS, 25, 16, 16, 3, 1, 0, 0, 0, 9, 0, 0, 1, 6, 0, 72, 43, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[170] = 'Philip Rivers*, SDG, 32, 16, 16, 0, 0, 0, 0, 0, 0, 0, 3, 1, -6, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[171] = 'Nick Roach, OAK, 28, 16, 16, 5.5, 1, 0, 0, 0, 3, 4, 0, 0, 0, 0, 82, 29, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[172] = 'Brian Robison, MIN, 30, 16, 16, 9, 0, 0, 0, 0, 3, 0, 0, 1, 61, 1, 24, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[173] = 'Ben Roethlisberger, PIT, 31, 16, 16, 0, 0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[174] = 'Carlos Rogers, SFO, 32, 16, 16, 0, 2, 14, 0, 11, 8, 0, 0, 0, 0, 0, 40, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[175] = 'Michael Roos, TEN, 31, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[176] = 'Matt Ryan, ATL, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 5, 1, -2, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[177] = 'DeMeco Ryans, PHI, 29, 16, 16, 4, 2, 46, 0, 36, 8, 0, 0, 0, 0, 0, 111, 27, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[178] = 'George Selvie, DAL, 26, 16, 16, 7, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 37, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[179] = 'Lyle Sendlein, ARI, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 1, -7, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[180] = 'Richard Sherman*+, SEA, 25, 16, 16, 0, 8, 125, 1, 58, 18, 0, 2, 2, 0, 0, 42, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[181] = 'Pat Sims, OAK, 28, 16, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[182] = 'Rob Sims, DET, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[183] = 'Daryl Smith, BAL, 31, 16, 16, 5, 3, 41, 1, 37, 18, 2, 0, 0, 0, 0, 57, 66, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[184] = 'Geno Smith, NYJ, 23, 16, 16, 0, 0, 0, 0, 0, 0, 0, 8, 3, -2, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[185] = 'Jimmy Smith, BAL, 25, 16, 16, 0, 2, 0, 0, 0, 16, 3, 0, 0, 0, 0, 50, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[186] = 'Justin Smith*, SFO, 34, 16, 16, 6.5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 40, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[187] = 'Torrey Smith, BAL, 24, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[188] = 'Tyron Smith*, DAL, 23, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[189] = 'Wade Smith, HOU, 32, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[190] = 'Matthew Stafford, DET, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 12, 4, -32, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[191] = 'Joe Staley*, SFO, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[192] = 'Terrell Suggs*, BAL, 31, 16, 16, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 47, 33, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[193] = 'Ndamukong Suh*+, DET, 26, 16, 16, 5.5, 0, 0, 0, 0, 6, 1, 0, 0, 0, 0, 36, 12, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[194] = 'Ryan Tannehill, MIA, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 9, 3, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[195] = 'Ike Taylor, PIT, 33, 16, 16, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 52, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[196] = 'Demaryius Thomas*, DEN, 26, 16, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[197] = 'Earl Thomas*+, SEA, 24, 16, 16, 0, 5, 9, 0, 11, 11, 2, 0, 0, 0, 0, 95, 34, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[198] = 'Joe Thomas*+, CLE, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[199] = 'Cedric Thornton, PHI, 25, 16, 16, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 50, 12, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[200] = 'Lawrence Timmons, PIT, 27, 16, 16, 3, 2, 26, 0, 23, 6, 1, 0, 1, 29, 0, 86, 40, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[201] = 'Danny Trevathan, DEN, 23, 16, 16, 2, 3, 29, 0, 29, 10, 3, 1, 1, 0, 0, 105, 47, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[202] = 'Desmond Trufant, ATL, 23, 16, 16, 0, 2, 0, 0, 0, 17, 1, 0, 1, 18, 0, 55, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[203] = 'Stephen Tulloch, DET, 28, 16, 16, 3.5, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 93, 43, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[204] = 'Kraig Urbik, BUF, 28, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[205] = 'Alterraun Verner*, TEN, 25, 16, 16, 0, 5, 68, 1, 34, 23, 0, 0, 2, 9, 0, 49, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[206] = 'Mike Wallace, MIA, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[207] = 'T.J. Ward*, CLE, 27, 16, 16, 1.5, 2, 57, 1, 44, 7, 0, 0, 1, 51, 1, 75, 37, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[208] = 'Larry Warford, DET, 22, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[209] = 'Chance Warmack, TEN, 22, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[210] = 'J.J. Watt*+, HOU, 24, 16, 16, 10.5, 0, 0, 0, 0, 7, 4, 0, 2, 0, 0, 65, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[211] = 'Lardarius Webb, BAL, 28, 16, 16, 0, 2, 19, 0, 19, 23, 0, 0, 0, 0, 0, 64, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[212] = 'Eric Weddle*, SDG, 28, 16, 16, 1, 2, 21, 0, 21, 11, 1, 0, 2, 27, 0, 94, 32, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[213] = 'Ryan Wendell, NWE, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[214] = 'Philip Wheeler, MIA, 29, 16, 16, 0.5, 0, 0, 0, 0, 7, 0, 0, 1, 0, 0, 83, 35, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[215] = 'Donte Whitner*, SFO, 28, 16, 16, 0, 2, 7, 0, 7, 15, 2, 1, 1, -5, 0, 63, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[216] = 'Muhammad Wilkerson, NYJ, 24, 16, 16, 10.5, 1, 6, 0, 6, 3, 2, 0, 0, 0, 0, 43, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[217] = 'Cary Williams, PHI, 29, 16, 16, 1, 3, 16, 0, 15, 12, 0, 0, 1, 0, 0, 62, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[218] = 'Kyle Williams*, BUF, 30, 16, 16, 10.5, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 42, 26, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[219] = 'Mario Williams*, BUF, 28, 16, 16, 13, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 28, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[220] = 'Tramon Williams, GNB, 30, 16, 16, 2.5, 3, 10, 0, 10, 14, 2, 0, 2, 0, 0, 63, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[221] = 'Trent Williams*, WAS, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[222] = 'Josh Wilson, WAS, 28, 16, 16, 2, 1, 0, 0, 0, 7, 2, 0, 3, 1, 0, 68, 24, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[223] = 'Russell Wilson*, SEA, 25, 16, 16, 0, 0, 0, 0, 0, 0, 0, 12, 5, -15, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[224] = 'Eric Winston, ARI, 30, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[225] = 'Jason Witten*, DAL, 31, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[226] = 'Charles Woodson, OAK, 37, 16, 16, 2, 1, 13, 0, 13, 3, 3, 0, 2, 25, 1, 75, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[227] = 'Marshal Yanda*, BAL, 29, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[228] = 'Jeremy Zuttah, TAM, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 1, 1, -14, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[229] = 'Alan Ball, JAX, 28, 15, 15, 0, 2, 8, 0, 8, 14, 0, 0, 0, 0, 0, 41, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[230] = 'Johnthan Banks, TAM, 24, 16, 15, 0, 3, 33, 0, 18, 6, 0, 0, 0, 0, 0, 49, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[231] = 'Martellus Bennett, CHI, 26, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[232] = 'Eric Berry*+, KAN, 25, 15, 15, 3.5, 3, 134, 2, 49, 10, 2, 0, 2, 24, 0, 73, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[233] = 'Dwayne Bowe, KAN, 29, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[234] = 'Mike Brisiel, OAK, 30, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[235] = 'Brandon Brooks, HOU, 24, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[236] = 'Red Bryant, SEA, 29, 15, 15, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 17, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[237] = 'Brent Celek, PHI, 28, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[238] = 'Jamaal Charles*+, KAN, 27, 15, 15, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[239] = 'Tyson Clabo, MIA, 32, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[240] = 'Jeromey Clary, SDG, 30, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[241] = 'Charles Clay, MIA, 24, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[242] = 'Riley Cooper, PHI, 26, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[243] = 'Jonathan Cyprien, JAX, 23, 15, 15, 1, 1, 27, 0, 27, 6, 2, 0, 0, 0, 0, 86, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[244] = 'Lavonte David+, TAM, 23, 16, 15, 6, 5, 87, 0, 32, 9, 2, 0, 1, 0, 0, 106, 39, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[245] = 'David DeCastro, PIT, 23, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[246] = 'Thomas DeCoud, ATL, 28, 15, 15, 0, 0, 0, 0, 0, 2, 0, 0, 1, 30, 1, 44, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[247] = 'Jim Dray, ARI, 27, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[248] = 'Carlos Dunlap, CIN, 24, 16, 15, 7.5, 0, 0, 0, 0, 6, 4, 0, 1, 42, 0, 41, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[249] = 'Tyler Eifert, CIN, 23, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[250] = 'Matt Elam, BAL, 22, 16, 15, 0, 1, 18, 0, 18, 3, 0, 0, 2, 7, 0, 54, 23, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[251] = 'Dannell Ellerbe, MIA, 28, 15, 15, 1, 2, 25, 0, 16, 5, 0, 0, 2, 0, 0, 70, 31, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[252] = 'Nick Fairley, DET, 25, 15, 15, 6, 0, 0, 0, 0, 1, 2, 0, 2, 4, 1, 24, 12, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[253] = 'Ramon Foster, PIT, 27, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[254] = 'Aubrayo Franklin, IND, 33, 16, 15, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 20, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[255] = 'Orlando Franklin, DEN, 26, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[256] = 'Junior Galette, NOR, 25, 16, 15, 12, 0, 0, 0, 0, 2, 1, 0, 2, 13, 0, 29, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[257] = 'Antonio Gates, SDG, 33, 16, 15, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[258] = 'Tashaun Gipson, CLE, 23, 16, 15, 0, 5, 143, 1, 44, 12, 0, 0, 0, 0, 0, 63, 31, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[259] = 'Joe Haden*, CLE, 24, 15, 15, 0, 4, 57, 1, 29, 20, 0, 0, 0, 0, 0, 43, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[260] = 'Tamba Hali*, KAN, 30, 15, 15, 11, 1, 10, 1, 10, 1, 5, 0, 2, 11, 1, 39, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[261] = 'Chris Harris, DEN, 24, 16, 15, 0, 3, 1, 0, 1, 13, 0, 0, 0, 0, 0, 60, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[262] = 'Brian Hartline, MIA, 27, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[263] = 'Jason Hatcher*, DAL, 31, 15, 15, 11, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 34, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[264] = 'David Hawthorne, NOR, 28, 16, 15, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 70, 36, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[265] = 'Lamar Holmes, ATL, 24, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[266] = 'Rodney Hudson, KAN, 24, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[267] = 'Cullen Jenkins, NYG, 32, 16, 15, 5, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 25, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[268] = 'Mike Jenkins, OAK, 28, 16, 15, 0, 2, 0, 0, 0, 6, 1, 0, 1, 20, 0, 57, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[269] = 'Greg Jennings, MIN, 30, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[270] = 'Charlie Johnson, MIN, 29, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[271] = 'Derrick Johnson*, KAN, 31, 15, 15, 4.5, 2, 44, 0, 41, 7, 0, 0, 2, 11, 0, 97, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[272] = 'Michael Johnson, CIN, 26, 15, 15, 3.5, 1, 7, 0, 7, 10, 2, 0, 0, 0, 0, 35, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[273] = 'Maurice Jones-Drew, JAX, 28, 15, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[274] = 'Johnathan Joseph, HOU, 29, 15, 15, 0, 3, 64, 0, 32, 16, 0, 0, 0, 0, 0, 44, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[275] = 'Linval Joseph, NYG, 25, 15, 15, 3, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 34, 25, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[276] = 'Mychal Kendricks, PHI, 23, 15, 15, 4, 3, 25, 0, 18, 5, 2, 0, 4, 6, 0, 86, 27, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[277] = 'Eddie Lacy*, GNB, 22, 15, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[278] = 'Manny Lawson, BUF, 29, 15, 15, 4, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 52, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[279] = 'Kendrick Lewis, KAN, 25, 16, 15, 0, 1, 1, 0, 1, 5, 0, 0, 0, 0, 0, 49, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[280] = 'Phil Loadholt, MIN, 27, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[281] = 'Chris Long, STL, 28, 16, 15, 8.5, 0, 0, 0, 0, 2, 1, 0, 2, 45, 1, 33, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[282] = 'Jake Long, STL, 28, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[283] = 'Ryan Mathews, SDG, 26, 16, 15, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[284] = 'Devin McCourty, NWE, 26, 15, 15, 0, 1, 0, 0, 0, 8, 2, 0, 1, 44, 0, 58, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[285] = 'Tony McDaniel, SEA, 28, 16, 15, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 26, 30, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[286] = 'Rashard Mendenhall, ARI, 26, 15, 15, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[287] = 'Lamar Miller, MIA, 22, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[288] = 'Eugene Monroe, 2TM, 26, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[289] = 'Knowshon Moreno, DEN, 26, 16, 15, 0, 0, 0, 0, 0, 0, 0, 2, 3, 5, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[290] = 'Reggie Nelson, CIN, 30, 15, 15, 1, 2, 0, 0, 0, 8, 1, 2, 2, 12, 0, 53, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[291] = 'Hakeem Nicks, NYG, 25, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[292] = 'Brian Orakpo*, WAS, 27, 15, 15, 10, 1, 29, 1, 29, 4, 0, 0, 2, 0, 0, 43, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[293] = 'Corey Peters, ATL, 25, 15, 15, 5, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 29, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[294] = 'Dontari Poe*, KAN, 23, 15, 15, 4.5, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 43, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[295] = 'Paul Posluszny*, JAX, 29, 15, 15, 3, 2, 69, 1, 59, 9, 1, 0, 1, 0, 0, 121, 40, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[296] = 'Cory Redding, IND, 33, 15, 15, 4.5, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 26, 18, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[297] = 'Marcel Reece*, OAK, 28, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[298] = 'Sheldon Richardson, NYJ, 23, 16, 15, 3.5, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 42, 35, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[299] = 'Antrel Rolle*, NYG, 31, 16, 15, 2, 6, 23, 0, 25, 12, 1, 0, 1, 10, 0, 80, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[300] = 'Tony Romo, DAL, 33, 15, 15, 0, 0, 0, 0, 0, 0, 0, 4, 4, -6, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[301] = 'Orlando Scandrick, DAL, 26, 16, 15, 2, 2, 0, 0, 0, 13, 1, 0, 0, 0, 0, 59, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[302] = 'Buster Skrine, CLE, 24, 16, 15, 1, 1, 5, 0, 5, 18, 0, 0, 0, 0, 0, 55, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[303] = 'Alex Smith*, KAN, 29, 15, 15, 0, 0, 0, 0, 0, 0, 0, 8, 1, -13, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[304] = 'Andre Smith, CIN, 26, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[305] = 'Antonio Smith, HOU, 32, 15, 15, 5, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 22, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[306] = 'Sean Smith, KAN, 26, 16, 15, 0, 2, 96, 1, 100, 16, 0, 0, 0, 0, 0, 44, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[307] = 'Nate Solder, NWE, 25, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[308] = 'Paul Soliai, MIA, 30, 15, 15, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 19, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[309] = 'Zach Strief, NOR, 30, 15, 15, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[310] = 'J.R. Sweezy, SEA, 24, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[311] = 'Justin Tuck*, NYG, 30, 16, 15, 11, 1, -2, 0, -2, 4, 2, 0, 0, 0, 0, 41, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[312] = 'Cameron Wake*, MIA, 31, 15, 15, 8.5, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 28, 9, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[313] = 'Erik Walden, IND, 28, 15, 15, 3, 0, 0, 0, 0, 4, 1, 1, 1, 10, 0, 31, 25, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[314] = 'Vance Walker, OAK, 26, 15, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[315] = 'Nate Washington, TEN, 30, 16, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[316] = 'DeAngelo Williams, CAR, 30, 15, 15, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[317] = 'Kevin Williams, MIN, 33, 15, 15, 3.5, 1, 0, 0, 0, 5, 0, 0, 1, 0, 0, 17, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[318] = 'Corey Wootton, CHI, 26, 16, 15, 3.5, 0, 0, 0, 0, 5, 1, 0, 2, 1, 0, 28, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[319] = 'Major Wright, CHI, 25, 15, 15, 0, 2, 46, 1, 38, 3, 2, 0, 0, 0, 0, 79, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[320] = 'Willie Young, DET, 28, 16, 15, 3, 0, 0, 0, 0, 5, 0, 0, 2, 0, 0, 29, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[321] = 'Jeff Allen, KAN, 23, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[322] = 'Keenan Allen, SDG, 21, 15, 14, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[323] = 'Jason Avant, PHI, 30, 16, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[324] = 'Akeem Ayers, TEN, 24, 16, 14, 1, 1, 5, 0, 5, 5, 1, 0, 0, 0, 0, 37, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[325] = 'Don Barclay, GNB, 24, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[326] = 'Mark Barron, TAM, 24, 14, 14, 2, 2, 3, 0, 3, 6, 0, 0, 1, 0, 0, 70, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[327] = 'Antonio Brown*, PIT, 25, 16, 14, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[328] = 'Duane Brown*, HOU, 28, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[329] = 'Reggie Bush, DET, 28, 14, 14, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[330] = 'Jordan Cameron*, CLE, 25, 15, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[331] = 'Jurrell Casey, TEN, 24, 15, 14, 10.5, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 38, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[332] = 'Chris Clark, DEN, 28, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[333] = 'Marcell Dareus*, BUF, 24, 16, 14, 7.5, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 45, 26, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[334] = 'Ed Dickson, BAL, 26, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[335] = 'Jahri Evans*, NOR, 30, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[336] = 'Chris Givens, STL, 24, 16, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[337] = 'Josh Gordon*+, CLE, 22, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[338] = 'John Greco, CLE, 28, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[339] = 'Jermaine Gresham, CIN, 25, 14, 14, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[340] = 'Michael Griffin, TEN, 28, 14, 14, 0, 1, 0, 0, 0, 4, 2, 0, 1, 0, 0, 61, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[341] = 'Geno Hayes, JAX, 26, 14, 14, 1, 2, 39, 0, 28, 4, 1, 0, 0, 0, 0, 59, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[342] = 'Dont'a Hightower, NWE, 23, 16, 14, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 65, 48, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[343] = 'Duke Ihenacho, DEN, 24, 15, 14, 0, 0, 0, 0, 0, 9, 3, 0, 2, 0, 0, 67, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[344] = 'Kareem Jackson, HOU, 25, 14, 14, 0, 0, 0, 0, 0, 8, 0, 0, 1, 0, 0, 51, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[345] = 'Alshon Jeffery*, CHI, 23, 16, 14, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[346] = 'Malcolm Jenkins, NOR, 26, 14, 14, 2.5, 2, 35, 0, 31, 5, 2, 0, 0, 0, 0, 48, 28, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[347] = 'Peria Jerry, ATL, 29, 16, 14, 3.5, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 25, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[348] = 'Calvin Johnson*+, DET, 28, 14, 14, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[349] = 'Charles Johnson, CAR, 27, 14, 14, 11, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 28, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[350] = 'James Jones, GNB, 29, 14, 14, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[351] = 'Ray McDonald, SFO, 29, 14, 14, 3.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 34, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[352] = 'Roy Miller, JAX, 26, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[353] = 'Earl Mitchell, HOU, 26, 16, 14, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[354] = 'Derrick Morgan, TEN, 24, 15, 14, 6, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 29, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[355] = 'DeMarco Murray*, DAL, 25, 14, 14, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[356] = 'Brandon Myers, NYG, 28, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[357] = 'Haloti Ngata*, BAL, 29, 15, 14, 1.5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 23, 30, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[358] = 'Logan Paulsen, WAS, 26, 16, 14, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[359] = 'Adrian Peterson*, MIN, 28, 14, 14, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[360] = 'Brandon Pettigrew, DET, 28, 14, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[361] = 'Mike Pouncey*, MIA, 24, 14, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, -18, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[362] = 'Craig Robertson, CLE, 25, 14, 14, 3, 1, 12, 0, 12, 2, 1, 0, 1, 7, 0, 57, 28, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[363] = 'Ahtyba Rubin, CLE, 27, 14, 14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[364] = 'Mohamed Sanu, CIN, 24, 16, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[365] = 'Sam Shields, GNB, 26, 14, 14, 0, 4, 3, 0, 7, 17, 0, 0, 0, 0, 0, 51, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[366] = 'Lee Smith, BUF, 26, 16, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[367] = 'Akeem Spence, TAM, 22, 16, 14, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 19, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[368] = 'Randy Starks, MIA, 30, 16, 14, 4, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 36, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[369] = 'Craig Stevens, TEN, 29, 15, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[370] = 'Rod Streater, OAK, 25, 16, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[371] = 'Phil Taylor, CLE, 25, 15, 14, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 14, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[372] = 'Julius Thomas*, DEN, 25, 14, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[373] = 'Kenny Vaccaro, NOR, 22, 14, 14, 1, 1, 29, 0, 29, 7, 1, 0, 0, 0, 0, 62, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[374] = 'Olivier Vernon, MIA, 23, 16, 14, 11.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[375] = 'Bobby Wagner, SEA, 23, 14, 14, 5, 2, 9, 0, 9, 7, 0, 0, 1, 0, 0, 89, 65, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[376] = 'Andrew Whitworth, CIN, 32, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[377] = 'Aaron Williams, BUF, 23, 14, 14, 0, 4, 43, 0, 34, 11, 1, 0, 0, 0, 0, 60, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[378] = 'Patrick Willis*, SFO, 28, 14, 14, 3, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 100, 30, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[379] = 'Stefen Wisniewski, OAK, 24, 14, 14, 0, 0, 0, 0, 0, 0, 0, 3, 0, -4, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[380] = 'John Abraham*, ARI, 35, 16, 13, 11.5, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 31, 6, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[381] = 'Russell Allen, JAX, 27, 14, 13, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 46, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[382] = 'Joe Barksdale, STL, 24, 16, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[383] = 'Joplo Bartu, ATL, 23, 16, 13, 3.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 47, 37, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[384] = 'Alan Branch, BUF, 29, 16, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[385] = 'Zach Brown, TEN, 24, 16, 13, 4, 1, 3, 0, 3, 5, 1, 0, 1, 0, 0, 72, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[386] = 'Morgan Burnett, GNB, 24, 13, 13, 0, 0, 0, 0, 0, 5, 0, 0, 3, 12, 1, 66, 36, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[387] = 'Chris Canty, BAL, 31, 15, 13, 2, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 20, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[388] = 'Bruce Carter, DAL, 25, 15, 13, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 73, 23, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[389] = 'Jared Cook, STL, 26, 16, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[390] = 'Quinton Coples, NYJ, 23, 14, 13, 4.5, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 24, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[391] = 'Victor Cruz, NYG, 27, 14, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[392] = 'Mike DeVito, KAN, 29, 14, 13, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 18, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[393] = 'Glenn Dorsey, SFO, 28, 16, 13, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[394] = 'Kris Durham, DET, 25, 16, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[395] = 'Eric Fisher, KAN, 22, 14, 13, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[396] = 'Bradley Fletcher, PHI, 27, 13, 13, 0, 2, 30, 0, 25, 16, 1, 0, 1, 0, 0, 66, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[397] = 'Brandon Flowers*, KAN, 27, 13, 13, 1, 1, 32, 0, 32, 9, 0, 0, 0, 0, 0, 65, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[398] = 'Mason Foster, TAM, 24, 15, 13, 2, 3, 122, 2, 85, 7, 1, 0, 0, 0, 0, 62, 28, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[399] = 'Mike Glennon, TAM, 24, 13, 13, 0, 0, 0, 0, 0, 0, 0, 7, 3, -16, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[400] = 'Dashon Goldson, TAM, 29, 13, 13, 0, 1, 0, 0, 0, 8, 1, 0, 1, 0, 0, 53, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[401] = 'Robert Griffin, WAS, 23, 13, 13, 0, 0, 0, 0, 0, 0, 0, 11, 2, -36, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[402] = 'Letroy Guion, MIN, 26, 13, 13, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 10, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[403] = 'Greg Hardy*, CAR, 25, 16, 13, 15, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 40, 25, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[404] = 'Chad Henne, JAX, 28, 15, 13, 0, 0, 0, 0, 0, 0, 0, 2, 2, -1, 0, 0, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[405] = 'Cameron Heyward, PIT, 24, 16, 13, 5, 0, 0, 0, 0, 8, 0, 0, 1, 8, 0, 35, 24, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[406] = 'Arthur Jones, BAL, 27, 14, 13, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 25, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[407] = 'Greg Little, CLE, 24, 16, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[408] = 'Rashean Mathis, DET, 33, 15, 13, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 44, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[409] = 'Rey Maualuga, CIN, 26, 13, 13, 1, 1, 14, 0, 14, 2, 0, 0, 0, 0, 0, 64, 26, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[410] = 'Joe Mays, HOU, 28, 14, 13, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 41, 25, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[411] = 'Leodis McKelvin, BUF, 28, 15, 13, 0, 1, 0, 0, 0, 20, 1, 7, 4, 0, 0, 60, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[412] = 'Bruce Miller, SFO, 26, 14, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[413] = 'Michael Mitchell, CAR, 26, 15, 13, 4, 4, 63, 0, 38, 10, 2, 0, 0, 0, 0, 52, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[414] = 'Terence Newman, CIN, 35, 13, 13, 0, 2, 8, 0, 9, 14, 0, 0, 1, 58, 1, 45, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[415] = 'Ropati Pitoitua, TEN, 28, 16, 13, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 34, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[416] = 'Dominique Rodgers-Cromartie, DEN, 27, 15, 13, 0, 3, 75, 1, 75, 19, 0, 0, 0, 0, 0, 33, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[417] = 'Brandian Ross, OAK, 24, 16, 13, 2, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 56, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[418] = 'Jamarca Sanford, MIN, 28, 13, 13, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0, 57, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[419] = 'Jabaal Sheard, CLE, 24, 13, 13, 5.5, 0, 0, 0, 0, 4, 1, 0, 1, 0, 0, 19, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[420] = 'Aqib Talib*, NWE, 27, 13, 13, 0, 4, 12, 0, 14, 13, 1, 0, 1, 0, 0, 38, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[421] = 'Daniel Te'o-Nesheim, TAM, 27, 16, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[422] = 'Mike Tolbert*+, CAR, 28, 16, 13, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[423] = 'Osi Umenyiora, ATL, 32, 16, 13, 7.5, 1, 68, 1, 68, 3, 3, 0, 0, 0, 0, 31, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[424] = 'Max Unger*, SEA, 27, 13, 13, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[425] = 'Courtney Upshaw, BAL, 24, 16, 13, 1.5, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 19, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[426] = 'DeMarcus Ware, DAL, 31, 13, 13, 6, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 28, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[427] = 'Wes Welker, DEN, 32, 13, 13, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[428] = 'Robert Woods, BUF, 21, 14, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[429] = 'K.J. Wright, SEA, 24, 13, 13, 1.5, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 52, 37, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[430] = 'Shareece Wright, SDG, 26, 13, 13, 0, 1, 41, 0, 41, 13, 0, 0, 0, 0, 0, 60, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[431] = 'Ezekiel Ansah, DET, 24, 14, 12, 8, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 17, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[432] = 'Kyle Arrington, NWE, 27, 16, 12, 2, 1, 5, 0, 5, 12, 2, 0, 0, 0, 0, 53, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[433] = 'Gary Barnidge, CLE, 28, 16, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[434] = 'Kelvin Beachum, PIT, 24, 15, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[435] = 'Jon Beason, 2TM, 28, 14, 12, 0, 1, 9, 0, 9, 1, 0, 0, 0, 0, 0, 72, 32, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[436] = 'Clint Boling, CIN, 24, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[437] = 'Marlon Brown, BAL, 22, 14, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[438] = 'Desmond Bryant, CLE, 28, 12, 12, 3.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 11, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[439] = 'Donald Butler, SDG, 25, 13, 12, 0.5, 1, 30, 0, 30, 6, 1, 0, 1, 0, 0, 85, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[440] = 'Nolan Carroll, MIA, 26, 16, 12, 2, 3, 24, 0, 24, 12, 0, 0, 0, 0, 0, 43, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[441] = 'Colin Cole, CAR, 33, 15, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[442] = 'Jeff Cumberland, NYJ, 26, 15, 12, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[443] = 'Coby Fleener, IND, 25, 16, 12, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[444] = 'Moise Fokou, TEN, 28, 12, 12, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 61, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[445] = 'Erin Henderson, MIN, 27, 14, 12, 4, 2, 19, 0, 10, 3, 1, 0, 0, 0, 0, 69, 43, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[446] = 'Chris Houston, DET, 29, 12, 12, 0, 2, 34, 0, 30, 10, 0, 0, 0, 0, 0, 38, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[447] = 'Bruce Irvin, SEA, 26, 12, 12, 2, 1, 8, 0, 8, 2, 1, 0, 0, 0, 0, 36, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[448] = 'Mike Iupati*, SFO, 26, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[449] = 'Steven Jackson, ATL, 30, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[450] = 'Steve Johnson, BUF, 27, 12, 12, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[451] = 'Trumaine Johnson, STL, 23, 16, 12, 0, 3, 36, 0, 29, 12, 1, 0, 0, 0, 0, 58, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[452] = 'Brad Jones, GNB, 27, 12, 12, 3, 0, 0, 0, 0, 0, 1, 0, 1, 3, 0, 63, 26, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[453] = 'Brett Keisel, PIT, 35, 12, 12, 4, 0, 0, 0, 0, 1, 1, 0, 2, 1, 0, 20, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[454] = 'LaRon Landry, IND, 29, 12, 12, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 71, 31, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[455] = 'Jeron Mastrud, OAK, 26, 16, 12, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[456] = 'Brandon Meriweather, WAS, 29, 13, 12, 1, 2, 62, 0, 32, 3, 1, 0, 1, 0, 0, 53, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[457] = 'Quintin Mikell, CAR, 33, 14, 12, 3, 0, 0, 0, 0, 7, 2, 0, 1, 0, 0, 43, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[458] = 'Zach Miller, SEA, 28, 14, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[459] = 'Dee Milliner, NYJ, 22, 13, 12, 0, 3, 31, 0, 19, 15, 0, 0, 0, 0, 0, 45, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[460] = 'Koa Misi, MIA, 26, 15, 12, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 34, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[461] = 'Tony Pashos, OAK, 33, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[462] = 'Austin Pasztor, JAX, 23, 15, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[463] = 'Shaun Phillips, DEN, 32, 16, 12, 10, 1, 3, 0, 3, 5, 2, 0, 0, 0, 0, 34, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[464] = 'Matt Shaughnessy, ARI, 27, 16, 12, 3, 0, 0, 0, 0, 1, 1, 0, 3, 6, 1, 31, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[465] = 'Bradley Sowell, ARI, 24, 16, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[466] = 'Zac Stacy, STL, 22, 14, 12, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[467] = 'David Stewart, TEN, 31, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[468] = 'Manti Te'o, SDG, 22, 13, 12, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 48, 25, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[469] = 'Hugh Thornton, IND, 22, 14, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[470] = 'Daryl Washington, ARI, 27, 12, 12, 3, 2, 49, 0, 41, 10, 0, 0, 1, 0, 0, 59, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[471] = 'Scott Wells, STL, 32, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[472] = 'Travelle Wharton, CAR, 32, 16, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[473] = 'Brian Winters, NYJ, 22, 16, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[474] = 'Paul Worrilow, ATL, 23, 16, 12, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 79, 48, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[475] = 'Kendall Wright, TEN, 24, 16, 12, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[476] = 'Chris Clemons, SEA, 32, 14, 11, 4.5, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 18, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[477] = 'Marques Colston, NOR, 30, 15, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[478] = 'Chris Cook, MIN, 26, 12, 11, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 41, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[479] = 'Derek Cox, SDG, 27, 16, 11, 0, 1, 2, 0, 2, 7, 0, 0, 0, 0, 0, 34, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[480] = 'Jay Cutler, CHI, 30, 11, 11, 0, 0, 0, 0, 0, 0, 0, 5, 1, -10, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[481] = 'David Diehl, NYG, 33, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[482] = 'Harry Douglas, ATL, 29, 16, 11, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[483] = 'Julian Edelman, NWE, 27, 16, 11, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[484] = 'Josh Evans, JAX, 22, 15, 11, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 47, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[485] = 'William Gay, PIT, 28, 16, 11, 1, 1, 21, 1, 21, 9, 2, 0, 0, 0, 0, 55, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[486] = 'Garrett Graham, HOU, 27, 13, 11, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[487] = 'Jimmy Graham*+, NOR, 27, 16, 11, 0, 0, 0, 0, 0, 0, 0, 0, 1, -2, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[488] = 'Steve Gregory, NWE, 30, 14, 11, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 56, 34, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[489] = 'Darrius Heyward-Bey, IND, 26, 16, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[490] = 'Stephen Hill, NYJ, 22, 12, 11, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[491] = 'Santonio Holmes, NYJ, 29, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[492] = 'Justin Houston*, KAN, 24, 11, 11, 11, 0, 0, 0, 0, 5, 1, 0, 3, 7, 0, 44, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[493] = 'Chris Jones, 2TM, 23, 13, 11, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 31, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[494] = 'Shiloh Keo, HOU, 26, 16, 11, 0, 1, 4, 0, 4, 6, 0, 0, 0, 0, 0, 52, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[495] = 'Sean Lee, DAL, 27, 11, 11, 0, 4, 174, 1, 74, 6, 0, 0, 1, 10, 0, 68, 31, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[496] = 'Doug Legursky, BUF, 27, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[497] = 'Tyrann Mathieu, ARI, 21, 13, 11, 1, 2, 7, 0, 7, 9, 1, 0, 0, 0, 0, 65, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[498] = 'Clay Matthews, GNB, 27, 11, 11, 7.5, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 26, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[499] = 'Arthur Moats, BUF, 25, 16, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 24, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[500] = 'Sio Moore, OAK, 23, 15, 11, 4.5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 38, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[501] = 'Spencer Paysinger, NYG, 25, 16, 11, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 65, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[502] = 'Bilal Powell, NYJ, 25, 16, 11, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[503] = 'Will Rackley, JAX, 24, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[504] = 'Emmanuel Sanders, PIT, 26, 16, 11, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[505] = 'Brandon Spikes, NWE, 26, 16, 11, 0, 1, 3, 0, 3, 2, 0, 0, 1, 0, 0, 48, 38, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[506] = 'Cam Thomas, SDG, 27, 16, 11, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 20, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[507] = 'Fernando Velasco, PIT, 28, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[508] = 'Kevin Vickerson, DEN, 30, 11, 11, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 18, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[509] = 'Delanie Walker, TEN, 29, 15, 11, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[510] = 'Vince Williams, PIT, 24, 15, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[511] = 'Derek Wolfe, DEN, 23, 11, 11, 4, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 11, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[512] = 'LaMarr Woodley, PIT, 29, 11, 11, 5, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 20, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[513] = 'Jason Worilds, PIT, 25, 15, 11, 8, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 43, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[514] = 'Kevin Zeitler, CIN, 23, 12, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[515] = 'Mike Adams, PIT, 23, 15, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[516] = 'Stephen Bowen, WAS, 29, 10, 10, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 11, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[517] = 'Tarell Brown, SFO, 28, 13, 10, 0, 0, 0, 0, 0, 12, 0, 0, 2, 16, 0, 38, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[518] = 'Vincent Brown, SDG, 24, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[519] = 'Brodrick Bunkley, NOR, 30, 12, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[520] = 'Jairus Byrd*, BUF, 27, 11, 10, 1, 4, 85, 0, 57, 6, 1, 0, 0, 0, 0, 37, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[521] = 'Patrick Chung, PHI, 26, 12, 10, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 43, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[522] = 'Jo-Lonn Dunbar, STL, 28, 12, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[523] = 'Nick Foles*, PHI, 24, 13, 10, 0, 0, 0, 0, 0, 0, 0, 4, 1, -10, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[524] = 'Jabari Greer, NOR, 31, 10, 10, 0, 1, 22, 0, 22, 12, 0, 0, 0, 0, 0, 26, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[525] = 'James Harrison, CIN, 35, 15, 10, 2, 1, 9, 0, 9, 1, 0, 0, 1, 0, 0, 19, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[526] = 'Sammie Lee Hill, TEN, 27, 13, 10, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 17, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[527] = 'T.Y. Hilton, IND, 24, 16, 10, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[528] = 'Rob Housler, ARI, 25, 13, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[529] = 'Jason Hunter, OAK, 30, 13, 10, 3, 0, 0, 0, 0, 2, 1, 0, 1, 15, 0, 19, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[530] = 'Ricky Jean-Francois, IND, 27, 8, 10, 2.5, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 16, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[531] = 'Akeem Jordan, KAN, 28, 16, 10, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 54, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[532] = 'Mathias Kiwanuka, NYG, 30, 16, 10, 6, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 25, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[533] = 'Marcedes Lewis, JAX, 29, 11, 10, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[534] = 'EJ Manuel, BUF, 23, 10, 10, 0, 0, 0, 0, 0, 0, 0, 6, 2, -5, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[535] = 'Trumaine McBride, NYG, 28, 15, 10, 0, 2, 17, 0, 17, 15, 1, 1, 0, 0, 0, 32, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[536] = 'Jameel McClain, BAL, 28, 10, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 29, 23, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[537] = 'Shea McClellin, CHI, 23, 14, 10, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[538] = 'T.J. McDonald, STL, 22, 10, 10, 1, 1, -2, 0, -2, 4, 0, 0, 0, 0, 0, 44, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[539] = 'Sean McGrath, KAN, 26, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[540] = 'Steve McLendon, PIT, 27, 14, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[541] = 'Marvin Mitchell, MIN, 29, 16, 10, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 18, 23, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[542] = 'Denarius Moore, OAK, 25, 13, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[543] = 'Rahim Moore, DEN, 23, 10, 10, 0, 2, 18, 0, 18, 6, 0, 0, 0, 0, 0, 38, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[544] = 'Ryan Mundy, NYG, 28, 16, 10, 1, 1, 91, 0, 91, 1, 0, 0, 1, 0, 0, 50, 27, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[545] = 'Mike Neal, GNB, 26, 16, 10, 5, 1, 5, 0, 5, 1, 1, 0, 0, 0, 0, 39, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[546] = 'Lucas Nix, OAK, 24, 14, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[547] = 'Stephen Paea, CHI, 25, 13, 10, 1.5, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 11, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[548] = 'Ashlee Palmer, DET, 27, 16, 10, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 24, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[549] = 'Andrew Quarless, GNB, 25, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[550] = 'Ed Reed, 2TM, 35, 14, 10, 0, 3, 49, 0, 25, 4, 0, 0, 0, 0, 0, 27, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[551] = 'Trent Richardson, 2TM, 22, 16, 10, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[552] = 'Josh Robinson, MIN, 22, 10, 10, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 47, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[553] = 'Asante Samuel, ATL, 32, 11, 10, 0, 1, 1, 0, 1, 3, 1, 0, 0, 0, 0, 29, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[554] = 'Andrew Sendejo, MIN, 26, 16, 10, 0, 1, 1, 0, 1, 3, 0, 0, 0, 0, 0, 52, 32, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[555] = 'C.J. Spiller, BUF, 26, 15, 10, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[556] = 'Kenny Stills, NOR, 21, 16, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[557] = 'D.J. Swearinger, HOU, 0, 16, 10, 0, 1, 0, 0, 0, 4, 1, 0, 0, 0, 0, 54, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[558] = 'Melvin White, CAR, 23, 15, 10, 0, 2, 9, 1, 8, 5, 1, 0, 0, 0, 0, 44, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[559] = 'Dan Williams, ARI, 26, 14, 10, 1, 1, 2, 1, 2, 3, 0, 0, 0, 0, 0, 15, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[560] = 'Wesley Woodyard, DEN, 27, 14, 10, 1.5, 1, 0, 0, 0, 4, 2, 0, 0, 0, 0, 52, 39, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[561] = 'Antonio Allen, NYJ, 25, 16, 9, 1, 1, 23, 1, 23, 7, 0, 0, 0, 0, 0, 39, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[562] = 'David Amerson, WAS, 22, 16, 9, 0, 2, 45, 1, 45, 10, 1, 0, 0, 0, 0, 40, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[563] = 'Pat Angerer, IND, 26, 11, 9, 0.5, 1, 4, 0, 4, 2, 0, 0, 0, 0, 0, 37, 26, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[564] = 'Jon Asamoah, KAN, 25, 13, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[565] = 'Geno Atkins, CIN, 25, 9, 9, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[566] = 'Doug Baldwin, SEA, 25, 16, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[567] = 'Jonathan Bostic, CHI, 22, 16, 9, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 45, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[568] = 'Lance Briggs, CHI, 33, 9, 9, 3, 0, 0, 0, 0, 8, 2, 0, 0, 0, 0, 51, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[569] = 'Kellen Clemens, STL, 30, 10, 9, 0, 0, 0, 0, 0, 0, 0, 7, 1, -3, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[570] = 'Jed Collins, NOR, 27, 16, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[571] = 'Alfonzo Dennard, NWE, 24, 13, 9, 0, 1, 0, 0, 0, 12, 0, 0, 0, 0, 0, 39, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[572] = 'Aaron Dobson, NWE, 22, 12, 9, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[573] = 'Anthony Fasano, KAN, 29, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[574] = 'Ryan Fitzpatrick, TEN, 31, 11, 9, 0, 0, 0, 0, 0, 0, 0, 9, 4, -3, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[575] = 'Stephon Gilmore, BUF, 23, 11, 9, 0, 2, 0, 0, 0, 10, 0, 0, 1, 0, 0, 30, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[576] = 'Jeff Heath, DAL, 22, 16, 9, 0, 1, 0, 0, 0, 3, 1, 0, 1, 50, 1, 47, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[577] = 'Will Hill, NYG, 23, 12, 9, 0, 2, 38, 1, 38, 2, 2, 0, 1, 8, 0, 60, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[578] = 'Tyson Jackson, KAN, 27, 15, 9, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 24, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[579] = 'Jarret Johnson, SDG, 32, 11, 9, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 31, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[580] = 'Jacoby Jones, BAL, 29, 12, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[581] = 'Erik Lorig, TAM, 27, 15, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[582] = 'Von Miller, DEN, 24, 9, 9, 5, 0, 0, 0, 0, 1, 3, 0, 1, 60, 1, 27, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[583] = 'Christian Ponder, MIN, 25, 9, 9, 0, 0, 0, 0, 0, 0, 0, 7, 1, -7, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[584] = 'Terrelle Pryor, OAK, 24, 11, 9, 0, 0, 0, 0, 0, 0, 0, 7, 4, -9, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[585] = 'Keith Rivers, NYG, 27, 16, 9, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 23, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[586] = 'Aaron Rodgers, GNB, 30, 9, 9, 0, 0, 0, 0, 0, 0, 0, 5, 1, -6, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[587] = 'Rodger Saffold, STL, 25, 12, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[588] = 'Brian Schwenke, TEN, 22, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[589] = 'Jerome Simpson, MIN, 27, 16, 9, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[590] = 'Isaac Sopoaga, 2TM, 32, 14, 9, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 8, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[591] = 'Pierre Thomas, NOR, 29, 16, 9, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[592] = 'Miles Austin, DAL, 29, 11, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[593] = 'Will Blackmon, JAX, 29, 15, 8, 1, 1, 1, 0, 1, 10, 2, 0, 1, 21, 1, 31, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[594] = 'Michael Bowie, SEA, 22, 9, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[595] = 'Jarrett Boykin, GNB, 24, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 2, 15, 1, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[596] = 'Andre Brown, NYG, 27, 8, 8, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[597] = 'Brandon Browner, SEA, 29, 8, 8, 0, 1, 49, 0, 49, 10, 0, 0, 0, 0, 0, 18, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[598] = 'Nate Burleson, DET, 32, 9, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[599] = 'John Carlson, MIN, 29, 13, 8, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[600] = 'Jamie Collins, NWE, 23, 16, 8, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 33, 23, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[601] = 'Patrick DiMarco, ATL, 24, 14, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[602] = 'Reed Doughty, WAS, 31, 15, 8, 0, 1, 25, 0, 25, 2, 0, 0, 0, 0, 0, 47, 33, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[603] = 'Kedric Golston, WAS, 30, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[604] = 'Dwayne Gratz, JAX, 23, 10, 8, 0, 2, 20, 0, 17, 3, 0, 0, 0, 0, 0, 26, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[605] = 'Ladarius Green, SDG, 23, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 10, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[606] = 'Ryan Griffin, HOU, 23, 15, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[607] = 'James Hanna, DAL, 24, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[608] = 'Parys Haralson, NOR, 29, 16, 8, 3.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 17, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[609] = 'Stanley Havili, IND, 26, 13, 8, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[610] = 'Richie Incognito, MIA, 30, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[611] = 'Rashad Jennings, OAK, 28, 15, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[612] = 'Leonard Johnson, TAM, 23, 16, 8, 0, 1, 48, 1, 48, 8, 1, 0, 0, 0, 0, 48, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[613] = 'Johnny Jolly, GNB, 30, 13, 8, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 11, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[614] = 'Jarvis Jones, PIT, 24, 14, 8, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 31, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[615] = 'Bennie Logan, PHI, 24, 16, 8, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 24, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[616] = 'Kyle Rudolph, MIN, 24, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[617] = 'Darryl Sharpton, HOU, 25, 15, 8, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 55, 31, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[618] = 'Dan Skuta, SFO, 27, 16, 8, 0, 0, 0, 0, 0, 2, 0, 0, 1, 47, 1, 24, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[619] = 'Aldon Smith, SFO, 24, 11, 8, 8.5, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 34, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[620] = 'Malcolm Smith, SEA, 24, 15, 8, 1, 2, 69, 1, 37, 6, 1, 0, 1, 7, 0, 47, 30, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[621] = 'Charles Tillman, CHI, 32, 8, 8, 0, 3, 69, 0, 41, 7, 3, 0, 0, 0, 0, 33, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[622] = 'Joe Vellano, NWE, 25, 16, 8, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 22, 37, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[623] = 'Sebastian Vollmer, NWE, 29, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[624] = 'LaAdrian Waddle, DET, 22, 12, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[625] = 'Jacquian Williams, NYG, 25, 16, 8, 0, 0, 0, 0, 0, 9, 0, 0, 2, 5, 0, 38, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[626] = 'Terrance Williams, DAL, 24, 16, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[627] = 'Tim Wright, TAM, 23, 16, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[628] = 'Mike Adams, DEN, 32, 16, 7, 0, 1, 3, 0, 3, 8, 0, 0, 1, 0, 0, 60, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[629] = 'Cortez Allen, PIT, 25, 14, 7, 0, 2, 43, 1, 40, 13, 0, 0, 0, 0, 0, 44, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[630] = 'Chase Blackburn, CAR, 30, 13, 7, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 19, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[631] = 'LeGarrette Blount, NWE, 27, 16, 7, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[632] = 'Zackary Bowman, CHI, 29, 16, 7, 0, 3, 67, 1, 43, 7, 0, 0, 0, 0, 0, 45, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[633] = 'Sam Bradford, STL, 26, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[634] = 'Tramaine Brock, SFO, 25, 16, 7, 0, 5, 82, 1, 41, 15, 0, 0, 0, 0, 0, 43, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[635] = 'Darius Butler, IND, 27, 16, 7, 0, 4, 79, 1, 41, 17, 0, 0, 1, 0, 0, 49, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[636] = 'Scott Chandler, BUF, 28, 16, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[637] = 'Morris Claiborne, DAL, 23, 10, 7, 0, 1, 0, 0, 0, 6, 0, 0, 1, 0, 0, 24, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[638] = 'Brian Cushing, HOU, 26, 7, 7, 1.5, 1, 18, 1, 18, 2, 1, 0, 0, 0, 0, 36, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[639] = 'Akeem Dent, ATL, 26, 15, 7, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 26, 25, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[640] = 'Tony Fiammetta, CHI, 27, 16, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[641] = 'T.J. Graham, BUF, 24, 16, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[642] = 'Clay Harbor, JAX, 26, 16, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[643] = 'Joe Hawley, ATL, 25, 16, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, -16, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[644] = 'Corey Hilliard, DET, 28, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[645] = 'Evander Hood, PIT, 26, 16, 7, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 26, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[646] = 'Rashad Johnson, ARI, 27, 13, 7, 0, 3, 35, 0, 18, 5, 0, 0, 0, 0, 0, 52, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[647] = 'Vonta Leach, BAL, 32, 16, 7, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[648] = 'Jake Locker, TEN, 25, 7, 7, 0, 0, 0, 0, 0, 0, 0, 3, 1, -13, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[649] = 'Josh Morgan, WAS, 28, 14, 7, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[650] = 'Chris Ogbonnaya, CLE, 27, 16, 7, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[651] = 'Logan Ryan, NWE, 22, 16, 7, 1.5, 5, 82, 1, 79, 10, 1, 0, 0, 0, 0, 38, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[652] = 'Geoff Schwartz, KAN, 27, 16, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[653] = 'Da'Norris Searcy, BUF, 25, 16, 7, 3.5, 1, 32, 1, 32, 7, 0, 0, 2, 74, 1, 47, 24, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[654] = 'Kelvin Sheppard, IND, 25, 15, 7, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 23, 34, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[655] = 'Anthony Sherman, KAN, 25, 16, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 11, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[656] = 'Harrison Smith, MIN, 24, 8, 7, 0, 2, 4, 0, 4, 3, 0, 0, 1, 0, 0, 47, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[657] = 'Will Ta'ufo'ou, JAX, 27, 16, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[658] = 'Ben Tate, HOU, 25, 14, 7, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[659] = 'Terrell Thomas, NYG, 28, 16, 7, 1, 1, 65, 0, 65, 8, 1, 0, 0, 0, 0, 58, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[660] = 'Brandon Thompson, CIN, 24, 16, 7, 1.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 17, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[661] = 'Greg Toler, IND, 28, 9, 7, 0, 1, 26, 0, 26, 7, 0, 0, 0, 0, 0, 19, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[662] = 'Tiquan Underwood, TAM, 26, 12, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[663] = 'Sean Weatherspoon, ATL, 26, 7, 7, 0, 1, 71, 1, 71, 2, 0, 0, 0, 0, 0, 26, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[664] = 'Darrel Young, WAS, 26, 13, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[665] = 'Mike Brown, JAX, 24, 11, 6, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[666] = 'Rafael Bush, NOR, 26, 13, 6, 0, 0, 0, 0, 0, 5, 0, 0, 1, 0, 0, 34, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[667] = 'Josh Bynes, BAL, 24, 15, 6, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 22, 23, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[668] = 'Marcus Cannon, NWE, 25, 14, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[669] = 'Matt Cassel, MIN, 31, 9, 6, 0, 0, 0, 0, 0, 0, 0, 3, 1, -3, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[670] = 'Marcus Cooper, KAN, 23, 16, 6, 0, 3, 32, 0, 20, 21, 1, 0, 1, 0, 1, 42, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[671] = 'Jerricho Cotchery, PIT, 31, 16, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[672] = 'Quintin Demps, KAN, 28, 16, 6, 0, 4, 61, 0, 35, 10, 0, 0, 0, 0, 0, 25, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[673] = 'Justin Durant, DAL, 28, 10, 6, 0, 0, 0, 0, 0, 1, 1, 0, 1, 5, 0, 14, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[674] = 'Drayton Florence, CAR, 33, 14, 6, 0, 2, 40, 1, 38, 9, 0, 1, 0, 0, 0, 19, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[675] = 'Isaiah Frey, CHI, 23, 16, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[676] = 'Rob Gronkowski, NWE, 24, 7, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[677] = 'Chris Ivory, NYJ, 25, 15, 6, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[678] = 'Fred Jackson, BUF, 32, 16, 6, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[679] = 'Antonio Johnson, TEN, 29, 16, 6, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 15, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[680] = 'John Kuhn, GNB, 31, 15, 6, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[681] = 'Paris Lenon, DEN, 36, 14, 6, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 20, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[682] = 'Jim Leonhard, BUF, 31, 16, 6, 0, 4, 72, 0, 41, 5, 0, 0, 0, 0, 0, 30, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[683] = 'Danieal Manning, HOU, 31, 6, 6, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 21, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[684] = 'Richard Marshall, SDG, 29, 16, 6, 0, 0, 0, 0, 0, 6, 0, 0, 3, 14, 0, 67, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[685] = 'Doug Martin, TAM, 24, 6, 6, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[686] = 'Jerod Mayo, NWE, 27, 6, 6, 1.5, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0, 35, 20, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[687] = 'Dexter McCluster*, KAN, 24, 15, 6, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[688] = 'Matt McGloin, OAK, 24, 7, 6, 0, 0, 0, 0, 0, 0, 0, 4, 3, -12, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[689] = 'Fili Moala, IND, 28, 16, 6, 1.5, 0, 0, 0, 0, 1, 0, 0, 1, 5, 0, 9, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[690] = 'David Nelson, NYJ, 27, 12, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[691] = 'Nick Perry, GNB, 23, 11, 6, 4, 0, 0, 0, 0, 1, 3, 0, 0, 0, 0, 24, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[692] = 'Austin Pettis, STL, 25, 16, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[693] = 'John Phillips, SDG, 26, 15, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[694] = 'Jason Pierre-Paul, NYG, 24, 11, 6, 2, 1, 24, 1, 24, 4, 0, 0, 0, 0, 0, 20, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[695] = 'Bobby Rainey, 2TM, 26, 16, 6, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[696] = 'Xavier Rhodes, MIN, 23, 13, 6, 0, 0, 0, 0, 0, 10, 1, 0, 0, 0, 0, 41, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[697] = 'Ernie Sims, DAL, 29, 12, 6, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 31, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[698] = 'Darian Stewart, STL, 25, 14, 6, 0, 0, 0, 0, 0, 5, 1, 0, 1, 19, 0, 30, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[699] = 'Josh Thomas, CAR, 24, 13, 6, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0, 20, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[700] = 'Michael Vick, PHI, 33, 7, 6, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[701] = 'Corey White, NOR, 23, 16, 6, 0, 1, 43, 0, 43, 7, 1, 1, 1, 0, 0, 36, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[702] = 'Kyle Wilber, DAL, 24, 16, 6, 2, 0, 0, 0, 0, 0, 1, 0, 2, 1, 0, 31, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[703] = 'Tourek Williams, SDG, 22, 13, 6, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[704] = 'Earl Wolff, PHI, 24, 11, 6, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 37, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[705] = 'Sean Baker, TAM, 25, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[706] = 'E.J. Biggers, WAS, 26, 16, 5, 0, 1, 15, 0, 15, 2, 0, 0, 0, 0, 0, 23, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[707] = 'Donald Brown, IND, 26, 16, 5, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[708] = 'Jonathan Casillas, TAM, 26, 12, 5, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 22, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[709] = 'Audie Cole, MIN, 24, 13, 5, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 27, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[710] = 'Owen Daniels, HOU, 31, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[711] = 'Rhett Ellison, MIN, 25, 11, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[712] = 'Larry English, SDG, 27, 9, 5, 2.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 11, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[713] = 'Jermichael Finley, GNB, 26, 6, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[714] = 'Cortland Finnegan, STL, 29, 7, 5, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 23, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[715] = 'Matt Flynn, 3TM, 28, 9, 5, 0, 0, 0, 0, 0, 0, 0, 7, 1, -5, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[716] = 'Corey Graham, BAL, 28, 16, 5, 1, 4, 28, 0, 28, 12, 1, 0, 0, 0, 0, 56, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[717] = 'Leon Hall, CIN, 29, 5, 5, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 14, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[718] = 'Roman Harper, NOR, 31, 9, 5, 0, 1, 0, 0, 0, 2, 0, 0, 1, 19, 0, 33, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[719] = 'Davon House, GNB, 24, 16, 5, 1, 1, 11, 0, 11, 12, 0, 0, 0, 0, 0, 40, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[720] = 'Malik Jackson, DEN, 23, 16, 5, 6, 0, 0, 0, 0, 6, 1, 0, 0, 0, 0, 37, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[721] = 'Jarvis Jenkins, WAS, 25, 12, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[722] = 'John Jenkins, NOR, 24, 16, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[723] = 'Greg Jones, HOU, 32, 16, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[724] = 'Julio Jones, ATL, 24, 5, 5, 0, 0, 0, 0, 0, 0, 0, 2, 1, 18, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[725] = 'Jermaine Kearse, SEA, 23, 15, 5, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 7, 1, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[726] = 'Tommy Kelly, NWE, 33, 5, 5, 2.5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 12, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[727] = 'Thaddeus Lewis, BUF, 28, 6, 5, 0, 0, 0, 0, 0, 0, 0, 7, 1, -5, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[728] = 'Jeff Linkenbach, IND, 26, 12, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[729] = 'Rishard Matthews, MIA, 24, 16, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[730] = 'Byron Maxwell, SEA, 25, 16, 5, 0, 4, 6, 0, 6, 14, 2, 0, 1, 0, 0, 31, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[731] = 'Colin McCarthy, TEN, 24, 16, 5, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 38, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[732] = 'Robert McClain, ATL, 25, 16, 5, 1, 0, 0, 0, 0, 5, 2, 1, 2, 0, 0, 55, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[733] = 'Josh McCown, CHI, 34, 8, 5, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[734] = 'Stacy McGee, OAK, 23, 15, 5, 0.5, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 14, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[735] = 'Lance Moore, NOR, 30, 13, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[736] = 'Jared Odrick, MIA, 26, 16, 5, 4.5, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 34, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[737] = 'Bear Pascoe, NYG, 27, 16, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[738] = 'Justin Rogers, 3TM, 25, 10, 5, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 18, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[739] = 'Eddie Royal, SDG, 27, 15, 5, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[740] = 'Ace Sanders, JAX, 22, 15, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[741] = 'Keith Tandy, TAM, 24, 16, 5, 0, 3, 42, 0, 20, 3, 1, 0, 1, 0, 0, 31, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[742] = 'Jared Veldheer, OAK, 26, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[743] = 'Reggie Walker, SDG, 27, 16, 5, 3, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 34, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[744] = 'J.J. Wilcox, DAL, 22, 13, 5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 22, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[745] = 'Kyle Williams, 2TM, 25, 10, 5, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[746] = 'Frank Zombo, KAN, 26, 16, 5, 2, 1, 5, 0, 5, 2, 1, 0, 1, 0, 0, 23, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[747] = 'Robert Alford, ATL, 25, 16, 4, 0, 2, 0, 0, 0, 7, 1, 1, 1, -5, 0, 28, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[748] = 'Joique Bell, DET, 27, 16, 4, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[749] = 'Bill Bentley, DET, 24, 13, 4, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 20, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[750] = 'Justin Blackmon, JAX, 23, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[751] = 'Levi Brown, 2TM, 29, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[752] = 'Randall Cobb, GNB, 23, 6, 4, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[753] = 'Oniel Cousins, CLE, 29, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[754] = 'Jack Doyle, IND, 23, 14, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[755] = 'Dwight Freeney, SDG, 33, 4, 4, 0.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[756] = 'Khaseem Greene, CHI, 24, 15, 4, 0, 1, 49, 0, 49, 1, 1, 0, 0, 0, 0, 21, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[757] = 'Andre Gurode, OAK, 34, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[758] = 'Andre Holmes, OAK, 25, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[759] = 'Nate Irving, DEN, 25, 15, 4, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 37, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[760] = 'Will Johnson, PIT, 24, 15, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[761] = 'Ted Larsen, TAM, 26, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[762] = 'Jamari Lattimore, GNB, 25, 15, 4, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 24, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[763] = 'Robert Lester, CAR, 25, 12, 4, 0, 3, 5, 0, 5, 4, 0, 0, 1, 0, 0, 16, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[764] = 'Jonathan Massaquoi, ATL, 25, 16, 4, 4, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 29, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[765] = 'Brice McCain, HOU, 27, 16, 4, 0, 1, 0, 0, 0, 7, 0, 0, 0, 0, 0, 25, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[766] = 'Vance McDonald, SFO, 23, 15, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[767] = 'Collin Mooney, TEN, 27, 12, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[768] = 'Matthew Mulligan, NWE, 28, 15, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[769] = 'Stephen Nicholas, ATL, 30, 14, 4, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 21, 15, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[770] = 'Chris Owusu, TAM, 23, 9, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[771] = 'Dimitri Patterson, MIA, 30, 6, 4, 1, 4, 7, 0, 3, 6, 0, 0, 0, 0, 0, 18, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[772] = 'Niles Paul, WAS, 24, 15, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[773] = 'Brian Quick, STL, 24, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[774] = 'Jay Ratliff, 2TM, 32, 5, 4, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[775] = 'Jacquizz Rodgers, ATL, 23, 15, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[776] = 'Sealver Siliga, 2TM, 23, 5, 4, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 15, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[777] = 'Darius Slay, DET, 22, 13, 4, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 27, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[778] = 'Adam Snyder, SFO, 31, 16, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[779] = 'Darren Sproles, NOR, 30, 15, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[780] = 'Kerry Taylor, 2TM, 24, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[781] = 'Cassius Vaughn, IND, 26, 16, 4, 0, 3, 9, 0, 8, 6, 1, 0, 1, 0, 0, 27, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[782] = 'Cody Wallace, PIT, 29, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[783] = 'Vince Wilfork, NWE, 32, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[784] = 'D.J. Williams, CHI, 31, 6, 4, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 19, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[785] = 'Sylvester Williams, DEN, 25, 13, 4, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[786] = 'David Wilson, NYG, 22, 5, 4, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[787] = 'Jahleel Addae, SDG, 23, 16, 3, 1, 0, 0, 0, 0, 3, 1, 0, 1, 0, 0, 43, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[788] = 'Frank Alexander, CAR, 24, 12, 3, 1, 0, 0, 0, 0, 2, 0, 0, 1, -3, 0, 9, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[789] = 'Lorenzo Alexander, ARI, 30, 3, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[790] = 'Will Allen, 2TM, 31, 17, 3, 0, 2, 40, 0, 27, 4, 1, 0, 1, 49, 0, 30, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[791] = 'Tavon Austin, STL, 22, 13, 3, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[792] = 'Robert Ayers, DEN, 28, 15, 3, 5.5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 26, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[793] = 'Allen Bailey, KAN, 24, 15, 3, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 25, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[794] = 'Champ Bailey, DEN, 35, 5, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 23, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[795] = 'Chris Baker, WAS, 26, 15, 3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[796] = 'Cole Beasley, DAL, 24, 14, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[797] = 'Travis Benjamin, CLE, 24, 8, 3, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[798] = 'Michael Bennett, SEA, 28, 16, 3, 8.5, 0, 0, 0, 0, 0, 4, 0, 3, 39, 1, 24, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[799] = 'Davone Bess, CLE, 28, 14, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[800] = 'Bront Bird, SDG, 24, 16, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 21, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[801] = 'Robert Blanton, MIN, 24, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 24, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[802] = 'Josh Boyce, NWE, 22, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[803] = 'Nigel Bradham, BUF, 24, 16, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 29, 22, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[804] = 'Jasper Brinkley, ARI, 28, 15, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 23, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[805] = 'Kenny Britt, TEN, 25, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[806] = 'Nate Byham, TAM, 25, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[807] = 'Don Carey, DET, 26, 14, 3, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 24, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[808] = 'Alex Carrington, BUF, 26, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[809] = 'Landon Cohen, 2TM, 28, 14, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[810] = 'Derrick Coleman, SEA, 23, 12, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[811] = 'Chris Crocker, CIN, 33, 12, 3, 1.5, 2, 41, 1, 32, 7, 0, 0, 0, 0, 0, 28, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[812] = 'Elvis Dumervil, BAL, 29, 15, 3, 9.5, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 17, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[813] = 'Dwan Edwards, CAR, 32, 11, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 13, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[814] = 'Fred Evans, MIN, 30, 14, 3, 0, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 16, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[815] = 'Andrew Gachkar, SDG, 25, 16, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 24, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[816] = 'Virgil Green, DEN, 25, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[817] = 'Duron Harmon, NWE, 22, 15, 3, 0, 2, 44, 0, 42, 4, 0, 0, 0, 0, 0, 24, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[818] = 'Dwayne Harris, DAL, 26, 13, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 9, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[819] = 'Ryan Harris, HOU, 28, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[820] = 'Josh Hill, NOR, 23, 14, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[821] = 'Delano Howell, IND, 24, 6, 3, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 15, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[822] = 'Ramon Humber, NOR, 26, 16, 3, 0.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 21, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[823] = 'Micah Hyde, GNB, 23, 16, 3, 1, 0, 0, 0, 0, 3, 2, 2, 1, 0, 0, 45, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[824] = 'Mark Ingram, NOR, 24, 11, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[825] = 'Jerrel Jernigan, NYG, 24, 15, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[826] = 'Jason Jones, DET, 27, 3, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[827] = 'Marvin Jones, CIN, 23, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[828] = 'Thomas Keiser, SDG, 24, 12, 3, 4.5, 1, 6, 0, 6, 2, 0, 0, 0, 0, 0, 17, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[829] = 'Dre Kirkpatrick, CIN, 24, 14, 3, 1, 3, 21, 1, 21, 7, 0, 0, 1, 9, 0, 25, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[830] = 'Karl Klug, TEN, 25, 16, 3, 2, 0, 0, 0, 0, 2, 2, 0, 1, 0, 1, 8, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[831] = 'Dwight Lowery, JAX, 27, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[832] = 'Matt McCants, OAK, 24, 13, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[833] = 'Garrett McIntyre, NYJ, 29, 13, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[834] = 'Henry Melton, CHI, 27, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 3, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[835] = 'Barkevious Mingo, CLE, 23, 15, 3, 5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 29, 13, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[836] = 'Andy Mulumba, GNB, 23, 14, 3, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 16, 17, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[837] = 'Chris Owens, 2TM, 27, 13, 3, 2.5, 0, 0, 0, 0, 3, 1, 0, 1, 0, 0, 46, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[838] = 'Johnny Patrick, SDG, 25, 13, 3, 1.5, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 36, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[839] = 'Shaun Prater, 2TM, 24, 8, 3, 0, 1, 30, 0, 30, 1, 0, 0, 0, 0, 0, 6, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[840] = 'Bacarri Rambo, WAS, 23, 11, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[841] = 'Rueben Randle, NYG, 22, 16, 3, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[842] = 'Vincent Rey, CIN, 26, 16, 3, 4, 2, 29, 1, 25, 5, 1, 0, 1, 0, 0, 37, 21, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[843] = 'Daryl Richardson, STL, 23, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[844] = 'Mychal Rivera, OAK, 23, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[845] = 'Michael Robinson, SEA, 30, 9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[846] = 'Dante Rosario, CHI, 29, 15, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[847] = 'Coty Sensabaugh, TEN, 25, 14, 3, 0, 0, 0, 0, 0, 7, 0, 0, 2, 0, 0, 26, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[848] = 'Marcus Sherels, MIN, 26, 16, 3, 0, 1, 0, 0, 0, 7, 0, 3, 2, 0, 0, 40, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[849] = 'Alameda Ta'amu, ARI, 23, 14, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[850] = 'Jeff Tarpinian, 2TM, 26, 8, 3, 0.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 16, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[851] = 'Taylor Thompson, TEN, 24, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[852] = 'Walter Thurmond, SEA, 26, 12, 3, 1, 1, 29, 1, 29, 7, 1, 0, 1, -2, 0, 26, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[853] = 'Darrin Walls, NYJ, 25, 16, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 17, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[854] = 'Dekoda Watson, TAM, 25, 15, 3, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 33, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[855] = 'Griff Whalen, IND, 23, 9, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[856] = 'George Wilson, TEN, 32, 16, 3, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 29, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[857] = 'Jimmy Wilson, MIA, 27, 16, 3, 0, 2, 21, 0, 23, 5, 1, 0, 0, 0, 0, 38, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[858] = 'Billy Winn, CLE, 24, 11, 3, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[859] = 'Kellen Jr. Winslow, NYJ, 30, 12, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[860] = 'Will Witherspoon, STL, 33, 16, 3, 0, 1, 20, 0, 20, 1, 0, 0, 1, 0, 0, 12, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[861] = 'Jarius Wright, MIN, 24, 16, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[862] = 'Husain Abdullah, KAN, 28, 16, 2, 0.5, 1, 44, 1, 44, 6, 0, 0, 1, 0, 0, 28, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[863] = 'Sam Acho, ARI, 25, 3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[864] = 'Phillip Adams, OAK, 25, 16, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 26, 0, 26, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[865] = 'Mario Addison, CAR, 26, 16, 2, 2.5, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 13, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[866] = 'Terron Armstead, NOR, 22, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[867] = 'Cliff Avril, SEA, 27, 15, 2, 8, 0, 0, 0, 0, 7, 6, 0, 1, 0, 0, 18, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[868] = 'Stedman Bailey, STL, 23, 16, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[869] = 'Joe Berger, MIN, 31, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[870] = 'Kroy Biermann, ATL, 28, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[871] = 'Ahmad Black, TAM, 24, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[872] = 'Brandon Bolden, NWE, 23, 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[873] = 'Da'Quan Bowers, TAM, 23, 13, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[874] = 'Brandon Boykin, PHI, 23, 16, 2, 0, 6, 136, 1, 76, 17, 2, 0, 0, 0, 0, 42, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[875] = 'Tyvon Branch, OAK, 27, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[876] = 'Corbin Bryant, BUF, 25, 15, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[877] = 'Stephen Burton, JAX, 24, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[878] = 'Brice Butler, OAK, 23, 10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[879] = 'Andre Caldwell, DEN, 28, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[880] = 'Roc Carmichael, 2TM, 25, 13, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 15, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[881] = 'Tony Carter, DEN, 27, 12, 2, 0, 1, 0, 0, 0, 10, 0, 1, 0, 0, 0, 16, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[882] = 'Terrence Cody, BAL, 25, 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[883] = 'Nate Collins, CHI, 26, 5, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[884] = 'Tandon Doss, BAL, 24, 15, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[885] = 'Clyde Gates, NYJ, 27, 6, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[886] = 'William Gholston, TAM, 22, 12, 2, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 15, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[887] = 'Wallace Gilberry, CIN, 29, 16, 2, 7.5, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 20, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[888] = 'Ted Jr. Ginn, CAR, 28, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[889] = 'Matt Giordano, STL, 31, 16, 2, 0, 1, 82, 1, 82, 1, 1, 0, 0, 0, 0, 13, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[890] = 'Charles Godfrey, CAR, 28, 2, 2, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[891] = 'MarQueis Gray, CLE, 23, 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[892] = 'Jonte Green, DET, 24, 9, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 6, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[893] = 'Winston Guy, JAX, 23, 14, 2, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 22, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[894] = 'Mike Harris, JAX, 25, 16, 2, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 31, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[895] = 'D.J. Hayden, OAK, 23, 8, 2, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 23, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[896] = 'Adam Hayward, TAM, 29, 16, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 19, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[897] = 'Junior Hemingway, KAN, 25, 16, 2, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[898] = 'Mark Herzlich, NYG, 26, 16, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 32, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[899] = 'DeVonte Holloman, DAL, 22, 9, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 14, 12, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[900] = 'John Hughes, CLE, 25, 15, 2, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 15, 18, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[901] = 'Jaiquawn Jarrett, NYJ, 24, 16, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 20, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[902] = 'Tony Jefferson, ARI, 21, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 19, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[903] = 'Tony Jerod-Eddie, SFO, 23, 15, 2, 0, 1, 6, 0, 6, 2, 0, 0, 1, 0, 0, 24, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[904] = 'Darius Johnson, ATL, 22, 10, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[905] = 'A.J. Klein, CAR, 22, 16, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[906] = 'Sean Lissemore, SDG, 26, 16, 2, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 18, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[907] = 'John Lotulelei, 2TM, 22, 14, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[908] = 'Leon McFadden, CLE, 23, 16, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 13, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[909] = 'Jerron McMillian, GNB, 24, 12, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 15, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[910] = 'Kevin Ogletree, 2TM, 26, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[911] = 'Michael Otto, TEN, 30, 15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[912] = 'Nate Palmer, GNB, 24, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[913] = 'Joseph Randle, DAL, 22, 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, -7, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[914] = 'Mistral Raymond, MIN, 26, 12, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 10, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[915] = 'Nickell Robey, BUF, 21, 16, 2, 3, 1, 19, 1, 19, 10, 1, 0, 1, 0, 0, 30, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[916] = 'Dunta Robinson, KAN, 31, 9, 2, 0, 0, 0, 0, 0, 4, 0, 0, 1, 0, 0, 14, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[917] = 'Shaun Rogers, NYG, 34, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[918] = 'Aaron Ross, NYG, 31, 4, 2, 0, 1, 9, 0, 9, 4, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[919] = 'Jeremy Ross, 2TM, 25, 13, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[920] = 'O'Brien Schofield, SEA, 26, 15, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[921] = 'Matt Spaeth, PIT, 30, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[922] = 'Kory Sperry, ARI, 28, 8, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[923] = 'Zach Sudfeld, 2TM, 24, 14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[924] = 'Devin Taylor, DET, 24, 13, 2, 2.5, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 9, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[925] = 'J.T. Thomas, JAX, 25, 15, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 18, 5, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[926] = 'Shamarko Thomas, PIT, 22, 14, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[927] = 'Jordan Todman, JAX, 23, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[928] = 'Levine Toilolo, ATL, 22, 15, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[929] = 'Jason Trusnik, MIA, 29, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[930] = 'Ricky Wagner, BAL, 24, 16, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[931] = 'Corey Webster, NYG, 31, 4, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 8, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[932] = 'Kayvon Webster, DEN, 0, 14, 2, 0, 1, 10, 0, 10, 10, 1, 0, 0, 0, 0, 37, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[933] = 'Guy Whimper, PIT, 30, 10, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[934] = 'Fozzy Whittaker, 2TM, 24, 14, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[935] = 'Michael Wilhoite, SFO, 27, 16, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 33, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[936] = 'Kion Wilson, PIT, 27, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[937] = 'Al Woods, PIT, 26, 16, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[938] = 'Jarius Wynn, 2TM, 27, 15, 2, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 8, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[939] = 'Kyle Adams, 2TM, 25, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[940] = 'Matt Asiata, MIN, 26, 11, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[941] = 'Nnamdi Asomugha, SFO, 32, 3, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[942] = 'Billy Bajema, BAL, 31, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[943] = 'Chris Banjo, GNB, 23, 16, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 17, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[944] = 'David Bass, CHI, 23, 12, 1, 1, 1, 24, 1, 24, 1, 0, 0, 0, 0, 0, 15, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[945] = 'Marcus Benard, ARI, 28, 12, 1, 2.5, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 14, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[946] = 'Desmond Bishop, MIN, 29, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[947] = 'Omar Bolden, DEN, 25, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[948] = 'Michael Boley, CIN, 31, 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[949] = 'Tank Carder, CLE, 24, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[950] = 'Chris Carter, PIT, 24, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[951] = 'James Casey, PHI, 29, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[952] = 'Chimdi Chekwa, OAK, 25, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 20, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[953] = 'Tyler Clutts, 2TM, 29, 8, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[954] = 'Michael Cox, NYG, 24, 14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[955] = 'Jared Crick, HOU, 24, 16, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 11, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[956] = 'Mike Daniels, GNB, 24, 16, 1, 6.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[957] = 'Knile Davis, KAN, 22, 16, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[958] = 'Brandon Deaderick, JAX, 26, 13, 1, 0.5, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 7, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[959] = 'Anthony Dixon, SFO, 26, 16, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[960] = 'Larry Donnell, NYG, 25, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[961] = 'Lavar Edwards, TEN, 23, 7, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[962] = 'Andre Ellington, ARI, 24, 15, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[963] = 'Kenrick Ellis, NYJ, 26, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[964] = 'Gavin Escobar, DAL, 22, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[965] = 'Darius Eubanks, CLE, 22, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[966] = 'Dane Fletcher, NWE, 27, 15, 1, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[967] = 'Sharrif Floyd, MIN, 21, 16, 1, 2.5, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 9, 10, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[968] = 'Larry Foote, PIT, 33, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[969] = 'Jacoby Ford, OAK, 26, 14, 1, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[970] = 'Omar Gaither, ATL, 29, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[971] = 'Terence Garvin, PIT, 23, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[972] = 'Gary Gibson, TAM, 31, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[973] = 'Najee Goode, PHI, 23, 14, 1, 1, 0, 0, 0, 0, 3, 0, 0, 1, 2, 1, 15, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[974] = 'Zaviar Gooden, TEN, 23, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[975] = 'Malliciah Goodman, ATL, 23, 14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 0, 5, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[976] = 'Marquise Goodwin, BUF, 23, 12, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[977] = 'Jonathan Grimes, HOU, 24, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[978] = 'Jose Gumbs, WAS, 25, 8, 1, 0, 1, 2, 0, 2, 1, 0, 0, 0, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[979] = 'Casey Hayward, GNB, 24, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[980] = 'Will Herring, NOR, 30, 16, 1, 0, 1, 6, 0, 6, 1, 0, 0, 0, 0, 0, 12, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[981] = 'Peyton Hillis, 2TM, 27, 7, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[982] = 'Jayron Hosley, NYG, 23, 11, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 6, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[983] = 'Jaye Howard, KAN, 25, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[984] = 'Michael Huff, 2TM, 30, 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[985] = 'Jerry Hughes, BUF, 25, 16, 1, 10, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 32, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[986] = 'Melvin Ingram, SDG, 24, 4, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 7, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[987] = 'Rob Jackson, WAS, 28, 12, 1, 2, 1, 4, 0, 4, 1, 0, 0, 0, 0, 0, 8, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[988] = 'Brandon Jacobs, NYG, 31, 7, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[989] = 'Quentin Jammer, DEN, 34, 11, 1, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 16, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[990] = 'James-Michael Johnson, KAN, 24, 16, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 17, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[991] = 'Nico Johnson, KAN, 23, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[992] = 'Ben Jones, HOU, 24, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[993] = 'Nick Kasa, OAK, 23, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[994] = 'Kyle Knox, 2TM, 24, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[995] = 'Derek Landri, TAM, 30, 8, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[996] = 'Spencer Larsen, TAM, 29, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[997] = 'Brian Leonard, TAM, 29, 16, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[998] = 'Ricardo Lockette, 2TM, 27, 8, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[999] = 'Kaluka Maiava, OAK, 26, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1000] = 'Josh Martin, KAN, 22, 5, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 12, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1001] = 'Mike Martin, TEN, 23, 13, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 11, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1002] = 'Ricardo Mathews, IND, 26, 16, 1, 0.5, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 12, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1003] = 'Taylor Mays, CIN, 25, 8, 1, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 12, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1004] = 'Demetrius McCray, JAX, 22, 16, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 9, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1005] = 'Clinton McDonald, SEA, 26, 15, 1, 5.5, 1, 3, 0, 3, 2, 0, 0, 3, 0, 0, 23, 19, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1006] = 'Sherrick McManis, CHI, 26, 15, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1007] = 'Jordan Miller, 2TM, 25, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1008] = 'C.J. Mosley, DET, 30, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 11, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1009] = 'Santana Moss, WAS, 34, 16, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1010] = 'Zeke Motta, ATL, 23, 10, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 8, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1011] = 'Daniel Muir, OAK, 30, 10, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1012] = 'Danny Noble, 2TM, 24, 8, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1013] = 'Jamize Olawale, OAK, 24, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1014] = 'Eric Page, TAM, 22, 16, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1015] = 'Ron Parker, KAN, 26, 16, 1, 1, 2, 29, 0, 15, 3, 1, 0, 3, 22, 0, 18, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1016] = 'Mike Patterson, NYG, 30, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1017] = 'Bernard Pierce, BAL, 23, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1018] = 'Dennis Pitta, BAL, 28, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1019] = 'Eddie Pleasant, HOU, 25, 16, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 20, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1020] = 'Julian Posey, CLE, 25, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1021] = 'Jerrell Powe, KAN, 26, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1022] = 'Chris Prosinski, JAX, 26, 16, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 12, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1023] = 'Isaac Redman, PIT, 29, 4, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1024] = 'Frostee Rucker, ARI, 30, 16, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1025] = 'Brian Sanford, 2TM, 26, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1026] = 'Dane Sanzenbacher, CIN, 25, 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1027] = 'Weslye Saunders, IND, 24, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1028] = 'Derrick Shelby, MIA, 24, 16, 1, 2.5, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 23, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1029] = 'Eugene Sims, STL, 27, 16, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 20, 7, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1030] = 'Alex Smith, CIN, 31, 16, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1031] = 'Jason Snelling, ATL, 30, 14, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1032] = 'Marcus Spears, BAL, 30, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1033] = 'Craig Steltz, CHI, 27, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1034] = 'Stevenson Sylvester, PIT, 25, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1035] = 'Jacob Tamme, DEN, 28, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1036] = 'Ryan Taylor, GNB, 26, 14, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1037] = 'Daniel Thomas, MIA, 26, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1038] = 'Justin Tuggle, HOU, 23, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1039] = 'Mitch Unrein, DEN, 26, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1040] = 'Joe Webb, MIN, 27, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1041] = 'Bjoern Werner, IND, 23, 13, 1, 2.5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 14, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1042] = 'Markus Wheaton, PIT, 22, 12, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1043] = 'D.J. Williams, 2TM, 25, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1044] = 'Damian Williams, TEN, 25, 10, 1, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1045] = 'Ian Williams, SFO, 24, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1046] = 'Kyle Wilson, NYJ, 26, 16, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 24, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1047] = 'Kamerion Wimbley, TEN, 30, 15, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1048] = 'Danny Woodhead, SDG, 28, 16, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1049] = 'Usama Young, OAK, 28, 12, 1, 2.5, 1, 26, 0, 26, 3, 0, 1, 1, 0, 0, 20, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1050] = 'Isaako Aaitui, MIA, 26, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1051] = 'Isa Abdul-Quddus, NOR, 25, 11, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 12, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1052] = 'Emmanuel Acho, 2TM, 23, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1053] = 'Michael Adams, TAM, 28, 6, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 11, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1054] = 'Danny Aiken, NWE, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -41, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1055] = 'Victor Aiyewa, GNB, 26, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1056] = 'Seyi Ajirotutu, SDG, 26, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 16, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1057] = 'Ryan Allen, NWE, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -2, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1058] = 'C.J. Anderson, DEN, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1059] = 'Colt Anderson, PHI, 28, 14, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 10, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1060] = 'Joe Anderson, CHI, 25, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1061] = 'Bryan Anger, JAX, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1062] = 'Javier Arenas, ARI, 26, 16, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 11, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1063] = 'Ray Ray Armstrong, STL, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1064] = 'Josh Aubrey, CLE, 22, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1065] = 'Marvin Austin, 2TM, 24, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1066] = 'Johnson Bademosi, CLE, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1067] = 'Dan Bailey, DAL, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1068] = 'Patrick Bailey, TEN, 28, 13, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 8, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1069] = 'Chase Baker, MIN, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1070] = 'Montee Ball, DEN, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1071] = 'Justin Bannan, DET, 34, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1072] = 'Joe Banyard, MIN, 25, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1073] = 'Matt Barkley, PHI, 23, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1074] = 'Antwan Barnes, NYJ, 29, 5, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1075] = 'Nick Barnett, WAS, 32, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1076] = 'Sam Barrington, GNB, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1077] = 'Daren Bates, STL, 23, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11, 1, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1078] = 'Jackie Battle, TEN, 30, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1079] = 'Steve Beauharnais, NWE, 23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1080] = 'Josh Bellamy, 2TM, 24, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1081] = 'Nick Bellore, NYJ, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1082] = 'Giovani Bernard, CIN, 22, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1083] = 'Justin Bethel*, ARI, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -3, 0, 18, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1084] = 'Christo Bilukidi, 2TM, 24, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1085] = 'Rob Bironas, TEN, 35, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1086] = 'Antwon Blake, PIT, 23, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1087] = 'Matthew Bosher, ATL, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1088] = 'Brandon Bostick, GNB, 24, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1089] = 'Kyle Bosworth, DAL, 27, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1090] = 'A.J. Bouye, HOU, 22, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1091] = 'Josh Boyd, GNB, 24, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1092] = 'Allen Bradford, 2TM, 25, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1093] = 'Bryan Braman, HOU, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1094] = 'Andre Branch, JAX, 24, 16, 0, 6, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 30, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1095] = 'LaVon Brazill, IND, 24, 10, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1096] = 'Aaron Brewer, DEN, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1097] = 'Beau Brinkley, TEN, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1098] = 'Richie Brockel, CAR, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1099] = 'Michael Brooks, SEA, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1100] = 'Ron Brooks, BUF, 25, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1101] = 'Arthur Brown, BAL, 23, 14, 0, 0.5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1102] = 'Chykie Brown, BAL, 27, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1103] = 'Curtis Brown, PIT, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1104] = 'Everette Brown, DAL, 26, 7, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 5, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1105] = 'Jalil Brown, 2TM, 26, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1106] = 'Jaron Brown, ARI, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1107] = 'Sergio Brown, IND, 25, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1108] = 'David Bruton, DEN, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1109] = 'Armonty Bryant, CLE, 23, 12, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1110] = 'Michael Buchanan, NWE, 22, 15, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 7, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1111] = 'Randy Bullock, HOU, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1112] = 'Kaelin Burnett, OAK, 24, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1113] = 'Miles Burris, OAK, 25, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1114] = 'Brandon Burton, 2TM, 24, 9, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1115] = 'Jarrett Bush, GNB, 29, 12, 0, 0, 1, 0, 0, 0, 5, 0, 0, 1, 0, 0, 11, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1116] = 'Josh Bush, NYJ, 24, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 13, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1117] = 'Crezdon Butler, SDG, 26, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1118] = 'Travaris Cadet, NOR, 24, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1119] = 'D.J. Campbell, 2TM, 24, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1120] = 'Tommie Campbell, TEN, 26, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1121] = 'Dan Carpenter, BUF, 28, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1122] = 'Chris Carr, NOR, 30, 11, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 11, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1123] = 'Andre Carter, NWE, 34, 9, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1124] = 'David Carter, DAL, 26, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1125] = 'Antoine Cason, ARI, 27, 16, 0, 0, 2, 36, 1, 20, 3, 0, 0, 3, 59, 0, 12, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1126] = 'Mike Catapano, KAN, 23, 15, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1127] = 'Josh Chapman, IND, 24, 13, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 11, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1128] = 'Orson Charles, CIN, 22, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1129] = 'Stefan Charles, 2TM, 25, 8, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 8, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1130] = 'Tashard Choice, 2TM, 29, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1131] = 'Dallas Clark, BAL, 34, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1132] = 'Marquice Cole, NWE, 30, 13, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 10, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1133] = 'Kurt Coleman, PHI, 25, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1134] = 'Dustin Colquitt, KAN, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1135] = 'Sanders Commings, KAN, 23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1136] = 'William Compton, WAS, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1137] = 'Jon Condo, OAK, 32, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1138] = 'Kevin Cone, ATL, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1139] = 'Kavell Conner, IND, 26, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 23, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1140] = 'Dan Connor, 2TM, 28, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1141] = 'Matt Conrath, STL, 24, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1142] = 'Blake Costanzo, CHI, 29, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1143] = 'Morgan Cox, BAL, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1144] = 'Perrish Cox, 2TM, 26, 11, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 9, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1145] = 'Jack Crawford, OAK, 25, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1146] = 'Josh Cribbs, NYJ, 30, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1147] = 'Da'Mon Cromartie-Smith, PIT, 26, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1148] = 'Mason Crosby, GNB, 29, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1149] = 'Jermelle Cudjo, STL, 27, 13, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 7, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1150] = 'Billy Cundiff, CLE, 33, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1151] = 'Benny Cunningham, STL, 23, 14, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1152] = 'Vinny Curry, PHI, 25, 14, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 18, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1153] = 'Craig Dahl, SFO, 28, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1154] = 'Cody Davis, STL, 24, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1155] = 'Drew Davis, ATL, 24, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1156] = 'Kanorris Davis, NWE, 23, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1157] = 'Ryan Davis, JAX, 24, 7, 0, 1, 1, 8, 0, 8, 1, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1158] = 'Troy Davis, NYJ, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1159] = 'Will Davis, MIA, 23, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1160] = 'Keyunta Dawson, 2TM, 28, 8, 0, 0.5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1161] = 'Skye Dawson, TAM, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1162] = 'Larry Dean, MIN, 25, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 13, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1163] = 'Kenny Demens, ARI, 23, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1164] = 'John Denney, MIA, 35, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1165] = 'Zak DeOssie, NYG, 29, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -35, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1166] = 'Quinton Dial, SFO, 23, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1167] = 'Zach Diles, TEN, 28, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1168] = 'Jayson DiManche, CIN, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1169] = 'Demarcus Dobbs, SFO, 26, 15, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 9, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1170] = 'James Dockery, CAR, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1171] = 'Jon Dorenbos, PHI, 33, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1172] = 'Leger Douzable, NYJ, 27, 16, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 14, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1173] = 'Marcus Dowtin, 2TM, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1174] = 'Joel Dreessen, DEN, 31, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1175] = 'Tony Dye, CIN, 23, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1176] = 'Marcus Easley, BUF, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1177] = 'Jeremy Ebert, JAX, 24, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1178] = 'Nate Ebner, NWE, 25, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1179] = 'Andrew Economos, TAM, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1180] = 'Hebron Fangupo, PIT, 28, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1181] = 'Heath Farwell, SEA, 32, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1182] = 'Jay Feely, ARI, 37, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1183] = 'Brandon Fields*, MIA, 29, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -7, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1184] = 'Andre Fluellen, DET, 28, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1185] = 'Chase Ford, MIN, 23, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1186] = 'Michael Ford, CHI, 23, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1187] = 'Justin Forsett, JAX, 28, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1188] = 'Marcus Forston, NWE, 24, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1189] = 'Glenn Foster, NOR, 23, 12, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1190] = 'Eric Frampton, 2TM, 29, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1191] = 'Rob Francois, GNB, 28, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1192] = 'Jerry Franklin, CHI, 25, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1193] = 'Johnathan Franklin, GNB, 24, 11, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1194] = 'Dominique Franks, ATL, 26, 15, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1195] = 'Jonathan Freeny, MIA, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1196] = 'Sione Fua, 2TM, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1197] = 'Thomas Gafford, KAN, 30, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1198] = 'Dylan Gandy, DET, 31, 15, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1199] = 'Clifton Geathers, PHI, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1200] = 'Kwame Geathers, SDG, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1201] = 'Toby Gerhart, MIN, 26, 14, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1202] = 'Brandon Ghee, CIN, 26, 10, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 4, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1203] = 'Mike Gillislee, MIA, 23, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1204] = 'Ka'lial Glaud, TAM, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1205] = 'Brittan Golden, ARI, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1206] = 'Robert Golden, PIT, 23, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1207] = 'DeJon Gomes, DET, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1208] = 'Brett Goode, GNB, 29, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1209] = 'Tavares Gooden, HOU, 29, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1210] = 'Mike Goodson, NYJ, 26, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1211] = 'Richard Gordon, 2TM, 26, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1212] = 'Josh Gordy, IND, 26, 12, 0, 0, 1, 7, 0, 7, 4, 0, 0, 0, 0, 0, 17, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1213] = 'Danny Gorrer, TAM, 27, 7, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 9, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1214] = 'Stephen Gostkowski*, NWE, 29, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1215] = 'Brandon Graham, PHI, 25, 16, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1216] = 'Larry Grant, CHI, 28, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1217] = 'Cyrus Gray, KAN, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1218] = 'Alex Green, NYJ, 25, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1219] = 'Chris Greenwood, 2TM, 24, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1220] = 'Clint Gresham, SEA, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1221] = 'Everson Griffen, MIN, 26, 16, 0, 5.5, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 17, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1222] = 'Quentin Groves, CLE, 29, 5, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1223] = 'Lawrence Guy, 2TM, 23, 12, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 13, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1224] = 'Saalim Hakim, 2TM, 23, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1225] = 'Jakar Hamilton, DAL, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1226] = 'Johnathan Hankins, NYG, 21, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1227] = 'Chris Harper, 2TM, 24, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1228] = 'Brandon Harris, HOU, 23, 16, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 16, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1229] = 'Clark Harris, CIN, 29, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1230] = 'Josh Harris, ATL, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1231] = 'Mario Harvey, IND, 26, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1232] = 'Andrew Hawkins, CIN, 27, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1233] = 'William Hayes, STL, 28, 14, 0, 5, 1, 5, 0, 5, 3, 0, 0, 2, 0, 0, 21, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1234] = 'Paul Hazel, CLE, 23, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1235] = 'Johnny Hekker*+, STL, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1236] = 'Roy Jr. Helu, WAS, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1237] = 'Alex Henery, PHI, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1238] = 'Dan Herron, 2TM, 24, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1239] = 'Devin Hester, CHI, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1240] = 'Jordan Hill, SEA, 22, 4, 0, 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1241] = 'Michael Hill, 2TM, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1242] = 'Domenik Hixon, CAR, 29, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1243] = 'Gerald Hodges, MIN, 22, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1244] = 'Chris Hogan, BUF, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1245] = 'Trindon Holliday, DEN, 27, 15, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1246] = 'Wes Horton, CAR, 23, 9, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1247] = 'Kevin Huber, CIN, 28, 14, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -15, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1248] = 'Brandon Hughes, PHI, 27, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1249] = 'Montori Hughes, IND, 23, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1250] = 'Robert Hughes, 2TM, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1251] = 'Josh Hull, WAS, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1252] = 'Margus Hunt, CIN, 26, 10, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1253] = 'Kendall Hunter, SFO, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 1, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1254] = 'Israel Idonije, DET, 33, 15, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1255] = 'Corvey Irvin, DAL, 28, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1256] = 'Kemal Ishmael, ATL, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1257] = 'Charles James, NYG, 23, 12, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1258] = 'LaMichael James, SFO, 24, 10, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1259] = 'Tim Jamison, HOU, 27, 5, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1260] = 'J.J. Jansen*, CAR, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1261] = 'Lestar Jean, HOU, 25, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1262] = 'A.J. Jefferson, MIN, 25, 10, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1263] = 'Willie Jefferson, HOU, 22, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1264] = 'Brandon Jenkins, WAS, 23, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1265] = 'Greg Jenkins, OAK, 24, 6, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 23, 1, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1266] = 'Jelani Jenkins, MIA, 21, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1267] = 'Cam Johnson, IND, 23, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1268] = 'Jeron Johnson, SEA, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1269] = 'Josh Johnson, CIN, 27, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1270] = 'Keelan Johnson, PHI, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1271] = 'Shelton Johnson, OAK, 23, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1272] = 'Steven Johnson, DEN, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1273] = 'Tom Johnson, NOR, 29, 12, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1274] = 'Abry Jones, JAX, 22, 8, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1275] = 'Chris Jones, DAL, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1276] = 'Colin Jones, CAR, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1277] = 'Datone Jones, GNB, 23, 16, 0, 3.5, 0, 0, 0, 0, 0, 0, 0, 1, 20, 0, 8, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1278] = 'Don Jones, MIA, 23, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 10, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1279] = 'Donnie Jones, PHI, 33, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1280] = 'Edgar Jones, DAL, 29, 7, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1281] = 'Taiwan Jones, OAK, 25, 16, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 13, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1282] = 'Dion Jordan, MIA, 23, 16, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 19, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1283] = 'Kyle Juszczyk, BAL, 22, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1284] = 'Deji Karim, HOU, 27, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1285] = 'Frank Kearse, 2TM, 25, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1286] = 'Bryan Kehl, WAS, 29, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1287] = 'Brett Kern, TEN, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, -30, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1288] = 'Marquette King, OAK, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1289] = 'Ishmaa'ily Kitchen, CLE, 25, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1290] = 'Jake Knott, PHI, 23, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1291] = 'Sam Koch, BAL, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1292] = 'Michael Koenen, TAM, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1293] = 'Jordan Kovacs, MIA, 23, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1294] = 'Markus Kuhn, NYG, 27, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1295] = 'L.P. Ladouceur, DAL, 32, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1296] = 'Jeremy Lane, SEA, 23, 15, 0, 0, 0, 0, 0, 0, 4, 0, 1, 0, 0, 0, 20, 9, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1297] = 'Ellis Lankster, NYJ, 26, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1298] = 'Spencer Lanning, CLE, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1299] = 'Cameron Lawrence, DAL, 22, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1300] = 'Mike Leach, ARI, 37, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1301] = 'Shane Lechler, HOU, 37, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1302] = 'Joe Lefeged, IND, 25, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1303] = 'Corey Lemonier, SFO, 22, 16, 0, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 12, 3, 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1304] = 'Anthony Levine, BAL, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1305] = 'Travis Lewis, DET, 25, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1306] = 'Chris Lewis-Harris, CIN, 24, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1307] = 'Cullen Loeffler, MIN, 32, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1308] = 'Kyle Love, 2TM, 27, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1309] = 'Corey Lynch, 2TM, 28, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1310] = 'Elbert Mack, HOU, 27, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1311] = 'Lamar Mady, OAK, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1312] = 'Jeff Maehl, PHI, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1313] = 'Brandon Magee, CLE, 23, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1314] = 'Stansly Maponga, ATL, 22, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1315] = 'Chris Maragos, SEA, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, -19, 0, 10, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1316] = 'Brandon Marshall, DEN, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1317] = 'Derrick Martin, CHI, 28, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1318] = 'Eric Martin, CLE, 22, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1319] = 'Sam Martin, DET, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, -9, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1320] = 'Vaughn Martin, MIA, 27, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1321] = 'Tim Masthay, GNB, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1322] = 'Casey Matthews, PHI, 24, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 11, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1323] = 'Cliff Matthews, ATL, 24, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1324] = 'Michael Mauti, MIN, 23, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1325] = 'Benson Mayowa, SEA, 22, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1326] = 'Pat McAfee, IND, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1327] = 'Bryan McCann, ARI, 26, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1328] = 'Terrell McClain, HOU, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1329] = 'Albert McClellan, BAL, 27, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1330] = 'Danny McCray, DAL, 25, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1331] = 'Kelcie McCray, 2TM, 25, 15, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 17, 0, 8, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1332] = 'Marshall McFadden, OAK, 27, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1333] = 'Brandon McGee, STL, 23, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1334] = 'Rocky McIntosh, DET, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1335] = 'Josh McNary, IND, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1336] = 'Pernel McPhee, BAL, 25, 16, 0, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 13, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1337] = 'Johnathan Meeks, BUF, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1338] = 'Phillip Merling, WAS, 28, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1339] = 'Jeromy Miles, 2TM, 26, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1340] = 'Jeremy Mincey, 2TM, 30, 10, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 11, 11, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1341] = 'Kevin Minter, ARI, 23, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1342] = 'Dontay Moch, ARI, 25, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1343] = 'Mike Mohamed, HOU, 25, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1344] = 'Nick Moody, SFO, 23, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1345] = 'D.J. Moore, CAR, 26, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1346] = 'Damontre Moore, NYG, 21, 15, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 9, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1347] = 'Marlon Moore, 2TM, 26, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1348] = 'Matt Moore, MIA, 29, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1349] = 'Sterling Moore, DAL, 23, 5, 0, 0, 1, 21, 0, 21, 3, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1350] = 'Brian Moorman, BUF, 37, 11, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1351] = 'Mike Morgan, SEA, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1352] = 'Darryl Morris, SFO, 23, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1353] = 'Thomas Morstead, NOR, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1354] = 'Dezman Moses, KAN, 24, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1355] = 'Derek Moye, PIT, 25, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1356] = 'Jerome Murphy, WAS, 26, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1357] = 'Chris Neild, WAS, 26, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1358] = 'Drake Nevis, 3TM, 24, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1359] = 'Josh Norman, CAR, 26, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1360] = 'Brad Nortman, CAR, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1361] = 'Nick Novak, SDG, 32, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1362] = 'Mike Nugent, CIN, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1363] = 'Alex Okafor, ARI, 22, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1364] = 'Kassim Osgood, SFO, 33, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 10, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1365] = 'Matt Overton*, IND, 28, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1366] = 'Cheta Ozougwu, CHI, 25, 7, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1367] = 'Curtis Painter, NYG, 28, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, -6, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1368] = 'Michael Palmer, PIT, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1369] = 'Isaiah Pead, STL, 24, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1370] = 'Cedric Peerman, CIN, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 11, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1371] = 'Micah Pellerin, 2TM, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1372] = 'Jeris Pendleton, IND, 30, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1373] = 'Adam Podlesh, CHI, 30, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1374] = 'Quinton Pointer, STL, 25, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1375] = 'Chris Polk, PHI, 24, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1376] = 'Shawn Powell, 2TM, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1377] = 'Ty Powell, 2TM, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1378] = 'Jordan Poyer, 2TM, 22, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1379] = 'Jordan Pugh, WAS, 25, 4, 0, 0, 1, 16, 0, 16, 1, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1380] = 'Tanner Purdum, NYJ, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1381] = 'Ryan Quigley, NYJ, 23, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1382] = 'Chris Rainey, IND, 25, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1383] = 'Caesar Rayford, DAL, 27, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1384] = 'Kevin Reddick, NOR, 24, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 11, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1385] = 'David Reed, IND, 26, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1386] = 'Konrad Reuland, NYJ, 26, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1387] = 'Darius Reynaud, 2TM, 29, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1388] = 'Chase Reynolds, STL, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1389] = 'Dallas Reynolds, NYG, 29, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1390] = 'LaRoy Reynolds, JAX, 0, 12, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 13, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1391] = 'Sean Richardson, GNB, 23, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1392] = 'Theo Riddick, DET, 22, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1393] = 'Gerald Rivers, 2TM, 23, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1394] = 'Travian Robertson, ATL, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1395] = 'Adrian Robinson, 3TM, 24, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1396] = 'Denard Robinson, JAX, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1397] = 'Khiry Robinson, NOR, 24, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1398] = 'Patrick Robinson, NOR, 26, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1399] = 'Ryan Robinson, OAK, 23, 12, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1400] = 'Trent Robinson, 2TM, 23, 11, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 7, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1401] = 'Brian Robiskie, ATL, 26, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1402] = 'Saverio Rocca, WAS, 40, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1403] = 'Evan Rodriguez, BUF, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1404] = 'Jay Ross, BUF, 26, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1405] = 'Evan Royster, WAS, 26, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1406] = 'Garrison Sanborn, BUF, 28, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1407] = 'Ricky Sapp, 2TM, 27, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1408] = 'J.K. Schaffer, CIN, 23, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1409] = 'Caleb Schlauderaff, NYJ, 26, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1410] = 'Mike Scifres, SDG, 33, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1411] = 'Josh Scobee, JAX, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1412] = 'Trevor Scott, TAM, 29, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1413] = 'Jordan Senn, CAR, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1414] = 'DeShawn Shead, SEA, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1415] = 'Russell Shepard, TAM, 23, 14, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1416] = 'Kawann Short, CAR, 24, 16, 0, 1.5, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 19, 16, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1417] = 'John Simon, BAL, 23, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1418] = 'Matt Slater*, NWE, 28, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1419] = 'Alfonso Smith, ARI, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 9, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1420] = 'Antone Smith, ATL, 28, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1421] = 'Armond Smith, CAR, 27, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1422] = 'Brad Smith, 2TM, 30, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, -4, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1423] = 'D'Anthony Smith, 2TM, 25, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1424] = 'D.J. Smith, HOU, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1425] = 'Rodney Smith, MIN, 23, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1426] = 'Anthony Spencer, DAL, 29, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1427] = 'C.J. Spillman, SFO, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1428] = 'Austin Spitler, MIA, 27, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1429] = 'Micheal Spurlock, 2TM, 30, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1430] = 'Damion Square, PHI, 24, 10, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1431] = 'Daimion Stafford, TEN, 22, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1432] = 'Julian Stanford, DET, 23, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1433] = 'R.J. Stanford, MIA, 25, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1434] = 'Jawanza Starling, 2TM, 22, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1435] = 'Jeremy Stewart, OAK, 24, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1436] = 'Devon Still, CIN, 24, 10, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1437] = 'Brandon Stokley, BAL, 37, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1438] = 'Jake Stoneburner, GNB, 24, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1439] = 'Darrell Stuckey, SDG, 26, 16, 0, 0, 0, 0, 0, 0, 3, 0, 0, 1, 2, 0, 21, 7, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1440] = 'Andy Studebaker, IND, 28, 11, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 7, 8, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1441] = 'Nathan Stupar, 2TM, 25, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1442] = 'Caleb Sturgis, MIA, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1443] = 'Ryan Succop, KAN, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1444] = 'Shaun Suisham, PIT, 32, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 6, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1445] = 'Nick Sundberg, WAS, 26, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1446] = 'Rod Sweeting, NOR, 23, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1447] = 'Julian Talley, NYG, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1448] = 'Ronald Talley, ARI, 27, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1449] = 'Phillip Tanner, DAL, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1450] = 'Darryl Tapp, WAS, 29, 11, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1451] = 'Brandon Tate, CIN, 26, 16, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1452] = 'Cooper Taylor, NYG, 23, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1453] = 'Jamar Taylor, MIA, 23, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1454] = 'Stepfan Taylor, ARI, 22, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1455] = 'Marcus Thigpen, MIA, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1456] = 'Dallas Thomas, MIA, 24, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1457] = 'Michael Thomas, 2TM, 24, 3, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1458] = 'Carson Tinker, JAX, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -14, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1459] = 'Anthony Toribio, KAN, 28, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1460] = 'Justin Trattou, 2TM, 25, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1461] = 'Brynden Trawick, BAL, 24, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1462] = 'Isaiah Trufant, NYJ, 31, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 6, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1463] = 'Christian Tupou, CHI, 24, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1464] = 'Robert Turbin, SEA, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1465] = 'DeAngelo Tyson, BAL, 24, 13, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 9, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1466] = 'DeMarcus Van Dyke, PIT, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1467] = 'Jason Vega, DAL, 26, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1468] = 'Raymond Ventrone, SFO, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 11, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1469] = 'Josh Victorian, HOU, 25, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1470] = 'Jonathan Vilma, NOR, 31, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1471] = 'Trevin Wade, NOR, 24, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1472] = 'Tyrunn Walker, NOR, 23, 7, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 5, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1473] = 'Blair Walsh, MIN, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1474] = 'Anthony Walters, CHI, 25, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1475] = 'Greg Warren, PIT, 32, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1476] = 'Cornelius Washington, CHI, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1477] = 'Leon Washington, 2TM, 31, 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1478] = 'B.W. Webb, DAL, 23, 15, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 13, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1479] = 'Jon Weeks, HOU, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1480] = 'Eric Weems, CHI, 28, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 6, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1481] = 'John Wendling, DET, 30, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1482] = 'Jamaal Westerman, 2TM, 28, 13, 0, 0.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1483] = 'Ryan Whalen, CIN, 24, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1484] = 'Chris White, NWE, 24, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1485] = 'Tahir Whitehead, DET, 23, 16, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 7, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1486] = 'Brandon Williams, BAL, 24, 7, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1487] = 'Brandon Williams, CAR, 26, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1488] = 'Duke Williams, BUF, 23, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 2, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1489] = 'Jason Williams, CAR, 27, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1490] = 'Nick Williams, WAS, 23, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1491] = 'Shawn Williams, CIN, 22, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1492] = 'Teddy Williams, ARI, 25, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1493] = 'C.J. Wilson, CHI, 24, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1494] = 'C.J. Wilson, GNB, 26, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 3, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1495] = 'Martez Wilson, 3TM, 25, 8, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1496] = 'Tavon Wilson, NWE, 23, 13, 0, 0, 1, 74, 1, 74, 1, 0, 0, 0, 0, 0, 3, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1497] = 'Mike Windt, SDG, 27, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1498] = 'Blidi Wreh-Wilson, TEN, 24, 13, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 9, 4, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1499] = 'Eric Wright, SFO, 28, 7, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1500] = 'Devon Wylie, 5TM, 25, 6, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1501] = 'T.J. Yates, HOU, 26, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[1502] = 'Christian Yount, CLE, 25, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < inp.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[zen] = inp[zen].split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 2; yin < inp[zen].length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[zen][yin] = parseInt(inp[zen][yin]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[36].title[2] = "K Means Clustering for 2013 NFL Stats -  generate";
fctns[36].src[3] = " getFreeAgents()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fa = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[0] = 'Marcus Benard, ARI, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[1] = 'Frostee Rucker, ARI, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[2] = 'Matt Shaughnessy, ARI, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[3] = 'Arthur Jones, BAL, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[4] = 'Greg Hardy, CAR, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[5] = 'Corey Wootton, CHI, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[6] = 'Michael Johnson, CIN, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[7] = 'Anthony Spencer, DAL, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[8] = 'Jarius Wynn, DAL, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[9] = 'Robert Ayers, DEN, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[10] = 'Jeremy Mincey, DEN, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[11] = 'Willie Young, DET, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[12] = 'Israel Idonije, DET, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[13] = 'Mike Neal, GNB, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[14] = 'C.J. Wilson, GNB, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[15] = 'Antonio Smith, HOU, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[16] = 'Ricardo Mathews, IND, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[17] = 'Lawrence Sidbury, IND, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[18] = 'Tyson Jackson, KAN, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[19] = 'Jared Allen, MIN, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[20] = 'Everson Griffen, MIN, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[21] = 'Andre Carter, NWE, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[22] = 'Kenyon Coleman, NOR, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[23] = 'Keyunta Dawson, NOR, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[24] = 'Justin Tuck, NYG, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[25] = 'Lamarr Houston, OAK, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[26] = 'Jason Hunter, OAK, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[27] = 'Brett Keisel, PIT, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[28] = 'Michael Bennett, SEA, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[29] = 'Daniel Te'o-Nesheim, TAM, DE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[30] = 'Jonathan Babineaux, ATL, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[31] = 'Peria Jerry, ATL, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[32] = 'Corey Peters, ATL, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[33] = 'Terrence Cody, BAL, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[34] = 'Alex Carrington, BUF, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[35] = 'Colin Cole, CAR, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[36] = 'Landon Cohen, CHI, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[37] = 'Nate Collins, CHI, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[38] = 'Henry Melton, CHI, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[39] = 'Jay Ratliff, CHI, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[40] = 'Jason Hatcher, DAL, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[41] = 'Andre Fluellen, DET, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[42] = 'Johnny Jolly, GNB, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[43] = 'Ryan Pickett, GNB, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[44] = 'B.J. Raji, GNB, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[45] = 'Earl Mitchell, HOU, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[46] = 'Aubrayo Franklin, IND, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[47] = 'Fili Moala, IND, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[48] = 'Brandon Deaderick, JAX, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[49] = 'Kyle Love, JAX, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[50] = 'Paul Soliai, MIA, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[51] = 'Randy Starks, MIA, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[52] = 'Fred Evans, MIN, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[53] = 'Kevin Williams, MIN, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[54] = 'Linval Joseph, NYG, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[55] = 'Mike Patterson, NYG, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[56] = 'Shaun Rogers, NYG, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[57] = 'Leger Douzable, NYJ, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[58] = 'Daniel Muir, OAK, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[59] = 'Pat Sims, OAK, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[60] = 'Vance Walker, OAK, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[61] = 'Clifton Geathers, PHI, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[62] = 'Al Woods, PIT, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[63] = 'Ziggy Hood, PIT, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[64] = 'Cam Thomas, SDG, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[65] = 'Chris Baker, SEA, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[66] = 'Tony McDaniel, SEA, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[67] = 'Clinton McDonald, SEA, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[68] = 'Gary Gibson, TAM, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[69] = 'Antonio Johnson, TEN, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[70] = 'Ropati Pitoitua, TEN, DT';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[71] = 'Omar Gaither, ATL, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[72] = 'Stephen Nicholas, ATL, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[73] = 'Jordan Senn, CAR, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[74] = 'James Anderson, CHI, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[75] = 'Michael Boley, CIN, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[76] = 'Edgar Jones, DAL, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[77] = 'Ernie Sims, DAL, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[78] = 'Shaun Phillips, DEN, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[79] = 'Rocky McIntosh, DET, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[80] = 'Frank Zombo, KAN, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[81] = 'Marvin Mitchell, MIN, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[82] = 'Parys Haralson, NOR, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[83] = 'Will Herring, NOR, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[84] = 'Keith Rivers, NYG, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[85] = 'Calvin Pace, NYJ, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[86] = 'Jamaal Westerman, PIT, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[87] = 'Jason Worilds, PIT, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[88] = 'Larry English, SDG, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[89] = 'Reggie Walker, SDG, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[90] = 'O'Brien Schofield, SEA, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[91] = 'Jo-Lonn Dunbar, STL, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[92] = 'Jonathan Casillas, TAM, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[93] = 'Adam Hayward, TAM, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[94] = 'Dekoda Watson, TAM, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[95] = 'Rob Jackson, WAS, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[96] = 'Brian Orakpo, WAS, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[97] = 'Darryl Tapp, WAS, OLB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[98] = 'Karlos Dansby, ARI, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[99] = 'Daryl Smith, BAL, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[100] = 'Arthur Moats, BUF, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[101] = 'Dan Connor, CAR, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[102] = 'Jason Williams, CAR, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[103] = 'Blake Costanzo, CHI, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[104] = 'D.J. Williams, CHI, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[105] = 'Wesley Woodyard, DEN, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[106] = 'Stewart Bradley, DEN, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[107] = 'Paris Lenon, DEN, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[108] = 'Rob Francois, GNB, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[109] = 'Joe Mays, HOU, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[110] = 'Darryl Sharpton, HOU, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[111] = 'Pat Angerer, IND, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[112] = 'Kavell Conner, IND, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[113] = 'Akeem Jordan, KAN, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[114] = 'Austin Spitler, MIA, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[115] = 'Desmond Bishop, MIN, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[116] = 'Dane Fletcher, NWE, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[117] = 'Brandon Spikes, NWE, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[118] = 'Ramon Humber, NOR, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[119] = 'Jonathan Vilma, NOR, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[120] = 'Jon Beason, NYG, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[121] = 'Josh Mauga, NYJ, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[122] = 'Stevenson Sylvester, PIT, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[123] = 'Donald Butler, SDG, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[124] = 'Will Witherspoon, STL, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[125] = 'Jacob Cutrera, TAM, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[126] = 'Zac Diles, TEN, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[127] = 'Nick Barnett, WAS, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[128] = 'London Fletcher, WAS, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[129] = 'Bryan Kehl, WAS, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[130] = 'Perry Riley, WAS, ILB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[131] = 'Javier Arenas, ARI, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[132] = 'Antoine Cason, ARI, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[133] = 'Bryan McCann, ARI, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[134] = 'Dominique Franks, ATL, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[135] = 'Asante Samuel, ATL, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[136] = 'Drayton Florence, CAR, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[137] = 'Captain Munnerlyn, CAR, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[138] = 'Zack Bowman, CHI, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[139] = 'Kelvin Hayden, CHI, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[140] = 'Sherrick McManis, CHI, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[141] = 'Charles Tillman, CHI, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[142] = 'Brandon Ghee, CIN, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[143] = 'Quentin Jammer, DEN, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[144] = 'Dominique Rodgers-Cromartie, DEN, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[145] = 'Steve Vallos, DEN, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[146] = 'Rashean Mathis, DET, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[147] = 'Sam Shields, GNB, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[148] = 'Elbert Mack, HOU, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[149] = 'Vontae Davis, IND, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[150] = 'Cassius Vaughn, IND, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[151] = 'Will Blackmon, JAX, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[152] = 'Nolan Carroll, MIA, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[153] = 'Brent Grimes, MIA, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[154] = 'Chris Owens, MIA, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[155] = 'Chris Cook, MIN, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[156] = 'Aqib Talib, NWE, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[157] = 'Trumaine McBride, NYG, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[158] = 'Aaron Ross, NYG, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[159] = 'Terrell Thomas, NYG, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[160] = 'Aaron Berry, NYJ, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[161] = 'Phillip Adams, OAK, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[162] = 'Mike Jenkins, OAK, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[163] = 'Tracy Porter, OAK, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[164] = 'Corey Graham, PHI, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[165] = 'Richard Marshall, SDG, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[166] = 'William Middleton, SDG, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[167] = 'Walter Thurmond III, SEA, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[168] = 'Eric Wright, SFO, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[169] = 'Tarell Brown, SFO, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[170] = 'Michael Adams, TAM, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[171] = 'Danny Gorrer, TAM, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[172] = 'Alterraun Verner, TEN, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[173] = 'E.J. Biggers, WAS, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[174] = 'DeAngelo Hall, WAS, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[175] = 'Josh Wilson, WAS, CB';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[176] = 'Yeremiah Bell, ARI, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[177] = 'James Ihedigbo, BAL, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[178] = 'Jeromy Miles, BAL, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[179] = 'Jairus Byrd, BUF, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[180] = 'Jim Leonhard, BUF, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[181] = 'Quintin Mikell, CAR, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[182] = 'Mike Mitchell, CAR, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[183] = 'Craig Steltz, CHI, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[184] = 'Major Wright, CHI, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[185] = 'Chris Crocker, CIN, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[186] = 'Taylor Mays, CIN, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[187] = 'T.J. Ward, CLE, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[188] = 'Danny McCray, DAL, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[189] = 'Mike Adams, DEN, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[190] = 'Michael Huff, DEN, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[191] = 'John Wendling, DET, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[192] = 'Antoine Bethea, IND, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[193] = 'Sergio Brown, IND, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[194] = 'Husain Abdullah, KAN, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[195] = 'Quintin Demps, KAN, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[196] = 'Kendrick Lewis, KAN, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[197] = 'Malcolm Jenkins, NOR, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[198] = 'Stevie Brown, NYG, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[199] = 'Ryan Mundy, NYG, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[200] = 'Ed Reed, NYJ, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[201] = 'Usama Young, OAK, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[202] = 'Charles Woodson, OAK, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[203] = 'Nate Allen, PHI, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[204] = 'Colt Anderson, PHI, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[205] = 'Kurt Coleman, PHI, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[206] = 'Ryan Clark, PIT, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[207] = 'Darrell Stuckey, SDG, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[208] = 'Chris Clemons, SEA, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[209] = 'Chris Maragos, SEA, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[210] = 'Donte Whitner, SFO, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[211] = 'Matt Giordano, STL, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[212] = 'Darian Stewart, STL, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[213] = 'Bernard Pollard, TEN, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[214] = 'Reed Doughty, WAS, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[215] = 'Jose Gumbs, WAS, S';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fa[216] = 'Brandon Meriweather, WAS, S';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return fa;<br>}<br>";
fctns[36].title[3] = "K Means Clustering for 2013 NFL Stats -  getFreeAgents";
fctns[36].src[4] = " kmeans(items, k, maxno, clusters, labels)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = parseInt(k);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labels = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minDist, changed, iter, pos, chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxDist = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < items.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[zen] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var yin = 0; yin < k; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = Math.floor(Math.random()*items.length + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (chosen[pos] != 0);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[yin] = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang < items[pos].length; yang++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[yin][yang] = items[pos][yang];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[pos] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDist[yin] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < items.length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;posD = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang < k; yang++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist_curr = EucDist(items[yin], clusters[yang]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist_curr < posD)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;posD = dist_curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labels[yin] = pos;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Initial Configuration: <br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += dispClusters(items, k, clusters, labels);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changed = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iter = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < k; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < items[0].length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[zen] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang < items.length; yang++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (labels[yang] == yin)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < items[yang].length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[zen] += items[yang][zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (zen = 0; zen < clusters[yin].length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[yin][zen] = sum[zen] / count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDist[yin] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < items.length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;posD = Number.MAX_VALUE;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang < k; yang++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist_curr = EucDist(items[yin], clusters[yang]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist_curr < posD)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;posD = dist_curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pos != labels[yin])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labels[yin] = pos;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changed = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iter++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (changed == true && iter <= maxno);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < k; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang < items.length; yang++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (labels[yang] == yin && EucDist(items[yang], clusters[yin]) > maxDist[yin])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDist[yin] = EucDist(items[yang], clusters[yin]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[36].title[4] = "K Means Clustering for 2013 NFL Stats -  kmeans";
fctns[36].src[5] = " dispClusters(items, clusters, labels)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fa = getFreeAgents();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < items.length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang < fa.length; yang++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = fa[yang].split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (items[yin][0].indexOf(temp[0]) != -1 && temp[1] == items[yin][1] && items[yin][0].indexOf(temp[2]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items[yin][0] = '<b>' + items[yin][0] + ', ' + temp[2] + '</b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < clusters.length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><b>Cluster ' + yin + ':</b></td>' + '<td>Age</td>' + '<td>G</td>' + '<td>GS</td>' + '<td>Sk</td>' + '<td>Int</td>' + '<td>Yds</td>' + '<td>TD</td>' + '<td>Lng</td>' + '<td>PD</td>' + '<td>FF</td>' + '<td>Fmb</td>' + '<td>FR</td>' + '<td>Yds</td>' + '<td>TD</td>' + '<td>Tkl</td>' + '<td>Ast</td>' + '<td>Sfty</td>' + '<td>Sk/G</td>' + '<td>Int/G</td>' + '<td>PD/G</td>' + '<td>FF/G</td>' + '<td>Tkl/G</td>' + '<td>Ast/G</td>' + '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang < items.length; yang++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (labels[yang] == yin)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>(' + items[yang][0] + ', ' + items[yang][1] + ')</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 2; zen < items[yang].length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (items[yang][zen] != 0 && zen < 19)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + items[yang][zen] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (items[yang][zen] != 0 && zen >= 19)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + items[yang][zen].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br></scr" + "ipt>";
fctns[36].title[5] = "K Means Clustering for 2013 NFL Stats -  dispClusters";
fctns[36].loc = "http://learninglover.com/examples.php?id=68";
fctns[37] = new Object();
fctns[37].src = new Array();
fctns[37].title = new Array();
fctns[37].src[0] = "<script type='text/javascript'><br>var M = 1000000;<br>var text = '';<br>";
fctns[37].title[0] = "K-Means Clustering - styleTags";
fctns[37].src[1] = " clearRect()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c3c3c3';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>}<br>";
fctns[37].title[1] = "K-Means Clustering -  clearRect";
fctns[37].src[2] = " EucDist(point1, point2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (point1.length != point2.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return M;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < point1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(Math.abs(point1[i] - point2[i]), 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br>";
fctns[37].title[2] = "K-Means Clustering -  EucDist";
fctns[37].src[3] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('points').value = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numPts = document.getElementById('nopts').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < numPts; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[i][0] = Math.floor(Math.random()*document.getElementById('myCanvas').width + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inp[i][1] = Math.floor(Math.random()*document.getElementById('myCanvas').height + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('points').value += '(' + inp[i][0] + ', ' + inp[i][1] + '), ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(inp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return inp;<br>}<br>";
fctns[37].title[3] = "K-Means Clustering -  generate";
fctns[37].src[4] = " dispPts(input)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < input.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(input[i][0],c.height-input[i][1],5,0,Math.PI*2,true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('point ' + i + ': ' + input[i][0] + ', ' + input[i][1] + ' drawn.');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[37].title[4] = "K-Means Clustering -  dispPts";
fctns[37].src[5] = " kmeans(items, k, maxno, clusters, labels)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minDist, i, j, changed, iter, pos, chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxDist = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.height, c.width);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(items);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < items.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i] = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(i = 0; i < k; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = Math.floor(Math.random()*items.length + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (chosen[pos] != 0);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[i] = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[i][0] = items[pos][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[i][1] = items[pos][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[pos] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDist[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < items.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = M;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;posD = M;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < k; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist_curr = EucDist(items[i], clusters[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist_curr < posD)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;posD = dist_curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labels[i] = pos;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Initial Configuration: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += dispClusters(items, k, clusters, labels);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changed = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iter = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < k; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (m = 0; m < items[0].length; m++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[m] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < items.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (labels[j] == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (m = 0; m < items[j].length; m++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[m] += items[j][m];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (m = 0; m < clusters[i].length; m++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clusters[i][m] = sum[m] / count;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDist[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < items.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = M;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;posD = M;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < k; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist_curr = EucDist(items[i], clusters[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dist_curr < posD)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;posD = dist_curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pos != labels[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labels[i] = pos;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changed = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iter++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (changed == true && iter <= maxno);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < k; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < items.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (labels[j] == i && EucDist(items[j], clusters[i]) > maxDist[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxDist[i] = EucDist(items[j], clusters[i]);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < k; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(clusters[i][0], c.height-clusters[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < items.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (labels[j] == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(items[j][0], c.height-items[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(clusters[i][0], c.height-clusters[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(clusters[i][0],c.height-clusters[i][1],2,0,Math.PI*2,true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(clusters[i][0],c.height-clusters[i][1],maxDist[i],0,Math.PI*2,true);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.closePath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[37].title[5] = "K-Means Clustering -  kmeans";
fctns[37].src[6] = " dispClusters(items, k, clusters, labels)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < clusters.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td width=150><b>Cluster ' + i + ':</b></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td width=150><b>(' + clusters[i][0].toFixed(3) + ', ' + clusters[i][1].toFixed(3) + ')</b></td><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < items.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (labels[j] == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + items[j][0] + ', ' + items[j][1] + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br><br></scr" + "ipt>";
fctns[37].title[6] = "K-Means Clustering -  dispClusters";
fctns[37].loc = "http://learninglover.com/examples.php?id=12";
fctns[38] = new Object();
fctns[38].src = new Array();
fctns[38].title = new Array();
fctns[38].src[0] = "<script type='text/javascript'>";
fctns[38].title[0] = "Knapsack Problem: Backtracking - styleTags";
fctns[38].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numItems = Math.floor(Math.random()*10) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bagSize = Math.floor(Math.random()*90) + 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var profits = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var weights = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numItems; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profits[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weights[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (weights[i] > bagSize);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = numItems;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = bagSize;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = profits;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = weights;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[38].title[1] = "Knapsack Problem: Backtracking -  generate";
fctns[38].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = generate();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Consider the following instance of the knapsack problem. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We have a bag of size ' + prob[1] + ' units. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We also have a set of ' + prob[0] + ' items. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Each of these items has its own size and its own value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We would like to fit the most valuable combination of items as possible into the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Because these items must go into the bag, their sum cannot exceed the size of the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Here are the properties of the items: ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name='items' id='items'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>Item</td><td>Size</td><td>Value</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>' + (i+1) + '</td><td>' + prob[3][i] + '</td><td>' + prob[2][i] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = drawProb(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[38].title[2] = "Knapsack Problem: Backtracking -  init";
fctns[38].src[3] = " sortDec(arr2d)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr2d.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < arr2d.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr2d[i][1] < arr2d[j][1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = arr2d[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[i] = arr2d[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr2d;<br>}<br>";
fctns[38].title[3] = "Knapsack Problem: Backtracking -  sortDec";
fctns[38].src[4] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br><br>";
fctns[38].title[4] = "Knapsack Problem: Backtracking -  EucDist";
fctns[38].src[5] = " used(points, num1, num2, size)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < points.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('(' + points[i][0] + ', ' + points[i][1] + ') vs (' + num1 + ', ' + num2 + '), ' + EucDist(points[i][0], points[i][1], num1, num2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(points[i][0], points[i][1], num1, num2) < 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[38].title[5] = "Knapsack Problem: Backtracking -  used";
fctns[38].src[6] = " drawProb(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num1 = Math.floor(Math.random()*((c.width-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num2 = Math.floor(Math.random()*((c.height-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (used(points, num1, num2, size[i]));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = num1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[38].title[6] = "Knapsack Problem: Backtracking -  drawProb";
fctns[38].src[7] = " drawSol(prob, sol)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < sol.length && !ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol[j] == (i+1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[38].title[7] = "Knapsack Problem: Backtracking -  drawSol";
fctns[38].src[8] = " backtrack(prob, sol, rem)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cellVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var possLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var totVal = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var totSze = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totVal += prob[2][sol[i]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totSze += prob[3][sol[i]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rem.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < sol.length && loc == -1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol[j] == rem[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - totSze >= prob[3][rem[i]-1] && loc == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = rem[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vals = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poss.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = sol.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poss.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[loc] = poss[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = rem.indexOf(poss[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < rem.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem1[j] = rem[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem1[loc1] = rem1[rem1.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem1.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'Calling Backtrack Alg on sol = {' + sol + '}, rem = {' + rem + '}<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vals[i] = backtrack(prob, sol, rem1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The best solution is ' + vals[i][1] + ' with a value of ' + vals[i][0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var max = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vals.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (max == -1 || vals[i][0] > vals[max][0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return vals[max];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = totVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1][i] = sol[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = totVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1][i] = sol[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[38].title[8] = "Knapsack Problem: Backtracking -  backtrack";
fctns[38].src[9] = " solveBT(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol=new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i] = (i+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = backtrack(prob, sol, rem);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The solution is ' + ans[1] + ', with a total value of ' + ans[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawSol(prob, ans[1]);<br>}<br></scr" + "ipt>";
fctns[38].title[9] = "Knapsack Problem: Backtracking -  solveBT";
fctns[38].loc = "http://learninglover.com/examples.php?id=51";
fctns[39] = new Object();
fctns[39].src = new Array();
fctns[39].title = new Array();
fctns[39].src[0] = "<script type='text/javascript'>";
fctns[39].title[0] = "Knapsack Problem: Dynamic Programming - styleTags";
fctns[39].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numItems = Math.floor(Math.random()*10) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bagSize = Math.floor(Math.random()*90) + 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var profits = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var weights = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numItems; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profits[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weights[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (weights[i] > bagSize);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = numItems;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = bagSize;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = profits;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = weights;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[39].title[1] = "Knapsack Problem: Dynamic Programming -  generate";
fctns[39].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = generate();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Consider the following instance of the knapsack problem. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We have a bag of size ' + prob[1] + ' units. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We also have a set of ' + prob[0] + ' items. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Each of these items has its own size and its own value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We would like to fit the most valuable combination of items as possible into the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Because these items must go into the bag, their sum cannot exceed the size of the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Here are the properties of the items: ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name='items' id='items'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>Item</td><td>Size</td><td>Value</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>' + (i+1) + '</td><td>' + prob[3][i] + '</td><td>' + prob[2][i] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = drawProb(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[39].title[2] = "Knapsack Problem: Dynamic Programming -  init";
fctns[39].src[3] = " sortDec(arr2d)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr2d.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < arr2d.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr2d[i][1] < arr2d[j][1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = arr2d[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[i] = arr2d[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr2d;<br>}<br>";
fctns[39].title[3] = "Knapsack Problem: Dynamic Programming -  sortDec";
fctns[39].src[4] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br><br>";
fctns[39].title[4] = "Knapsack Problem: Dynamic Programming -  EucDist";
fctns[39].src[5] = " used(points, num1, num2, size)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < points.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('(' + points[i][0] + ', ' + points[i][1] + ') vs (' + num1 + ', ' + num2 + '), ' + EucDist(points[i][0], points[i][1], num1, num2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(points[i][0], points[i][1], num1, num2) < 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[39].title[5] = "Knapsack Problem: Dynamic Programming -  used";
fctns[39].src[6] = " drawProb(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num1 = Math.floor(Math.random()*((c.width-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num2 = Math.floor(Math.random()*((c.height-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (used(points, num1, num2, size[i]));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = num1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[39].title[6] = "Knapsack Problem: Dynamic Programming -  drawProb";
fctns[39].src[7] = " drawSol(prob, sol)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < sol.length && !ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol[j] == (i+1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[39].title[7] = "Knapsack Problem: Dynamic Programming -  drawSol";
fctns[39].src[8] = " dynamic(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The Dynamic Programming approach to the knapsack problem works by understanding that to solve a knapsack problem with <i>n</i> items and a bag of size <i>M</i> means that we also need to optimally solve a problem with fewer items and a smaller bag size. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'This means that we can reach an optimal solution by solving each of these subproblems. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dpfnct = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dpfnct[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= prob[1]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dpfnct[0][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[0][j] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We can represent this by the following table:<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i <= prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td>first ' + i + ' items</td>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= prob[1]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j >= prob[3][i-1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dpfnct[i][j] = maxim(dpfnct[i-1][j], dpfnct[i-1][j-prob[3][i-1]] + prob[2][i-1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dpfnct[i][j] == dpfnct[i-1][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] = chosen[i-1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] = chosen[i-1][j-prob[3][i-1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (chosen[i][j] == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] += ', ' + i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dpfnct[i][j] = dpfnct[i-1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] = chosen[i-1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= prob[1]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td>bag size = ' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td>' + dpfnct[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol = chosen[prob[0]][prob[1]].split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawSol(prob, sol);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So the set of items we selected is {' + chosen[prob[0]][prob[1]] + '}, with a total value of ' + dpfnct[prob[0]][prob[1]] + '. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br>}<br>";
fctns[39].title[8] = "Knapsack Problem: Dynamic Programming -  dynamic";
fctns[39].src[9] = " maxim(a, b)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a > b)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return a;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return b;<br>}<br><br><br></scr" + "ipt>";
fctns[39].title[9] = "Knapsack Problem: Dynamic Programming -  maxim";
fctns[39].loc = "http://learninglover.com/examples.php?id=50";
fctns[40] = new Object();
fctns[40].src = new Array();
fctns[40].title = new Array();
fctns[40].src[0] = "<script type='text/javascript'>";
fctns[40].title[0] = "Knapsack Problem: Greedy Approximation Algorithm - styleTags";
fctns[40].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numItems = Math.floor(Math.random()*10) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bagSize = Math.floor(Math.random()*90) + 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var profits = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var weights = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numItems; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profits[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weights[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (weights[i] > bagSize);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = numItems;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = bagSize;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = profits;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = weights;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[40].title[1] = "Knapsack Problem: Greedy Approximation Algorithm -  generate";
fctns[40].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = generate();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Consider the following instance of the knapsack problem. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We have a bag of size ' + prob[1] + ' units. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We also have a set of ' + prob[0] + ' items. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Each of these items has its own size and its own value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We would like to fit the most valuable combination of items as possible into the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Because these items must go into the bag, their sum cannot exceed the size of the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Here are the properties of the items: ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name='items' id='items'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>Item</td><td>Size</td><td>Value</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>' + (i+1) + '</td><td>' + prob[3][i] + '</td><td>' + prob[2][i] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = drawProb(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[40].title[2] = "Knapsack Problem: Greedy Approximation Algorithm -  init";
fctns[40].src[3] = " sortDec(arr2d)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr2d.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < arr2d.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr2d[i][1] < arr2d[j][1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = arr2d[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[i] = arr2d[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr2d;<br>}<br>";
fctns[40].title[3] = "Knapsack Problem: Greedy Approximation Algorithm -  sortDec";
fctns[40].src[4] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br><br>";
fctns[40].title[4] = "Knapsack Problem: Greedy Approximation Algorithm -  EucDist";
fctns[40].src[5] = " used(points, num1, num2, size)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < points.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('(' + points[i][0] + ', ' + points[i][1] + ') vs (' + num1 + ', ' + num2 + '), ' + EucDist(points[i][0], points[i][1], num1, num2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(points[i][0], points[i][1], num1, num2) < 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[40].title[5] = "Knapsack Problem: Greedy Approximation Algorithm -  used";
fctns[40].src[6] = " drawProb(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num1 = Math.floor(Math.random()*((c.width-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num2 = Math.floor(Math.random()*((c.height-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (used(points, num1, num2, size[i]));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = num1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[40].title[6] = "Knapsack Problem: Greedy Approximation Algorithm -  drawProb";
fctns[40].src[7] = " drawSol(prob, sol)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < sol.length && !ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol[j] == (i+1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br><br>";
fctns[40].title[7] = "Knapsack Problem: Greedy Approximation Algorithm -  drawSol";
fctns[40].src[8] = " greedy(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var input = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'Consider the following instance of the knapsack problem. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'We have a bag of size ' + prob[1] + ' units. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'We also have a set of ' + prob[0] + ' items. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'Each of these itmes has its own size and its own value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'We would like to fit the most valuable combination of items as possible into the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'Because these items must go into the bag, their sum cannot exceed the size of the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'Here are the properties of the items: ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var itms = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratios = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itms += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itms += '<tr><td>Item</td><td>Size</td><td>Value</td><td>Ratio</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][0] = i+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][1] = prob[2][i] / prob[3][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itms += '<tr><td>' + (i+1) + '</td><td>' + prob[3][i] + '</td><td>' + prob[2][i] + '</td><td>' + (Math.round(ratios[i][1]*100)/100) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itms += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += itms;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The greedy approach to the knapsack problem works by computing the ratio of value to weight of each item. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The items are then sorted in decreasing order of this ratio. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'While there are still items that can fit into the bag, the item with the highest ratio that can fit into the bag is chosen. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var total = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = sortDec(ratios);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Item ' + ratio[i][0] + ' has the highest remaining ratio of ' + (Math.round(ratio[i][1]*100)/100) + '.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[3][ratio[i][0]-1] + total <= prob[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'This item can fit into the bag so we select it. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = ratio[i][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total += prob[3][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tval += prob[2][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'This item is too large to fit into the bag, so we cannot select it. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawSol(prob, chosen);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So the set of items we selected is {' + chosen + '}, with a total value of ' + tval + '. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = input;<br>}<br></scr" + "ipt>";
fctns[40].title[8] = "Knapsack Problem: Greedy Approximation Algorithm -  greedy";
fctns[40].loc = "http://learninglover.com/examples.php?id=49";
fctns[41] = new Object();
fctns[41].src = new Array();
fctns[41].title = new Array();
fctns[41].src[0] = "<script type='text/javascript'>";
fctns[41].title[0] = "Knapsack Problem: Linear Programming - styleTags";
fctns[41].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numItems = Math.floor(Math.random()*10) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bagSize = Math.floor(Math.random()*90) + 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var profits = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var weights = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numItems; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profits[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weights[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (weights[i] > bagSize);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = numItems;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = bagSize;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = profits;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = weights;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[41].title[1] = "Knapsack Problem: Linear Programming -  generate";
fctns[41].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = generate();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Consider the following instance of the knapsack problem. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We have a bag of size ' + prob[1] + ' units. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We also have a set of ' + prob[0] + ' items. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Each of these items has its own size and its own value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We would like to fit the most valuable combination of items as possible into the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Because these items must go into the bag, their sum cannot exceed the size of the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Here are the properties of the items: ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name='items' id='items'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>Item</td><td>Size</td><td>Value</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>' + (i+1) + '</td><td>' + prob[3][i] + '</td><td>' + prob[2][i] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = drawProb(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[41].title[2] = "Knapsack Problem: Linear Programming -  init";
fctns[41].src[3] = " sortDec(arr2d)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr2d.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < arr2d.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr2d[i][1] < arr2d[j][1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = arr2d[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[i] = arr2d[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr2d;<br>}<br>";
fctns[41].title[3] = "Knapsack Problem: Linear Programming -  sortDec";
fctns[41].src[4] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br><br>";
fctns[41].title[4] = "Knapsack Problem: Linear Programming -  EucDist";
fctns[41].src[5] = " used(points, num1, num2, size)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < points.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('(' + points[i][0] + ', ' + points[i][1] + ') vs (' + num1 + ', ' + num2 + '), ' + EucDist(points[i][0], points[i][1], num1, num2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(points[i][0], points[i][1], num1, num2) < 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[41].title[5] = "Knapsack Problem: Linear Programming -  used";
fctns[41].src[6] = " drawProb(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num1 = Math.floor(Math.random()*((c.width-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num2 = Math.floor(Math.random()*((c.height-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (used(points, num1, num2, size[i]));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = num1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[41].title[6] = "Knapsack Problem: Linear Programming -  drawProb";
fctns[41].src[7] = " drawSol(prob, sol)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < sol.length && !ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol[j] == (i+1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[41].title[7] = "Knapsack Problem: Linear Programming -  drawSol";
fctns[41].src[8] = " dispIP(opt, c, A, b, ineq, bds)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Maximize ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Minimize ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < c.length-1 && c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += c[i] + 'x<sub>' + (i+1) + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += c[i] + 'x<sub>' + (i+1) + '</sub><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Subject to <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+ Subject to') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ Subject to', '<br>Subject to');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < A[i].length-1 && A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + (j+1) + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + (j+1) + '</sub>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ineq[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' <= ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ineq[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' = ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' >= ' + b[i] + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  <=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  <=', ' <= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  =') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  =', ' = ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  >=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  >=', ' >= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (text.indexOf('+ -') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ -', '- ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < bds.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + (i+1) + '</sub> >= 0<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}<br>";
fctns[41].title[8] = "Knapsack Problem: Linear Programming -  dispIP";
fctns[41].src[9] = " solveLPR(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'In the Linear Program, we create a variable x<sub>i</sub> for each item i<br>. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The objective function is to maximize the total value, which is the sum of the values chosen. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The (only) constraint is to ensure that the chosen items fit into the knapsack. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i] = prob[2][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[0] = prob[3];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[0] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var b = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[0] = prob[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ineq = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[0] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i] = prob[2][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i+1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i+1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i+1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[0][j] = prob[3][j];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i+1][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i+1][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var opt = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bds = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispIP(opt, c, A, b, ineq, bds);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratios = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][0] = i+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][1] = prob[2][i] / prob[3][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var total = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = sortDec(ratios);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[3][ratio[i][0]-1] + total <= prob[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = ratio[i][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total += prob[3][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tval += prob[2][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawSol(prob, chosen);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The optimal solution of this LP is ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < chosen.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'x<sub>' + chosen[i] + '</sub> = 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - total > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - total > 0 && i < prob[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem = (prob[1]-total)/prob[3][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - total > 0 && i < prob[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'x<sub>' + ratio[i][0] + '</sub> = ' + (Math.round((rem)*100)/100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - total > 0 && i < prob[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ', with an objective function value of ' + Math.round((tval + prob[2][ratio[i][0]-1]*rem)*100)/100;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ', with an objective function value of ' + tval;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So The set of items we selected is {' + chosen + '}, with a total value of ' + tval + '. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br></scr" + "ipt>";
fctns[41].title[9] = "Knapsack Problem: Linear Programming -  solveLPR";
fctns[41].loc = "http://learninglover.com/examples.php?id=52";
fctns[42] = new Object();
fctns[42].src = new Array();
fctns[42].title = new Array();
fctns[42].src[0] = "<script type='text/javascript'>";
fctns[42].title[0] = "Knapsack Problems - styleTags";
fctns[42].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numItems = Math.floor(Math.random()*10) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bagSize = Math.floor(Math.random()*90) + 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var profits = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var weights = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numItems; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profits[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;weights[i] = Math.floor(Math.random()*bagSize*2)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (weights[i] > bagSize);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = numItems;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = bagSize;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = profits;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = weights;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[42].title[1] = "Knapsack Problems -  generate";
fctns[42].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = generate();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Consider the following instance of the knapsack problem. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We have a bag of size ' + prob[1] + ' units. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We also have a set of ' + prob[0] + ' items. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Each of these items has its own size and its own value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We would like to fit the most valuable combination of items as possible into the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Because these items must go into the bag, their sum cannot exceed the size of the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Here are the properties of the items: ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<p name='items' id='items'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>Item</td><td>Size</td><td>Value</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td>' + (i+1) + '</td><td>' + prob[3][i] + '</td><td>' + prob[2][i] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = drawProb(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[42].title[2] = "Knapsack Problems -  init";
fctns[42].src[3] = " sortDec(arr2d)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr2d.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < arr2d.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr2d[i][1] < arr2d[j][1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = arr2d[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[i] = arr2d[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr2d;<br>}<br>";
fctns[42].title[3] = "Knapsack Problems -  sortDec";
fctns[42].src[4] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br><br>";
fctns[42].title[4] = "Knapsack Problems -  EucDist";
fctns[42].src[5] = " used(points, num1, num2, size)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < points.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('(' + points[i][0] + ', ' + points[i][1] + ') vs (' + num1 + ', ' + num2 + '), ' + EucDist(points[i][0], points[i][1], num1, num2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(points[i][0], points[i][1], num1, num2) < 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[42].title[5] = "Knapsack Problems -  used";
fctns[42].src[6] = " drawProb(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num1 = Math.floor(Math.random()*((c.width-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num2 = Math.floor(Math.random()*((c.height-30)/30) + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (used(points, num1, num2, size[i]));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = num1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[42].title[6] = "Knapsack Problems -  drawProb";
fctns[42].src[7] = " drawSol(prob, sol)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size[i] = Math.floor(prob[3][i]/5)+10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < sol.length && !ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol[j] == (i+1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(30*points[i][0],30*points[i][1],size[i],0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(prob[2][i],30*points[i][0]-3*(Math.floor(Math.log(prob[2][i])/Math.log(10))+1),30*points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br><br>";
fctns[42].title[7] = "Knapsack Problems -  drawSol";
fctns[42].src[8] = " greedy(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var input = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'Consider the following instance of the knapsack problem. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'We have a bag of size ' + prob[1] + ' units. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'We also have a set of ' + prob[0] + ' items. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'Each of these itmes has its own size and its own value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'We would like to fit the most valuable combination of items as possible into the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'Because these items must go into the bag, their sum cannot exceed the size of the bag. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += 'Here are the properties of the items: ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var itms = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratios = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itms += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itms += '<tr><td>Item</td><td>Size</td><td>Value</td><td>Ratio</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][0] = i+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][1] = prob[2][i] / prob[3][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itms += '<tr><td>' + (i+1) + '</td><td>' + prob[3][i] + '</td><td>' + prob[2][i] + '</td><td>' + (Math.round(ratios[i][1]*100)/100) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itms += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input += itms;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The greedy approach to the knapsack problem works by computing the ratio of value to weight of each item. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The items are then sorted in decreasing order of this ratio. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'While there are still items that can fit into the bag, the item with the highest ratio that can fit into the bag is chosen. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var total = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = sortDec(ratios);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Item ' + ratio[i][0] + ' has the highest remaining ratio of ' + (Math.round(ratio[i][1]*100)/100) + '.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[3][ratio[i][0]-1] + total <= prob[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'This item can fit into the bag so we select it. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = ratio[i][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total += prob[3][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tval += prob[2][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'This item is too large to fit into the bag, so we cannot select it. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawSol(prob, chosen);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So the set of items we selected is {' + chosen + '}, with a total value of ' + tval + '. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = input;<br>}<br>";
fctns[42].title[8] = "Knapsack Problems -  greedy";
fctns[42].src[9] = " solveLPR(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'In the Linear Program, we create a variable x<sub>i</sub> for each item i<br>. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The objective function is to maximize the total value, which is the sum of the values chosen. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The (only) constraint is to ensure that the chosen items fit into the knapsack. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i] = prob[2][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[0] = prob[3];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[0] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var b = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[0] = prob[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ineq = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[0] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i] = prob[2][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i+1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i+1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i+1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[0][j] = prob[3][j];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i+1][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i+1][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var opt = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bds = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispIP(opt, c, A, b, ineq, bds);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratios = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][0] = i+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][1] = prob[2][i] / prob[3][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var total = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = sortDec(ratios);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[3][ratio[i][0]-1] + total <= prob[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = ratio[i][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total += prob[3][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tval += prob[2][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawSol(prob, chosen);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The optimal solution of this LP is ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < chosen.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'x<sub>' + chosen[i] + '</sub> = 1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - total > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - total > 0 && i < prob[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem = (prob[1]-total)/prob[3][ratio[i][0]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - total > 0 && i < prob[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'x<sub>' + ratio[i][0] + '</sub> = ' + (Math.round((rem)*100)/100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - total > 0 && i < prob[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ', with an objective function value of ' + Math.round((tval + prob[2][ratio[i][0]-1]*rem)*100)/100;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ', with an objective function value of ' + tval;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So The set of items we selected is {' + chosen + '}, with a total value of ' + tval + '. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>";
fctns[42].title[9] = "Knapsack Problems -  solveLPR";
fctns[42].src[10] = " dynamic(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The Dynamic Programming approach to the knapsack problem works by understanding that to solve a knapsack problem with <i>n</i> items and a bag of size <i>M</i> means that we also need to optimally solve a problem with fewer items and a smaller bag size. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'This means that we can reach an optimal solution by solving each of these subproblems. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dpfnct = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dpfnct[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= prob[1]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dpfnct[0][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[0][j] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tval = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'We can represent this by the following table:<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i <= prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td>first ' + i + ' items</td>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= prob[1]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j >= prob[3][i-1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dpfnct[i][j] = maxim(dpfnct[i-1][j], dpfnct[i-1][j-prob[3][i-1]] + prob[2][i-1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dpfnct[i][j] == dpfnct[i-1][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] = chosen[i-1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] = chosen[i-1][j-prob[3][i-1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (chosen[i][j] == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] += ', ' + i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dpfnct[i][j] = dpfnct[i-1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i][j] = chosen[i-1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= prob[1]; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td>bag size = ' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= prob[0]; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td>' + dpfnct[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol = chosen[prob[0]][prob[1]].split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawSol(prob, sol);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So the set of items we selected is {' + chosen[prob[0]][prob[1]] + '}, with a total value of ' + dpfnct[prob[0]][prob[1]] + '. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br>}<br>";
fctns[42].title[10] = "Knapsack Problems -  dynamic";
fctns[42].src[11] = " maxim(a, b)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a > b)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return a;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return b;<br>}<br>";
fctns[42].title[11] = "Knapsack Problems -  maxim";
fctns[42].src[12] = " dispIP(opt, c, A, b, ineq, bds)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Maximize ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Minimize ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < c.length-1 && c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += c[i] + 'x<sub>' + (i+1) + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += c[i] + 'x<sub>' + (i+1) + '</sub><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Subject to <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+ Subject to') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ Subject to', '<br>Subject to');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < A[i].length-1 && A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + (j+1) + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + (j+1) + '</sub>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ineq[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' <= ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ineq[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' = ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' >= ' + b[i] + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  <=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  <=', ' <= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  =') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  =', ' = ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  >=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  >=', ' >= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (text.indexOf('+ -') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ -', '- ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < bds.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + (i+1) + '</sub> >= 0<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}<br>";
fctns[42].title[12] = "Knapsack Problems -  dispIP";
fctns[42].src[13] = " backtrack(prob, sol, rem)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var show = document.getElementById('show').checked;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cellVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var possLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var totVal = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var totSze = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totVal += prob[2][sol[i]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totSze += prob[3][sol[i]-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rem.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < sol.length && loc == -1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol[j] == rem[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob[1] - totSze >= prob[3][rem[i]-1] && loc == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = rem[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vals = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poss.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = sol.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poss.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[loc] = poss[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = rem.indexOf(poss[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < rem.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem1[j] = rem[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem1[loc1] = rem1[rem1.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem1.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'Calling Backtrack Alg on sol = {' + sol + '}, rem = {' + rem + '}<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vals[i] = backtrack(prob, sol, rem1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The best solution is ' + vals[i][1] + ' with a value of ' + vals[i][0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var max = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vals.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (max == -1 || vals[i][0] > vals[max][0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return vals[max];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = totVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1][i] = sol[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = totVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1][i] = sol[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[42].title[13] = "Knapsack Problems -  backtrack";
fctns[42].src[14] = " solveBT(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol=new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0]; i++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i] = (i+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = backtrack(prob, sol, rem);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The solution is ' + ans[1] + ', with a total value of ' + ans[0] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawSol(prob, ans[1]);<br>}<br></scr" + "ipt>";
fctns[42].title[14] = "Knapsack Problems -  solveBT";
fctns[42].loc = "http://learninglover.com/examples.php?id=38";
fctns[43] = new Object();
fctns[43].src = new Array();
fctns[43].title = new Array();
fctns[43].src[0] = "<script id='sc1' type='text/javascript'><br>var M_VAL = 50000;";
fctns[43].title[0] = "Kruskal's Algorithm - styleTags";
fctns[43].src[1] = " Kruskal(A, n, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lookup = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T[i] = [i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lookup[i] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (k < n)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   if (lookup[i] == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    bb = '<b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    bbe = '</b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    bb = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    bbe = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   }<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   text += bb + 'Tree[' + i + '] = {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   for (j = 0; j < T[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    text += T[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    if (j != T[i].length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;     text += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   text += '}, lookup[' + i + '] = ' + lookup[i] + bbe + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  text += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m = M_VAL;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (j = 0; j < i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  if (A[i][j] < m && lookup[i] != lookup[j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   m = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   u = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   v = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (m == M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  k = n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  initLen = T[lookup[u]].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  initLook = lookup[u];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  for (i = initLen-1; i >=0; i--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   T[lookup[v]][T[lookup[v]].length] = T[initLook][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   lookup[T[initLook][i]] = lookup[v];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  E[E.length] = u;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  E[E.length] = v;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  A[u][v] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  A[v][u] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  sum += m;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  k++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  document.getElementById('output').innerHTML += 'e = (' + u + ', '<br>+ v + ')<br>----------<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = sum;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = B[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return E;<br>}<br>";
fctns[43].title[1] = "Kruskal's Algorithm -  Kruskal";
fctns[43].src[2] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br>";
fctns[43].title[2] = "Kruskal's Algorithm -  EucDist";
fctns[43].src[3] = " used(list, num1, num2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < list.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(list[i][0], list[i][1], num1, num2) < 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[43].title[3] = "Kruskal's Algorithm -  used";
fctns[43].src[4] = " drawGraph(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2 * Math.PI * i) / A.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = 255 * Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = 255 * Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[i][0], points[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[j][0], points[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[43].title[4] = "Kruskal's Algorithm -  drawGraph";
fctns[43].src[5] = " drawNodes(A, points)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[43].title[5] = "Kruskal's Algorithm -  drawNodes";
fctns[43].src[6] = " drawLines(A, points)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[i][0], points[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[j][0], points[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[43].title[6] = "Kruskal's Algorithm -  drawLines";
fctns[43].src[7] = " drawAns(A, points, ans, start)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawNodes(A, points);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((start + 2) == ans.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start += 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A, points, ans, start);drawNodes(A, points);};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = setTimeout(f, 2000);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;<br>}<br></scr" + "ipt>";
fctns[43].title[7] = "Kruskal's Algorithm -  drawAns";
fctns[43].loc = "http://learninglover.com/examples.php?id=5";
fctns[44] = new Object();
fctns[44].src = new Array();
fctns[44].title = new Array();
fctns[44].src[0] = "<script type='text/javascript'>";
fctns[44].title[0] = "Linear Programming Duality - styleTags";
fctns[44].src[1] = " disp(lp)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '', i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.opt) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Maximize ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Minimize ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < lp.c.length-1 && lp.c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += lp.c[i] + 'x<sub>' + i + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lp.c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += lp.c[i] + 'x<sub>' + i + '</sub><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Subject to <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+ Subject to') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ Subject to', '<br>Subject to');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < lp.A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < lp.A[i].length-1 && lp.A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += lp.A[i][j] + 'x<sub>' + j + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lp.A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += lp.A[i][j] + 'x<sub>' + j + '</sub>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.ineq[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' <= ' + lp.b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lp.ineq[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' = ' + lp.b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' >= ' + lp.b[i] + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  <=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  <=', ' <= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  =') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  =', ' = ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  >=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  >=', ' >= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (text.indexOf('+ -') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ -', '- ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.bds.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.bds[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + i + '</sub> <= ' + 0 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lp.bds[i] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + i + '</sub> >= ' + 0 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>}<br>";
fctns[44].title[1] = "Linear Programming Duality -  disp";
fctns[44].src[2] = " findDual(lp, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newLP = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.opt = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.c = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.b = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.ineq = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.bds = new Array();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newopt, newc = new Array(), newA = new Array(), newb = new Array(), newineq = new Array(), newbds = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.opt == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.opt = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lp.opt == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.opt = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.b.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.c[i] = lp.b[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.bds[i] = -1*lp.ineq[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.b[i] = lp.c[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.ineq[i] = lp.bds[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.A[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.A[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < lp.A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.A[j][i] = lp.A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disp(newLP);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return newLP;<br>}<br>";
fctns[44].title[2] = "Linear Programming Duality -  findDual";
fctns[44].src[3] = " initSol(lp, show)<br>{<br>/*<br>Input: A linear Program in Standard form<br>Output: The columns of the matrix that represent the initial basis, as well as an updated matrix that contains the necessary row operations to make these columns into elements of the Basis matrix. <br>Method: <br> - If a row has a slack variable, that column is in the basis. <br> - If a row has a surplus variable, add an artificial variable and add that column to the basis. <br> - If a row has neither a slack or surplus variable, add an artificial variable and add that column to the basis. <br> - I shouldn't need to check if a variable is a slack variable more than once, so calling isSlackVar on each row and column is redundant. <br>*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, k, basis = [], poss = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basis[i] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < lp.A[i].length && basis[i] == -1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.A[i][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < lp.A.length && poss; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.A[k][j] != 0 && k != i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poss)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basis[i] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return basis;<br>}<br>";
fctns[44].title[3] = "Linear Programming Duality -  initSol";
fctns[44].src[4] = " toStdFrm(lp, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = [];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < lp.A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = [];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < lp.A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = lp.A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.bds.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.bds[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'variable x<sub>' + i + '</sub> is unbounded.<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Shifting columns after variable x<sub>' + i + '</sub> right one column <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < B.length; k++)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = B[k].length-1; j > i; j--)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k][j+1] = B[k][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[j+1] = lp.c[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.bds[j+1] = lp.bds[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < B.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k][j+1] = -1*B[k][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.bds[i+1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[i+1] = -1*lp.c[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lp.bds[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'variable x<sub>' + i + '</sub> is negative.<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < B.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k][i] = -1*B[k][i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[i] = -1*lp.c[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.b.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.b[i] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Now we make ' + lp.b[i] + ' nonnegative by multiplying this row by -1<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < B[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = -1*B[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.b[i] = -1*lp.b[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.ineq[i] = -1*lp.ineq[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < lp.ineq.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;place = B[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.ineq[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Constraint ' + i + ' is a less than inequality, so we add a slack variable to it. <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < B.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.ineq[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.bds[place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lp.ineq[i] == 1)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Constraint ' + i + ' is a greater than inequality, so we add both a surplus variable and an artificial variable to it. <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < B.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][place+1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][place] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][place+1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.ineq[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.bds[place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.bds[place+1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.opt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[place+1] = -10000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[place+1] = 10000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (lp.ineq[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Constraint ' + i + ' is an equality, so we add an artificial variable to it. <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < B.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.ineq[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.bds[place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lp.opt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[place] = -10000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lp.c[place] = 10000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The matrix is now in standard form. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return B;<br>}<br>";
fctns[44].title[4] = "Linear Programming Duality -  toStdFrm";
fctns[44].src[5] = " simplex(lp, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var corig = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rcost = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratio = 1000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minrow = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We are now ready to run to the Simplex Method. <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newLP = lp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.A = toStdFrm(lp, show);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disp(newLP);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < newLP.c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;corig[i] = newLP.c[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Now that the problem is in standard form, we can easily figure out an initial feasible solution, and put the problem into tableau form. <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var basic = initSol(newLP, show);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < basic.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newLP.c[basic[i]] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < newLP.A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.c[j] -= newLP.A[i][j] * newLP.c[basic[i]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < newLP.A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>x<sub>' + j + '</sub></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>b</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < newLP.A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < newLP.A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (basic[i] == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<b>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += (Math.round(newLP.A[i][j]*100)/100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (basic[i] == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + (Math.round(newLP.b[i]*100)/100) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < newLP.c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + (Math.round(newLP.c[i]*100)/100) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We now search for a variable that improves our solution. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optloc = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < newLP.c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newLP.opt == 1 && newLP.c[i] > 0 && (optloc == -1 || newLP.c[i] > newLP.c[optloc]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optloc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (newLP.opt == 0 && newLP.c[i] < 0 && (optloc == -1 || newLP.c[i] < newLP.c[optloc]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optloc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (optloc != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The variable with the most ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newLP.opt == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'positive';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'negative';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' reduced cost is x<sub>' + optloc + '</sub>, whose reduced cost is ' + newLP.c[optloc] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = 1000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minrow = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Now we need to find the row that constrains this variable the most. <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < newLP.A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newLP.A[i][optloc] > 0 && (newLP.b[i] / newLP.A[i][optloc]) < ratio)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = newLP.b[i] / newLP.A[i][optloc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minrow = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This variable is constrained the most by equation ' + minrow + '</br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (minrow != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Thus we pivot at row ' + minrow + ', column ' + optloc + ' of our matrix. <br><br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom = newLP.A[minrow][optloc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < newLP.A[minrow].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.A[minrow][j] = newLP.A[minrow][j] / denom;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.b[minrow] = newLP.b[minrow] / denom;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < newLP.A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom = newLP.A[i][optloc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != minrow)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < newLP.A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.A[i][j] -= newLP.A[minrow][j] * denom;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.b[i] -= newLP.b[minrow] * denom;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom = newLP.c[optloc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < newLP.c.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newLP.c[j] -= newLP.A[minrow][j] * denom;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basic[minrow] = optloc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'None of the rows of this matrix constrain this variable, and so our solution is unbounded.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Since none of the reduced costs are ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newLP.opt == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'positive';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'negative';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', we have finished the simplex method.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The optimal basis is ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < basic.length-1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + basic[i] + '</sub> = ' + (Math.round(newLP.b[i]*100)/100) + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + basic[i] + '</sub> = ' + (Math.round(newLP.b[i]*100)/100) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var artbasic = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < basic.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (corig[basic[i]] == 10000000 || corig[basic[i]] == -10000000)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;artbasic = true;<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (artbasic)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This solution is not feasible, though, because we still have an artificial variable in our basis. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < basic.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j += corig[basic[i]] * newLP.b[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The objective function value of this solution is ' + (Math.round(j*100)/100) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (optloc != -1 && minrow != -1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}<br></scr" + "ipt><br>";
fctns[44].title[5] = "Linear Programming Duality -  simplex";
fctns[44].loc = "http://learninglover.com/examples.php?id=27";
fctns[45] = new Object();
fctns[45].src = new Array();
fctns[45].title = new Array();
fctns[45].src[0] = "<script type='text/javascript'>";
fctns[45].title[0] = "Linear Search Algorithm - styleTags";
fctns[45].src[1] = " generate(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!linsear(A, next))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[45].title[1] = "Linear Search Algorithm -  generate";
fctns[45].src[2] = " linsear(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set[' + i + '] = ' + set[i] + ', elmnt = ' + elmnt + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[45].title[2] = "Linear Search Algorithm -  linsear";
fctns[45].src[3] = " init(set, k1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set = generate(k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var torf = Math.floor((Math.random())*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elmnt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!torf)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmnt = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmnt = Math.floor((Math.random())*k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elmnt = set[elmnt];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'k1 = ' + k1 + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set = {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'element = ' + elmnt + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = elmnt;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[45].title[3] = "Linear Search Algorithm -  init";
fctns[45].src[4] = " retreive(set, start, finish)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = start; i < finish; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br></scr" + "ipt>";
fctns[45].title[4] = "Linear Search Algorithm -  retreive";
fctns[45].loc = "http://learninglover.com/examples.php?id=20";
fctns[46] = new Object();
fctns[46].src = new Array();
fctns[46].title = new Array();
fctns[46].src[0] = "<script type='text/javascript'>";
fctns[46].title[0] = "Longest Common Subsequence - styleTags";
fctns[46].src[1] = " lcsLength(x, y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x.indexOf(',') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = x.split(',');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = x.split('');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y.indexOf(',') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = y.split(',');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = y.split('');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m = x.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = y.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var b = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = -1; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = -1; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i][-1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i][-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[-1][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[-1][j] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x[i] == y[j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i][j] = c[i-1][j-1] + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (c[i-1][j] >= c[i][j-1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i][j] = c[i-1][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i][j] = c[i][j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i][j] = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = printLCS(b, m-1, n-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var out = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.push(x[ans[i][0]]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<center><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td></td><td></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + y[j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = -1; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += x[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = -1; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < ans.length && !found; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[k][0] == i && ans[k][1] == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td style='background:rgba(255, 0, 0, .33)'>' + c[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + c[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table></center>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return [c, b, text, out];<br>}<br>";
fctns[46].title[1] = "Longest Common Subsequence -  lcsLength";
fctns[46].src[2] = " printLCS(b, i, j)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == -1 || j == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (b[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.push(printLCS(b, i-1, j-1));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.push([i, j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (b[i][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.push(printLCS(b, i-1, j));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out.push(printLCS(b, i, j-1));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return out;<br>}<br>";
fctns[46].title[2] = "Longest Common Subsequence -  printLCS";
fctns[46].src[3] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var string1 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var string2 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len1 = Math.floor(Math.random() * 25) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len2 = Math.floor(Math.random() * 25) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < len1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string1[i] = Math.floor(Math.random() * 5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (string1[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string1[i] = 'A';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (string1[i] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string1[i] = 'B';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (string1[i] == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string1[i] = 'C';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (string1[i] == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string1[i] = 'D';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (string1[i] == 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string1[i] = 'E';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < len2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string2[i] = Math.floor(Math.random() * 5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (string2[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string2[i] = 'A';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (string2[i] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string2[i] = 'B';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (string2[i] == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string2[i] = 'C';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (string2[i] == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string2[i] = 'D';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (string2[i] == 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;string2[i] = 'E';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return [string1, string2];<br>}<br>";
fctns[46].title[3] = "Longest Common Subsequence -  init";
fctns[46].src[4] = " restart()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var strings = init();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('string1').value = strings[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('string2').value = strings[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>}<br></scr" + "ipt>";
fctns[46].title[4] = "Longest Common Subsequence -  restart";
fctns[46].loc = "http://learninglover.com/examples.php?id=105";
fctns[47] = new Object();
fctns[47].src = new Array();
fctns[47].title = new Array();
fctns[47].src[0] = "<style type='text/css'><br>.c <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size: 15pt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 2.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 2.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px solid black;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: 0px;<br>}<br><br>.goal<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size: 15pt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 2.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 2.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background: #AB82FF;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px solid black;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: 0px;<br>}<br><br>.curr<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size: 15pt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 2.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 2.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background: #42C0FB;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px solid black;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: 0px;<br>}<br><br>.emp<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size: 15pt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 2.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 2.0em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 0px solid black;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: 0px;<br>}<br></style><br><script type='text/javascript'>";
fctns[47].title[0] = "Magical Squares - styleTags";
fctns[47].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var init = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var total = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bdr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = '<table border = '1'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clmSum = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clmSum[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var currLoc = size + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var goalLoc = size + 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0; <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[rem.length] = i + ', ' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i][j] = Math.floor(Math.random()*10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init[i][j] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clmSum[j] += ans[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += ans[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='c' name='tdc' + i + '-' + j + '' id='tdc' + i + '-' + j + '' onclick=changecolor('tdc' + i + '-' + j + '')><div name='c' + i + '-' + j + '' id='c' + i + '-' + j + ''></div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='curr' name='tdc' + i + '-' + currLoc + '' id='tdc' + i + '-' + currLoc + ''><div name='c' + i + '-' + currLoc + '' id='c' + i + '-' + currLoc + ''></div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='goal' name='tdc' + i + '-' + goalLoc + '' id='tdc' + i + '-' + goalLoc + ''><div name='c' + i + '-' + goalLoc + '' id='c' + i + '-' + goalLoc + ''>' + sum + '</div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='curr' name='tdc' + currLoc + '-' + j + '' id='tdc' + currLoc + '-' + j + ''><div name='c' + currLoc + '-' + j + '' id='c' + currLoc + '-' + j + ''></div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='emp' name='tdc' + currLoc + '-' + currLoc + '' id='tdc' + currLoc + '-' + currLoc + ''><div name='c' + currLoc + '-' + currLoc + '' id='c' + currLoc + '-' + currLoc + '' hidden></div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='emp' name='tdc' + currLoc + '-' + goalLoc + '' id='tdc' + currLoc + '-' + goalLoc + ''><div name='c' + currLoc + '-' + goalLoc + '' id='c' + currLoc + '-' + goalLoc + '' hidden></div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='goal' name='tdc' + goalLoc + '-' + j + '' id='tdc' + goalLoc + '-' + j + ''><div name='c' + goalLoc + '-' + j + '' id='c' + goalLoc + '-' + j + ''>' + clmSum[j] + '</div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='emp' name='tdc' + goalLoc + '-' + currLoc + '' id='tdc' + goalLoc + '-' + currLoc + ''><div name='c' + goalLoc + '-' + currLoc + '' id='c' + goalLoc + '-' + currLoc + '' hidden></div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='emp' name='tdc' + goalLoc + '-' + goalLoc + '' id='tdc' + goalLoc + '-' + goalLoc + ''><div name='c' + goalLoc + '-' + goalLoc + '' id='c' + goalLoc + '-' + goalLoc + '' hidden></div></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('toSolve').innerHTML = prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clmSum[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*rem.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt = rem[loc].split(', ');;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init[i][j] = ans[elt[0]][elt[1]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clmSum[j] += init[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += init[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + i + '-' + j).innerHTML = init[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + i + '-' + currLoc).innerHTML = sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + currLoc + '-' + j).innerHTML = clmSum[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[47].title[1] = "Magical Squares -  generate";
fctns[47].src[2] = " changecolor(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var last = document.getElementById('dim').value + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = 'c' + last + '-' + last;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((document.getElementById(loc).innerHTML == '') || (document.getElementById(loc).innerHTML == id.substring(2, id.length)))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#FF0000' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(255, 0, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(255, 0, 0)' ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(255, 0, 0) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(loc).innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(loc).innerHTML = id.substring(2, id.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cell1 = document.getElementById(loc).innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var content1 = document.getElementById(cell1).innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cell2 = id.substring(2, id.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var content2 = document.getElementById(cell2).innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell1).innerHTML = content2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell2).innerHTML = content1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('td' + cell1).style.background='#FFFFFF'; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(loc).innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = cell1.substring(1, id.length).split('-');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = id.substring(3, id.length).split('-');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateCurr(loc1[0], loc1[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateCurr(loc2[0], loc2[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[47].title[2] = "Magical Squares -  changecolor";
fctns[47].src[3] = " updateCurr(row, clm)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rsum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var csum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var currLoc = size + 1;<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById('solved').innerHTML += 'row = ' + row + '<br>clm = ' + clm + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById('solved').innerHTML += 'csum = ' + csum + '<br>rsum = ' + rsum + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;csum += parseInt(document.getElementById('c' + row + '-' + i).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rsum += parseInt(document.getElementById('c' + i + '-' + clm).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   document.getElementById('c' + row + '-' + currLoc).innerHTML = csum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + currLoc + '-' + clm).innerHTML = rsum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[47].title[3] = "Magical Squares -  updateCurr";
fctns[47].src[4] = " setDim()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = document.getElementById('dim');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 3; i <= 10; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[sel.options.length] = new Option(i + ' by ' + i, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[47].title[4] = "Magical Squares -  setDim";
fctns[47].src[5] = " checkProg()<br>{<br>  var size = document.getElementById('dim').value;<br>  var incorrect = 0;<br>  var currSol = size + 1;<br>  var goalSol = size + 2;<br>  <br>  for (var j = 1; j <= size && !incorrect; j++)<br>  {<br>    var ans = document.getElementById('c' + currSol + '-' + j).innerHTML;<br>    var goal = document.getElementById('c' + goalSol + '-' + j).innerHTML;<br>    <br>    if (ans != goal)<br>    {<br>      incorrect = 1;<br>    }<br>  }<br>  <br>  for (var j = 1; j <= size && !incorrect; j++)<br>  {<br>    var ans = document.getElementById('c' + j + '-' + currSol).innerHTML;<br>    var goal = document.getElementById('c' + j + '-' + goalSol).innerHTML;<br>    <br>    if (ans != goal)<br>    {<br>      incorrect = 1;<br>    }<br>  }<br>  <br>  if (incorrect == 1)<br>  {<br>    alert('Sorry, your answer is incorrect!');<br>  }<br>  else<br>  {<br>    alert('Your answer is correct!!!');<br>  }<br>}<br><br></scr" + "ipt>";
fctns[47].title[5] = "Magical Squares -  checkProg";
fctns[47].loc = "http://learninglover.com/examples.php?id=80";
fctns[48] = new Object();
fctns[48].src = new Array();
fctns[48].title = new Array();
fctns[48].src[0] = "<script type='text/javascript' src='examples/getquote1.js'></scr" + "ipt><br><script type='text/javascript'><br>var maxNo = 207;";
fctns[48].title[0] = "MapReduce WordCount - styleTags";
fctns[48].src[1] = " init()<br>{<br>    var numItems = Math.floor(Math.random()*10)+2;<br>    var list = new Array();<br>    var words;<br>    <br>    var text = '';<br>    var quotes = new Array();<br>    <br>    for (var i = 0; i < numItems; i++)<br>    {<br>        var loc;<br>        do<br>        {<br>            loc = Math.floor(Math.random()*maxNo);<br>        }<br>        while (list.indexOf(loc) != -1);<br>        <br>        list[list.length] = loc;<br>        <br>        quotes[i] = getQuote(loc);<br>        text += quotes[i] + '<br>';<br>    }<br>    <br>    document.getElementById('input').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('SSBtn').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('RedBtn').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[48].title[1] = "MapReduce WordCount -  init";
fctns[48].src[2] = " wordCountMap(input)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inputRows = input.split('<br>');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var allMapOut = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < inputRows.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inputRows[j].length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mapOut = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapOut.key = new Array;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapOut.val = new Array;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var words = inputRows[j].split(' ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < words.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;words[i] = words[i].replace(/[^a-z0-9]/gi,'');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (words[i].length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapOut.key[mapOut.key.length] = words[i].toLowerCase();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapOut.val[mapOut.val.length] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<b>Mapper ' + j + ' Output</b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < mapOut.key.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + mapOut.key[i] + ', ' + mapOut.val[i] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < mapOut.key.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allMapOut[j] = mapOut;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('mapOutput').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('SSBtn').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return allMapOut;<br>}<br>";
fctns[48].title[2] = "MapReduce WordCount -  wordCountMap";
fctns[48].src[3] = " shuffAndSort(mapOut)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ssOut = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.key = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.val = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<b>Shuffle and Sort Output</b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < mapOut.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < mapOut[k].key.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = ssOut.key.indexOf(mapOut[k].key[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = ssOut.key.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.key[loc] = mapOut[k].key[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.val[loc] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.val[loc][0] = mapOut[k].val[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.val[loc][ssOut.val[loc].length] = mapOut[k].val[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ssOut.key.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < ssOut.key.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ssOut.key[i] < ssOut.key[j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempKey = ssOut.key[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempVal = ssOut.val[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.key[i] = ssOut.key[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.val[i] = ssOut.val[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.key[j] = tempKey;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssOut.val[j] = tempVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ssOut.key.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + ssOut.key[i] + ', {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < ssOut.val[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ssOut.val[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < ssOut.val[i].length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '})';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < ssOut.key.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('ssOutput').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('RedBtn').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ssOut;<br>}<br>";
fctns[48].title[3] = "MapReduce WordCount -  shuffAndSort";
fctns[48].src[4] = " wordCountRed(ssOut)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var redOut = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redOut.key = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redOut.val = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<b>Reducer Output</b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ssOut.key.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redOut.key[i] = ssOut.key[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redOut.val[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < ssOut.val[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redOut.val[i] += ssOut.val[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + redOut.key[i] + ', ' + redOut.val[i] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < ssOut.key.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('redOutput').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return redOut;<br>}<br></scr" + "ipt>";
fctns[48].title[4] = "MapReduce WordCount -  wordCountRed";
fctns[48].loc = "http://learninglover.com/examples.php?id=55";
fctns[49] = new Object();
fctns[49].src = new Array();
fctns[49].title = new Array();
fctns[49].src[0] = "<style type='text/css'><br>.c {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.rbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white-space:nowrap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.cbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>p<br>{<br>        display: inline;<br>}<br></style><br><script type='text/javascript'><br>var M_VAL = 50000;";
fctns[49].title[0] = "Maximum Independent Set Puzzle - styleTags";
fctns[49].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numNodes = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/4) - numNodes)) + numNodes;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var otherNodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i] = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numNodes; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(tree.length < numNodes)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inside = Math.floor(Math.random()*tree.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outside = Math.floor(Math.random()*otherNodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = otherNodes[outside];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[outside] = otherNodes[otherNodes.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < numArcs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random()*numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph[loc1][i] == M_VAL && i != loc1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (poss.length == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[i] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degs[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < graph[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degs[i] ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[49].title[1] = "Maximum Independent Set Puzzle -  generate";
fctns[49].src[2] = " BKAlg(A, R, P, X, nest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (P.length == 0 && X.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets[sets.length] = R;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var u = Math.floor(Math.random()*(P.length + X.length));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var uVal = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (u >= P.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = u - P.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uVal = X[u];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uVal = P[u];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var v = 0; v < P.length; v++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val = P[v];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[val][uVal] == M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempR = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < R.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempR[i] = R[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tempR.length == 0 || tempR.indexOf(val) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempR[tempR.length] = val;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempP = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[val][j] == 1 && P.indexOf(j) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempP[tempP.length] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempX = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][val] == 1 && X.indexOf(i) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempX[tempX.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BKAlg(A, tempR, tempP, tempX, nest + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[v] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (X.indexOf(val) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X[X.length] = val;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[49].title[2] = "Maximum Independent Set Puzzle -  BKAlg";
fctns[49].src[3] = " isIndep(userAns, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < userAns.length && ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < userAns.length && ans; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var node1 = userAns[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var node2 = userAns[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[node1][node2] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[49].title[3] = "Maximum Independent Set Puzzle -  isIndep";
fctns[49].src[4] = " compliment(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A2 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (A[i][j] == M_VAL && j != i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (j == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A2;<br>}<br>";
fctns[49].title[4] = "Maximum Independent Set Puzzle -  compliment";
fctns[49].src[5] = " check(userAns, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2 = compliment(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[i] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BKAlg(A2, R, P, X, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxSize = getMaxIndep();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isIndep(userAns, A) && userAns.length == maxSize.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'You have found a maximum independent set!<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'Sorry, but this is not a maximum independent set.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P[i] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[49].title[5] = "Maximum Independent Set Puzzle -  check";
fctns[49].src[6] = " dispNodes(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nodeList = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = nodeList.length; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc].name = 'node' + i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc].text = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < nodeList.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='c' name='node_' + nodeList[i].text + '' id='node_' + nodeList[i].text + '' onclick=\'changecolor('node_' + i + ''); drawGraph(forest)\'>' + nodeList[i].text + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[49].title[6] = "Maximum Independent Set Puzzle -  dispNodes";
fctns[49].src[7] = " init(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var forest = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.edges = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var x = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var y = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2*Math.PI*i) / A.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i] = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].value = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].lookup = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[i][0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>What node should be selected next?</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispNodes(A) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><input type='button' value='Check' onclick='check(userAns, A)'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><input type=button onclick=\'newProb();\' value=\'New Problem\'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[49].title[7] = "Maximum Independent Set Puzzle -  init";
fctns[49].src[8] = " drawGraph(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var edge = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[1] = forest.nodes[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns.indexOf(edge[0].value) == -1 && userAns.indexOf(edge[1].value) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns.indexOf(edge[0].value) == -1 || userAns.indexOf(edge[1].value) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FFCC00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#C8A2C8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns.indexOf(i) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#C8A2C8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c9c9c9';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 20, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (forest.nodes[i].value == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value+1)/Math.log(20))+1), forest.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value)/Math.log(20))+1), forest.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[49].title[8] = "Maximum Independent Set Puzzle -  drawGraph";
fctns[49].src[9] = " indexOf(forest, edge)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i < forest.edges.length && ans == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((forest.edges[i][0] == edge[0] && forest.edges[i][1] == edge[1]) || (forest.edges[i][0] == edge[1] && forest.edges[i][1] == edge[0]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[49].title[9] = "Maximum Independent Set Puzzle -  indexOf";
fctns[49].src[10] = " length(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest.edges.length;<br>}<br>";
fctns[49].title[10] = "Maximum Independent Set Puzzle -  length";
fctns[49].src[11] = " addEdge(forest, edge, cost)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initLen = forest.trees[forest.nodes[edge[0].value].lookup].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initLook = forest.nodes[edge[0].value].lookup;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < initLen; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[forest.nodes[edge[1].value].lookup][forest.trees[forest.nodes[edge[1].value].lookup].length] = forest.trees[initLook][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[forest.trees[initLook][i].value].lookup = forest.nodes[edge[1].value].lookup;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.edges[forest.edges.length] = edge;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.cost += cost;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[49].title[11] = "Maximum Independent Set Puzzle -  addEdge";
fctns[49].src[12] = " dispMtrx(A)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[49].title[12] = "Maximum Independent Set Puzzle -  dispMtrx";
fctns[49].src[13] = " newProb()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;P = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;R = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;X = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = generate(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2 = compliment(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sets = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest=init(A); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest);<br>}<br>";
fctns[49].title[13] = "Maximum Independent Set Puzzle -  newProb";
fctns[49].src[14] = " dispIndep()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sets.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'independent set ' + i + ') ' + sets[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[49].title[14] = "Maximum Independent Set Puzzle -  dispIndep";
fctns[49].src[15] = " changecolor(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var node = parseInt(id.split('_')[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#C8A2C8' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    document.getElementById(id).style.background == 'rgb(200, 162, 200)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(200, 162, 200)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(200, 162, 200) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[userAns.indexOf(node)] = userAns[userAns.length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns.length --;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#C8A2C8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[userAns.length] = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[49].title[15] = "Maximum Independent Set Puzzle -  changecolor";
fctns[49].src[16] = " getMaxIndep()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLen = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sets.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sets[i].length > maxLen)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLen = sets[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sets[maxLoc];<br>}<br>";
fctns[49].title[16] = "Maximum Independent Set Puzzle -  getMaxIndep";
fctns[49].src[17] = " greedy()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cov = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (cov.length < A.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(ans + '\n' + cov + '\n' + degs);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < degs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min == M_VAL || (degs[i] < degs[min] && ans.indexOf(i) == -1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min != M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = min;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degs[min] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cov[cov.length] = min;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[min][i] != M_VAL && cov.indexOf(i) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degs[i] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cov[cov.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < degs.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != M_VAL && cov.indexOf(j) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degs[j] --;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The Greedy Algorithm Gives an answer of ' + ans + ' with a length of ' + ans.length + '<br /> ';<br>}<br></scr" + "ipt>";
fctns[49].title[17] = "Maximum Independent Set Puzzle -  greedy";
fctns[49].loc = "http://learninglover.com/examples.php?id=102";
fctns[50] = new Object();
fctns[50].src = new Array();
fctns[50].title = new Array();
fctns[50].src[0] = "<script type='text/javascript'>";
fctns[50].title[0] = "Maximum Triangle Path Puzzles - styleTags";
fctns[50].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = parseInt(document.getElementById('dim').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triang = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangSum = new Array();<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= 100; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[j-1] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < size*(size + 1) / 2; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*rem.length);<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triang[j] = rem[loc];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length - 1];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = display(triang);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>}<br>";
fctns[50].title[1] = "Maximum Triangle Path Puzzles -  generate";
fctns[50].src[2] = " display(triang)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < size - i - 1; j++)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td></td>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 2*i + 1; j++)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j % 2 == 0)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td id='c' + i + '-' + eval(j/2) + '' onclick=changeColor('c' + i + '-' + eval(j/2) + '')>' + triang[eval((i*i+i)/2+j/2)] + '</td>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td></td>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < size - i - 1; j++)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td></td>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[50].title[2] = "Maximum Triangle Path Puzzles -  display";
fctns[50].src[3] = " sort(arr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < arr.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = j+1; k < arr.length; k++)<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[j] > arr[k])<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = arr[j];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[j] = arr[k];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[k] = temp;<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr;<br>}<br>";
fctns[50].title[3] = "Maximum Triangle Path Puzzles -  sort";
fctns[50].src[4] = " changeColor(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#7fffd4' ||<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(127, 255, 212)' ||<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(127, 255, 212)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(127, 255, 212) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#f8f8f8';<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = document.getElementById('queue').innerHTML.split(',');<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (queue[i] == id || queue[i] == '')<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[i] = queue[queue.length-1];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.length--;<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = queue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#7fffd4';<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = document.getElementById('queue').innerHTML.split(',');<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (queue.length == 1 && queue[0] == '')<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[0] = id;<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[queue.length] = id;<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = queue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[50].title[4] = "Maximum Triangle Path Puzzles -  changeColor";
fctns[50].src[5] = " setDim()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = document.getElementById('dim');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 3; i <= 10; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[sel.options.length] = new Option(i + ' Rows', i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[50].title[5] = "Maximum Triangle Path Puzzles -  setDim";
fctns[50].src[6] = " checkProg()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = document.getElementById('queue').innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = document.getElementById('queue').innerHTML.split(',');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol = solve(triang, 0, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array(size);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[i] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (queue[i].indexOf('c') == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Your answer is not the maximal path');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var row = queue[i].split('-')[0];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = row.substring(1, row.length);<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (chosen[row] != -1)<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You have chosen more than one element on row ' + eval(parseInt(row)+1));<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[row] = queue[i];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += parseInt(document.getElementById(queue[i]).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sum < sol)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Your answer is not the maximal path');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You have chosen the maximal path');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[50].title[6] = "Maximum Triangle Path Puzzles -  checkProg";
fctns[50].src[7] = " solve(triang, row, clmn)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = parseInt(row);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clmn = parseInt(clmn);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (eval(((row+1)*(row+1) + (row+1))/2 + clmn) >= triang.length && eval(((row+1)*(row+1) + (row+1))/2 + clmn + 1) >= triang.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('returning ' + triang[eval((row*row + row)/2 + clmn)]);<br>//   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangSum[eval(((row)*(row) + (row))/2 + clmn)] = triang[eval(((row)*(row) + (row))/2 + clmn)];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseInt(triang[eval(((row)*(row) + (row))/2 + clmn)]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('calling subproblem on (' + eval(row+1) + ', ' + clmn + ')(' + eval(row+1) + ', ' + eval(clmn+1) + ')');<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sumL = solve(triang, eval(row+1), clmn);<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sumR = solve(triang, eval(row+1), eval(clmn+1));<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangSum[eval(((row)*(row) + (row))/2 + clmn)] = maxim(sumL, sumR);<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sumL > sumR)<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML += 'c' + row + '-' + clmn + '|' + 'c' + eval(row+1) + '-' + clmn + '<br>';<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML += 'c' + row + '-' + clmn + '|' + 'c' + eval(row+1) + '-' + eval(clmn+1) + '<br>';<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseInt(triang[eval(((row)*(row) + (row))/2 + clmn)]) + triangSum[eval(((row)*(row) + (row))/2 + clmn)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[50].title[7] = "Maximum Triangle Path Puzzles -  solve";
fctns[50].src[8] = " colorSol()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var toColor = document.getElementById('queue').innerHTML.split('<br>');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toColor.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'toColor = ' + toColor + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = toColor.length-1; i >= 0; i--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'toColor[' + i + '] = ' + toColor[i] + '<br>';<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cells = toColor[i].split('|');<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == toColor.length-1)<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeColor(cells[0]);<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeColor(cells[1]);<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[queue.length] = cells[1];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (queue.indexOf(cells[0]) != -1 && queue.indexOf(cells[1]) == -1)<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeColor(cells[1]);<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[queue.length] = cells[1];<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'queue = ' + queue + '<br>';<br>}<br>";
fctns[50].title[8] = "Maximum Triangle Path Puzzles -  colorSol";
fctns[50].src[9] = " maxim(a, b)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseInt(a) > parseInt(b))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseInt(a);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseInt(b);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;<br>}<br>";
fctns[50].title[9] = "Maximum Triangle Path Puzzles -  maxim";
fctns[50].src[10] = " clearQueue()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = document.getElementById('queue').innerHTML.split(',');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (queue[i].indexOf('c') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'calling changeColor(' + queue[i] + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeColor(queue[i]);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'back<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[50].title[10] = "Maximum Triangle Path Puzzles -  clearQueue";
fctns[50].loc = "http://learninglover.com/examples.php?id=82";
fctns[51] = new Object();
fctns[51].src = new Array();
fctns[51].title = new Array();
fctns[51].src[0] = "<script type='text/javascript'>";
fctns[51].title[0] = "Merge Sort Algorithm - styleTags";
fctns[51].src[1] = " mergeSort(A, start,  end, nest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (end > start)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mid = Math.floor((end + start) / 2); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mergeSort(A, start, mid);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mergeSort(A, mid + 1, end);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;merge(A, start, mid, end);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[htory.length] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[htory.length -1][i] = A[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[51].title[1] = "Merge Sort Algorithm -  mergeSort";
fctns[51].src[2] = " merge(A, start, mid, end)<br>{<br>    var i, j, k;<br>    var n1 = mid - start + 1;<br>    var n2 = end - mid;<br> <br>    var L = new Array();<br>    var R = new Array();<br> <br>    for(i = 0; i < n1; i++)<br>    {<br>        L[i] = A[start + i];<br>    }<br><br>    for(j = 0; j < n2; j++)<br>    {<br>        R[j] = A[mid + 1 + j];<br>    }<br> <br>    i = 0;<br>    j = 0;<br>    k = start;<br><br>    while (i < n1 && j < n2)<br>    {<br>        if (L[i] <= R[j])<br>        {<br>            A[k] = L[i];<br>            i++;<br>        }<br>        else<br>        {<br>            A[k] = R[j];<br>            j++;<br>        }<br>        k++;<br>    }<br> <br>    while (i < n1)<br>    {<br>        A[k] = L[i];<br>        i++;<br>        k++;<br>    }<br> <br>    /* Copy the remaining elements of R[], if there are any */<br>    while (j < n2)<br>    {<br>        A[k] = R[j];<br>        j++;<br>        k++;<br>    }<br>}<br>";
fctns[51].title[2] = "Merge Sort Algorithm -  merge";
fctns[51].src[3] = " disp(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text2 = '<table><tr><td width=50>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += 'set = </td><td>(';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += ')</td></tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text2;<br>}<br>";
fctns[51].title[3] = "Merge Sort Algorithm -  disp";
fctns[51].src[4] = " getMax(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || list[i] > list[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return list[maxLoc];<br>}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
fctns[51].title[4] = "Merge Sort Algorithm -  getMax";
fctns[51].src[5] = " plotGraph(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < list.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mycanvas = document.createElement('canvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.id = 'canvas' + k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.height = '200';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.width = '500';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.style='border:1px solid #d3d3d3;'<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').appendChild(mycanvas);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('canvas' + k);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var barWidth = Math.floor(c.width / (list[k].length + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var unitHght = Math.floor(c.height / (getMax(list[k]) + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = Math.floor(Math.random()*16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clr[j] == 10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 11)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 12)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 13)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 14)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'E'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 15)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'F'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list[k].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#' + clr[0] + clr[1] + clr[2] + clr[3] + clr[4] + clr[5];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(i*barWidth + barWidth/2 + i, c.height - unitHght * list[k][i] - unitHght, barWidth, unitHght * list[k][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(list[k][i], i*barWidth + barWidth + i - 2, c.height - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[51].title[5] = "Merge Sort Algorithm -  plotGraph";
fctns[51].loc = "http://learninglover.com/examples.php?id=18";
fctns[52] = new Object();
fctns[52].src = new Array();
fctns[52].title = new Array();
fctns[52].src[0] = "<script type='text/javascript'>";
fctns[52].title[0] = "Midpoint Formula - styleTags";
fctns[52].src[1] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 5; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('opt' + i + 'txt').innerHTML = '<input type='radio' name='ans' id='ans' value='opt' + i + ''>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point0 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point1 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point0[0] = Math.floor(Math.random()*20) - 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point0[1] = Math.floor(Math.random()*20) - 10;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point1[0] = Math.floor(Math.random()*20) - 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point1[1] = Math.floor(Math.random()*20) - 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (point1[1] == point0[1] && point1[0] == point0[0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'What is the midpoint between (' + point0[0] + ', ' + point0[1] + ') and (' + point1[0] + ', ' + point1[1] + ')? <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('problem').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid = midpoint(point0, point1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random() * 5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('opt' + loc + 'txt').innerHTML += '(' + mid[0].toFixed(2) + ', ' + mid[1].toFixed(2) + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var other = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin <= 1; yin += 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang <= 1; yang += 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((yin != 0 || yang != 0))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = yin + '|' + yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin <= 1 ; yin += 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang >= -1; yang -= 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (yin != 0 || yang != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = yin + '|' + yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin >= -1; yin -= 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang <= 1; yang += 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (yin != 0 || yang != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = yin + '|' + yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin >= -1; yin -= 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang >= -1; yang -= 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (yin != 0 || yang != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = yin + '|' + yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('problem').innerHTML += 'poss = ' + poss + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 5; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != loc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[0] = mid[0] + parseFloat(poss[elt].split('|')[0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[1] = mid[1] + parseFloat(poss[elt].split('|')[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[elt] = poss[poss.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('opt' + i + 'txt').innerHTML += '(' + other[0].toFixed(2) + ', ' + other[1].toFixed(2) + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[52].title[1] = "Midpoint Formula -  init";
fctns[52].src[2] = " midpoint(point1, point2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mid = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid[0] = (point1[0] + point2[0]) / 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid[1] = (point1[1] + point2[1]) / 2<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mid;<br>}<br>";
fctns[52].title[2] = "Midpoint Formula -  midpoint";
fctns[52].src[3] = " dispFmla()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'Suppose you are given two points (x<sub>1</sub>, y<sub>1</sub>) and (x<sub>2</sub>, y<sub>2</sub>), then the midpoint between these two points is given by the following formula: ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xCoord = '<table><tr><td><center>x<sub>1</sub> + x<sub>2</sub></center></td></tr><tr><td><hr></td></tr><tr><td><center>2</center></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yCoord = '<table><tr><td><center>y<sub>1</sub> + y<sub>2</sub></center></td></tr><tr><td><hr></td></tr><tr><td><center>2</center></td></tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>' + xCoord + '</td><td>, </td><td>' + yCoord + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>}<br>";
fctns[52].title[3] = "Midpoint Formula -  dispFmla";
fctns[52].src[4] = " distance(point1, point2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(Math.pow((point2[0] - point1[0]), 2) + Math.pow((point2[1] - point1[1]), 2));<br>}<br>";
fctns[52].title[4] = "Midpoint Formula -  distance";
fctns[52].src[5] = " indexOf(arr, elt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr.length && loc == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[i][0] == elt[0] && arr[i][1] == elt[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return loc;<br>}<br>";
fctns[52].title[5] = "Midpoint Formula -  indexOf";
fctns[52].src[6] = " checkAns()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var opts = document.getElementsByName('ans');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < opts.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opts[i].checked == true)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = opts[i].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You need to select an answer');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var txt = document.getElementById(ans + 'txt').innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = txt.substring(54, txt.length-1).split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(ans + ' vs ' + mid);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseFloat(ans[0]) != parseFloat(mid[0]) || parseFloat(ans[1]) != parseFloat(mid[1]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Sorry, you have selected the incorrect answer');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You have chosen correctly');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt><br>";
fctns[52].title[6] = "Midpoint Formula -  checkAns";
fctns[52].loc = "http://learninglover.com/examples.php?id=83";
fctns[53] = new Object();
fctns[53].src = new Array();
fctns[53].title = new Array();
fctns[53].src[0] = "<script type='text/javascript'>";
fctns[53].title[0] = "Naive Bayesian Classification - styleTags";
fctns[53].src[1] = " genLinEq(deg)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poly = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.deg = deg;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.coeffs = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < deg; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sign = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sign)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.coeffs[zen] = Math.random();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.coeffs[zen] = -1*Math.random();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return poly;<br>}<br>";
fctns[53].title[1] = "Naive Bayesian Classification -  genLinEq";
fctns[53].src[2] = " evalPoly(poly, point)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += poly.coeffs[0]*point.outlook + poly.coeffs[1]*point.temp + poly.coeffs[2]*point.humid + poly.coeffs[3]*point.wind;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[53].title[2] = "Naive Bayesian Classification -  evalPoly";
fctns[53].src[3] = " genData(numInst)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cndts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poly = genLinEq(4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < numInst; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].types = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].outlook = Math.floor(Math.random()*3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].types[0] = ['Rain', 'Overcast', 'Sunny'];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].temp = Math.floor(Math.random()*3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].types[1] = ['Cold', 'Mild', 'Hot'];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].humid = Math.floor(Math.random()*3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].types[2] = ['Low', 'Normal', 'High'];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].wind = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].types[3] = ['Weak', 'Strong'];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].play = evalPoly(poly, cndts[zen])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].types[4] = ['No', 'Yes'];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!newInst(cndts))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;zen--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mean = getMean(cndts);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < numInst; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cndts[zen].play > mean)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].play = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cndts[zen].play = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return cndts;<br>}<br>";
fctns[53].title[3] = "Naive Bayesian Classification -  genData";
fctns[53].src[4] = " newInst(cndts)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var curr = cndts[cndts.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < cndts.length-1 && ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr.outlook == cndts[i].outlook &&<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr.temp == cndts[i].temp &&<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr.humid == cndts[i].humid &&<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr.wind == cndts[i].wind)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[53].title[4] = "Naive Bayesian Classification -  newInst";
fctns[53].src[5] = " getMean(inst)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mean = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < inst.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mean += inst[i].play;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mean /= inst.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mean;<br>}<br>";
fctns[53].title[5] = "Naive Bayesian Classification -  getMean";
fctns[53].src[6] = " dispData(cndts)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><b>Outlook</b></td><td><b>Temperature</b></td><td><b>Humidity</b></td><td><b>Wind</b></td><td><b>Play Tennis</b></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < cndts.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + cndts[zen].types[0][cndts[zen].outlook] + '</td><td>' <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;                   + cndts[zen].types[1][cndts[zen].temp] + '</td><td>' <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   + cndts[zen].types[2][cndts[zen].humid] + '</td><td>' <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   + cndts[zen].types[3][cndts[zen].wind] + '</td><td>' <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   + cndts[zen].types[4][cndts[zen].play] + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[53].title[6] = "Naive Bayesian Classification -  dispData";
fctns[53].src[7] = " playProb(inst)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'P(Play = Yes) = ' + eval(numYes(inst) / inst.length).toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return numYes(inst) / inst.length;<br>}<br>";
fctns[53].title[7] = "Naive Bayesian Classification -  playProb";
fctns[53].src[8] = " nonPlayProb(inst)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'P(Play = No) = ' + eval(numNo(inst) / inst.length).toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return numNo(inst) / inst.length;<br>}<br>";
fctns[53].title[8] = "Naive Bayesian Classification -  nonPlayProb";
fctns[53].src[9] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = genData(14);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '<b>Training Data</b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += dispData(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return data;<br>}<br><br>//cal_N calculates the probability that we play or don't play in the given instance.<br>// The way we calculate both these probabilities is by multiplying the probabilities of <br>// the features of the given instance, and then multiplying this by the overall <br>// probability of playing (or not playing) a game. ";
fctns[53].title[9] = "Naive Bayesian Classification -  init";
fctns[53].src[10] = " naiveBayes(inst, prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nbProb = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nbProb[0] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nbProb[1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<br>Each cell in the following table is given by the formula P(C) * P(F<sub>i</sub> | C), where C is the outcome class and F<sub>i</sub> is the feature in question, multiplied by the previous column. <br><br><table><tr><td></td><td>Outlook</td><td>Temperature</td><td>Humidity</td><td>Wind</td></tr><tr><td>P(Play = No)</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 4; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nbProb[0] *= inst.prob[i][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + eval(nbProb[0]).toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr><td>P(Play = Yes)</td>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nbProb[0] *= playProb(inst);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 4; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nbProb[1] *= inst.prob[i][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + eval(nbProb[1]).toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nbProb[1] *= nonPlayProb(inst);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = nbProb[0] + nbProb[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>We now normalize the probabilities by dividing each by their sum<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'P(Play = No) = ' + nbProb[0].toFixed(3) + ' / (' + nbProb[0].toFixed(3) + ' + ' + nbProb[1].toFixed(3) + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'P(Play = Yes) = ' + nbProb[1].toFixed(3) + ' / (' + nbProb[0].toFixed(3) + ' + ' + nbProb[1].toFixed(3) + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nbProb[0] = nbProb[0] / sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nbProb[1] = nbProb[1] / sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return nbProb;<br>}<br>";
fctns[53].title[10] = "Naive Bayesian Classification -  naiveBayes";
fctns[53].src[11] = " numYes(inst)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < inst.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[i].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[53].title[11] = "Naive Bayesian Classification -  numYes";
fctns[53].src[12] = " numNo(inst)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < inst.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!inst[i].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br><br>//condProb takes as input a new instance and considers each feature of this instance, and <br>//counts the number of times this feature has appeared on a yes row and how many times it<br>//has appeared on a no row. Then to calculate the probabilities, we divide these counts by<br>//the number of times that our training data has the responses of yes and no respectively.  ";
fctns[53].title[12] = "Naive Bayesian Classification -  numNo";
fctns[53].src[13] = " condProbs(inst, newInst)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inst.prob = new Array(4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = new Array(4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < inst.prob.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inst.prob[i] = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[i] = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < count[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < inst.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[j].outlook == newInst[0] && inst[j].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[0][1]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[j].temp == newInst[1] && inst[j].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[1][1]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[j].humid == newInst[2] && inst[j].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[2][1]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[j].wind == newInst[3] && inst[j].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[3][1]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[j].outlook == newInst[0] && !inst[j].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[0][0]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[j].temp == newInst[1] && !inst[j].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[1][0]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[j].humid == newInst[2] && !inst[j].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[2][0]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (inst[j].wind == newInst[3] && !inst[j].play)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count[3][0]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yeses = numYes(inst);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var noses = numNo(inst);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'numYes = ' + yeses + '<br>numNo = ' + noses + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'count[0] = ' + count[0] + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'count[1] = ' + count[1] + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'count[2] = ' + count[2] + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'count[3] = ' + count[3] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < inst.prob.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inst.prob[j][i] = count[j][i] / yeses;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return inst;<br>}<br>";
fctns[53].title[13] = "Naive Bayesian Classification -  condProbs";
fctns[53].src[14] = " process(data)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newInst = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prev = document.getElementById('output').innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prev = prev.substring(0, prev.indexOf('</table>') + 8);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newInst[0] = document.getElementById('outlook').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newInst[1] = document.getElementById('temp').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newInst[2] = document.getElementById('humid').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newInst[3] = document.getElementById('wind').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inst = condProbs(data, newInst);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<br><b>Calculations: </b><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < inst.prob[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < inst.prob.length; i++)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>P(Outlook = ' + inst[i].types[0][newInst[0]] + ' | Play = ' + inst[i].types[4][j] + ') = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>P(Temperature = ' + inst[i].types[1][newInst[1]] + ' | Play = ' + inst[i].types[4][j] + ') = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>P(Humidity = ' + inst[i].types[2][newInst[2]] + ' | Play = ' + inst[i].types[4][j] + ') = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>P(Wind = ' + inst[i].types[3][newInst[3]] + ' | Play = ' + inst[i].types[4][j] + ') = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + inst.prob[i][j].toFixed(3) + '</td><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol = naiveBayes(data, inst.prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var work = document.getElementById('output').innerHTML;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>' + work;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br><b>Conclusions: </b><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isNaN(sol[0]) && !isNaN(sol[1]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The probability that we play tennis is ' + sol[1].toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The probability that we will not play tennis is ' + sol[0].toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol[0] > sol[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'So we will not play tennis<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'So we will play tennis<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Your input options indicate that two of the features have zero conditional probability. Please select different input options<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = prev + text;<br>}<br></scr" + "ipt>";
fctns[53].title[14] = "Naive Bayesian Classification -  process";
fctns[53].loc = "http://learninglover.com/examples.php?id=76";
fctns[54] = new Object();
fctns[54].src = new Array();
fctns[54].title = new Array();
fctns[54].src[0] = "<script type='text/javascript'>";
fctns[54].title[0] = "Nim Games - styleTags";
fctns[54].src[1] = " buildTable(moves, pile)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var winner = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;winner[0] = 0;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += '(' + moves[0] + ', ' + moves[1] + ', ' + moves[2] + ')-NIM<br>.';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'If its your turn with 0 stones left, you lose<br>.';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 1; zen <= pile; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < moves.length && !found; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (zen - moves[yin] >= 0 && winner[zen - moves[yin]] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'If its your turn with ' + zen + ' stones left, you can remove ' + moves[yin] + 'stones and arrive at a winning position, ' + eval(zen-moves[yin]) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;winner[zen] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!found)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'If its your turn with ' + zen + ' stones left, you have no moves to get to a winning position. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;winner[zen] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return winner;<br>}<br><br>";
fctns[54].title[1] = "Nim Games -  buildTable";
fctns[54].src[2] = " getCpu(moves, pile, winner)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cpuMove = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves = remMoves(pile, moves);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (moves.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < moves.length && !found; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (winner[pile - moves[zen]] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpuMove = moves[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!found)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpuMove = Math.floor(Math.random() * moves.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpuMove = moves[cpuMove];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pile = pile - cpuMove;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'The computer just removed ' + cpuMove + ' stones from the pile. There are now ' + pile + ' stones remaining. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cpuMove > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawMsg('Computer Removes ' + cpuMove + ' stones');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawMsg('Computer Removes ' + cpuMove + ' stone');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return pile;<br>}<br>";
fctns[54].title[2] = "Nim Games -  getCpu";
fctns[54].src[3] = " remMoves(pile, moves)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = moves.length-1; zen >= 0; zen--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'trying ' + moves[zen] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (moves[zen] > pile)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += moves[zen] + ' is greater than ' + pile + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn' + eval(zen+1)).disabled = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'moves = ' + moves + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return moves;<br>}<br>";
fctns[54].title[3] = "Nim Games -  remMoves";
fctns[54].src[4] = " checkDone(moves, turn)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (moves.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!turn && !finished)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'You win!<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawMsg('You Win!!!!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finished = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (turn && !finished)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'The Computer wins!<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawMsg('The Computer Wins!!!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finished = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[54].title[4] = "Nim Games -  checkDone";
fctns[54].src[5] = " getMove(pile, move)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (moves.indexOf(move) != -1 && pile - move >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pile = pile - move;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'You just removed ' + move + ' stones from the pile. There are now ' + pile + ' stones remaining. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves = remMoves(pile, moves);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (pile - move < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'That is an invalid number of stones to remove from the pile. Please remove less than ' + eval(pile+1) + 'stones. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'That is an invalid number of stones to remove from the pile.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return pile;<br>}<br>";
fctns[54].title[5] = "Nim Games -  getMove";
fctns[54].src[6] = " reset()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves = movesOrig;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pile = pileOrig;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fin = finOrig;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finished = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val0 = moves[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val1 = moves[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val2 = moves[2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = buildTable(moves, pile);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn1').disabled = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn2').disabled = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn3').disabled = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < pile; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[zen] = (2*Math.PI*zen) / pile;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[zen] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[zen].xVal = 120*Math.cos(theta[zen]) + 150;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[zen].yVal = 120*Math.sin(theta[zen]) + 150;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[zen].label = zen+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width,  c.height);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(nodes, pile);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn1').value = 'Remove' + moves[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn1').onclick = function() { var diff = pile; pile = getMove(pile, val0); if (Math.abs(diff - pile) != 0){ checkDone(moves, 0); pile = getCpu(moves, pile, ans); moves = remMoves(pile, moves); checkDone(moves, 1); drawGraph(nodes, pile) } } ;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn2').value = 'Remove' + moves[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn2').onclick = function() { var diff = pile; pile = getMove(pile, val1); if (Math.abs(diff - pile) != 0){ checkDone(moves, 0); pile = getCpu(moves, pile, ans); moves = remMoves(pile, moves); checkDone(moves, 1); drawGraph(nodes, pile) } } ;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn3').value = 'Remove' + moves[2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn3').onclick = function() { var diff = pile; pile = getMove(pile, val2); if (Math.abs(diff - pile) != 0){ checkDone(moves, 0); pile = getCpu(moves, pile, ans); moves = remMoves(pile, moves); checkDone(moves, 1); drawGraph(nodes, pile) } } ;<br><br>}<br>";
fctns[54].title[6] = "Nim Games -  reset";
fctns[54].src[7] = " hint(pile, moves)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = buildTable(moves, pile);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var usrMve = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < moves.length && !found; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pile - moves[zen] >= 0 && ans[pile - moves[zen]] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usrMve = moves[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'A desirable move would be to remove ' + usrMve + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'There are no moves that would result in a winning strategy. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[54].title[7] = "Nim Games -  hint";
fctns[54].src[8] = " alyzeGm()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'Originally, there were ' + pileOrig + ' stones in the pile, with the options of removing ' + movesOrig[0] + ', ' + movesOrig[1] + ', or ' + movesOrig[2] + ' moves available. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = buildTable(moves, pile);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var table = '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < ans.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table += '<td>' + zen + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table += '</tr><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < ans.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table += '<td>' + ans[zen] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table += '</tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'This leads to the following gameplay table: ' + table + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[pileOrig] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'Since column ' + pileOrig + ' of this list has a 1 entry, you should win this game if you play optimally. <br>'; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mv;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < moves.length && !found; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pile - moves[zen] >= 0 && ans[pile - moves[zen]] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv = moves[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'A good first move would be to remove ' + mv + ' stones from the pile because as we see in the list above, ' + eval(pile - mv) + ' places the computer in a position where they are guaranteed to lose<br>'; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'If you continue to make similar moves, then you will win the game. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += 'Since colum ' + pileOrig + ' of this list has a 0 entry, there is no move you can make that would guarantee you a victory. Your only hope is that the computer makes a mistake<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>        ";
fctns[54].title[8] = "Nim Games -  alyzeGm";
fctns[54].src[9] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn1').disabled = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn2').disabled = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn3').disabled = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawMsg('');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finished = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < 3; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor(Math.random()*7) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(moves.indexOf(next) != -1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves[zen] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moves = moves.sort(function(a,b){return a-b});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movesOrig = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movesOrig[0] = moves[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movesOrig[1] = moves[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movesOrig[2] = moves[2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pile = Math.floor(Math.random()*25) + 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pileOrig = pile;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finOrig = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedsc').innerHTML = 'Lets play a game of (' + moves[0] + ', ' + moves[1] + ', ' + moves[2] + ')-NIM on a pile of ' + pile + ' stones. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = buildTable(moves, pile);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var table = '<table><tr>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < ans.length; zen++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table += '<td>' + zen + '</td>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table += '</tr><tr>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < ans.length; zen++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table += '<td>' + ans[zen] + '</td>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table += '</tr></table>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('gamedata').innerHTML += table + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val0 = moves[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val1 = moves[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val2 = moves[2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < pile; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[zen] = (2*Math.PI*zen) / pile;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[zen] = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[zen].xVal = 120*Math.cos(theta[zen]) + 150;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[zen].yVal = 120*Math.sin(theta[zen]) + 150;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodes[zen].label = zen+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(nodes, pile);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn1').value = 'Remove' + moves[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn1').onclick = function() { var diff = pile; pile = getMove(pile, val0); if (Math.abs(diff - pile) != 0){ checkDone(moves, 0); pile = getCpu(moves, pile, ans); moves = remMoves(pile, moves); checkDone(moves, 1); drawGraph(nodes, pile) } } ;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn2').value = 'Remove' + moves[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn2').onclick = function() { var diff = pile; pile = getMove(pile, val1); if (Math.abs(diff - pile) != 0){ checkDone(moves, 0); pile = getCpu(moves, pile, ans); moves = remMoves(pile, moves); checkDone(moves, 1); drawGraph(nodes, pile) } } ;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn3').value = 'Remove' + moves[2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('btn3').onclick = function() { var diff = pile; pile = getMove(pile, val2); if (Math.abs(diff - pile) != 0){ checkDone(moves, 0); pile = getCpu(moves, pile, ans); moves = remMoves(pile, moves); checkDone(moves, 1); drawGraph(nodes, pile) } } ;<br>}<br>";
fctns[54].title[9] = "Nim Games -  init";
fctns[54].src[10] = " drawMsg(msg)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width,  c.height);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#F535AA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '20px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.textAlign = 'center';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(msg, c.width/2, 330);<br>}<br>";
fctns[54].title[10] = "Nim Games -  drawMsg";
fctns[54].src[11] = " drawGraph(nodes, pile)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pile == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width,  300);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < pile; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(nodes[zen].xVal, nodes[zen].yVal, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (used[i])<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#00FFFF';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c9c9c9';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(nodes[zen].xVal, nodes[zen].yVal, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.textAlign = 'left';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(nodes[zen].label, nodes[zen].xVal-3*(Math.floor(Math.log(nodes[zen].label)/Math.log(10))+1), nodes[zen].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font = '40px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.textAlign = 'center';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pile > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(pile, 150, 150+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(pile, 150, 150+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.nodes.length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText (forest.nodes[i].value, forest.nodes[i].xVal, forest.nodes[i].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById ('output').innerHTML += forest.trees[i][0].xVal.toFixed (4) + ', ' + forest.trees[i][0].yVal.toFixed (4) + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[54].title[11] = "Nim Games -  drawGraph";
fctns[54].loc = "http://learninglover.com/examples.php?id=61";
fctns[55] = new Object();
fctns[55].src = new Array();
fctns[55].title = new Array();
fctns[55].src[0] = "<style type='text/css'><br>.c {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.rbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white-space:nowrap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.cbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>p<br>{<br>        display: inline;<br>}<br></style><br><script type='text/javascript'>";
fctns[55].title[0] = "Nonogram Puzzles - styleTags";
fctns[55].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = '<table border = '1'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var row = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clm = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='cbeg' name='tdc' + i + j + '' id='tdc' + i + j + ''><p name='c' + i + j + '' id='c' + i + j + ''></p></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[i][k1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='rbeg' name='tdc' + i + 0 + '' id='tdc' + i + 0 + ''><p name='c' + i + 0 + '' id='c' + i + 0 + ''></p></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i][j] = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='c' name='tdc' + i + j + '' id='tdc' + i + j + '' onclick=changecolor('tdc' + i + j + '')><p name='c' + i + j + '' id='c' + i + j + ''></p></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((ans[i][j] == 1 && j == 1) || ans[i][j] == 1 && ans[i][j-1] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[i][k1]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ans[i][j] == 1 && j != 1 && ans[i][j-1] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[i][k1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ans[i][j] == 0 && j != 1 && ans[i][j-1] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k1++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('toSolve').innerHTML = prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clm[j] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clm[j][k2] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((ans[i][j] == 1 && i == 1) || ans[i][j] == 1 && ans[i-1][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clm[j][k2]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ans[i][j] == 1 && i != 1 && ans[i-1][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clm[j][k2] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ans[i][j] == 0 && i != 1 && ans[i-1][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k2++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background = '#ffffff';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+i+j).innerHTML += ans[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < row[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += row[i][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k < row[i].length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + i + '0').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < clm[j].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += clm[j][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k < clm[j].length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + '0' + j).innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[55].title[1] = "Nonogram Puzzles -  generate";
fctns[55].src[2] = " setDim()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = document.getElementById('dim');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 3; i <= 10; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[sel.options.length] = new Option(i + ' by ' + i, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[1].selected = true;<br>}<br><br>";
fctns[55].title[2] = "Nonogram Puzzles -  setDim";
fctns[55].src[3] = " clearcells()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background = '#ffffff';<br>}<br>";
fctns[55].title[3] = "Nonogram Puzzles -  clearcells";
fctns[55].src[4] = " changecolor(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#0000FF' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(0, 0, 255)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(0, 0, 255)' ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(0, 0, 255) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById(id).style.background == '#FF0000' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById(id).style.background == 'rgb(255, 0, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(255, 0, 0)' ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById(id).style.background == 'rgb(255, 0, 0) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#0000FF';<br>}<br>";
fctns[55].title[4] = "Nonogram Puzzles -  changecolor";
fctns[55].src[5] = " disp(ans)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('ans[' + i + '][' + j + '] = ' + ans[i][j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[i][j] == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + i + j).style.background = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc' + i + j).style.background = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[55].title[5] = "Nonogram Puzzles -  disp";
fctns[55].src[6] = " clearBoth()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('toSolve').innerHTML = '';<br>}<br><br>";
fctns[55].title[6] = "Nonogram Puzzles -  clearBoth";
fctns[55].src[7] = " checkProg()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var userAns = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var userRow = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var userClm = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var row = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clm = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var retVal = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userRow[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userRow[i][k1] = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('tdc'+i+j).style.background == '#FF0000' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'none repeat scroll 0% 0% rgb(255, 0, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(255, 0, 0) none repeat scroll 0% 0%' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(255, 0, 0)' )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('tdc'+i+j).style.background == '#0000FF' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;         document.getElementById('tdc'+i+j).style.background == 'none repeat scroll 0% 0% rgb(0, 0, 255)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById('tdc'+i+j).style.background == 'rgb(0, 0, 255) none repeat scroll 0% 0%' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById('tdc'+i+j).style.background == 'rgb(0, 0, 255)' )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((userAns[i][j] == 1 && j == 1) || userAns[i][j] == 1 && userAns[i][j-1] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userRow[i][k1]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns[i][j] == 1 && j != 1 && userAns[i][j-1] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userRow[i][k1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns[i][j] == 1 && j != 1 && userAns[i][j-1] == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userRow[i][k1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns[i][j] == 0 && j != 1 && userAns[i][j-1] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k1++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'user Ans = <table>'<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + userAns[i][j] + '</td>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userClm[j] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k2 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userClm[j][k2] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((userAns[i][j] == 1 && i == 1) || userAns[i][j] == 1 && userAns[i-1][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userClm[j][k2]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns[i][j] == 1 && i != 1 && userAns[i-1][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userClm[j][k2] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns[i][j] == 1 && i != 1 && userAns[i-1][j] == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userClm[j][k2] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns[i][j] == 0 && i != 1 && userAns[i-1][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k2++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[i] = document.getElementById('c' + i + '0').innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[i] = row[i].split(', ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clm[j] = document.getElementById('c' + '0' + j).innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clm[j] = clm[j].split('<br>');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = 'row = ';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < row[i].length; j++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += row[i][j] + '|';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').innerHTML += text;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = 'clm = ';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < clm[j].length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += clm[j][i] + '|';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var retVal = true;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < row[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userRow[i][k] != row[i][k])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < clm[j].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userClm[j][k] != clm[j][k])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns[i][j] == '0' || userAns[i][j] == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (retVal && count == (size)*(size))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is correct!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (retVal && count != (size)*(size))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is correct, so far!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is incorrect :-(');<br>}<br></scr" + "ipt>";
fctns[55].title[7] = "Nonogram Puzzles -  checkProg";
fctns[55].loc = "http://learninglover.com/examples.php?id=35";
fctns[56] = new Object();
fctns[56].src = new Array();
fctns[56].title = new Array();
fctns[56].src[0] = "<script type='text/javascript' src='examples/randgraph.js'></scr" + "ipt><br><script type='text/javascript'>";
fctns[56].title[0] = "PageRank Algorithm - styleTags";
fctns[56].src[1] = " pagerank(graph, iters)<br>{<br>        //N <- |G|<br>        var size = graph.length;<br>        var damp = 0.85;<br>        var i, j;<br>        var rank = new Array();<br>        var aux = new Array();<br>        var count = 0;<br><br>        //for each p \in G do<br>        //  Pagerank_p = (1/N)<br>        //  Aux_p = 0<br>        for (i = 0; i < graph.length; i++)<br>        {<br>                rank[i] = 1 / size;<br>                aux[i] = 0;<br>        }<br><br>        //while (Pagerank not converging) do<br>        //  for each p \in G do<br>        //    \Gamma^{+}(p) <- pages pointed by p<br>        //    for each p' \in \Gamma^{+}(p) do<br>        //      Aux_{p'} = Aux_{p'} + Pagerank_p / |\Gamma+(p)|<br>        //    end for<br>        //  end for<br>        //  for each p \in G do<br>        //    Pagerank_p = q / N + (1 - q)Aux_p<br>        //    Aux_p = 0<br>        //  end for<br>        //  Normalize Pagerank : /Sum Pagerank_p = 1<br>        //end while<br>        //end<br>        while (count < iters)<br>        {<br>                for (i = 0; i < graph.length; i++)<br>                {<br>                        var linksTo = new Array();<br>                        for (j = 0; j < n; j++)<br>                        {<br>                                if (graph[i][j] > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linksTo[linksTo.length] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>                        }<br><br>                        for (j = 0; j < linksTo.length; j++)<br>                        {<br>                                aux[j] = aux[j] + rank[i] / linksTo.length;<br>                        }<br>                }<br><br>                for (i = 0; i < graph.length; i++)<br>                {<br>                        rank[i] = (damp / size) + (1 - damp) * aux[i];<br>                        aux[i] = 0;<br>                }<br>                count++;<br>        }<br><br>//      var sum = 0;<br>//      for (i = 0; i < rank.length; i++)<br>//              sum += rank[i];<br><br>//      document.getElementById('output').innerHTML += 'rank = ' + rank + '<br>sum = ' + sum;<br><br>//      for (i = 0; i < rank.length; i++)<br>//              rank[i] = rank[i] / sum;<br><br>        return rank;<br>}<br>";
fctns[56].title[1] = "PageRank Algorithm -  pagerank";
fctns[56].src[2] = " indexOf(set, element)<br>{<br>        var loc = -1, i;<br>//        for (i = 0; i < set.length && loc == -1; i++)<br>//        {<br>                if (set[i] == element)<br>                        loc = i;<br>//        }<br><br>        return loc;<br>}<br>";
fctns[56].title[2] = "PageRank Algorithm -  indexOf";
fctns[56].src[3] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>        var i, j, sumSq = 0;<br><br>        sumSq += Math.pow(point1_x - point2_x, 2);<br>        sumSq += Math.pow(point1_y - point2_y, 2);<br><br>        return Math.sqrt(sumSq);<br>}<br>";
fctns[56].title[3] = "PageRank Algorithm -  EucDist";
fctns[56].src[4] = " used(list, num1, num2)<br>{<br>        var i, ans = false;<br>        for (i = 0; i < list.length && ans == false; i++)<br>        {<br>                if (EucDist(list[i][0], list[i][1], num1, num2) < 5)<br>                        ans = true;<br>        }<br><br>        return ans;<br>}<br>";
fctns[56].title[4] = "PageRank Algorithm -  used";
fctns[56].src[5] = " disp(set)<br>{<br>        var text = '';<br>        text += '<table><tr><td>node </td>';<br>        for (var i = 0; i < set.length; i++)<br>                text += '<td>' + i + '</td>';<br>        text += '</tr><tr><td>path length</td>';<br>        for (var i = 0; i < set.length; i++)<br>        {<br>                text += '<td>' + set[i] + '</td>';<br>        }<br>        text += '</tr></table>';<br><br>        return text;<br>}<br>";
fctns[56].title[5] = "PageRank Algorithm -  disp";
fctns[56].src[6] = " drawGraph(A)<br>{<br>        var c=document.getElementById('myCanvas');<br>        var ctx=c.getContext('2d');<br>        ctx.clearRect (0, 0, c.width, c.height);<br>        var i, j, num1, num2;<br>        var points = new Array();<br>        ctx.lineWidth = 1;<br>        ctx.strokeStyle='#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2 * Math.PI * i) / A.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = 255 * Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = 255 * Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>        for (i = 0; i < A.length; i++)<br>        {<br>                for (j = 0; j < A[0].length; j++)<br>                {<br>                        if (A[i][j] != 0)<br>                        {<br>                                ctx.beginPath();<br>                                ctx.moveTo(points[i][0], points[i][1]);<br>                                ctx.lineTo(points[j][0], points[j][1]);<br>                                ctx.stroke();<br>                        }<br>                }<br>        }<br><br>        for (i = 0; i < A.length; i++)<br>        {<br>                ctx.strokeStyle='#000000';<br>                ctx.beginPath();<br>                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>                ctx.stroke();<br><br>                ctx.fillStyle='#00FFFF';<br>                ctx.beginPath();<br>                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>                ctx.fill();<br><br>                ctx.fillStyle='#000000';<br>                ctx.font='10px Arial';<br>                ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>        }<br><br>        return points;<br>}<br>";
fctns[56].title[6] = "PageRank Algorithm -  drawGraph";
fctns[56].src[7] = " drawNodes(A, points)<br>{<br>        var c=document.getElementById('myCanvas');<br>        var ctx=c.getContext('2d');<br>        var i, j, num1, num2;<br>        ctx.lineWidth = 1;<br>        for (i = 0; i < A.length; i++)<br>        {<br>                ctx.strokeStyle='#000000';<br>                ctx.beginPath();<br>                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>                ctx.stroke();<br><br>                ctx.fillStyle='#00FFFF';<br>                ctx.beginPath();<br>                ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>                ctx.fill();<br><br>                ctx.fillStyle='#000000';<br>                ctx.font='10px Arial';<br>                ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>        }<br>}<br>";
fctns[56].title[7] = "PageRank Algorithm -  drawNodes";
fctns[56].src[8] = " drawLines(A, points)<br>{<br>        var c=document.getElementById('myCanvas');<br>        var ctx=c.getContext('2d');<br>        ctx.clearRect (0, 0, c.width, c.height);<br>        var i, j;<br><br>        for (i = 0; i < A.length; i++)<br>        {<br>                for (j = 0; j < A[0].length; j++)<br>                {<br>                        if (A[i][j] != 0)<br>                        {<br>                                ctx.lineWidth = 1;<br>                                ctx.strokeStyle='#000000';<br>                                ctx.beginPath();<br>                                ctx.moveTo(points[i][0], points[i][1]);<br>                                ctx.lineTo(points[j][0], points[j][1]);<br>                                ctx.stroke();<br>                        }<br>                }<br>        }<br><br>}<br>";
fctns[56].title[8] = "PageRank Algorithm -  drawLines";
fctns[56].src[9] = " drawAns(A, points, ans, start)<br>{<br>        var c=document.getElementById('myCanvas');<br>        var ctx=c.getContext('2d');<br>        var i, j, num1, num2;<br><br>        ctx.strokeStyle='#00FF00';<br>        ctx.lineWidth = 2;<br>        ctx.beginPath();<br>        ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);<br>        ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);<br>        ctx.stroke();<br>        drawNodes(A, points);<br>        if ((start + 2) >= ans.length-1)<br>        {<br>                start = 0;<br>        }<br>        else<br>                start += 2;<br>        var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A,<br>points, ans, start);drawNodes(A, points);};<br>        t = setTimeout(f, 2000);<br><br>        return t;<br>}<br></scr" + "ipt>";
fctns[56].title[9] = "PageRank Algorithm -  drawAns";
fctns[56].loc = "http://learninglover.com/examples.php?id=36";
fctns[57] = new Object();
fctns[57].src = new Array();
fctns[57].title = new Array();
fctns[57].src[0] = "<script type='text/javascript'>";
fctns[57].title[0] = "Permutations - styleTags";
fctns[57].src[1] = " randPerm(str)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var arr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < str.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[i] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*arr.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[str.length - arr.length] = str[arr[loc]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[loc] = arr[arr.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (arr.length > 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[57].title[1] = "Permutations -  randPerm";
fctns[57].src[2] = " prevPerm(str)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var j; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = str.length-2; j >= 0 && str[j].value <= str[j+1].value ; j--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < str.length/2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = str[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i] = str[str.length-i-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[str.length-i-1] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var max = -1, k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = j + 1; k < str.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (max == -1 || (str[k].value > str[max].value && str[k].value < str[j].value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = str[max];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[max] = str[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1, k2, min;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k1 = j + 1; k1 < str.length;  k1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k2 = k1; k2 < str.length;  k2++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min == -1 || str[k2].value > str[min].value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = k2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k1 > min && min > -1 && min < str.length )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = str[min];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[min] = str[k1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[k1] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return str;<br>}<br>";
fctns[57].title[2] = "Permutations -  prevPerm";
fctns[57].src[3] = " nextPerm(str)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var j; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = str.length-2; j >= 0 && str[j].value >= str[j+1].value ; j--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < str.length/2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = str[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[i] = str[str.length-i-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[str.length-i-1] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = -1, k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = j + 1; k < str.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (min == -1 || (str[k].value < str[min].value && str[k].value > str[j].value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = str[min];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[min] = str[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1, k2, max;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k1 = j + 1; k1 < str.length;  k1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k2 = k1; k2 < str.length;  k2++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (max == -1 || str[k2].value < str[max].value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = k2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k1 < max && max > -1 && max < str.length )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = str[max];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[max] = str[k1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;str[k1] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return str;<br>}<br>";
fctns[57].title[3] = "Permutations -  nextPerm";
fctns[57].src[4] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var colors = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1 = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var univ = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 25; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;univ[i] = i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[0] = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[1] = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[2] = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[3] = '#00AAFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[4] = '#007777';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[5] = '#AA00AA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[6] = '#00AAAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[7] = '#AAAA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[8] = '#AA00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[9] = '#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[10] = '#FFAA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[11] = '#FF00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[12] = '#AAAAFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[13] = '#D2691E';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[14] = '#FFAAAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[15] = '#4682BD';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[16] = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[17] = '#FFFFAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[18] = '#0000CC';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[19] = '#00AA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[20] = '#AA0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[21] = '#F0F8FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[22] = '#C0C8CC';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[23] = '#FAEBD7';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[24] = '#DEB887';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < k1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = Math.floor(Math.random()*univ.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i].value = univ[temp];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i].color = colors[univ[temp]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;univ[temp] = univ[univ.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;univ.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += disp2(B);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = text;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return B;<br>}<br>";
fctns[57].title[4] = "Permutations -  init";
fctns[57].src[5] = " disp1(arr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var retVal = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var i = 0; i < arr.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal += arr[i].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < arr.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal += '}';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return retVal;<br>}<br>";
fctns[57].title[5] = "Permutations -  disp1";
fctns[57].src[6] = " disp2(arr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var retVal = '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var i = 0; i < arr.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal += '<td bgcolor='' + arr[i].color + '' style='width:25px'><center>' + arr[i].value + '</center></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal += '</tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return retVal;<br>}<br><br></scr" + "ipt><br>";
fctns[57].title[6] = "Permutations -  disp2";
fctns[57].loc = "http://learninglover.com/examples.php?id=40";
fctns[58] = new Object();
fctns[58].src = new Array();
fctns[58].title = new Array();
fctns[58].src[0] = "<style><br>td {border-style:none; text-align:center}<br>td.frac {border-bottom-style:solid; text-align:cnter}<br>td.none {border-bottom-style:none; text-align:center}<br></style><br><script type='text/javascript'>";
fctns[58].title[0] = "Polynomial Arithmetic - styleTags";
fctns[58].src[1] = " newPoly(deg)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poly = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.coeffs = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.deg = deg;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i <= deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.coeffs[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return poly;<br>}<br>";
fctns[58].title[1] = "Polynomial Arithmetic -  newPoly";
fctns[58].src[2] = " polydiv(poly1, poly2, showWk)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = newPoly(poly1.deg - poly2.deg);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var work = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= ans.deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += display(poly1) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.coeffs[i] = poly1.coeffs[i] / poly2.coeffs[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += poly1.coeffs[i] + ' / ' + poly2.coeffs[0] + ' = ' + (Math.round(ans.coeffs[i]*100)/100) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp1 = newPoly(poly1.deg - poly2.deg - i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp1.coeffs[0] = ans.coeffs[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp2 = polymult(temp1, poly2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + display(temp1) + ') * (' + display(poly2) + ') = ' + display(temp2) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= temp2.deg; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp2.coeffs[j] = -1*temp2.coeffs[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + display(poly1) + ') + (' + display(temp2) + ') = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly1 = polyadd(poly1, temp2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += display(poly1) + '<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (showWk)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var toRet = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toRet[0] = ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toRet[1] = poly1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return toRet;<br>}<br>";
fctns[58].title[2] = "Polynomial Arithmetic -  polydiv";
fctns[58].src[3] = " polymult(poly1, poly2, showWk)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = new Object();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum.deg = (parseInt(poly1.deg) + parseInt(poly2.deg));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum.coeffs = new Array(sum.deg+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < sum.coeffs.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum.coeffs[j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var shift = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= poly1.deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= poly2.deg; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[i][j + shift] = poly1.coeffs[i]*poly2.coeffs[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum.coeffs[j+shift] += sol[i][j+shift];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = parseInt(poly2.deg) + parseInt(1); j+shift < (parseInt(poly1.deg) + parseInt(poly2.deg) + parseInt(1)); j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[i][j+shift] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < shift; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;shift++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < sol.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < sol.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='none'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='frac'>+</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < sol[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < sol.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='none'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='frac'>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += sol[i][j] + 'x<sup>' + (sol[i].length-j-1) + '</sup></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td class='none'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < sum.coeffs.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='none'>' + sum.coeffs[j] + 'x<sup>' + (sum.coeffs.length-j-1) + '</sup></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (showWk)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sum;<br>}<br>";
fctns[58].title[3] = "Polynomial Arithmetic -  polymult";
fctns[58].src[4] = " polyadd(poly1, poly2, showWk)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newPoly1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newPoly2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poly1.deg < poly2.deg)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoly1 = newPoly(poly2.deg);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poly2.deg - poly1.deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoly1.coeffs[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = poly2.deg - poly1.deg; i <= poly2.deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoly1.coeffs[i] = poly1.coeffs[i - (poly2.deg - poly1.deg)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoly2 = poly2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoly2 = newPoly(poly1.deg);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poly1.deg - poly2.deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoly2.coeffs[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = poly1.deg - poly2.deg; i <= poly1.deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoly2.coeffs[i] = poly2.coeffs[i - (poly1.deg - poly2.deg)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPoly1 = poly1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < newPoly1.coeffs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='none'>' + newPoly1.coeffs[i] + 'x<sup>' + (newPoly1.coeffs.length-i-1) + '</sup></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr><td class='frac'>+</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < newPoly2.coeffs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='frac'>' + newPoly2.coeffs[i] + 'x<sup>' + (newPoly2.coeffs.length-i-1) + '</sup></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.deg = newPoly1.deg;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.coeffs = new Array(ans.deg);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i <= ans.deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans.coeffs[i] = newPoly1.coeffs[i] + newPoly2.coeffs[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr><tr><td class='none'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ans.coeffs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='none'>' + ans.coeffs[i] + 'x<sup>' + (ans.coeffs.length-i-1) + '</sup></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (showWk)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[58].title[4] = "Polynomial Arithmetic -  polyadd";
fctns[58].src[5] = " generate(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poly = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.coeffs = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.deg = n;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i <= n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sign == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sign = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly.coeffs[i] = sign*Math.floor(Math.random()*25);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(i == 0 && poly.coeffs[i] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return poly;<br>}<br>";
fctns[58].title[5] = "Polynomial Arithmetic -  generate";
fctns[58].src[6] = " display(poly)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var out = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poly.deg; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poly.coeffs[i] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '- ' + (Math.round(-1*poly.coeffs[i]*100)/100) + 'x<sup>' + (poly.coeffs.length-1-i) + '</sup> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (poly.coeffs[i] > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += (Math.round(poly.coeffs[i]*100)/100) + 'x<sup>' + (poly.coeffs.length-1-i) + '</sup> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poly.coeffs[i] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '- ' + (Math.round(-1*poly.coeffs[i]*100)/100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (poly.coeffs[i] > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += (Math.round(poly.coeffs[i]*100)/100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.substring(0, text.length-2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!out)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace(/\+\ \-/g, '-');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[58].title[6] = "Polynomial Arithmetic -  display";
fctns[58].src[7] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1, k2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k1 = Math.floor(Math.random()*10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (k1 < 3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = generate(k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k2 = Math.floor(Math.random()*10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (k2 >= k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = generate(k2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[58].title[7] = "Polynomial Arithmetic -  init";
fctns[58].src[8] = " main(operation, poly1, poly2, show)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (operation == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polyadd(poly1, poly2, show);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poly2.coeffs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly2.coeffs[i] = -1*poly2.coeffs[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polyadd(poly1, poly2, show);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polymult(poly1, poly2, show);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation == 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polydiv(poly1, poly2, show);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation == 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polydiv(poly2, poly1, show);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return temp;<br>}<br>";
fctns[58].title[8] = "Polynomial Arithmetic -  main";
fctns[58].src[9] = " check(operation, poly1, poly2, ans)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (operation == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poly2.coeffs.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poly2.coeffs[i] = -1*poly2.coeffs[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polyadd(ans, poly2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polyadd(ans, poly2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polydiv(ans, poly2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation == 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polymult(ans[0], poly2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polyadd(temp, ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation == 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polymult(ans[0], poly1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = polyadd(temp, ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return temp;<br>}<br></scr" + "ipt>";
fctns[58].title[9] = "Polynomial Arithmetic -  check";
fctns[58].loc = "http://learninglover.com/examples.php?id=53";
fctns[59] = new Object();
fctns[59].src = new Array();
fctns[59].title = new Array();
fctns[59].src[0] = "<script id='sc1' type='text/javascript'><br>var M_VAL = 50000;";
fctns[59].title[0] = "Prim`s Algorithm - styleTags";
fctns[59].src[1] = " Prim(A, n, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = M_VAL;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T[T.length] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'v = ' + 1 + '<br>----------<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (k < n)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < T.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == T[k] || j == T[k])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (count)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bb = '<b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bbe = '</b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bb = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bbe = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + bb + '-' + bbe + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + bb + A[i][j] + bbe + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = M_VAL;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < T.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[T[i]][j] < m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = A[T[i]][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u = T[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (m == M_VAL)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T[T.length] = v;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = u;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = v;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += m;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < T.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < T.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[T[i]][T[j]] = M_VAL;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'v = ' + v + '<br>----------<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E[E.length] = sum;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = B[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return E;<br>}<br>";
fctns[59].title[1] = "Prim`s Algorithm -  Prim";
fctns[59].src[2] = " EucDist(point1_x, point1_y, point2_x, point2_y)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, sumSq = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_x - point2_x, 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumSq += Math.pow(point1_y - point2_y, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Math.sqrt(sumSq);<br>}<br><br>";
fctns[59].title[2] = "Prim`s Algorithm -  EucDist";
fctns[59].src[3] = " used(list, num1, num2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < list.length && ans == false; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (EucDist(list[i][0], list[i][1], num1, num2) < 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[59].title[3] = "Prim`s Algorithm -  used";
fctns[59].src[4] = " drawGraph(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var points = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2 * Math.PI * i) / A.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][0] = 255 * Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points[i][1] = 255 * Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[i][0], points[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[j][0], points[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return points;<br>}<br>";
fctns[59].title[4] = "Prim`s Algorithm -  drawGraph";
fctns[59].src[5] = " drawNodes(A, points)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[59].title[5] = "Prim`s Algorithm -  drawNodes";
fctns[59].src[6] = " drawLines(A, points)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[i][0], points[i][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[j][0], points[j][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[59].title[6] = "Prim`s Algorithm -  drawLines";
fctns[59].src[7] = " drawAns(A, points, ans, start)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c=document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx=c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, num1, num2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawNodes(A, points);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((start + 2) == ans.length-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start += 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A, points, ans, start);drawNodes(A, points);};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = setTimeout(f, 2000);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;<br>}<br></scr" + "ipt>";
fctns[59].title[7] = "Prim`s Algorithm -  drawAns";
fctns[59].loc = "http://learninglover.com/examples.php?id=4";
fctns[60] = new Object();
fctns[60].src = new Array();
fctns[60].title = new Array();
fctns[60].src[0] = "<script type='text/javascript'>";
fctns[60].title[0] = "Probability: Sample Spaces - styleTags";
fctns[60].src[1] = " generate(space, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(space.length)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < space.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[zen] = space[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < n; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var next = Math.floor(Math.random()*rem.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[zen] = rem[next];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[next] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[60].title[1] = "Probability: Sample Spaces -  generate";
fctns[60].src[2] = " union(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'The union of {' + set1 + '}<br> and {' + set2 + '}<br> is ';;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[i] = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set3.indexOf(set2[i]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '{' + set3 + '}<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[60].title[2] = "Probability: Sample Spaces -  union";
fctns[60].src[3] = " intersect(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'The intersection of {' + set1 + '}<br> and {' + set2 + '}<br> is ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < set1.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set2.indexOf(set1[zen]) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set1[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '{' + set3 + '}<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[60].title[3] = "Probability: Sample Spaces -  intersect";
fctns[60].src[4] = " diff(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'The difference of {' + set1 + '}<br> and {' + set2 + '}<br> is ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set2.indexOf(set1[i]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '{' + set3 + '}<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[60].title[4] = "Probability: Sample Spaces -  diff";
fctns[60].src[5] = " init(space, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.space = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < n; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.space[zen] = zen;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td><div name='sspace' id='sspace'><table><tr><td>Sample Space = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < prob.space.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td bgcolor='' + colors[prob.space[zen]] + ''>' + prob.space[zen] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table></div></td><td><input type='button' value='Generate New Sample Space' onclick='ans=init(space, n)'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.numEvents = Math.floor(Math.random()*5)+2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.sets = new Array(prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.names = new Array(prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var remNames = new Array(names.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < remNames.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remNames[zen] = names[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < prob.numEvents; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setSize = Math.floor(Math.random()*prob.space.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setName = Math.floor(Math.random()*remNames.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.sets[zen] = generate(prob.space, setSize);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob.names[zen] = remNames[setName];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remNames[setName] = remNames[remNames.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remNames.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><div name='set' + zen + '' id='set' + zen + ''><table><tr><td>' + prob.names[zen] + ' = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < prob.sets[zen].length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td bgcolor='' + colors[prob.sets[zen][yin]] + ''>' + prob.sets[zen][yin] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table></div></td><td><input type='button' value='Generate New Set' onclick='setSize = Math.floor(Math.random()*ans.space.length); ans.sets[' + zen + '] = generate(ans.space, setSize); document.getElementById(\'set' + zen + '\').innerHTML=\'' + prob.names[zen] + ' = {\' + ans.sets[' + zen + '] + \'}\';document.getElementById(\'output\').innerHTML = \'\';'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><div name='prblm' id='prblm'></div></td><td><input type='button' value='New Problem' onclick='askQuest(ans);document.getElementById(\'output\').innerHTML = \'\';'></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;askQuest(prob);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return prob;<br>}<br>";
fctns[60].title[5] = "Probability: Sample Spaces -  init";
fctns[60].src[6] = " askQuest(prob)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var probType = Math.floor(Math.random()*7);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (probType)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen = Math.floor(Math.random()*prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'What is P(' + prob.names[setChosen] +')?<input type='button' value='Solve' onclick='getProb(ans.sets[' + setChosen + '], ans.space);'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < prob.numEvents; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[zen] = zen;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen1 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[setChosen1] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen2 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'What is P(' + prob.names[setChosen1] + ' &#8746; ' + prob.names[setChosen2] + ')?<input type='button' value='Solve' onclick='getProb(union(ans.sets[' + setChosen1 + '], ans.sets[' + setChosen2 + ']), ans.space);'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < prob.numEvents; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[zen] = zen;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen1 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[setChosen1] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen2 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'What is P(' + prob.names[setChosen1] + ' &#8745; ' + prob.names[setChosen2] + ')?<input type='button' value='Solve' onclick='getProb(intersect(ans.sets[' + setChosen1 + '], ans.sets[' + setChosen2 + ']), ans.space);'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen = Math.floor(Math.random()*prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'What is P(' + prob.names[setChosen] + '')?<input type='button' value='Solve' onclick='getProb(diff(ans.space, ans.sets[' + setChosen + ']), ans.space);'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 4: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < prob.numEvents; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[zen] = zen;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen1 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[setChosen1] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen2 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'What is P(' + prob.names[setChosen1] + ' | ' + prob.names[setChosen2] + ')?<input type='button' value='Solve' onclick='condProb(ans.sets[' + setChosen1 + '], ans.sets[' + setChosen2 + '], ans.space);'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 5: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < prob.numEvents; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[zen] = zen;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen1 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[setChosen1] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen2 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Are ' + prob.names[setChosen1] + ' and ' + prob.names[setChosen2] + ' independent?<input type='button' value='Solve' onclick='indEvents(ans.sets[' + setChosen1 + '], ans.sets[' + setChosen2 + '], ans.space);'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 6: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(prob.numEvents);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < prob.numEvents; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[zen] = zen;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen1 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[setChosen1] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var setChosen2 = rem[Math.floor(Math.random()*rem.length)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Are ' + prob.names[setChosen1] + ' and ' + prob.names[setChosen2] + ' mutually exclusive?<input type='button' value='Solve' onclick='mutExcl(ans.sets[' + setChosen1 + '], ans.sets[' + setChosen2 + '], ans.space);'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prblm').innerHTML = text;<br>}<br>";
fctns[60].title[6] = "Probability: Sample Spaces -  askQuest";
fctns[60].src[7] = " getProb(event, space)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'The probability of {' + event + '} is ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < event.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (space.indexOf(event[zen]) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += (count / space.length).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (count / space.length);<br>}<br>";
fctns[60].title[7] = "Probability: Sample Spaces -  getProb";
fctns[60].src[8] = " condProb(event1, event2, space)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subspace = intersect(event1, event2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob1 = getProb(event1, space);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prob1 != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The conditional probability is ' + (getProb(subspace, space) / prob1).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'This conditional probability cannot be calculated because it would result in dividing by zero.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[60].title[8] = "Probability: Sample Spaces -  condProb";
fctns[60].src[9] = " mutExcl(event1, event2, space)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subspace = intersect(event1, event2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subspace.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The events are mutually exclusive. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The events are NOT mutually exclusive. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[60].title[9] = "Probability: Sample Spaces -  mutExcl";
fctns[60].src[10] = " indEvents(event1, event2, space)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subspace = intersect(event1, event2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subProb = getProb(subspace, space);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob1 = getProb(event1, space);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob2 = getProb(event2, space);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += prob1.toFixed(4) + ' &#8729; ' + prob2.toFixed(4) + ' = ' + eval(prob1 * prob2).toFixed(4) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (subProb == prob1 * prob2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The events are independent. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The events are NOT independent. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt><br>";
fctns[60].title[10] = "Probability: Sample Spaces -  indEvents";
fctns[60].loc = "http://learninglover.com/examples.php?id=70";
fctns[61] = new Object();
fctns[61].src = new Array();
fctns[61].title = new Array();
fctns[61].src[0] = "<style><br>pre {background-color:#00CCCC;}<br></style><br><script type='text/javascript'>";
fctns[61].title[0] = "Python Code Samples - styleTags";
fctns[61].src[1] = " getCode()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var input = document.getElementById('pgrm').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output2 = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (input == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print \'Hello, World!\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'Hello, World!'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print \'Hello,\', \'World!\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = '<pre><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print \'Hello, World!\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'Hello, World!'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print \'Hello,\', \'World!\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '</pre></br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '2')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Comments in Python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#This is a comment. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print \'Hello, World!\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Comments start with a # sign. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Everything after the # sign is ignored. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Comments can either go on a new line\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print \'This is a second output statement\' #comments can go here\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Comments in Python<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>#This is a comment. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print \'Hello, World!\'</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Comments start with a # sign. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Everything after the # sign is ignored. </br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Comments can either go on a new line<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'or a comment can go after a python statement<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>print \'This is a second output statement\' #comments can go here</pre>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '3')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Variables in Python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Variables store data in memory.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#In order to do this you need to give the variable a name so you \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#can retrieve the information later. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#These names must start with either a capital letter, a lowercase \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#letter, or an underscore\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#and can only contain letters, numbers and the underscore symbol. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Variable names are case sensitive. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Num = 8\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print Num\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'number_zero = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print number_zero\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num = 2.7\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print num\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Notice that Num and num are different variables. \n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Variables in Python<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Variables store data in memory.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In order to do this you need to give the variable a name so you<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'can retrieve the information later. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'These names must start with either a capital letter, a lowercase <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'letter, or an underscore<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'and can only contain letters, numbers and the underscore symbol. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Variable names are case sensitive. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>Num = 8\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print Num\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'number_zero = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print number_zero\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num = 2.7\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print num</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Notice that Num and num are different variables. \n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4a')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Data Types in Python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Python has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Lists\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Tuples\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Dictionaries\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Numbers can be integer, long, float or complex\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Integers are used for standard operations on \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#(positive and negative) whole numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'int_num = 8\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print int_num\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Longs are used for calculations on really large \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#whole numbers. The 'L' indicates that its a long num. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'long_num = 4294967296L\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print long_num\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Floats are used for floating point numbers, or rational \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#numbers that are not whole numbers. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'float_num = 3.14159\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print float_num\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Dealing with fractions in Python 2.7, you need to \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#declare it as float \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'float_num2 = float(22)/7\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print float_num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Complex numbers are numbers with a real portion and a \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#imaginary portion. They are indicated by a j \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#after the number\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'complex_num = 1 + 3j\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print complex_num\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Data Types in Python<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Python has 5 basic data types: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Lists<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Tuples<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Dictionaries<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Numbers can be integer, long, float or complex<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Integers are used for standard operations on <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(positive and negative) whole numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>int_num = 8\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print int_num</pre><br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Longs are used for calculations on really large <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'whole numbers. The 'L' indicates that its a long num. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>long_num = 4294967296L\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print long_num</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Floats are used for floating point numbers, or rational <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'numbers that are not whole numbers. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>float_num = 3.14159\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print float_num</pre>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Dealing with fractions in Python 2.7, you need to <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'declare it as float <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>float_num2 = float(22)/7\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print float_num2</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Complex numbers are numbers with a real portion and an <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'imaginary portion. They are indicated by a j <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'after the number<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>complex_num = 1 + 3j\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print complex_num</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4b')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Data Types in Python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Python has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Lists\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Tuples\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Dictionaries\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Strings are characters between a pair of quotes\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'str1 = \'This is a string\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print str1\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'str2 = 'This is also a string'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print str2\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#There are several operations you can do on strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#You can access the characters inside a string by bracket notation: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'str2 = 'This is also a string'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print str2[0]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print str2[0:12]\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#You can also format strings nicely: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav = 'The Lion King'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'user = 'Chris'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s\\'s favorite movie is %s' % (user, fav)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#You can also use formatting to display numbers correctly:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'cmpl = float(292)/473\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'player = 'Cam Newton'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'year = '2013'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s accuracy in %s was %.2f ' % (player, year, cmpl)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The + operator concatenates two strings:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'first = 'Bruce'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'last = 'Leroy'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'full_name = first + ' ' + last\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print full_name\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The * operator repeats a string the indicated number of times:\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'first = 'Robert'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'last = 'Griffin'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'suffix = 'I'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'father = first + ' ' + last + ' ' + suffix*2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'son = first + ' ' + last + ' ' + suffix*3\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s is the father of %s' % (father, son)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Data Types in Python<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Python has 5 basic data types: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Lists<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Tuples<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Dictionaries<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Strings are characters between a pair of quotes<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>str1 = \'This is a string\'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print str1\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'str2 = 'This is also a string'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print str2</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There are several operations you can do on strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can access the characters inside a string by bracket notation: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>str2 = 'This is also a string'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print str2[0]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print str2[0:12]</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can also format strings nicely: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>fav = 'The Lion King'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'user = 'Chris'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s\\'s favorite movie is %s' % (user, fav)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can also use formatting to display numbers correctly:<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>cmpl = float(292)/473\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'player = 'Cam Newton'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'year = '2013'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s accuracy in %s was %.2f ' % (player, year, cmpl)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The + operator concatenates two strings:<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>first = 'Bruce'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'last = 'Leroy'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'full_name = first + ' ' + last\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print full_name</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The * operator repeats a string the indicated number of times:<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>first = 'Robert'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'last = 'Griffin'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'suffix = 'I'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'father = first + ' ' + last + ' ' + suffix*2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'son = first + ' ' + last + ' ' + suffix*3\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s is the father of %s' % (father, son)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4c')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Data Types in Python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Python has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Lists\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Tuples\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Dictionaries\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Lists are items separated by a comma between square brackets\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'first_primes = [2, 3, 5]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print first_primes \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_movies = ['Shawshank Redemption', 'Friday', 'Godfather 2']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print fav_movies\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The items in a list can be of different types\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_things = [\'Music\', [\'Raindrops on roses\', \'Whiskers on Kittens\']]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#You can access the elements of a list, individually with the first \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#value having location 0. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print first_primes[2]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#You can change the elements of a list\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_movies[0] = 'The Wood'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print fav_movies\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#You can add to a list with the append method\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_movies.append('Harry Potter')\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print fav_movies\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The remove method will remove specified element from the list. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'fav_movies.remove('Friday')\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print fav_movies\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Data Types in Python<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Python has 5 basic data types: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Lists<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Tuples<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Dictionaries<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Lists are items separated by a comma between square brackets<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>first_primes = [2, 3, 5]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print first_primes </pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>fav_movies = ['Shawshank Redemption', 'Friday', 'Godfather 2']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print fav_movies</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The items in a list can be of different types<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>fav_things = [\'Music\', [\'Raindrops on roses\', \'Whiskers on Kittens\']]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print fav_things</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can access the elements of a list, individually with the first <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'value having location 0. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>first_primes = [2, 3, 5]\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print first_primes[2]</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can change the elements of a list<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>fav_movies = ['Shawshank Redemption', 'Friday', 'Godfather 2']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'fav_movies[0] = 'The Wood'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print fav_movies</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can add to a list with the append method<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>fav_movies = ['Shawshank Redemption', 'Friday', 'Godfather 2']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'fav_movies.append('Harry Potter')\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print fav_movies</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The remove method will remove specified element from the list. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>fav_movies = ['Shawshank Redemption', 'Friday', 'Godfather 2']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'fav_movies.remove('Friday')\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print fav_movies</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4d')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Data Types in Python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Python has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Lists\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Tuples\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Dictionaries\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Tuples are read only lists. They are items separated by a comma \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#and are within parenthesis\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'first_primes_2 = (2, 3, 5)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print first_primes_2 \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#You can access the elements of a tuple, individually with the \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#first value having location 0. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print first_primes_2[2]\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Data Types in Python<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Python has 5 basic data types: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Lists<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Tuples<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Dictionaries<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Tuples are read only lists. They are items separated by a comma <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'and are within parenthesis<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>first_primes_2 = (2, 3, 5)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print first_primes_2 </pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'You can access the elements of a tuple, individually with the <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'first value having location 0. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>print first_primes_2[2]</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '4e')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Data Types in Python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Python has 5 basic data types: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Numbers\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Strings\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Lists\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Tuples\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Dictionaries\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Dictionaries are like lists, but instead of being indexed by \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#0, 1, 2, ..., they are indexed by user specified elements. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Dictionaries are defined inside curly brackets, where the item \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#will be a key, a colon and then a value\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'game = {'Wall' : '28 points', 'Beal' : '16 points', 'Gortat' : '9 points'}\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print game, game['Wall']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Data Types in Python<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Python has 5 basic data types: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Numbers<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Strings<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Lists<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Tuples<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Dictionaries<br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Dictionaries are like lists, but instead of being indexed by <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '0, 1, 2, ..., they are indexed by user specified elements. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Dictionaries are defined inside curly brackets, where the item <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'will be a key, a colon and then a value<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>game = {'Wall' : '28 points', 'Beal' : '16 points', 'Gortat' : '9 points'}<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print game, game['Wall']</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '5a')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Basic Operations in Python: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Arithmetic\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The basic operations in Python are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# addition (+), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# subtraction (-), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# multiplication (*), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# division (/), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# modulus (%), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# and exponent (**).\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Given two numbers, the addition operation returns their sum\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 3.14\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 2.71\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 + num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%f + %f = %f' % (num1, num2, num3)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Given two numbers, the subtraction operation returns their difference\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 16\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 25\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 - num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%f - %f = %f' % (num1, num2, num3)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Given two numbers, the multiplication operation returns their product\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 4\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 11\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 * num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%f * %f = %f' % (num1, num2, num3)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Given two numbers, the division operation returns \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#the floor of the quotient of num1 divided by num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 5\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 / num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%f / %f = %f' % (num1, num2, num3)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Given two numbers, (float(num1)/num2) returns the result of \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#num1 divided by num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 5\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = float(num1) / num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'float(%f) / %f = %f' % (num1, num2, num3)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Given two integer numbers, the modulus operation returns their \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#remainder when num1 is divided by num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 16\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 3\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 % num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%f %% %f = %f' % (num1, num2, num3)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Python also has an exponent operator given by **\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 4\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = num1 ** num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%f ** %f = %f' % (num1, num2, num3)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Basic Operations in Python: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Arithmetic<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The basic operations in Python are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' addition (+), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' subtraction (-), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' multiplication (*), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' division (/), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' modulus (%), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' and exponent (**).<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, the addition operation returns their sum<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 3.14\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 2.71\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 + num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%f + %f = %f' % (num1, num2, num3)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, the subtraction operation returns their difference<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 16\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 25\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 - num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%f - %f = %f' % (num1, num2, num3)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, the multiplication operation returns their product<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 4\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 11\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 * num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%f * %f = %f' % (num1, num2, num3)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, the division operation returns <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the floor of the quotient of num1 divided by num2<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 5\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 / num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%f / %f = %f' % (num1, num2, num3)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two numbers, (float(num1)/num2) returns the result of <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 divided by num2<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 5\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = float(num1) / num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'float(%f) / %f = %f' % (num1, num2, num3)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Given two integer numbers, the modulus operation returns their <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'remainder when num1 is divided by num2<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 16\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 3\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 % num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%f %% %f = %f' % (num1, num2, num3)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Python also has an exponent operator given by **<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 4\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = num1 ** num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%f ** %f = %f' % (num1, num2, num3)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '5b')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Basic Operations in Python: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Comparison\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#There are six basic comparison operations in Python: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#These are :\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - greater than (>), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - less than (<), \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - equals (==) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - not equals (!=) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - greater than or equal to (>=) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - less than or equal to (<=) \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The less than operator compares two objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#the value in the left term is smaller than the value in the right \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#(however 'smaller' is defined for those objects). \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_lt = num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s < %s = %s' % (num1, num2, op_lt)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The greater than operator compares two objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#the value in the left term is larger than the value in the right \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#(however 'larger' is defined for those objects). \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_gt = num1 > num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s > %s = %s' % (num1, num2, op_gt)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The equals operator compares two objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#the value in the left term is equal to value in the right \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#(however 'equal' is defined for those objects. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_eq = num1 == num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s == %s = %s' % (num1, num2, op_eq)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The not equals operator compares two objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#the value in the left term is not equal to value in the right \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#(however 'equal' is defined for those objects. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_neq = num1 != num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s != %s = %s' % (num1, num2, op_neq)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#In addition, we can join together multiple logical operators \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#using and, or and not terminology.  \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The and operator compares two logical objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#both these logical objects are true. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_and = num3 < num1 and num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s < %s and %s < %s = %s' % (num3, num1, num1, num2, op_and)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The or operator compares two logical objects and returns true if \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#one of these logical objects is true. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num3 = 30\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_or = num3 < num1 or num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print '%s < %s or %s < %s = %s' % (num3, num1, num1, num2, op_or)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The not operator returns the logical negation of a logical operator. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'op_not = not(10 < 20)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'not(%s < %s) = %s' % (num1, num2, op_not)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Basic Operations in Python: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Comparison<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There are six basic comparison operations in Python: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'These are :<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - greater than (>), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - less than (<), <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - equals (==) <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - not equals (!=) <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - greater than or equal to (>=) <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - less than or equal to (<=) <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The less than operator compares two objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the value in the left term is smaller than the value in the right <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(however 'smaller' is defined for those objects). <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_lt = num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s < %s = %s' % (num1, num2, op_lt)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The greater than operator compares two objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the value in the left term is larger than the value in the right <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(however 'larger' is defined for those objects). <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_gt = num1 > num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s > %s = %s' % (num1, num2, op_gt)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The equals operator compares two objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the value in the left term is equal to value in the right <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(however 'equal' is defined for those objects. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_eq = num1 == num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s == %s = %s' % (num1, num2, op_eq)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The not equals operator compares two objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the value in the left term is not equal to value in the right <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '(however 'equal' is defined for those objects. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_neq = num1 != num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s != %s = %s' % (num1, num2, op_neq)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In addition, we can join together multiple logical operators <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'using and, or and not terminology.  <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The and operator compares two logical objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'both these logical objects are true. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_and = num3 < num1 and num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s < %s and %s < %s = %s' % (num3, num1, num1, num2, op_and)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The or operator compares two logical objects and returns true if <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'one of these logical objects is true. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num3 = 30\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_or = num3 < num1 or num1 < num2\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print '%s < %s or %s < %s = %s' % (num3, num1, num1, num2, op_or)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The not operator returns the logical negation of a logical operator. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num2 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'op_not = not(10 < 20)\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'not(%s < %s) = %s' % (num1, num2, op_not)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '5c')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Basic Operations in Python: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - Assignment\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#There are basic assignment operations in Python are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - = , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - += , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - -= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - *= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - /= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - %= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - **= , \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The '='&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assigns the value on the right hand side to \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#the variable on the left hand side. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The '+=' is used as a += b and assigns the value of a + b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 += 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The '-=' is used as a -= b and assigns the value of a - b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 -= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The '*=' is used as a *= b and assigns the value of a * b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 *= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The '/=' is used as a /= b and assigns the value of a / b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 /= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The '%=' is used as a %= b and assigns the value of a % b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 %= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The '**=' is used as a **= b and assigns the value of a ** b to a. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 **= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Basic Operations in Python: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - Assignment<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There are basic assignment operations in Python are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - = , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - += , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - -= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - *= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - /= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - %= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - **= , <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '=' assigns the value on the right hand side to <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the variable on the left hand side. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '+=' is used as a += b and assigns the value of a + b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 += 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '-=' is used as a -= b and assigns the value of a - b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 -= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '*=' is used as a *= b and assigns the value of a * b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 *= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '/=' is used as a /= b and assigns the value of a / b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 /= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '%=' is used as a %= b and assigns the value of a % b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 %= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The '**=' is used as a **= b and assigns the value of a ** b to a. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 **= 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '6')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Conditionals in Python: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#There two basic conditional statements in Python are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - if statements \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - if else statements \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#An if statement works as if conditional followed by a block of code. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#If there are multiple lines in this block of code, they need to have \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#the same number of spaces in front of the first non-whitespace character. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#In an if statement, if the condition is true, then the block of code that \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#follows is executed, otherwise it is ignored.  \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'if num1 <> 10 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'Inside first If, num1 is NOT ten'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' num1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Consider the next example, where all that is changed is the space in \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#front of the line 'num1 = 20' is removed\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'if num1 <> 10 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'Inside second If, num1 is NOT ten'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'Outside second If, num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#In an if ... else statement, if the condition after the if statement is \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#true, then the first block of code is executed. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#If this condition is false, then the  alternative set of actions located \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#after the else statement is executed. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'if num1 <> 10 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'Inside 3rd If, num1 is NOT ten'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' num1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'else : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'Inside 3rd Else, num1 is ten'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' num1 = 30\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'num1 = %s' % (num1)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Conditionals in Python: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'There two basic conditional statements in Python are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - if statements <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - if else statements <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'An if statement works as if conditional followed by a block of code. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'If there are multiple lines in this block of code, they need to have <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the same number of spaces in front of the first non-whitespace character. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In an if statement, if the condition is true, then the block of code that <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'follows is executed, otherwise it is ignored.  <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'if num1 <> 10 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'Inside first If, num1 is NOT ten'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' num1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Consider the next example, where all that is changed is the space in <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'front of the line 'num1 = 20' is removed<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'if num1 <> 10 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'Inside second If, num1 is NOT ten'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'num1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'Outside second If, num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In an if ... else statement, if the condition after the if statement is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'true, then the first block of code is executed. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'If this condition is false, then the  alternative set of actions located <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'after the else statement is executed. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>num1 = 10\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'if num1 <> 10 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'Inside 3rd If, num1 is NOT ten'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' num1 = 20\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'else : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'Inside 3rd Else, num1 is ten'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' num1 = 30\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'num1 = %s' % (num1)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '7a')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Loops in Python: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The two types of loops we'll consider in Python are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - for loops\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The purpose of a for loop is to iterate once for each item in a sequence. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#This sequqnce can be a string, a list, or a tuple. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Like with 'if' statements, if there are multiple lines in this block of \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#code, they need to have the same number of spaces in front of the first \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#non-whitespace character. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'school = 'Morehouse'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'about to begin for loop 1'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for letter in school: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print letter\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'we have finished for loop 1'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'list1 = ['facebook', 'linkedin', 'meetup', 'twitter', 'google']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'about to begin for loop 2'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for company in list1 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'loop2:' + company + ' does social media'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'we have finished for loop 2'\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'about to begin for loop 3'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'loop3: ' + list1[i] + ' does social media'\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'we have finished for loop 3'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#A for loop can be interrupted by a break statement. This will stop the \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#current execution of the loop and continue at the next block of \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#program code. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'about to begin for loop 4'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' if list1[i] == 'linkedin':\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  break\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'loop4: ' + list1[i] + ' does social media'\n\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'we have finished for loop 4'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#A for loop can also be interrupted by a continue statement. This will \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#stop the current iteration and begin execution at the \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#beginning of the next iteration. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'about to begin for loop 5'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' if list1[i] == 'linkedin':\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  continue\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'loop5: ' + list1[i] + ' does social media'\n\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'we have finished for loop 5'\n';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Loops in Python: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The two types of loops we'll consider in Python are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - for loops<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - while loops<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The purpose of a for loop is to iterate once for each item in a sequence. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'This sequqnce can be a string, a list, or a tuple. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Like with 'if' statements, if there are multiple lines in this block of <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'code, they need to have the same number of spaces in front of the first <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'non-whitespace character. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>school = 'Morehouse'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'about to begin for loop 1'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for letter in school: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print letter\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'we have finished for loop 1'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'list1 = ['facebook', 'linkedin', 'meetup', 'twitter', 'google']\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'about to begin for loop 2'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for company in list1 : \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'loop2:' + company + ' does social media'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'we have finished for loop 2'\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'about to begin for loop 3'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'loop3: ' + list1[i] + ' does social media'\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'we have finished for loop 3'</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A for loop can be interrupted by a break statement. This will stop the <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'current execution of the loop and continue at the next block of <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'program code. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>print 'about to begin for loop 4'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' if list1[i] == 'linkedin':\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '  break\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'loop4: ' + list1[i] + ' does social media'\n\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'we have finished for loop 4'</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A for loop can also be interrupted by a continue statement. This will <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'stop the current iteration and begin execution at the <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'beginning of the next iteration. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>print 'about to begin for loop 5'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'for i in range(len(list1)): \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' if list1[i] == 'linkedin':\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '  continue\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'loop5: ' + list1[i] + ' does social media'\n\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'we have finished for loop 5'</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '7b')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Loops in Python: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#The two types of loops we'll consider in Python are: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '# - while loops\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#A while loop is similar to an if statement, in that it checks that a \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#condition is true and executes a block of code if this condition is true.\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Unlike an if statement, however, a while loop will continue to execute this \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#block of code as long as the condition remains true. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Similar to 'if' statements and 'for' loops, if there are multiple lines in \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#this block of code, they need to have the same number of spaces in front of \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#the first non-whitespace character. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'about to begin while loop 1'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'while count < 10: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print count\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' count += 1\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'we have finished while loop 1'\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#A while loop can be interrupted by a break statement. This will stop the current \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#execution of the loop and continue at the next block of program code. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'about to begin while loop 2'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'while count < 10: \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' count += 1\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' if count % 2 == 0:\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  break\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'loop2: %s' % count\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'we have finished while loop 2'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#A while loop can also be interrupted by a continue statement. This will stop the\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#current iteration and begin execution at the beginning of the next iteration. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'about to begin while loop 3'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'while count < 10: \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' count += 1\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' if count % 2 == 0:\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '  continue\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'loop3: %s' % count\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'print 'we have finished while loop 3'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Loops in Python: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'The two types of loops we'll consider in Python are: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' - while loops<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A while loop is similar to an if statement, in that it checks that a <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'condition is true and executes a block of code if this condition is true.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Unlike an if statement, however, a while loop will continue to execute this <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'block of code as long as the condition remains true. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Similar to 'if' statements and 'for' loops, if there are multiple lines in <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'this block of code, they need to have the same number of spaces in front of <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'the first non-whitespace character. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'about to begin while loop 1'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'while count < 10: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print count\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' count += 1\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'we have finished while loop 1'</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A while loop can be interrupted by a break statement. This will stop the current <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'execution of the loop and continue at the next block of program code. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>print 'about to begin while loop 2'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'while count < 10: \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' count += 1\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' if count % 2 == 0:\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '  break\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'loop2: %s' % count\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'we have finished while loop 2'</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A while loop can also be interrupted by a continue statement. This will stop the<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'current iteration and begin execution at the beginning of the next iteration. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>print 'about to begin while loop 3'\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'count = 0\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'while count < 10: \n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' count += 1\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' if count % 2 == 0:\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '  continue\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'loop3: %s' % count\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'print 'we have finished while loop 3'</pre>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (input == '8')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = '#!/usr/bin/python\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Functions in Python: \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#A function is a block of code that can be called repeatedly. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#In Python, functions are defined by the word 'def', followed by the function name, \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#then the parameters in parenthesis and a colon\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '#Like loops and if statements, blocks of function code need to be equally indented. \n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'def printByline(author):\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += ' print 'written by ' + author + '. '\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'name = 'AfterMath'\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'printByline(name)\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 = 'Functions in Python: <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'A function is a block of code that can be called repeatedly. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'In Python, functions are defined by the word 'def', followed by the function name, <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'then the parameters in parenthesis and a colon<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'Like loops and if statements, blocks of function code need to be equally indented. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += '<pre>def printByline(author):\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += ' print 'written by ' + author + '. '\n\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'name = 'AfterMath'\n'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output2 += 'printByline(name)</pre>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('code').value = output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('wlkthrgh').innerHTML = output2;<br>}<br></scr" + "ipt>";
fctns[61].title[1] = "Python Code Samples -  getCode";
fctns[61].loc = "http://learninglover.com/examples.php?id=71";
fctns[62] = new Object();
fctns[62].src = new Array();
fctns[62].title = new Array();
fctns[62].src[0] = "<script type='text/javascript'>";
fctns[62].title[0] = "QR Decomposition - styleTags";
fctns[62].src[1] = " multiply(A, B, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var C = new Array(A.length);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < C.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C[i] = new Array(B[0].length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < B[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < A[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += A[i][k]*B[k][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C[i][j] = sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return C;<br>}";
fctns[62].title[1] = "QR Decomposition -  multiply";
fctns[62].src[2] = " transpose(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ATrans = new Array(A[0].length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ATrans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ATrans[i] = new Array(A.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < ATrans[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ATrans[i][j] = A[j][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ATrans;<br>}";
fctns[62].title[2] = "QR Decomposition -  transpose";
fctns[62].src[3] = " dispMatrix(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.floor(A[i][j]) != A[i][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + Math.floor(A[i][j]) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}";
fctns[62].title[3] = "QR Decomposition -  dispMatrix";
fctns[62].src[4] = " dispVectors(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>(</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>)</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}";
fctns[62].title[4] = "QR Decomposition -  dispVectors";
fctns[62].src[5] = " QRDecomp(A, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var aVectors = transpose(A);   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var uVector = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var eVector = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var eVectorTxt = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var work = '';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var testTest = new Array();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += 'The columns of A become the following vectors: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += dispVectors(aVectors);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < aVectors.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uVector[i] = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < aVectors[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = proj(eVector[j], aVectors[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < temp.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum[k] += temp[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < aVectors[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uVector[i][j] = aVectors[i][j] - sum[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var norm = normal(uVector[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eVector[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eVectorTxt[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < aVectors[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eVector[i][j] = uVector[i][j] / norm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eVectorTxt[i][j] = uVector[i][j] + ' / ' + norm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += 'u<sub>' + i + '</sub> = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < aVectors[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += uVector[i][j].toFixed(3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < aVectors[i].length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += 'e<sub>' + i + '</sub> = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < aVectors[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += eVector[i][j].toFixed(3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < aVectors[i].length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += '<br><br>';   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < aVectors.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testTest[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += 'a<sub>' + i + '</sub> = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < aVectors[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testTest[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempVec = innerProd(aVectors[i], eVector[j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < eVector[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;testTest[i][k] += eVector[j][k] * tempVec;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < eVector[i].length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += (testTest[i][k]).toFixed(3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k < aVectors[i].length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;work += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uVector = transpose(uVector);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eVector = transpose(eVector);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eVectorTxt = transpose(eVectorTxt);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var decomp = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decomp.Q = new Array();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < eVector.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decomp.Q[i] = eVectorTxt[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < eVector.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decomp.Q[i] = eVector[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decomp.R = multiply(transpose(decomp.Q), A, false);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QRCheck(decomp, aVectors);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'A = QR, where <table><tr><td>Q = </td><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < decomp.Q.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < decomp.Q[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + decomp.Q[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>R = </td><td><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < decomp.R.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < decomp.R[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + decomp.R[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table></tr></td></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += work;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return decomp;<br>}<br>";
fctns[62].title[5] = "QR Decomposition -  QRDecomp";
fctns[62].src[6] = " QRCheck(decomp, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'A = <table>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>Q = <table>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < decomp.Q.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < decomp.Q[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + decomp.Q[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>R = <table>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < decomp.R.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < decomp.R[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + decomp.R[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table> QR = <table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var QR = multiply(decomp.Q, decomp.R, false);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < QR.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < QR[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + QR[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>   <br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}";
fctns[62].title[6] = "QR Decomposition -  QRCheck";
fctns[62].src[7] = " proj(vec1, vec2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var denom = innerProd(vec1, vec1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numer = innerProd(vec1, vec2);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vec3 = new Array();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vec1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vec3[i] = (numer / denom) * vec1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return vec3;<br>}";
fctns[62].title[7] = "QR Decomposition -  proj";
fctns[62].src[8] = " innerProd(vec1, vec2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (vec1.length == vec2.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vec1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += vec1[i] * vec2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}";
fctns[62].title[8] = "QR Decomposition -  innerProd";
fctns[62].src[9] = " normal(vec)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var norm = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < vec.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm += vec[i]*vec[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;norm = Math.sqrt(norm);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return norm;<br>}";
fctns[62].title[9] = "QR Decomposition -  normal";
fctns[62].src[10] = " postProcess(b, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'b = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < b.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += b[zen][0].toFixed(3) + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(b.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < b.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][0] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>';   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'A = <table>';<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>1</sub></td></tr><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>2</sub></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td><td> = </td><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>'<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < b.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + b[i][0].toFixed(3) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol = multLinReg(A, b, show);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'f<sub>i</sub> = ' + sol[0].toFixed(4) + ' + ' + sol[1].toFixed(3) + '*i<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('fitBtn').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLine(b, sol);   <br>}";
fctns[62].title[10] = "QR Decomposition -  postProcess";
fctns[62].src[11] = " checkFit(b, sol, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We would like to check the 'Goodness of Fit' of this model. To do this, we will perform the R-squared test<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'To compute this we will calculate: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<ol>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<li>SS<sub>tot</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(b<sub>i</sub> - <img src='http://learninglover.com/chars/bbar.jpg'>)<sup>2</sup>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<li>SS<sub>res</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(b<sub>i</sub> - f<sub>i</sub>)<sup>2</sup>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</ol>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The definition of the R-squared test is ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>1 - </td><td><table><tr><td>SS<sub>res</sub></td></tr><tr><td><hr></td></tr><tr><td>SS<sub>tot</sub></td></tr></table></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sstot = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ssres = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dtamean = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < b.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dtamean += parseFloat(b[i][0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dtamean = dtamean / b.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<img src='http://www.learninglover.com/chars/ybar.jpg'> = ' + dtamean.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var z = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < b.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z[i] = sol[1]*(i) + sol[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sstot += ((b[i][0] - dtamean)*(b[i][0] - dtamean));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssres += ((b[i][0] - (sol[1]*(i) + sol[0]))*(b[i][0] - (sol[1]*(i) + sol[0])));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'SS<sub>tot</sub> = ' + sstot.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'SS<sub>res</sub> = ' + ssres.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rsq = 1 - (ssres / sstot);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The R-squared term for this linear regression is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'R-Squared: ' + rsq.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rsq < 0.5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This implies that we should not have too much faith in this linear regression. To see why, we must understand that this data represents a time series and not an independent data set (a player's results for this current week are influenced by how he's performed in previous weeks).<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We can also see this by looking at the autocorrelation of the residuals. <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ers = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ers = getErrors(b, sol);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This trend line gives the following errors: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ers.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Error[' + (i+1) + '] = ' + ers[i].toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'To check how accurate we can use this model to predict future events, we consider the autocorrelation of these errors: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var acr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acr[0] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < b.length - 1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = acr.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;acr[len] = autocorr(i, ers);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < acr.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'autoCorrelation(' + i + ') = ' + acr[i].toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'For linear regressions, we would the expected value of the autocorrelation of errors to be zero. We can see here that they are not. <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}";
fctns[62].title[11] = "QR Decomposition -  checkFit";
fctns[62].src[12] = " genMatrix()<br>{   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ydim = Math.floor(Math.random()*10+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xdim = Math.floor(Math.random()*2)+ydim;<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < xdim; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = new Array();   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < ydim; j++)   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = Math.floor(Math.random()*25);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sign = Math.floor(Math.random()*2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sign == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = A[i][j]*-1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}";
fctns[62].title[12] = "QR Decomposition -  genMatrix";
fctns[62].src[13] = " maximum(data)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mxm = Number.MIN_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < data[i].length;  j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseFloat(data [i][j]) > mxm)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mxm = parseFloat(data [i][j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mxm;<br>}";
fctns[62].title[13] = "QR Decomposition -  maximum";
fctns[62].src[14] = " minimum(data)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mnm = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < data[i].length;  j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseFloat(data [i][j]) < mnm)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mnm = parseFloat(data [i][j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mnm;<br>}";
fctns[62].title[14] = "QR Decomposition -  minimum";
fctns[62].src[15] = " evalReg(beta, xVal)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (beta[0] + beta[1]*xVal);<br>}";
fctns[62].title[15] = "QR Decomposition -  evalReg";
fctns[62].src[16] = " getErrors(data, beta)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var errors = new Array();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errors[i] = data[i][0] - evalReg(beta, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'The Errors in this Regression are :<br>';<br>//   <br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < errors.length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += (i+1) + ': ' + errors[i].toFixed(3) + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return errors;<br>}";
fctns[62].title[16] = "QR Decomposition -  getErrors";
fctns[62].src[17] = " drawPoints(data)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mxm = maximum(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mnm = minimum(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vpp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc;<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mnm < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp = (mxm - mnm) / c.height;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.ceil(mxm - mnm);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = c.height - (mxm) / vpp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp = (mxm) / c.height;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.ceil (mxm);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numClms = data.length + 1;<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xWidth = c.width / numClms;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yHeight = c.height / numRows;<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the axes<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(0, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(0, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(0, c.height - loc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width, c.height - loc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the notches<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < c.height; i += 5*yHeight)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(0, c.height-loc-i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(5, c.height-loc-i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < c.width; i += xWidth)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(i, c.height-loc+5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(i, c.height-loc-5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}   <br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc((i+1)*xWidth,c.height - data [i][0]*yHeight - loc,3,0,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}";
fctns[62].title[17] = "QR Decomposition -  drawPoints";
fctns[62].src[18] = " drawLine(data, beta)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mxm = maximum(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mnm = minimum(data);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vpp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc;<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mnm < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp = (mxm - mnm) / c.height;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.ceil (mxm - mnm);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = c.height - (mxm) / vpp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp = (mxm) / c.height;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.ceil (mxm);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect (0, 0, c.width, c.height);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numClms = data.length + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xWidth = c.width / numClms;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yHeight = c.height / numRows;<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the axes<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(0, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(0, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(0, c.height - loc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width, c.height - loc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the notches<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < c.height; i += 5*yHeight)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(0, c.height-loc-i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(5, c.height-loc-i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < c.width; i += xWidth)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(i, c.height-loc+5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(i, c.height-loc-5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc((i+1)*xWidth,c.height - data[i][0]*yHeight - loc,3,0,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pt0x = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pt0y = evalReg(beta, pt0x-1);<br>   <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pt1x = data.length+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pt1y = evalReg(beta, pt1x-1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#3333ff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(pt0x*xWidth, c.height - pt0y*yHeight - loc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(pt1x*xWidth, c.height - pt1y*yHeight - loc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo((i+1)*xWidth, c.height - evalReg(beta, (i))*yHeight-loc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo((i+1)*xWidth, c.height - data[i][0]*yHeight - loc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}   <br>}<br></scr" + "ipt><br>";
fctns[62].title[18] = "QR Decomposition -  drawLine";
fctns[62].loc = "http://learninglover.com/examples.php?id=79";
fctns[63] = new Object();
fctns[63].src = new Array();
fctns[63].title = new Array();
fctns[63].src[0] = "<script type='text/javascript'>";
fctns[63].title[0] = "Queue Data Structure - styleTags";
fctns[63].src[1] = " generate(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = null<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = enqueue2(A, next);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[63].title[1] = "Queue Data Structure -  generate";
fctns[63].src[2] = " search(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (temp = set; temp != null && !ans; temp = temp.next)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set.value == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[63].title[2] = "Queue Data Structure -  search";
fctns[63].src[3] = " dequeue(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('last').value = curr.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = curr.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.front = curr.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp.rear = curr.rear;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display(curr, 'list');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>";
fctns[63].title[3] = "Queue Data Structure -  dequeue";
fctns[63].src[4] = " enqueue1(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newItem = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = document.getElementById('next').value;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.value = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.next = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.rear = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.front = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.rear = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.front = curr.front;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr.rear.next = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr.rear = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('next').value = Math.floor((Math.random())*100);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display(curr, 'list');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br>";
fctns[63].title[4] = "Queue Data Structure -  enqueue1";
fctns[63].src[5] = " enqueue2(curr, next)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newItem = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = next;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.value = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.next = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.rear = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.front = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.rear = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.front = curr.front;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr.rear.next = newItem;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr.rear = newItem<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('next').value = Math.floor((Math.random())*100);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br>";
fctns[63].title[5] = "Queue Data Structure -  enqueue2";
fctns[63].src[6] = " getLength(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; temp != null; i++, temp = temp.next)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return i;<br>}<br>";
fctns[63].title[6] = "Queue Data Structure -  getLength";
fctns[63].src[7] = " init(curr, k1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var curr = generate(k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('next').value = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display(curr, 'list');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br>";
fctns[63].title[7] = "Queue Data Structure -  init";
fctns[63].src[8] = " display(curr, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = 'There are no items in this Queue<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp.next != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '<td>' + temp.value + '</td>' + text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp.next == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '<td>' + temp.value + '</td>' + text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '<table border=1><tr>' + text + '</tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(loc).innerHTML = text;<br>}<br>";
fctns[63].title[8] = "Queue Data Structure -  display";
fctns[63].src[9] = " size(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;<br>}<br>";
fctns[63].title[9] = "Queue Data Structure -  size";
fctns[63].src[10] = " maxValue(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var max = -1000;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp.value > max)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = temp.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return max;<br>}<br>";
fctns[63].title[10] = "Queue Data Structure -  maxValue";
fctns[63].src[11] = " minValue(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = 1000;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp.value < min)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = temp.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return min;<br>}<br>";
fctns[63].title[11] = "Queue Data Structure -  minValue";
fctns[63].src[12] = " operate(curr)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('alg').value == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = enqueue1(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = dequeue(curr);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The size of this stack is currently ' + size(curr) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The maximum value of this stack is currently ' + maxValue(curr) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The minimum value of this stack is currently ' + minValue(curr) + '<br>';<br><br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br></scr" + "ipt>";
fctns[63].title[12] = "Queue Data Structure -  operate";
fctns[63].loc = "http://learninglover.com/examples.php?id=23";
fctns[64] = new Object();
fctns[64].src = new Array();
fctns[64].title = new Array();
fctns[64].src[0] = "<script type='text/javascript'>";
fctns[64].title[0] = "QuickSort Algorithm - styleTags";
fctns[64].src[1] = " quickSort(A, left, right, nest)  <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i = left, j = right;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tmp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nest == 0)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pivot = A[Math.floor((left + right) / 2)];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i <= j)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (A[i] < pivot)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (A[j] > pivot)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i <= j)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = A[i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = A[j];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[j] = tmp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[count] = new Array();<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var ctr  = 0; ctr < A.length; ctr++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[count][ctr] = A[ctr];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>' + count + ')</td><td>' + disp(A) + '</td></tr></table>';<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left < j)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>calling quicksort(';<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = left; k < j; k++)<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k] + ', ';<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k];<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ')</td><td>This is the left side</td></tr></table>';<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = quickSort(A, left, j, nest+1);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < right)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>calling quicksort(';<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = i; k < right; k++)<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k] + ', ';<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k];<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ')</td><td>This is the right side</td></tr></table>';<br>// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = quickSort(A, i, right, nest+1);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A; <br>}<br>";
fctns[64].title[1] = "QuickSort Algorithm -  quickSort";
fctns[64].src[2] = " disp(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<td width='50'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set = </td><td>(';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ')</td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[64].title[2] = "QuickSort Algorithm -  disp";
fctns[64].src[3] = " getMax(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || list[i] > list[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return list[maxLoc];<br>}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
fctns[64].title[3] = "QuickSort Algorithm -  getMax";
fctns[64].src[4] = " plotGraph(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < list.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mycanvas = document.createElement('canvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.id = 'canvas' + k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.height = '200';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.width = '500';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.style='border:1px solid #d3d3d3;'<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').appendChild(mycanvas);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('canvas' + k);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var barWidth = Math.floor(c.width / (list[k].length + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var unitHght = Math.floor(c.height / (getMax(list[k]) + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = Math.floor(Math.random()*16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clr[j] == 10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 11)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 12)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 13)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 14)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'E'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 15)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'F'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list[k].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#' + clr[0] + clr[1] + clr[2] + clr[3] + clr[4] + clr[5];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(i*barWidth + barWidth/2 + i, c.height - unitHght * list[k][i] - unitHght, barWidth, unitHght * list[k][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(list[k][i], i*barWidth + barWidth + i - 2, c.height - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[64].title[4] = "QuickSort Algorithm -  plotGraph";
fctns[64].loc = "http://learninglover.com/examples.php?id=15";
fctns[65] = new Object();
fctns[65].src = new Array();
fctns[65].title = new Array();
fctns[65].src[0] = "<script type='text/javascript'>";
fctns[65].title[0] = "RSA Algorithm  - styleTags";
fctns[65].src[1] = " bobInit()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < primes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prime1').options[i] = new Option(primes[i], primes[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prime2').options[i] = new Option(primes[i], primes[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random() * primes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random() * primes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (loc2 == loc1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prime1').options[loc1].selected = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('prime2').options[loc2].selected = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('bobOut1').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('aliceOut').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('bobOut2').innerHTML = '';<br><br>}<br>";
fctns[65].title[1] = "RSA Algorithm  -  bobInit";
fctns[65].src[2] = " runBob1()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var num1 = document.getElementById('prime1').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var num2 = document.getElementById('prime2').value;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text1 = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = num1 * num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += 'n = ' + num1 + ' * ' + num2 + ' = ' + n + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var phi = (num1 - 1) * (num2 - 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<img src='http://www.learninglover.com/chars/phi.gif'>(' + n + ') = (' + num1 + ' - 1) * (' + num2 + ' - 1) = ' + phi + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var e = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (e = 2; e < n && gcd(e, phi) != 1; e++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var d = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (d = 1; (e * d) % phi != 1; d++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += 'Private key is(' + d + ', ' + n + ')<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += 'A number relatively prime to ' + phi + ' is <br>e = ' + e + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += 'So the Public key (for encryption) is ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += 'Bob posts the public key on his web page for others to communicate with him. <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<br><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<tr><td colspan=2><strong>Public Key (posted on Bob's web page)</strong></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<tr><td>e</td><td>n</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<tr><td><input size=5 id='pubKey1' readonly value='' + e + ''></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<td><input size=5 id='pubKey2' readonly value='' + n + ''></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '</table><br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += 'Bob also has a private key that he keeps private and will use to decode messages. <br>';<br><br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<br><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<tr><td colspan=2><strong>Private Key (Bob keeps this to himself)</strong></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<tr><td>d</td><td>n</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<tr><td><input size=5 id='priKey1' readonly value='' + d + ''></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '<td><input size=5 id='priKey2' readonly value='' + n + ''></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text1 += '</table><br>';<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('pubKey1').value = e;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('pubKey2').value = n;<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('priKey1').value = d;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('priKey2').value = n;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('bobOut1').innerHTML = text1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('aliceOut').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('bobOut2').innerHTML = '';<br><br>}<br>";
fctns[65].title[2] = "RSA Algorithm  -  runBob1";
fctns[65].src[3] = " aliceInit()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('step2').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var words = ['Abundant', 'Accomplished', 'Achieving', 'Active', 'Admirable', 'Adorable', 'Adventurous', 'Admired', 'Affluent', 'Agreeable', 'Alert', 'Aligned', 'Alive', 'Amazing', 'Appealing', 'Appreciate', 'Artistic', 'Astounding', 'Astute', 'Attentive', 'Attractive', 'Auspicious', 'Authentic', 'Awake', 'Aware', 'Beaming', 'Beautiful', 'Best', 'Blessed', 'Bliss', 'Bold', 'Bright', 'Brilliant', 'Brisk', 'Buoyant', 'Calm', 'Capable', 'Centered', 'Certain', 'Charming', 'Cheerful', 'Clear', 'Clever', 'Competent', 'Complete', 'Confident', 'Connected', 'Conscious', 'Considerate', 'Convenient', 'Courageous', 'Creative', 'Daring', 'Dazzling', 'Delicious', 'Delightful', 'Desirable', 'Determined', 'Diligent', 'Discerning', 'Discover', 'Dynamic', 'Eager', 'Easy', 'Efficient', 'Effortless', 'Elegant', 'Eloquent', 'Energetic', 'Endless', 'Enhancing', 'Engaging', 'Enormous', 'Enterprising', 'Enthusiastic', 'Enticing', 'Excellent', 'Exceptional', 'Exciting', 'Experienced', 'Exquisite', 'Fabulous', 'Fair', 'Far-Sighted', 'Fascinating', 'Fine', 'Flattering', 'Flourishing', 'Fortunate', 'Free', 'Friendly', 'Fulfilled', 'Fun', 'Generous', 'Genuine', 'Gifted', 'Glorious', 'Glowing', 'Good', 'Good-Looking', 'Gorgeous', 'Graceful', 'Gracious', 'Grand', 'Great', 'Handsome', 'Happy', 'Hardy', 'Harmonious', 'Healed', 'Healthy', 'Helpful', 'Honest', 'Humorous', 'Ideal', 'Imaginative', 'Impressive', 'Industrious', 'Ingenious', 'Innovative', 'Inspired', 'Intelligent', 'Interested', 'Interesting', 'Intuitive', 'Inventive', 'Invincible', 'Inviting', 'Irresistible', 'Joyous', 'Judicious', 'Keen', 'Kind', 'Knowing', 'Limitless', 'Lively', 'Loving', 'Lucky', 'Luminous', 'Magical', 'Magnificent', 'Marvelous', 'Masterful', 'Mighty', 'Miraculous', 'Motivated', 'Natural', 'Neat', 'Nice', 'Nurturing', 'Noble', 'Optimistic', 'Outstanding', 'Passionate', 'Peaceful', 'Perfect', 'Persevering', 'Persistent', 'Playful', 'Pleasing', 'Plentiful', 'Positive', 'Powerful', 'Precious', 'Prepared', 'Productive', 'Profound', 'Prompt', 'Prosperous', 'Proud', 'Qualified', 'Quick', 'Radiant', 'Reasonable', 'Refined', 'Refreshing', 'Relaxing', 'Reliable', 'Remarkable', 'Resolute', 'Resourceful', 'Respected', 'Rewarding', 'Robust', 'Safe', 'Satisfied', 'Secure', 'Seductive', 'Self-Reliant', 'Sensational', 'Sensible', 'Sensitive', 'Serene', 'Sharing', 'Skillful', 'Smart', 'Smashing', 'Smooth', 'Sparkling', 'Spiritual', 'Splendid', 'Strong', 'Stunning', 'Successful', 'Superb', 'Swift', 'Talented', 'Tenacious', 'Terrific', 'Thankful', 'Thrilling', 'Thriving', 'Timely', 'Trusting', 'Truthful', 'Ultimate', 'Unique', 'Valiant', 'Valuable', 'Versatile', 'Vibrant', 'Victorious', 'Vigorous', 'Vivacious', 'Vivid', 'Warm', 'Wealthy', 'Well', 'Whole', 'Wise', 'Wonderful', 'Worthy', 'Young', 'Youthful', 'Zeal', 'Zest'];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < words.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('msg').options[i] = new Option(words[i], words[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random() * words.length);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('msg').options[loc].selected = true;<br>}<br>";
fctns[65].title[3] = "RSA Algorithm  -  aliceInit";
fctns[65].src[4] = " runAlice()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('bobOut2').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('step3').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var word = document.getElementById('msg').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var e = document.getElementById('pubKey1').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = document.getElementById('pubKey2').value;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('msg2').value = word;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text2 = 'Alice would like to communicate with Bob.<br> She visits his web page and gets the public key<br> (' + e + ', ' + n + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += 'Suppose Alice wants to send the message, <br>'' + word + ''<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < word.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m[i] = word.charCodeAt(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += 'This can be represented with the following ASCII array: <br>' + m + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += 'She can use Bob's public key to encrypt the message: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += 'The formula to encrypt is c = m<sup>' + e + '</sup> mod ' + n + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c2 = [];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += m[i] + '<sup>' + e + '</sup> mod ' + n + ' = ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c2[i] = m[i] % n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j < e; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c2[i] = (c2[i] * m[i]) % n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += c2[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += 'This last array is what is sent to Bob.';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<br><br><table>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<td>' + word[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<td>' + m[i] + '<sup>' + e + '</sup> mod ' + n + ' = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '<td><input id='enc' + i + '' value='' + c2[i] + '' size=5 readonly></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text2 += '</table><br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('aliceOut').innerHTML = text2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('bobOut2').innerHTML = '';<br><br>}<br>";
fctns[65].title[4] = "RSA Algorithm  -  runAlice";
fctns[65].src[5] = " runBob2()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var d = document.getElementById('priKey1').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = document.getElementById('priKey2').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var wrdLen = document.getElementById('msg2').value.length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var encr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var z2 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var z = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text3 = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += 'Bob receives the message<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < wrdLen; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encr[i] = document.getElementById('enc' + i).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += encr[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '<br>The formula to decrypt is m = c<sup>' + d + '</sup> mod ' + n + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < wrdLen; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z2[i] = encr[i] % n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j < d; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z2[i] = (z2[i] * encr[i]) % n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z[i] = String.fromCharCode(z2[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '<table>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < wrdLen; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '<td>' + encr[i] + '<sup>' + d + '</sup> mod ' + n + ' = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '<td>' + z2[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '<td>' + String.fromCharCode(z2[i]) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text3 += '<br><br>So Bob decrypts the message as : ' + z + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('bobOut2').innerHTML = text3;<br>}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
fctns[65].title[5] = "RSA Algorithm  -  runBob2";
fctns[65].src[6] = " gcd(a, b)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = 1, min = a, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (b < a)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = b;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j = 1; j <= min; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(a % j == 0 && b % j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br><br></scr" + "ipt>";
fctns[65].title[6] = "RSA Algorithm  -  gcd";
fctns[65].loc = "http://learninglover.com/examples.php?id=96";
fctns[66] = new Object();
fctns[66].src = new Array();
fctns[66].title = new Array();
fctns[66].src[0] = "<script type='text/javascript'>";
fctns[66].title[0] = "Selection Sort Algorithm - styleTags";
fctns[66].src[1] = " selectionSort(A) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>' + count + ')</td>' + disp(A) + '</tr></table>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, min;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < left.length-1; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i+1; j < left.length; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left[j] < left[min])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = j;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = left[i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = left[min];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[min] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (swap > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[count] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var k = 0; k < left.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;htory[count][k] = left[k];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left; <br>}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
fctns[66].title[1] = "Selection Sort Algorithm -  selectionSort";
fctns[66].src[2] = " getMax(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || list[i] > list[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return list[maxLoc];<br>}<br>";
fctns[66].title[2] = "Selection Sort Algorithm -  getMax";
fctns[66].src[3] = " plotGraph(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < list.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mycanvas = document.createElement('canvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.id = 'canvas' + k;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.height = '200';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.width = '500';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mycanvas.style='border:1px solid #d3d3d3;'<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').appendChild(mycanvas);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('canvas' + k);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var barWidth = Math.floor(c.width / (list[k].length + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var unitHght = Math.floor(c.height / (getMax(list[k]) + 2));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clr = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 6; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = Math.floor(Math.random()*16);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clr[j] == 10)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'A'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 11)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'B'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 12)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'C'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 13)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'D'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 14)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'E'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (clr[j] == 15)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clr[j] = 'F'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list[k].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#' + clr[0] + clr[1] + clr[2] + clr[3] + clr[4] + clr[5];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(i*barWidth + barWidth/2 + i, c.height - unitHght * list[k][i] - unitHght, barWidth, unitHght * list[k][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(list[k][i], i*barWidth + barWidth + i - 2, c.height - 10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[66].title[3] = "Selection Sort Algorithm -  plotGraph";
fctns[66].src[4] = " disp(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<td width='50'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set = </td><td>(';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ')</td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br></scr" + "ipt>";
fctns[66].title[4] = "Selection Sort Algorithm -  disp";
fctns[66].loc = "http://learninglover.com/examples.php?id=14";
fctns[67] = new Object();
fctns[67].src = new Array();
fctns[67].title = new Array();
fctns[67].src[0] = "<title>Set Cover Problem</title><br><script type='text/javascript' src='examples/simplex.js'></scr" + "ipt><br><script type='text/javascript'>";
fctns[67].title[0] = "Set Cover Problems - styleTags";
fctns[67].src[1] = " clearRect()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>}<br>";
fctns[67].title[1] = "Set Cover Problems -  clearRect";
fctns[67].src[2] = " display(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '{';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[67].title[2] = "Set Cover Problems -  display";
fctns[67].src[3] = " circlePts(input)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < input.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(input[i].xLoc, c.height-input[i].yLoc, 15, 0, Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[67].title[3] = "Set Cover Problems -  circlePts";
fctns[67].src[4] = " circleSet(set)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minLoc = -1, maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (minLoc == -1 || set[i].xLoc < set[minLoc].xLoc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || set[i].xLoc > set[maxLoc].xLoc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(set[minLoc].xLoc, c.height-set[minLoc].yLoc, 13, Math.PI/2, 3*Math.PI/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[maxLoc].xLoc, c.height-set[maxLoc].yLoc-13);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(set[maxLoc].xLoc, c.height-set[maxLoc].yLoc, 13, 3*Math.PI/2, Math.PI/2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[minLoc].xLoc, c.height-set[minLoc].yLoc+13);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>}<br>";
fctns[67].title[4] = "Set Cover Problems -  circleSet";
fctns[67].src[5] = " dispPts(input)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < input.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(input[i].xLoc,c.height-input[i].yLoc,10,0,Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle=input[0].color;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(input[i].xLoc,c.height-input[i].yLoc,10,0,Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(input[i].value, input[i].xLoc-3*(Math.floor(Math.log(input[i].value)/Math.log(10))+1), c.height-input[i].yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[67].title[5] = "Set Cover Problems -  dispPts";
fctns[67].src[6] = " drawLines(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i].xLoc < 250)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(275, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc + 30, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc + 30, c.height-set[i].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc + 15, c.height-set[i].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(275, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc - 30, 20);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc - 30, c.height-set[i].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(set[i].xLoc - 15, c.height-set[i].yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(275, 20,15,0,Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(275,20,15,0,Math.PI*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='15px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText('A', 275-4*(Math.floor(Math.log(1)/Math.log(10))+1), 24);<br>}<br>";
fctns[67].title[6] = "Set Cover Problems -  drawLines";
fctns[67].src[7] = " generate(univ, n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*univ.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (search(A, univ[next]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = univ[next];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[67].title[7] = "Set Cover Problems -  generate";
fctns[67].src[8] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1 = Math.floor(Math.random()*10)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var univ = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var total = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var colors = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[0] = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[1] = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[2] = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[3] = '#00AAFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[4] = '#DEB887';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[5] = '#AA00AA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[6] = '#00AAAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[7] = '#AAAA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[8] = '#AA00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[9] = '#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[10] = '#FFAA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[11] = '#FF00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[12] = '#AAAAFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[13] = '#D2691E';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[14] = '#FFAAAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[15] = '#4682BD';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[16] = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[17] = '#FFFFAA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[18] = '#0000AA';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[19] = '#00AA00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[20] = '#AA0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[21] = '#F0F8FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[22] = '#F0F8FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colors[23] = '#FAEBD7';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i < 15; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;univ[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var select = document.getElementById('sets');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < k1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k2 = Math.floor(Math.random()*3)+3;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = generate(univ, k2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < temp.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j].color = colors[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j].value = temp[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (total.indexOf(B[i][j].value) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total[total.length] = B[i][j].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = setLocs(B[i], i+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(B[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;total = sort(total);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = B;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < total.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i].value = total[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = A;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Consider the following instance of the Minimum Set Cover problem. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We have a set U with ' + A.length + ' elements. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We also have ' + B.length + ' subsets of this set. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'A set of subsets is said to \'cover\' the set U if every element of U belongs to at least one of the selected subsets. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We would like to find a cover of U that selects the minimum number of subsets. <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < k1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><b>Set ' + (i+1) + '</b>&nbsp;&nbsp;&nbsp;&nbsp;</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < B[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td bgcolor='' + colors[i] + ''>' + B[i][j].value + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><b>Universe </b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < total.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + total[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = text;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[67].title[8] = "Set Cover Problems -  init";
fctns[67].src[9] = " search(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && ans == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[67].title[9] = "Set Cover Problems -  search";
fctns[67].src[10] = " setLocs(set, row)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i].yLoc = row * 25 + 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i].xLoc = (set[i].value % 15) * 30 + 25;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set;<br>}<br>";
fctns[67].title[10] = "Set Cover Problems -  setLocs";
fctns[67].src[11] = " union(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[i] = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (search(set3, set2[i]) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[67].title[11] = "Set Cover Problems -  union";
fctns[67].src[12] = " greedy(prob, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var input = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[1].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i] = prob[1][i].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(prob[0][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var itms = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The greedy approach to the Minimum Set Cover problem works by computing how many new elements of U each set covers. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The items are then sorted in decreasing order of this value. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'While there are still elements that are uncovered, the set with the highest value is chosen. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratios = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0][i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 0; k < rem.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem[k] == prob[0][i][j].value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp[temp.length] = rem[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][0] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios[i][1] = temp.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratios = sortDec(ratios);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = (ratios[0][0]+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circleSet(prob[0][ratios[0][0]]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Set ' + (ratios[0][0]+1) + ' covers ' + ratios[0][1] + ' new elements, which is maximal. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So we select this set and remove the covered elements from our total set. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0][ratios[0][0]].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < rem.length && loc == -1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rem[j] == prob[0][ratios[0][0]][i].value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = rem[loc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[rem.length-1] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Now the remaining uncovered elements are ' + rem + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (rem.length > 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The set of items we selected is {' + chosen + '} with a set cover size of ' + chosen.length + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += input;<br>}<br>";
fctns[67].title[12] = "Set Cover Problems -  greedy";
fctns[67].src[13] = " sortDec(arr2d)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr2d.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < arr2d.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr2d[i][1] < arr2d[j][1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = arr2d[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[i] = arr2d[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr2d[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr2d;<br>}<br>";
fctns[67].title[13] = "Set Cover Problems -  sortDec";
fctns[67].src[14] = " sort(arr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < arr.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[i] > arr[j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = arr[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[i] = arr[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr;<br>}<br>";
fctns[67].title[14] = "Set Cover Problems -  sort";
fctns[67].src[15] = " randRound(prob, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(prob[0][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0][i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = prob[0][i][j].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[1].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i] = prob[1][i].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'In the Linear Program, we create a variable x<sub>i</sub> for each subset i<br>. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The objective function is to minimize the number of sets taken. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'There is a constraint for each element of the set U stating that at least one of the sets containing that element must be selected. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var corig = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;corig[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var b = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ineq = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bds = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[1].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (B[j].indexOf(prob[1][i].value) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i + prob[1].length] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i + prob[1].length] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i + prob[1].length] = new Array();;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i + prob[1].length][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i + prob[1].length][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var opt = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bds = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispIP(opt, c, A, b, ineq, bds);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var solution = simplex(opt, c, A, b, ineq, bds); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Because each set can be chosen or not chosen, the LP relaxation will return x<sub>i</sub> values for each set S<sub>i</sub> between the range of 0 and 1. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The randomized rounding approach says to treat the value x<sub>i</sub> as the probability that we select the set S<sub>i</sub>. <br>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < solution[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (solution[0][i] < prob[0].length && chosen.indexOf(solution[0][i]+1) == -1 && Math.random() >= 1 - solution[1][i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The LP Relaxation gives the variable corresponding to set S<sub>' + (solution[0][i] + 1) + '</sub> a value of ' + solution[1][i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'This means that we will select the set S<sub>' + (solution[0][i] + 1) + '</sub> with a probability of ' + solution[1][i] + '<br>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = (solution[0][i]+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circleSet(prob[0][solution[0][i]]);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0][solution[0][i]].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = rem.indexOf(prob[0][solution[0][i]][j].value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[rem.length-1] = rem[loc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (rem.length > 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The randomized rounding solution of this LP is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < chosen.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'x<sub>' + chosen[i] + '</sub> = 1 <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The set of items we selected is {' + chosen + '} with a set cover size of ' + chosen.length + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return solution;<br>}<br>";
fctns[67].title[15] = "Set Cover Problems -  randRound";
fctns[67].src[16] = " detRound(prob, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispPts(prob[0][i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0][i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = prob[0][i][j].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'In the Linear Program, we create a variable x<sub>i</sub> for each subset i<br>. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The objective function is to minimize the number of sets taken. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'There is a constraint for each element of the set U stating that at least one of the sets containing that element must be selected. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var corig = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;corig[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var b = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ineq = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bds = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var freq = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var maxLoc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[1].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;freq[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (B[j].indexOf(prob[1][i].value) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;freq[i]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (maxLoc == -1 || freq[i] > freq[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxLoc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i + prob[1].length] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i + prob[1].length] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i + prob[1].length] = new Array();;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < prob[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i + prob[1].length][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i + prob[1].length][j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var opt = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bds = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < prob[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dispIP(opt, c, A, b, ineq, bds);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var solution = simplex(opt, c, A, b, ineq, bds); <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'With deterministic rounding, we first find the element that appears the most amongst the subsets<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'In this example, that is the element ' + (prob[1][maxLoc]) + ', which appears in ' + (freq[maxLoc]) + ' subsets.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The deterministic rounding algorithm selects a set S<sub>i</sub> if the corresponding variable x<sub>i</sub> has a value of at least 1 / ' + (freq[maxLoc]) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var chosen = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < solution[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (solution[0][i] < prob[0].length && solution[1][i] >= 1 / freq[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The LP relaxation gives the set S<sub>' + solution[0][i] + '</sub>'s variable a value of ' + solution[1][i] + ', which is at least 1 / ' + (freq[maxLoc]) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So we will include this set in our set cover solution. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chosen[chosen.length] = (solution[0][i]+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circleSet(prob[0][solution[0][i]]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (solution[0][i] < prob[0].length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The LP relaxation gives the set S<sub>' + solution[0][i] + '</sub>'s variable a value of ' + solution[1][i] + ', which is less than 1 / ' + (freq[maxLoc]) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'So we will NOT include this set in our set cover solution. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The deterministic rounding solution of this LP is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < solution[0].length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (solution[0][i]+1 <= prob[0].length && solution[1][i] >= 1/freq[maxLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'x<sub>' + (solution[0][i]+1) + '</sub> = 1 <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'The set of items we selected is {' + chosen + '} with a set cover size of ' + chosen.length + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return solution;<br>}<br>";
fctns[67].title[16] = "Set Cover Problems -  detRound";
fctns[67].src[17] = " maxim(a, b)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a > b)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return a;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return b;<br>}<br>";
fctns[67].title[17] = "Set Cover Problems -  maxim";
fctns[67].src[18] = " dispIP(opt, c, A, b, ineq, bds)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Maximize ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Minimize ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < c.length-1 && c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += c[i] + 'x<sub>' + (i+1) + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += c[i] + 'x<sub>' + (i+1) + '</sub><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Subject to <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+ Subject to') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ Subject to', '<br>Subject to');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < A[i].length-1 && A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + (j+1) + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + (j+1) + '</sub>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ineq[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' <= ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ineq[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' = ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' >= ' + b[i] + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  <=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  <=', ' <= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  =') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  =', ' = ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  >=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  >=', ' >= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (text.indexOf('+ -') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ -', '- ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < bds.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + (i+1) + '</sub> >= 0<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}<br>";
fctns[67].title[18] = "Set Cover Problems -  dispIP";
fctns[67].src[19] = " intersect(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (search(set2, set1[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br></scr" + "ipt><br>";
fctns[67].title[19] = "Set Cover Problems -  intersect";
fctns[67].loc = "http://learninglover.com/examples.php?id=39";
fctns[68] = new Object();
fctns[68].src = new Array();
fctns[68].title = new Array();
fctns[68].src[0] = "<script type='text/javascript'>";
fctns[68].title[0] = "Set Operations - styleTags";
fctns[68].src[1] = " generate(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search(A, next))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[68].title[1] = "Set Operations -  generate";
fctns[68].src[2] = " search(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[68].title[2] = "Set Operations -  search";
fctns[68].src[3] = " union(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[i] = set1[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search(set3, set2[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[68].title[3] = "Set Operations -  union";
fctns[68].src[4] = " intersect(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (search(set2, set1[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[68].title[4] = "Set Operations -  intersect";
fctns[68].src[5] = " diff(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search(set2, set1[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[68].title[5] = "Set Operations -  diff";
fctns[68].src[6] = " symmDiff(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set4 = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3 = union(set1, set2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set4 = intersect(set1, set2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3 = diff(set3, set4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[68].title[6] = "Set Operations -  symmDiff";
fctns[68].src[7] = " cartProd(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < set2.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[i][j] = '(' + set1[i] + ', ' + set2[j] + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[i][j] = '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[68].title[7] = "Set Operations -  cartProd";
fctns[68].src[8] = " init(set1, k1, set2, k2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set1 = generate(k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set2 = generate(k2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'k1 = ' + k1 + '\\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'k2 = ' + k2 + '\\n';<br>*/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set1 = {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set1.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set1[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set2 = {';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set2.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set2[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[68].title[8] = "Set Operations -  init";
fctns[68].src[9] = " retreive(set, start, finish)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = start; i < finish; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[68].title[9] = "Set Operations -  retreive";
fctns[68].src[10] = " operate(set1, set2) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('alg').value == 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = union(set1, set2);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 2)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = intersect(set1, set2);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 3)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = diff(set1, set2);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 4)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = symmDiff(set1, set2);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 5)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = cartProd(set1, set2);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[68].title[10] = "Set Operations -  operate";
fctns[68].src[11] = " disp(set)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table><tr><td width='50'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'set = </td><td>{';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < set.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i] + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}</td></tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br></scr" + "ipt>";
fctns[68].title[11] = "Set Operations -  disp";
fctns[68].loc = "http://learninglover.com/examples.php?id=13";
fctns[69] = new Object();
fctns[69].src = new Array();
fctns[69].title = new Array();
fctns[69].src[0] = "<script type='text/javascript'>";
fctns[69].title[0] = "Set Theory: Relations - styleTags";
fctns[69].src[1] = " antiSymm(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length && text == ''; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i + 1; j < rel.length && text == ''; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[i].x1.value == rel[j].x2.value && rel[i].x2.value == rel[j].x1.value && rel[i].x1.value != rel[i].x2.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Elements (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') and (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') relate to one another, so this relation is not anti-symmetric. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[1] = "Set Theory: Relations -  antiSymm";
fctns[69].src[2] = " cartProd(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < set2.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length - 1].x1 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length - 1].x2 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length - 1].x1.value = set1[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length - 1].x2.value = set2[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br>";
fctns[69].title[2] = "Set Theory: Relations -  cartProd";
fctns[69].src[3] = " clearRect()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect(0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>}<br>";
fctns[69].title[3] = "Set Theory: Relations -  clearRect";
fctns[69].src[4] = " compress(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rel2 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search2(rel2, rel[i].x1.value, rel[i].x2.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length - 1].x1 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length - 1].x2 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length - 1].x1.value = rel[i].x1.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length - 1].x1.xLoc = rel[i].x1.xLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length - 1].x1.yLoc = rel[i].x1.yLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length - 1].x2.value = rel[i].x2.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length - 1].x2.xLoc = rel[i].x2.xLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2[rel2.length - 1].x2.yLoc = rel[i].x2.yLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel2;<br>}<br>";
fctns[69].title[4] = "Set Theory: Relations -  compress";
fctns[69].src[5] = " display(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '{';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < rel.length - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + rel[i].x1.value + ', ' + rel[i].x2.value + '), ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + rel[i].x1.value + ', ' + rel[i].x2.value + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '}';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[5] = "Set Theory: Relations -  display";
fctns[69].src[6] = " domain(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dom = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search0(dom, rel[i].x1.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dom[dom.length] = rel[i].x1.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dom;<br>}<br>";
fctns[69].title[6] = "Set Theory: Relations -  domain";
fctns[69].src[7] = " drawLines(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#FF00FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(rel[i].x1.xLoc + 10, rel[i].x1.yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(rel[i].x2.xLoc - 10, rel[i].x2.yLoc);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[69].title[7] = "Set Theory: Relations -  drawLines";
fctns[69].src[8] = " drawPts(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#000000';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[i].x1.value != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(rel[i].x1.value, rel[i].x1.xLoc-3*(Math.floor(Math.log(rel[i].x1.value)/Math.log(10))+1), rel[i].x1.yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(rel[i].x1.value, rel[i].x1.xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), rel[i].x1.yLoc+4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[i].x2.value != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(rel[i].x2.value, rel[i].x2.xLoc-3*(Math.floor(Math.log(rel[i].x2.value)/Math.log(10))+1), rel[i].x2.yLoc+4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(rel[i].x2.value, rel[i].x2.xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), rel[i].x2.yLoc+4);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[69].title[8] = "Set Theory: Relations -  drawPts";
fctns[69].src[9] = " equivrel(rel, univ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false, text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var symmAns = symm(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var reflAns = refl(rel, univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var transAns = trans(rel);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (symmAns == '' && reflAns == '' && transAns == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The relation is an equivalence relation<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (symmAns)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += symmAns + 'The relation is not symmtric<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (reflAns)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += reflAns + 'The relation is not reflexive<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (transAns)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += transAns + 'The relation is not transitive<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[9] = "Set Theory: Relations -  equivrel";
fctns[69].src[10] = " generate1(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search0(A, next))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[69].title[10] = "Set Theory: Relations -  generate1";
fctns[69].src[11] = " generate2(n, univ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*univ.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search0(A, univ[next]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = univ[next];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove(univ, next);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[69].title[11] = "Set Theory: Relations -  generate2";
fctns[69].src[12] = " init(set1, k1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set1 = generate1(k1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var universe;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = set1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;universe = cartProd(set1, set1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;universe = sort(universe);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;universe = setLocs(universe);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPts(universe);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = universe;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k3 = Math.floor(Math.random()*universe.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k3 > 25)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k3 = 25;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rel = generate2(k3, universe);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = sort(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<p>rel = ' + display(rel) + '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLines(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = rel;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[69].title[12] = "Set Theory: Relations -  init";
fctns[69].src[13] = " isFunct(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dom = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length && text == ''; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search0(dom, rel[i].x1.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dom[dom.length] = rel[i].x1.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The element ' + rel[i].x1.value + ' is assigned to more than one element. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This relation is a function.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This relation is not a function.<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[13] = "Set Theory: Relations -  isFunct";
fctns[69].src[14] = " makeAntiSymm(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = '<p>' + display(rel) + '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i + 1; j < rel.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[i].x1.value == rel[j].x2.value && rel[i].x2.value == rel[j].x1.value && rel[i].x1.value != rel[i].x2.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'elements (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') and (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') relate to one another, so one must be removed. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'removing element (' + rel[i].x1.value + ', ' + rel[i].x2.value + ')' + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = remove(rel, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = rel.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'elements (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') and (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') relate to one another, so one must be removed. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'removing element (' + rel[j].x1.value + ', ' + rel[j].x2.value + ')' + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = remove(rel, j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = compress(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = sort(rel);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel;<br>}<br>";
fctns[69].title[14] = "Set Theory: Relations -  makeAntiSymm";
fctns[69].src[15] = " makeFunct(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = '<p>' + display(rel) + '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i+1; j < rel.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[i].x1.value == rel[j].x1.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'elements (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') and (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') have the same domain element, so one must be removed. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'removing element (' + rel[i].x1.value + ', ' + rel[i].x2.value + ')' + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = remove(rel, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = rel.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'elements (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') and (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') have the same domain element, so one must be removed. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'removing element (' + rel[j].x1.value + ', ' + rel[j].x2.value + ')' + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = remove(rel, j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel;<br>}<br>";
fctns[69].title[15] = "Set Theory: Relations -  makeFunct";
fctns[69].src[16] = " makeRefl(rel, univ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = '<p>' + display(rel) + '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k = univ.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < k; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (univ[i].x1.value == univ[i].x2.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'To ensure reflexitivity, adding element (' + univ[i].x1.value + ', ' + univ[i].x2.value + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp0 = univ[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1] = temp0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1] = temp0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = compress(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = sort(rel);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel;<br>}<br>";
fctns[69].title[16] = "Set Theory: Relations -  makeRefl";
fctns[69].src[17] = " makeSymm(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = '<p>' + display(rel) + '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k = rel.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < k; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The element (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') is a member of this relation. ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'To ensure symmetry, adding the element (' + rel[i].x2.value + ', ' + rel[i].x1.value + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.value = rel[i].x2.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.xLoc = rel[i].x1.xLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.yLoc = rel[i].x2.yLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.value = rel[i].x1.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.xLoc = rel[i].x2.xLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.yLoc = rel[i].x1.yLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = compress(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = sort(rel);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel;<br>}<br>";
fctns[69].title[17] = "Set Theory: Relations -  makeSymm";
fctns[69].src[18] = " makeTrans(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('list').innerHTML = '<p>' + display(rel) + '</p>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k = rel.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var contin = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (contin)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contin = false;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = rel.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i+1; j < rel.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[i].x1.value == rel[j].x2.value && !search2(rel, rel[j].x1.value, rel[i].x2.value))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//(a, b) and (c, a)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contin = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Elements (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') and (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') implies (' + rel[j].x1.value + ', ' + rel[i].x2.value + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.value = rel[j].x1.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.xLoc = rel[j].x1.xLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.yLoc = rel[j].x1.yLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.value = rel[i].x2.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.xLoc = rel[i].x2.xLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.yLoc = rel[i].x2.yLoc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (rel[i].x2.value == rel[j].x1.value && !search2(rel, rel[i].x1.value, rel[j].x2.value))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//(a, b) and (b, c)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contin = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Elements (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') and (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') implies (' + rel[i].x1.value + ', ' + rel[j].x2.value + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2 = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.value = rel[i].x1.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.xLoc = rel[i].x1.xLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x1.yLoc = rel[i].x1.yLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.value = rel[j].x2.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.xLoc = rel[j].x2.xLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[rel.length - 1].x2.yLoc = rel[j].x2.yLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = compress(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = sort(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel;<br>}<br>";
fctns[69].title[18] = "Set Theory: Relations -  makeTrans";
fctns[69].src[19] = " operate(rel, univ)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('alg').value == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = makeSymm(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPts(univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLines(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = makeRefl(rel, univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPts(univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLines(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = makeTrans(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPts(univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLines(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = makeAntiSymm(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPts(univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLines(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearRect();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel = makeFunct(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPts(univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLines(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel;<br>}<br>";
fctns[69].title[19] = "Set Theory: Relations -  operate";
fctns[69].src[20] = " poset(rel, univ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false, text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var antiSymmAns = antiSymm(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var reflAns = refl(rel, univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var transAns = trans(rel);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (antiSymmAns == '' && reflAns == '' && transAns == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The relation is a Partial Order. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (antiSymmAns != '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += antiSymmAns + 'The relation is not anti-symmtric<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (reflAns != '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += reflAns + 'The relation is not reflexive<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (transAns)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += transAns + 'The relation is not transitive<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[20] = "Set Theory: Relations -  poset";
fctns[69].src[21] = " range(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ran = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search0(ran, rel[i].x2.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ran[ran.length] = rel[i].x2.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ran;<br>}<br>";
fctns[69].title[21] = "Set Theory: Relations -  range";
fctns[69].src[22] = " refl(rel, univ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < univ.length && text == ''; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((univ[i].x1.value == univ[i].x2.value) && !search2(rel, univ[i].x1.value, univ[i].x2.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The element (' + univ[i].x1.value + ', ' + univ[i].x2.value + ') does not belong to the relation.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[22] = "Set Theory: Relations -  refl";
fctns[69].src[23] = " remove(set, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[loc] = set[set.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set;<br>}<br>";
fctns[69].title[23] = "Set Theory: Relations -  remove";
fctns[69].src[24] = " retreive(set, start, finish)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = start; i < finish; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = set[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[69].title[24] = "Set Theory: Relations -  retreive";
fctns[69].src[25] = " search0(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[69].title[25] = "Set Theory: Relations -  search0";
fctns[69].src[26] = " search1(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i].x1.value == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[69].title[26] = "Set Theory: Relations -  search1";
fctns[69].src[27] = " search2(set, elmnt1, elmnt2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length && !ans; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i].x1.value == elmnt1 && set[i].x2.value == elmnt2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[69].title[27] = "Set Theory: Relations -  search2";
fctns[69].src[28] = " setLocs(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dom = domain(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ran = range(rel);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set = union(dom, ran);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, temp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i+1; j < set.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set[i] > set[j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = set[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[i] = set[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < rel.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[j].x1.value == set[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[j].x1.yLoc = i*25 + 25;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[j].x1.xLoc = (0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[j].x2.value == set[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[j].x2.yLoc = i*25 + 25;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[j].x2.xLoc = 4*(0 + c.width) / 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel;<br>}<br>";
fctns[69].title[28] = "Set Theory: Relations -  setLocs";
fctns[69].src[29] = " sort(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < rel.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i + 1; j < rel.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[i].x1.value >  rel[j].x1.value || (rel[i].x1.value == rel[j].x1.value && rel[i].x2.value >  rel[j].x2.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = rel[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[i] = rel[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel[j] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rel;<br>}<br>";
fctns[69].title[29] = "Set Theory: Relations -  sort";
fctns[69].src[30] = " symm(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length && text == ''; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search2(rel, rel[i].x2.value, rel[i].x1.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The element (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') is in the relation, but (' + rel[i].x2.value + ', ' + rel[i].x1.value + ') is not. <br>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[30] = "Set Theory: Relations -  symm";
fctns[69].src[31] = " total(rel, univ)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set1 = domain(univ);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set2 = range(univ);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < set1.length && text == ''; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < set2.length && text == ''; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search2(rel, set1[i], set2[j]) && !search2(rel, set2[j], set1[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Elements ' + set1[i] + ' and ' + set2[j] + ' are not related. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += poset(rel, univ);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[31] = "Set Theory: Relations -  total";
fctns[69].src[32] = " trans(rel)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < rel.length && text == ''; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = i + 1; j < rel.length && text == ''; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rel[i].x1.value == rel[j].x2.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search2(rel, rel[j].x1.value, rel[i].x2.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Elements (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') and (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') belong to this relation, but (' + rel[j].x1.value + ', ' + rel[i].x2.value + ') does not. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (rel[i].x2.value == rel[j].x1.value)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search2(rel, rel[i].x1.value, rel[j].x2.value))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Elements (' + rel[j].x1.value + ', ' + rel[j].x2.value + ') and (' + rel[i].x1.value + ', ' + rel[i].x2.value + ') belong to this relation, but (' + rel[i].x1.value + ', ' + rel[j].x2.value + ') does not<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[69].title[32] = "Set Theory: Relations -  trans";
fctns[69].src[33] = " union(set1, set2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var set3 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set1.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[i] = set1[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < set2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!search0(set3, set2[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set3[set3.length] = set2[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return set3;<br>}<br></scr" + "ipt>";
fctns[69].title[33] = "Set Theory: Relations -  union";
fctns[69].loc = "http://learninglover.com/examples.php?id=25";
fctns[70] = new Object();
fctns[70].src = new Array();
fctns[70].title = new Array();
fctns[70].src[0] = "<link rel='stylesheet' type='text/css' href='style.css' media='screen' /><script type='text/javascript'>";
fctns[70].title[0] = "Shade The Cells Puzzle - styleTags";
fctns[70].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = '<table border = \'1\' width=\'300\'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol = '<table border = \'1\' width=\'300\'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i][j] = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td name=\'tdc' + i + j + '\' id=\'tdc' + i + j + '\' onclick=\'changecolor('tdc' + i + j + '')\'><p name=\'c' + i + j + '\' id=\'c' + i + j + '\'></p></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol += '<td name=\'tdc' + i + j + '\' id=\'tdd' + i + j + '\' onclick=\'changecolor('tdd' + i + j + '')\'><p name=\'d' + i + j + '\' id=\'d' + i + j + '\'></p></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('toSolve').innerHTML = prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').innerHTML = sol;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').style.visibility = 'hidden';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('d'+i+j).innerHTML = ans[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[i][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = 1; k <= size; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += ans[i][k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += ans[k][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum -= ans[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+i+j).innerHTML = sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ans[i][j] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k1 = -1; k1 <= 1; k1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k2 = -1; k2 <= 1; k2++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i + k1 >= 1 && j + k2 >= 1 && i + k1 <= size && j + k2 <= size)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += ans[i+k1][j+k2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+i+j).innerHTML = sum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[70].title[1] = "Shade The Cells Puzzle -  generate";
fctns[70].src[2] = " clearcells()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background = '#ffffff';<br>}<br>";
fctns[70].title[2] = "Shade The Cells Puzzle -  clearcells";
fctns[70].src[3] = " changecolor(id)<br>{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(document.getElementById(id).style.background)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#808080' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(128, 128, 128)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(128, 128, 128)' ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(128, 128, 128) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#e0e0e0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById(id).style.background == '#e0e0e0' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(224, 224, 224)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(224, 224, 224)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(224, 224, 224) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#808080';<br>}<br>";
fctns[70].title[3] = "Shade The Cells Puzzle -  changecolor";
fctns[70].src[4] = " disp()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').style.visibility = 'visible';<br>}<br>";
fctns[70].title[4] = "Shade The Cells Puzzle -  disp";
fctns[70].src[5] = " clearBoth()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('toSolve').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').innerHTML = '';<br>}<br>";
fctns[70].title[5] = "Shade The Cells Puzzle -  clearBoth";
fctns[70].src[6] = " setDim()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = document.getElementById('dim');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 3; i <= 10; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[sel.options.length] = new Option(i + ' by ' + i, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[1].selected = true;<br>}<br>";
fctns[70].title[6] = "Shade The Cells Puzzle -  setDim";
fctns[70].src[7] = " checkProg()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var userAns = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var retVal = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('tdc'+i+j).style.background == '#808080' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'none repeat scroll 0% 0% rgb(128, 128, 128)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(128, 128, 128) none repeat scroll 0% 0%' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(128, 128, 128)' )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '1';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('tdc'+i+j).style.background == '#e0e0e0' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'none repeat scroll 0% 0% rgb(224, 224, 224)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(224, 224, 224) none repeat scroll 0% 0%' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc'+i+j).style.background == 'rgb(224, 224, 224)' )<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i][j] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns[i][j] == '0' || userAns[i][j] == '1')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns[i][j] != ans[i][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (retVal && count == (size)*(size))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is correct!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (retVal && count != (size)*(size))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is correct, so far!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Answer is incorrect :-(');<br>}<br></scr" + "ipt>";
fctns[70].title[7] = "Shade The Cells Puzzle -  checkProg";
fctns[70].loc = "http://learninglover.com/examples.php?id=29";
fctns[71] = new Object();
fctns[71].src = new Array();
fctns[71].title = new Array();
fctns[71].src[0] = "<script id='sc1' type='text/javascript'> ";
fctns[71].title[0] = "Sieve of Eratosthenes - styleTags";
fctns[71].src[1] = " sieve(N, show) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var a = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (a[0] = 0, a[1] = 0, i = 2; i <= N; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 2; i <= N/2; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 2; j <= N/i; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a[i*j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += (i*j) + ' = ' + i + ' * ' + j + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[i*j] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Primes less than ' + N+ ' are ';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i <= N; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += i + ' ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text; <br>}<br></scr" + "ipt> ";
fctns[71].title[1] = "Sieve of Eratosthenes -  sieve";
fctns[71].loc = "http://learninglover.com/examples.php?id=3";
fctns[72] = new Object();
fctns[72].src = new Array();
fctns[72].title = new Array();
fctns[72].src[0] = "<script type='text/javascript'>";
fctns[72].title[0] = "Simple Linear Regression - styleTags";
fctns[72].src[1] = " mean(data, coord)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = data.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sum += parseFloat(data[i][coord]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (sum / size);<br>}<br>";
fctns[72].title[1] = "Simple Linear Regression -  mean";
fctns[72].src[2] = " multLinReg(data, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var Sxx = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var Sxy = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sumXX = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sumXY = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sumYY = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sumX = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sumY = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sol = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < data.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumXX += data[zen][0]*data[zen][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumXY += data[zen][0]*data[zen][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumYY += data[zen][1]*data[zen][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumX += data[zen][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sumY += data[zen][1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sxx = sumXX - ((sumX)*(sumX)) / data.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sxy = sumXY - ((sumX)*(sumY)) / data.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'S<sub>XX</sub> = ' + Sxx.toFixed(3) + '<br>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'S<sub>XY</sub> = ' + Sxy.toFixed(3) + '<br>';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[1] = Sxy / Sxx;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var meany = mean(data, 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var meanx = mean(data, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[0] = meany - sol[1]*meanx;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td><img src='http://learninglover.com/chars/beta.gif'><sub>1</sub> = </td><td><table><tr><td>' + Sxy.toFixed(3) + '</td></tr><tr><td><hr></td></tr><tr><td>' + Sxx.toFixed(3) + '</td></tr></table></td><td> = </td><td> ' + sol[1].toFixed(3) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<img src='http://www.learninglover.com/chars/ybar.jpg'> = ' + meany.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<img src='http://www.learninglover.com/chars/xbar.jpg'> = ' + meanx.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<img src='http://learninglover.com/chars/beta.gif'><sub>0</sub> = ' + meany.toFixed(3) + ' + ' + sol[1].toFixed(3) + ' * ' + meanx.toFixed(3) + ' = ' + sol[0].toFixed(3) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sol;<br>}<br>";
fctns[72].title[2] = "Simple Linear Regression -  multLinReg";
fctns[72].src[3] = " postProcess(data, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td><b>x</b></td><td><b>y</b></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + data[i][0].toFixed(3) + '</td><td>' + data[i][1].toFixed(3) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('dataPts').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('dataPts').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol = multLinReg(data, show);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = 'The linear regression for this model is <br>' + 'y = ' + sol[0].toFixed(4) + ' + ' + sol[1].toFixed(3) + '*x<br><br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('sseBtn').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('sstBtn').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('ssrBtn').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('rsqBtn').hidden = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawLine(data, sol);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[72].title[3] = "Simple Linear Regression -  postProcess";
fctns[72].src[4] = " getsse(data, sol, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Sum of Squares Error (SSE) measures how much our data differs from the model we generated. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'To compute this we will calculate: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'SSE = <img src='http://learninglover.com/chars/csigma.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - <img src='http://www.learninglover.com/chars/yhat.jpg'><sub>i</sub>)<sup>2</sup>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sse = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = evalReg(sol, data[i][0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sse += (data[i][1] - temp)*(data[i][1] - temp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Sum of Squares Error (SSE) for this linear regression is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'SSE: ' + sse.toFixed(3) + '<br><br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('sstBtn').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sse;<br>}<br>";
fctns[72].title[4] = "Simple Linear Regression -  getsse";
fctns[72].src[5] = " getsst(data, sol, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Total Sum of Squares (SST) measures how accurate the mean of our data could be used as a model for the data. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'To compute this we will calculate: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'SST = <img src='http://learninglover.com/chars/csigma.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - <img src='http://www.learninglover.com/chars/ybar.jpg'>)<sup>2</sup>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sst = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dtaMean = mean(data, 1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sst += (data[i][1] - dtaMean)*(data[i][1] - dtaMean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Total Sum of Squares (SST) for this linear regression is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'SST: ' + sst.toFixed(3) + '<br><br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('ssrBtn').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sst;<br>}<br>";
fctns[72].title[5] = "Simple Linear Regression -  getsst";
fctns[72].src[6] = " getssr(data, sol, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Regression Sum of Squares (SSR) measures how much of our total variation is remaining from the difference between the total sum of squares and the error sum of squares. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'To compute this we will calculate: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'SSR = SST - SSE';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ssr = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var dtaMean = mean(data, 1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = evalReg(sol, data[i][0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ssr += (temp - dtaMean)*(temp - dtaMean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Regression Sum of Squares (SSR) for this linear regression is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'SSR: ' + ssr.toFixed(3) + '<br><br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('rsqBtn').hidden = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ssr;<br>}<br>";
fctns[72].title[6] = "Simple Linear Regression -  getssr";
fctns[72].src[7] = " getrsq(data, sol, show, ssr, sst)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Coefficient of Determination (r<sup>2</sup>) tells what percentage of the total sum of squares that is accounted for in the error sum of squares. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'To compute this we will calculate: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'r<sup>2</sup> = SSR / SST';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rsq = ssr / sst;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The Coefficient of Determination (r<sup>2</sup>) for this linear regression is <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'r<sup>2</sup>: ' + rsq.toFixed(3) + '<br><br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return rsq;<br>}<br>";
fctns[72].title[7] = "Simple Linear Regression -  getrsq";
fctns[72].src[8] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('sseBtn').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('sstBtn').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('ssrBtn').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('rsqBtn').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('dataPts').hidden = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numElts = document.getElementById('noElts').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var incDec = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var atZero = Math.floor(Math.random()*20) + 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rate = Math.floor(Math.random()*5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vrnce;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vrnce = Math.floor(Math.random()*5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (vrnce == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xMin = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xMax = Math.floor(Math.random()*25) + xMin + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!incDec)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;incDec = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var b = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td><b>x</b></td><td><b>y</b></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numElts; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var noise = Math.random()*vrnce;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var len = b.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[len] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[len][0] = Math.floor(Math.random()*(xMax - xMin)*100)/100;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[len][1] = atZero + incDec*rate*b[len][0] + noise;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + b[len][0].toFixed(3) + '</td><td>' + b[len][1].toFixed(3) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('dataPts').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPoints(b);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return b;<br>}<br>";
fctns[72].title[8] = "Simple Linear Regression -  init";
fctns[72].src[9] = " maximum(data, clmn)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mxm = Number.MIN_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseFloat(data[i][clmn]) > mxm)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mxm = parseFloat(data[i][clmn]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mxm;<br>}<br>";
fctns[72].title[9] = "Simple Linear Regression -  maximum";
fctns[72].src[10] = " minimum(data, clmn)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mnm = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseFloat(data[i][clmn]) < mnm)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mnm = parseFloat(data[i][clmn]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return mnm;<br>}<br>";
fctns[72].title[10] = "Simple Linear Regression -  minimum";
fctns[72].src[11] = " evalReg(beta, xVal)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (beta[0] + beta[1]*xVal);<br>}<br>";
fctns[72].title[11] = "Simple Linear Regression -  evalReg";
fctns[72].src[12] = " drawPoints(data)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mxm_y = maximum(data, 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mnm_y = minimum(data, 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mxm_x = maximum(data, 0)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mnm_x = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vpp_y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vpp_x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc_y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc_x = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mnm_y < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp_y = (mxm_y - mnm_y) / c.height;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.ceil(mxm_y - mnm_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc_y = c.height - (mxm_y) / vpp_y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp_y = (mxm_y) / c.height;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.ceil (mxm_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc_y = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'min_x = ' + mnm_x.toFixed(3) + ', max_x = ' + mxm_x.toFixed(3) + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'min_y = ' + mnm_y.toFixed(3) + ', max_y = ' + mxm_y.toFixed(3) + '<br>';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'loc_x = ' + loc_x + ', loc_y = ' + loc_y + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp_x = (mxm_x - mnm_x) / c.width;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'vpp_x = ' + vpp_x.toFixed(3) + ', vpp_y = ' + vpp_y.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numClms = Math.ceil(mxm_x - mnm_x);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xWidth = c.width / numClms;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yHeight = c.height / numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'xWidth = ' + xWidth.toFixed(3) + ', yHeight = ' + yHeight.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the axes<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(loc_x, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(loc_x, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(0, c.height - loc_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width, c.height - loc_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the notches<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < c.height; i += yHeight)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(loc_x    , c.height - loc_y - i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(loc_x + 5, c.height - loc_y - i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(loc_x    , c.height - loc_y + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(loc_x + 5, c.height - loc_y + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < c.width; i += xWidth)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(i, c.height - loc_y + 5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(i, c.height - loc_y - 5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc((data[i][0])*xWidth,c.height - data[i][1]*yHeight - loc_y,3,0,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[72].title[12] = "Simple Linear Regression -  drawPoints";
fctns[72].src[13] = " drawLine(data, beta)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mxm_y = maximum(data, 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mnm_y = minimum(data, 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mxm_x = maximum(data, 0)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var mnm_x = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vpp_y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vpp_x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc_y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc_x = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mnm_y < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp_y = (mxm_y - mnm_y) / c.height;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.ceil(mxm_y - mnm_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc_y = c.height - (mxm_y) / vpp_y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp_y = (mxm_y) / c.height;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numRows = Math.ceil (mxm_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc_y = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vpp_x = (mxm_x - mnm_x) / c.width;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillRect (0, 0, c.width, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;numClms = Math.ceil(mxm_x - mnm_x);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var xWidth = c.width / numClms;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var yHeight = c.height / numRows;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the axes<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(loc_x, 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(loc_x, c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(0, c.height - loc_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(c.width, c.height - loc_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Draw the notches<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < c.height; i += yHeight)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(loc_x    , c.height - loc_y - i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(loc_x + 5, c.height - loc_y - i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(loc_x    , c.height - loc_y + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(loc_x + 5, c.height - loc_y + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < c.width; i += xWidth)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(i, c.height - loc_y + 5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(i, c.height - loc_y - 5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc((data[i][0])*xWidth,c.height - data[i][1]*yHeight - loc_y,3,0,2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pt0x = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pt0y = evalReg(beta, pt0x);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pt1x = numClms;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pt1y = evalReg(beta, pt1x);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#3333ff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(pt0x*xWidth, c.height - pt0y*yHeight - loc_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(pt1x*xWidth, c.height - pt1y*yHeight - loc_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < data.length;  i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#FFFF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(data[i][0]*xWidth, c.height - evalReg(beta, data[i][0])*yHeight-loc_y);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(data[i][0]*xWidth, c.height - data[i][1]*yHeight - loc_y)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br></scr" + "ipt>";
fctns[72].title[13] = "Simple Linear Regression -  drawLine";
fctns[72].loc = "http://learninglover.com/examples.php?id=73";
fctns[73] = new Object();
fctns[73].src = new Array();
fctns[73].title = new Array();
fctns[73].src[0] = "<script type='text/javascript'>";
fctns[73].title[0] = "Simplex Method - styleTags";
fctns[73].src[1] = " initSol(opt, c, A, b, ineq, bds, show)<br>{<br>/*<br>Input: A linear Program in Standard form<br>Output: The columns of the matrix that represent the initial basis, as well as an updated matrix that contains the necessary row operations to make these columns into elements of the Basis matrix. <br>Method: <br> - If a row has a slack variable, that column is in the basis. <br> - If a row has a surplus variable, add an artificial variable and add that column to the basis. <br> - If a row has neither a slack or surplus variable, add an artificial variable and add that column to the basis. <br> - I shouldn't need to check if a variable is a slack variable more than once, so calling isSlackVar on each row and column is redundant. <br>*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, k, basis = [], poss = 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basis[i] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[i].length && basis[i] == -1; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < A.length && poss; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[k][j] != 0 && k != i)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poss)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basis[i] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return basis;<br>}<br>";
fctns[73].title[1] = "Simplex Method -  initSol";
fctns[73].src[2] = " toStdFrm(opt, c, A, b, ineq, bds, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var B = [];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i] = [];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < bds.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bds[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'variable x<sub>' + i + '</sub> is unbounded.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Shifting columns after variable x<sub>' + i + '</sub> right one column <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < B.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = B[k].length-1; j > i; j--)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k][j+1] = B[k][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[j+1] = c[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[j+1] = bds[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < B.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k][j+1] = -1*B[k][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i+1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i+1] = -1*c[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (bds[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'variable x<sub>' + i + '</sub> is negative.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < B.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[k][i] = -1*B[k][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[i] = -1*c[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < b.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (b[i] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Now we make ' + b[i] + ' non-negative by multiplying this row by -1<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < B[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][j] = -1*B[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i] = -1*b[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i] = -1*ineq[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < ineq.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;place = B[i].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ineq[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Constraint ' + i + ' is a less than inequality, so we add a slack variable to it. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < B.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ineq[i] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Constraint ' + i + ' is a greater than inequality, so we add both a surplus variable and an artificial variable to it. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < B.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][place+1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][place] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][place+1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[place+1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[place+1] = -10000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[place+1] = 10000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ineq[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Constraint ' + i + ' is an equality, so we add an artificial variable to it. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < B.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[j][place] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B[i][place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ineq[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bds[place] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[place] = -10000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[place] = 10000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The matrix is now in standard form. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return B;<br>}<br>";
fctns[73].title[2] = "Simplex Method -  toStdFrm";
fctns[73].src[3] = " simplex(opt, c, A, b, ineq, bds, show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var corig = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rcost = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ratio = 1000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minrow = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We are now ready to run to the Simplex Method. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = toStdFrm(opt, c, A, b, ineq, bds, show);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disp(opt, c, ans, b, ineq, bds);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;corig[i] = c[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Now that the problem is in standard form, we can easily figure out an initial feasible solution, and put the problem into tableau form. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var basic = initSol(opt, c, ans, b, ineq, bds, show);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < basic.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (c[basic[i]] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < ans[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[j] -= ans[i][j] * c[basic[i]];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < ans[0].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>x<sub>' + j + '</sub></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>b</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < ans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < ans[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (basic[i] == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[i][j].toFixed(3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (basic[i] == j)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</b>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + b[i].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + c[i].toFixed(3) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'We now search for a variable that improves our solution. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optloc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt == 1 && c[i] > 0 && (optloc == -1 || c[i] > c[optloc]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optloc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (opt == 0 && c[i] < 0 && (optloc == -1 || c[i] < c[optloc]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optloc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (optloc != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The variable with the most ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'positive';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'negative';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' reduced cost is x<sub>' + optloc + '</sub>, whose reduced cost is ' + c[optloc] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = 1000000;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minrow = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Now we need to find the row that constrains this variable the most. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < ans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[i][optloc] > 0 && (b[i] / ans[i][optloc]) < ratio)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = b[i] / ans[i][optloc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minrow = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This variable is constrained the most by equation ' + minrow + '</br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (minrow != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Thus we pivot at row ' + minrow + ', column ' + optloc + ' of our matrix. <br><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom = ans[minrow][optloc];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < ans[minrow].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[minrow][j] = ans[minrow][j] / denom;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[minrow] = b[minrow] / denom;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < ans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom = ans[i][optloc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != minrow)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < ans[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i][j] -= ans[minrow][j] * denom;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b[i] -= b[minrow] * denom;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;denom = c[optloc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < c.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c[j] -= ans[minrow][j] * denom;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;basic[minrow] = optloc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'None of the rows of this matrix constrain this variable, and so our solution is unbounded.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Since none of the reduced costs are ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'positive';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'negative';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ', we have finished the simplex method.<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The optimal basis is ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < basic.length-1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + basic[i] + '</sub> = ' + b[i].toFixed(3) + ', ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + basic[i] + '</sub> = ' + b[i].toFixed(3) + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var artbasic = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < basic.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (corig[basic[i]] == 10000000 || corig[basic[i]] == -10000000)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;artbasic = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (artbasic)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This solution is not feasible, though, because we still have an artificial variable in our basis. <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < basic.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j += corig[basic[i]] * b[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'The objective function value of this solution is ' + j.toFixed(3) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (optloc != -1 && minrow != -1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}<br>";
fctns[73].title[3] = "Simplex Method -  simplex";
fctns[73].src[4] = " disp(opt, c, A, b, ineq, bds)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opt) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Maximize ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Minimize ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < c.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < c.length-1 && c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += c[i] + 'x<sub>' + i + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (c[i] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += c[i] + 'x<sub>' + i + '</sub><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'Subject to <br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+ Subject to') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ Subject to', '<br>Subject to');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j < A[i].length-1 && A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + j + '</sub> + ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (A[i][j] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[i][j] + 'x<sub>' + j + '</sub>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ineq[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' <= ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ineq[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' = ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' >= ' + b[i] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  <=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  <=', ' <= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  =') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  =', ' = ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text.indexOf('+  >=') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+  >=', ' >= ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (text.indexOf('+ -') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = text.replace('+ -', '- ');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < bds.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bds[i] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + i + '</sub> <= ' + 0 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (bds[i] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'x<sub>' + i + '</sub> >= ' + 0 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>}<br></scr" + "ipt>";
fctns[73].title[4] = "Simplex Method -  disp";
fctns[73].loc = "http://learninglover.com/examples.php?id=11";
fctns[74] = new Object();
fctns[74].src = new Array();
fctns[74].title = new Array();
fctns[74].src[0] = "<style><br>td {border-style:none; text-align:center}<br>td.frac {border-bottom-style:solid; text-align:cnter}<br>td.none {border-bottom-style:none; text-align:center}<br></style><br><script type='text/javascript'><br>var text = '';";
fctns[74].title[0] = "Single Variable Equations - styleTags";
fctns[74].src[1] = " solve(arr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newconst = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newcoeff = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[13])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[14])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>1. We start by adding </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> to both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x - </td><td class='none'>' + disp(arr[8], arr[9]) + '</td><td class='none'> + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newconst = sum(-1*arr[8], arr[9], arr[5], arr[6]);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x + </td><td class='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>2. We start by adding </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> to both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x + </td><td class='none'>' + disp(arr[8], arr[9]) + '</td><td class='none'> + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newconst = sum(arr[8], arr[9], arr[5], arr[6]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x + </td><td clas='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[14])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>3. We start by subtracting </td><td class='nonw'>' + disp(arr[5], arr[6]) + '</td><td class='none'> from both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x - </td><td class='none'>' + disp(arr[8], arr[9]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newconst = diff(-1*arr[8], arr[9], arr[5], arr[6]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x + </td><td clas='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>4. We start by subtracting </td><td class='nonw'>' + disp(arr[5], arr[6]) + '</td><td class='none'> from both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x + </td><td class='none'>' + disp(arr[8], arr[9]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newconst = diff(arr[8], arr[9], arr[5], arr[6]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x + </td><td clas='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>5. Now we subtract </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'> x from both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x - </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x</td><td class='none'> = </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x + </td><td clas='none'>' + disp(newconst[0], newconst[1]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[11], arr[12]) + '</td><td class='none'>x</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newcoeff = diff(arr[2], arr[3], arr[11], arr[12]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(newcoeff[0], newcoeff[1]) + '</td><td class='none'> x = </td><td class='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newcoeff[0] != 1 || newcoeff[1] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = quot(newconst[0], newconst[1], newcoeff[0], newcoeff[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[13])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[14])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>6. We start by adding </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> to both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> = </td><td class='none'>-' + disp(arr[8], arr[9]) + '</td><td class='none'> + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newconst = sum(-1*arr[8], arr[9], arr[5], arr[6]);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x = </td><td class='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>7. We start by adding </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> to both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> = </td><td class='none'>' + disp(arr[8], arr[9]) + '</td><td class='none'> + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newconst = sum(arr[8], arr[9], arr[5], arr[6]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x = </td><td class='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[14])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>8. We start by subtracting </td><td class='nonw'>' + disp(arr[5], arr[6]) + '</td><td class='none'> from both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> = </td><td class='none'>-' + disp(arr[8], arr[9]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newconst = diff(arr[8], arr[9], arr[5], arr[6]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x = </td><td class='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>9. We start by subtracting </td><td class='nonw'>' + disp(arr[5], arr[6]) + '</td><td class='none'> from both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x + </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td><td class='none'> = </td><td class='none'>' + disp(arr[8], arr[9]) + '</td><td class='none'> - </td><td class='none'>' + disp(arr[5], arr[6]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newconst = diff(arr[8], arr[9], arr[5], arr[6]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'>' + disp(arr[2], arr[3]) + '</td><td class='none'> x = </td><td class='none'>' + disp(newconst[0], newconst[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newcoeff[0] = arr[2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newcoeff[1] = arr[3];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (newcoeff[0] != 1 || newcoeff[1] != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>10. Finally we divide by </td><td class='nonw'>' + disp(newcoeff[0], newcoeff[1]) + '</td><td class='none'> on both sides of the equation. </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>(</td><td class='none'>' + disp(newcoeff[0], newcoeff[1]) + '</td><td class='none'>/</td><td class='none'>' + disp(newcoeff[0], newcoeff[1]) + '</td><td class='none'>)</td><td class='none'> x = </td><td class='none'>(</td><td class='none'>' + disp(newconst[0], newconst[1]) + '</td><td class='none'>/</td><td class='none'>' + disp(newcoeff[0], newcoeff[1]) + '</td><td class='none'>)</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newcoeff[0] != 1 || newcoeff[1] != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = quot(newconst[0], newconst[1], newcoeff[0], newcoeff[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>Now the equation reads</td><td class='none'> x = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += '<table><tr><td class='none'>x = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td></tr></table>';<br>}<br>";
fctns[74].title[1] = "Single Variable Equations -  solve";
fctns[74].src[2] = " gcd(u, v)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return u;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return gcd(v, u % v);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[74].title[2] = "Single Variable Equations -  gcd";
fctns[74].src[3] = " sum(num1, den1, num2, den2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = num1*den2 + den1*num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = den1*den2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (den1 != 1 || den2 != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>The formula to add two fractions of the form </td><td class='none'><table><tr><td class='frac'> a </td></tr><tr><td class='none'> b </td></tr></table></td><td class='none'> + </td><td class='none'><table><tr><td class='frac'> c </td></tr><tr><td class='none'> d </td></tr></table></td><td class='none'> is </td><td class='none'>' + disp('a*d + b*c', 'b*d') +  '</td><td class='none'>, which equals </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td><td class='none'>' + disp(num1, den1) + '</td><td class='none'> + </td><td class='none'>' + disp(num2, den2) + '</td><td class='none'> = </td><td class='none'>' + disp(num1 + '*' + den2 + ' + ' + den1 + '*' + num2, den1 + '*' + den2) + '</td><td class='none'><td class='none'> = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(ans[0], ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem0 = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1 && common != -1 && document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[0] + ' = <b>' + common + '</b> * ' + rem0 + ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[1] + ' = <b>' + common + '</b> * ' + rem1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[1] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] * -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] * -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (den1 != 1 || den2 != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>So </td><td class='none'>' + disp(num1, den1) + '</td><td class='none'> + </td><td class='none'>' + disp(num2, den2) + '</td><td class='none'> = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[74].title[3] = "Single Variable Equations -  sum";
fctns[74].src[4] = " diff(num1, den1, num2, den2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = num1*den2 - den1*num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = den1*den2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (den1 != 1 || den2 != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>The formula to subtract two fractions of the form </td><td class='none'>' + disp('a', 'b') + '</td><td class='none'> - </td><td class='none'>' + disp('c', 'd') + '</td><td class='none'> is </td><td class='none'>' + disp('a*d - b*c', 'b*d') + '</td><td class='none'>, which equals </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td><td class='none'>' + disp(num1, den1) + '</td><td class='none'> - </td><td class='none'>' + disp(num2, den2) + '</td><td class='none'> = </td><td class='none'>' + disp(num1 + '*' + den2 + ' - ' + den1 + '*' + num2, den1 + '*' + den2) + '</td><td class='none'><td class='none'> = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(ans[0], ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem0 = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1 && common != -1 && document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[0] + ' = <b>' + common + '</b> * ' + rem0 + ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[1] + ' = <b>' + common + '</b> * ' + rem1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[1] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] * -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] * -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (den1 != 1 || den2 != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>So </td><td class='none'>' + disp(num1, den1) + '</td><td class='none'> - </td><td class='none'>' + disp(num2, den2) + '</td><td class='none'> = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[74].title[4] = "Single Variable Equations -  diff";
fctns[74].src[5] = " prod(num1, den1, num2, den2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = num1*num2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = den1*den2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (den1 != 1 || den2 != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>The formula to multiply two fractions of the form </td><td class='none'>' + disp('a', 'b') + '</td><td class='none'> * </td><td class='none'>' + disp('c', 'd') + '</td><td class='none'> is </td><td class='none'>' + disp('a*c', 'b*d') + '</td><td class='none'>, which equals </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td><td class='none'>' + disp(num1, den1) + '</td><td class='none'> * </td><td class='none'>' + disp(num2, den2) + '</td><td class='none'> = </td><td class='none'>' + disp(num1 + '*' + num2, den1 + '*' + den2) + '</td><td class='none'><td class='none'> = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(ans[0], ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem0 = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1 && common != -1 && document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[0] + ' = <b>' + common + '</b> * ' + rem0 + ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[1] + ' = <b>' + common + '</b> * ' + rem1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[1] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] * -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] * -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (den1 != 1 || den2 != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>So </td><td class='none'>' + disp(num1, den1) + '</td><td class='none'> * </td><td class='none'>' + disp(num2, den2) + '</td><td class='none'> = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[74].title[5] = "Single Variable Equations -  prod";
fctns[74].src[6] = " quot(num1, den1, num2, den2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = num1*den2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = num2*den1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (den1 != 1 || den2 != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>The formula to divide two fractions of the form </td><td class='none'>' + disp('a', 'b') + '</td><td class='none'> / </td><td class='none'>' + disp('c', 'd') + '</td><td class='none'> is </td><td class='none'>' + disp('a*d', 'b*c') + '</td><td class='none'>, which equals </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'></td><td class='none'>' + disp(num1, den1) + '</td><td class='none'> / </td><td class='none'>' + disp(num2, den2) + '</td><td class='none'> = </td><td class='none'>' + disp(num1 + '*' + den2, den1 + '*' + num2) + '</td><td class='none'><td class='none'> = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(ans[0], ans[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem0 = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem1 = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1 && common != -1 && document.getElementById('show').checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[0] + ' = <b>' + common + '</b> * ' + rem0 + ' and ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[1] + ' = <b>' + common + '</b> * ' + rem1 + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[1] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = ans[0] * -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = ans[1] * -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked && (den1 != 1 || den2 != 1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td class='none'>So </td><td class='none'>' + disp(num1, den1) + '</td><td class='none'> / </td><td class='none'>' + disp(num2, den2) + '</td><td class='none'> = </td><td class='none'>' + disp(ans[0], ans[1]) + '</td><td class='none'> </td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[74].title[6] = "Single Variable Equations -  quot";
fctns[74].src[7] = " disp(num, den)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outtext = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (den != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtext = '<table><tr><td class='frac'>' + num + '</td></tr><tr><td class='none'>' + den + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (num != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtext = num + ''; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtext = '0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return outtext;<br>}<br>";
fctns[74].title[7] = "Single Variable Equations -  disp";
fctns[74].src[8] = " clr()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>}<br>";
fctns[74].title[8] = "Single Variable Equations -  clr";
fctns[74].src[9] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = Math.floor(Math.random()*2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This tells whether we have variables on both sides of the equation. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = Math.floor(Math.random()*2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This tells whether the coefficient of the left side x is a fraction. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = Math.floor(Math.random()*20)+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the numerator for the coefficient of the left side x. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(ans[2] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = Math.floor(Math.random()*20)+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the denominator for the coefficient of the left side x. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ans[3] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(ans[2], ans[3]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = ans[2] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = ans[3] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[4] = Math.floor(Math.random()*2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This tells whether the left side constant is a fraction<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[5] = Math.floor(Math.random()*20)+1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the numerator for the left side constant. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ans[5] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[4])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[6] = Math.floor(Math.random()*20)+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the denominator for the left side constant. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ans[6] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[6] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(ans[5], ans[6]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[5] = ans[5] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[6] = ans[6] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[7] = Math.floor(Math.random()*2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This tells whether the right side constant is a fraction.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[8] = Math.floor(Math.random()*20)+1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the numerator for the right side constant. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ans[8] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[7])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[9] = Math.floor(Math.random()*20)+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the denominator fot the right side constant. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ans[9] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[9] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(ans[8], ans[9]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[8] = ans[8] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[9] = ans[9] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[10] = Math.floor(Math.random()*2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This tells whether the right side coefficient is a fraction. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[11] = Math.floor(Math.random()*20)+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the numerator of the right side coefficient. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ans[11] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[10])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[12] = Math.floor(Math.random()*20)+1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the denominator for the right side coefficient. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ans[12] == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[12] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[10] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[11] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[12] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;common = gcd(ans[11], ans[12]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (common != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[11] = ans[11] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[12] = ans[12] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[13] = Math.floor(Math.random()*2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the left side operator.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[0])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[14] = Math.floor(Math.random()*2);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//This is the right side operator. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[14] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outtxt = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (ans[13])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtxt += 'Solve for x:<br><table><tr><td class='none'>' + disp(ans[2], ans[3]) + '</td><td class='none'> x + </td><td class='none'>' + disp(ans[5], ans[6]) + '</td><td class='none'> = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtxt += 'Solve for x:<br><table><tr><td class='none'>' + disp(ans[2], ans[3]) + '</td><td class='none'> x - </td><td class='none'>' + disp(ans[5], ans[6]) + '</td><td class='none'> = </td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (ans[14])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[0] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtxt += '<td class='none'>' + disp(ans[11], ans[12]) + '</td><td class='none'> x + </td><td class='none'>' + disp(ans[8], ans[9]) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtxt += '<td class='none'>' + disp(ans[8], ans[9]) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[0] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtxt += '<td class='none'>' + disp(ans[11], ans[12]) + '</td><td class='none'> x - </td><td class='none'>' + disp(ans[8], ans[9]) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outtxt += '<td class='none'> - </td><td class='none'>' + disp(ans[8], ans[9]) + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML += outtxt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br></scr" + "ipt><br>";
fctns[74].title[9] = "Single Variable Equations -  init";
fctns[74].loc = "http://learninglover.com/examples.php?id=32";
fctns[75] = new Object();
fctns[75].src = new Array();
fctns[75].title = new Array();
fctns[75].src[0] = "<script type='text/javascript'>";
fctns[75].title[0] = "Slope Formula - styleTags";
fctns[75].src[1] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 5; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('opt' + i + 'txt').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point0 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point1 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point0[0] = Math.floor(Math.random()*20) - 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point0[1] = Math.floor(Math.random()*20) - 10;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point1[0] = Math.floor(Math.random()*20) - 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point1[1] = Math.floor(Math.random()*20) - 10;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (point1[0] == point0[0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'What is the slope of the line passing through (' + point0[0] + ', ' + point0[1] + ') and (' + point1[0] + ', ' + point1[1] + ')? <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('problem').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slp = slope(point0, point1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(slp[0], slp[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slp[0] = slp[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slp[1] = slp[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random() * 5);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('opt' + loc + 'txt').innerHTML = '<table><tr><td><input type='radio' name='ans' id='ans' value='opt' + loc + ''></td><td><table><tr><td>' + slp[0] + '</td></tr><tr><td><hr></td></tr><tr><td>' + slp[1] + '</td></tr></table></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var other = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin <= 3; yin ++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang <= 3; yang ++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (yin != 0 || yang != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = yin + '|' + yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = -1*yin + '|' + -1*yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = -1*yin + '|' + yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = yin + '|' + -1*yang;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('problem').innerHTML += 'poss = ' + poss + '<br>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var done = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done[0] = slp[0] + '-' + slp[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 5; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i != loc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elt = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[0] = slp[0] + parseFloat(poss[elt].split('|')[0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[1] = slp[1] + parseFloat(poss[elt].split('|')[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (other[1] == 0 && done.indexOf(other[0] + '-' + other[1]) == -1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[elt] = poss[poss.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var common = gcd(other[0], other[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[0] = other[0] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;other[1] = other[1] / common;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done[done.length] = other[0] + '-' + other[1];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('opt' + i + 'txt').innerHTML += '<table><tr><td><input type='radio' name='ans' id='ans' value='opt' + i + ''></td><td><table><tr><td>' + other[0] + '</td></tr><tr><td><hr></td></tr><tr><td>' + other[1] + '</td></tr></table></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>}<br>";
fctns[75].title[1] = "Slope Formula -  init";
fctns[75].src[2] = " gcd(num1, num2)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (num2 == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return num1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return gcd(num2, num1 % num2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[75].title[2] = "Slope Formula -  gcd";
fctns[75].src[3] = " equals(num1, num2)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (num1[1] != 0 && num2[1] != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt1 = num1[0] / num1[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var elt2 = num2[0] / num2[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (elt1 == elt2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;<br>}<br>";
fctns[75].title[3] = "Slope Formula -  equals";
fctns[75].src[4] = " dispFmla()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = 'Suppose you are given two points (x<sub>1</sub>, y<sub>1</sub>) and (x<sub>2</sub>, y<sub>2</sub>), then the slope between these two points is given by the following formula: ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slp = '<table><tr><td><center>y<sub>2</sub> - y<sub>1</sub></center></td></tr><tr><td><hr></td></tr><tr><td><center>x<sub>2</sub> - x<sub>1</sub></center></td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = slp;<br>}<br>";
fctns[75].title[4] = "Slope Formula -  dispFmla";
fctns[75].src[5] = " slope(point1, point2)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slp = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slp[0] = (point1[1] - point2[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slp[1] = (point1[0] - point2[0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (slp[0] < 0 && slp[1] < 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slp[0] *= -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;slp[1] *= -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return slp;<br>}<br>";
fctns[75].title[5] = "Slope Formula -  slope";
fctns[75].src[6] = " indexOf(arr, elt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < arr.length && loc == -1; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[i][0] == elt[0] && arr[i][1] == elt[1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return loc;<br>}<br>";
fctns[75].title[6] = "Slope Formula -  indexOf";
fctns[75].src[7] = " checkAns()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var opts = document.getElementsByName('ans');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < opts.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opts[i].checked == true)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = opts[i].value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You need to select an answer');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var txt = document.getElementById(ans + 'txt').innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = txt.substring(txt.indexOf('</td><td><table><tbody><tr><td>') + 31, txt.indexOf('</td></tr><tr><td><hr>'));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = txt.substring(txt.indexOf('<hr></td></tr><tr><td>') + 22, txt.indexOf('</td></tr></tbody>'));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseFloat(ans[0]) != parseFloat(slp[0]) || parseFloat(ans[1]) != parseFloat(slp[1]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Sorry, you have selected the incorrect answer');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You have chosen correctly');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></scr" + "ipt>";
fctns[75].title[7] = "Slope Formula -  checkAns";
fctns[75].loc = "http://learninglover.com/examples.php?id=84";
fctns[76] = new Object();
fctns[76].src = new Array();
fctns[76].title = new Array();
fctns[76].src[0] = "<script type='text/javascript'> ";
fctns[76].title[0] = "Sorting Algorithms - styleTags";
fctns[76].src[1] = " insertionSort(A) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += count + ') A = ' + A + '<br>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i < left.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = left[i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (left[j - 1] > v)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j] = left[j-1];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j] = v;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (swap)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += count + ') left = ' + left + '<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left;<br>}";
fctns[76].title[1] = "Sorting Algorithms -  insertionSort";
fctns[76].src[2] = " bubbleSort(A) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += count + ') A = ' + A + '<br>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = left.length-1; i >= 0; i--)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(j = 1; j <= i; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left[j-1] > left[j])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = left[j-1];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j-1] = left[j];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j] = temp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (swap)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += count + ') left = ' + left + '<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left;<br> }";
fctns[76].title[2] = "Sorting Algorithms -  bubbleSort";
fctns[76].src[3] = " mergeSort(A, nest)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nest == 0)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A.length <= 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[nest] = [];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right[nest] = [];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n[nest] = A.length;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mid[nest] = Math.floor(A.length / 2);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < mid[nest]; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[nest][i] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = mid[nest]; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right[nest][i-mid[nest]] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'calling MergeSort(' + left[nest] + '), //this is the left side, ' + (nest + 1) + '<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[nest] = mergeSort(left[nest], nest+1);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'calling MergeSort(' + right[nest] + '), //this is the right side, ' + (nest + 1) + '<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right[nest] = mergeSort(right[nest], nest+1);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[nest] = [];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i < mid[nest] && j < n[nest] - mid[nest])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left[nest][i] < right[nest][j])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[nest][k] = left[nest][i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[nest][k] = right[nest][j];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i < mid[nest])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[nest][k] = left[nest][i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (j < n[nest] - mid[nest])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result[nest][k] = right[nest][j];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result[nest];<br> }";
fctns[76].title[3] = "Sorting Algorithms -  mergeSort";
fctns[76].src[4] = " selectionSort(A) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += count + ') A = ' + A + '<br>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, min;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < A.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = A[i];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < left.length-1; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = i;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i+1; j < left.length; j++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left[j] < left[min])<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = j;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swap ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = left[i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[i] = left[min];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[min] = temp;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (swap)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += count + ') left = ' + left + '<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left;<br>}";
fctns[76].title[4] = "Sorting Algorithms -  selectionSort";
fctns[76].src[5] = " quickSort(A, left, right, nest)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i = left, j = right;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tmp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nest == 0)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pivot = A[Math.floor((left + right) / 2)];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i <= j)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (A[i] < pivot)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (A[j] > pivot)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i <= j)<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = A[i];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = A[j];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[j] = tmp;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j--;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count ++;<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += count + ') A = {';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < A.length-1; k++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k == (i-1) || k == (j+1))<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<b>' + A[k] + '</b>, ';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k] + ', ';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (k == (j+1))<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<b>' + A[k] + '</b>}<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k] + '}<br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left < j)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'calling quicksort(';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = left; k < j; k++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k] + ', ';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ')// This is the left side <br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = quickSort(A, left, j, nest+1);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i < right)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('show').checked)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'calling quicksort(';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = i; k < right; k++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k] + ', ';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += A[k];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ')// This is the rightside <br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = quickSort(A, i, right, nest+1);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}";
fctns[76].title[5] = "Sorting Algorithms -  quickSort";
fctns[76].src[6] = " sort(A) <br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('alg').value == 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = bubbleSort(A);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 2)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = insertionSort(A);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 3)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = mergeSort(A, 0);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 4)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = selectionSort(A);<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 5)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = quickSort(A, 0, A.length-1, 0);<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br></scr" + "ipt> ";
fctns[76].title[6] = "Sorting Algorithms -  sort";
fctns[76].loc = "http://learninglover.com/examples.php?id=9";
fctns[77] = new Object();
fctns[77].src = new Array();
fctns[77].title = new Array();
fctns[77].src[0] = "<script type='text/javascript'>";
fctns[77].title[0] = "Stack Data Structure - styleTags";
fctns[77].src[1] = " generate(n)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = null<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < n; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next = Math.floor((Math.random())*100);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = push2(A, next);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return A;<br>}<br>";
fctns[77].title[1] = "Stack Data Structure -  generate";
fctns[77].src[2] = " search(set, elmnt)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (temp = set; temp != null && !ans; temp = temp.next)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (set.value == elmnt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[77].title[2] = "Stack Data Structure -  search";
fctns[77].src[3] = " pop(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('last').value = curr.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = curr.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display(curr, 'list');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>";
fctns[77].title[3] = "Stack Data Structure -  pop";
fctns[77].src[4] = " push1(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newItem = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = document.getElementById('next').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.value = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.next = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.next = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = newItem;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('next').value = Math.floor((Math.random())*100);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display(curr, 'list');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br>";
fctns[77].title[4] = "Stack Data Structure -  push1";
fctns[77].src[5] = " push2(curr, next)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newItem = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var value = next;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.value = value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.next = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newItem.next = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = newItem;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('next').value = Math.floor((Math.random())*100);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br>";
fctns[77].title[5] = "Stack Data Structure -  push2";
fctns[77].src[6] = " concat(curr, add)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (add != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add = pop(add, val);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = push2(temp, val);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = pop(temp, val)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = push2(curr, val);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return curr;<br>}<br>";
fctns[77].title[6] = "Stack Data Structure -  concat";
fctns[77].src[7] = " init(stack, k1)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var stack = generate(k1);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('next').value = Math.floor((Math.random())*100);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display(stack, 'list');<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return stack;<br>}<br>";
fctns[77].title[7] = "Stack Data Structure -  init";
fctns[77].src[8] = " display(curr, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = 'There are no items in this Stack<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table border=1>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp.next != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + temp.value + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (temp.next == null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + temp.value + '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(loc).innerHTML = text;<br>}<br>";
fctns[77].title[8] = "Stack Data Structure -  display";
fctns[77].src[9] = " size(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;<br>}<br>";
fctns[77].title[9] = "Stack Data Structure -  size";
fctns[77].src[10] = " maxValue(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var max = -1000;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp.value > max)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = temp.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return max;<br>}<br>";
fctns[77].title[10] = "Stack Data Structure -  maxValue";
fctns[77].src[11] = " minValue(curr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var min = 1000;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (temp != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (temp.value < min)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = temp.value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = temp.next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return min;<br>}<br>";
fctns[77].title[11] = "Stack Data Structure -  minValue";
fctns[77].src[12] = " operate(stack)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('alg').value == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack = push1(stack);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stack = pop(stack);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = 'The size of this stack is currently ' + size(stack) + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '<center>The maximum value<br> of this stack is currently <br>' + maxValue(stack) + '</center><br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (document.getElementById('alg').value == 5)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '<center>The minimum value<br> of this stack is currently <br>' + minValue(stack) + '</center><br>';<br><br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return stack;<br>}<br></scr" + "ipt>";
fctns[77].title[12] = "Stack Data Structure -  operate";
fctns[77].loc = "http://learninglover.com/examples.php?id=22";
fctns[78] = new Object();
fctns[78].src = new Array();
fctns[78].title = new Array();
fctns[78].src[0] = "<style type='text/css'><br>.board input.c <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size: 15pt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: #fff<br>}<br><br>.board textarea.hnt<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font-size: 8pt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overflow: hidden;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resize: none;<br>}<br><br>.board input.d <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BACKGROUND-COLOR: #dcdcdc; <br>}<br><br>.board textarea.d <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BACKGROUND-COLOR: #dcdcdc; <br>}<br><br>.c <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.hnt <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 3em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 3em;<br>}<br><br>.vtc <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border-right: 0;<br>}<br><br>.hzl <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border-bottom: 0;<br>}<br></style><br><script type='text/javascript'>";
fctns[78].title[0] = "Sudoku Page - styleTags";
fctns[78].src[1] = " dlx_cvr(clmn)<br>/*Covering a column removes it from the 'matrix' by making its neighbors <br>to the column before/after it depending on which neighbor we're talking about. <br>We also remove the rows associated with that column in a similar manner. */<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clmn.right).left = clmn.left;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clmn.left).right = clmn.right;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = clmn.down; i != clmn; i = i.down)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*i iterates through all the rows of the matrix */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i.right; j != i; j = j.right)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*j iterates through all the columns of row i */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(j.down).up = j.up;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(j.up).down = j.down;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(j.column).size--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[78].title[1] = "Sudoku Page -  dlx_cvr";
fctns[78].src[2] = " dlx_uncvr(clmn)<br>/*Uncovering a column places it back into the 'matrix'. This <br>is possible because when we cover a column we never change <br>the contents of column (i.e. clmn.left, clmn.right, etc). Thus <br>we are able to place this clmn back into the matrix by <br>simply making its neighbors point back to this cell. The <br>same can also be said about all the rows of this column*/<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = clmn.up; i != clmn; i = i.up)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* i iterates through all the rows of the matrix */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = i.left; j != i; j = j.left)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* j iterates through all the columns of row i. */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(j.column).size++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(j.up).down = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(j.down).up = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clmn.left).right = clmn;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clmn.right).left = clmn;<br>}<br>";
fctns[78].title[2] = "Sudoku Page -  dlx_uncvr";
fctns[78].src[3] = " dlx_search(ptr, sol, curr, ans, maxno)<br>/*This is a recursive function that iterates <br>through the matrix to search for a feasible solution. */<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var j, rw, s, clmn;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ptr.right == ptr)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*This is the terminating condition for the recursion. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr.right == ptr implies that there is only one remaining <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column, the current column (i.e. we are close to a solution)*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = sol.slice(0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans.length >= maxno)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clmn = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = 99999;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = ptr.right; j != ptr; j = j.right)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j.size == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* If no rows in this column can be covered, then return null */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j.size < s)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Else find column with minimal number of uncovered elements */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = j.size;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clmn = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*Now we cover the column we just found in the previous for loop*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlx_cvr(clmn);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (rw = clmn.down; rw != clmn; rw = rw.down)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*This searches for a row in the above mentioned column. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It iterates through the rows of that column and tries to <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cover that row-column pair by covering all columns that<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row appears on. Then it calls search again and depending <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on the result either stops the recursion or un-covers that <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row and tries again in a different position. */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sol[curr] = rw.row;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = rw.right; j != rw; j = j.right)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlx_cvr(j.column);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = dlx_search(ptr, sol, curr+1, ans, maxno);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s != null)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = rw.left; j != rw; j = j.left)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlx_uncvr(j.column);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlx_uncvr(clmn);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;<br>}<br>";
fctns[78].title[3] = "Sudoku Page -  dlx_search";
fctns[78].src[4] = " dlx_solve(matrix, skip, maxno)<br>/*This function takes as input the exact cover matrix and returns the <br>solutions to the exact cover problem. */<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clms = new Array(matrix[0].length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < clms.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*We create a column object for each column in the matrix. */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i] = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < clms.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* This sets up a single row of columns as a doubly linked list.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;These serve as the column headers and give information about the <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells below. */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i].index = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i].up = clms[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i].down = clms[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i >= skip)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i - 1 >= skip)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i].left = clms[i-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i + 1 < clms.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i].right = clms[i+1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i].left = clms[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i].right = clms[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i].size = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < matrix.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*This iteratively inserts a node at the end of the selected<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column. this will serve as the new row. */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var last = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < matrix[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*This iteratively inserts a node at the end of the <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected row. This will serve as the new cell. This<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cell is only created if the associated matrix element<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is defined. */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (matrix[i][j])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var node = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.row = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.column = clms[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.up = clms[j].up;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.down = clms[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (last)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.left = last;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.right = last.right;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(last.right).left = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last.right = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.left = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node.right = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clms[j].up).down = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[j].up = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[j].size++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*This gives the new doubly linked list matrix a header <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pointing to the first element, which is the first column header. */<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ptr = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr.right = clms[skip];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr.left = clms[clms.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[skip].left = ptr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[clms.length-1].right = ptr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = [];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlx_search(ptr, [], 0, ans, maxno);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[78].title[4] = "Sudoku Page -  dlx_solve";
fctns[78].src[5] = " solve_sudoku(grid)<br>/*This transforms the Sudoku grid into a exact cover matrix which <br>we will use for the dancing links algorithm. */<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var table = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rinfo = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, v, row, r, n, ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = grid[i][j] - 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (v >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = new Array(324);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[i*9+j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[81+i*9+v] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[81*2+j*9+v] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[81*3+(Math.floor(i/3)*3+Math.floor(j/3))*9+v] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table.push(row);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rinfo.push({'row': i, 'col': j, 'n': v+1});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (n = 0; n < 9; n++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row = new Array(324);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[i*9+j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[81+i*9+n] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[81*2+j*9+n] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[81*3+(Math.floor(i/3)*3+Math.floor(j/3))*9+n] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table.push(row);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rinfo.push({'row': i, 'col': j, 'n': n+1});<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans2 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans2[1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var r = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.push(grid[i][j]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans2[1].push(r);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans2[0] = dlx_solve(table, 0, 2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans2[0].length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = ans2[0][0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < r.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;grid[rinfo[r[i]]['row']][rinfo[r[i]]['col']] = rinfo[r[i]]['n'];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans2[0] = ans2[0].length;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans2[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans2;<br>}<br>";
fctns[78].title[5] = "Sudoku Page -  solve_sudoku";
fctns[78].src[6] = " solve()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var g = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, e;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e = document.getElementById('c'+i+j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.push(e.value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.push(r);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = solve_sudoku(g);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (r[0] > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+i+j).value = g[i-1][j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (r[0] > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = 'more than one solution';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+i+j).value = r[1][i-1][j-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = 'no solution';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('message').innerHTML = text<br>}<br>";
fctns[78].title[6] = "Sudoku Page -  solve";
fctns[78].src[7] = " generate(puzzle)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('hints').style.visibility = 'hidden';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, rloc, cloc;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rloc = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < 81; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cloc = (i+1) % 9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cloc == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cloc = 9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((i) % 9 == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rloc++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(puzzle.charAt(rloc*9+cloc-10) != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+rloc+cloc).value = puzzle.charAt(rloc*9+cloc-10);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+rloc+cloc).readOnly = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+rloc+cloc).style.color = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+rloc+cloc).value = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+rloc+cloc).readOnly = false; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c'+rloc+cloc).style.color = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[78].title[7] = "Sudoku Page -  generate";
fctns[78].src[8] = " clearPuzz()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('message').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generate('000000000000000000000000000000000000000000000000000000000000000000000000000000000');<br>}<br>";
fctns[78].title[8] = "Sudoku Page -  clearPuzz";
fctns[78].src[9] = " poss()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, k, r, e, g = [];;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e = document.getElementById('c'+i+j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.push(e.value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.push(r);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[i][j] == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j] = [1, 2, 3, 4, 5, 6, 7, 8, 9];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < 9; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[i][k].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[i][k]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[k][j].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[k][j]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)][3*Math.floor(j/3)].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)][3*Math.floor(j/3)]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)][3*Math.floor(j/3)+1].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)][3*Math.floor(j/3)+1]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)][3*Math.floor(j/3)+2].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)][3*Math.floor(j/3)+2]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)+1][3*Math.floor(j/3)].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)+1][3*Math.floor(j/3)]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)+1][3*Math.floor(j/3)+1].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)+1][3*Math.floor(j/3)+1]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)+1][3*Math.floor(j/3)+2].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)+1][3*Math.floor(j/3)+2]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)+2][3*Math.floor(j/3)].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)+2][3*Math.floor(j/3)]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)+2][3*Math.floor(j/3)+1].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)+2][3*Math.floor(j/3)+1]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[3*Math.floor(i/3)+2][3*Math.floor(j/3)+2].length == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g[i][j][g[3*Math.floor(i/3)+2][3*Math.floor(j/3)+2]-1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < 9; i++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 9; j++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[i][j].length != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k < 9; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[i][j][k] != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr += g[i][j][k];<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr.length % 3 == 0)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr += '\\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curr = g[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('h' + (i+1) + (j+1)).value = curr;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curr.length == 1 && g[i][j].length != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('h' + (i+1) + (j+1)).style.color = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('h' + (i+1) + (j+1)).style.color = '#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('hints').style.visibility = 'visible';<br>}<br>";
fctns[78].title[9] = "Sudoku Page -  poss";
fctns[78].src[10] = " searchRow(row, value, grid)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, ans = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (grid[row][i].indexOf(value) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '' + (i+1) + '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[78].title[10] = "Sudoku Page -  searchRow";
fctns[78].src[11] = " searchClm(clm, value, grid)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var j, ans = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (grid[j][clm].indexOf(value) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '' + (j+1) + '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[78].title[11] = "Sudoku Page -  searchClm";
fctns[78].src[12] = " searchSub(div1, div2, value, grid)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, ans = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < 3; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < 3; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (grid[div1*3 + i][div2*3 + j].indexOf(value) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans += '' + (i*3 + j) + '';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[78].title[12] = "Sudoku Page -  searchSub";
fctns[78].src[13] = " isolated()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j, ans1, ans2, ans3, g = [];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 1; i <= 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = [];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 1; j <= 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e = document.getElementById('h'+i+j);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r.push(e.value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.push(r);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (g[i][j].length != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (k = 1; k <= 9; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans1 = searchRow(i, k, g);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans2 = searchClm(j, k, g);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans3 = searchSub(Math.floor(i/3), Math.floor(j/3), k, g);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans1.length == 1 && g[i][ans1-1].length != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('h' + (i+1) + (ans1)).style.color = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans2.length == 1 && g[ans2-1][j].length != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('h' + (ans2) + (j+1)).style.color = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans3.length == 1 && g[Math.floor(i/3)*3 + Math.floor(ans3/3)][Math.floor(j/3)*3 + ans3 % 3].length != 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('h' + (Math.floor(i/3)*3 + Math.floor(ans3/3) + 1) + (Math.floor(j/3)*3 + ans3 % 3 + 1)).style.color = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[78].title[13] = "Sudoku Page -  isolated";
fctns[78].src[14] = " getSub(row, clm)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (Math.floor(row/3)*3  + Math.floor(clm/3));<br>}<br>";
fctns[78].title[14] = "Sudoku Page -  getSub";
fctns[78].src[15] = " newPuzz(cell, A, possRow, possClm, possSub, num)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i, j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var row = Math.floor(cell / num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clm = cell % num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var subSize = Math.floor(Math.sqrt(num));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sub = subSize*Math.floor(row / subSize) + Math.floor(clm / subSize);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cellVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var possLoc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var found = false;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < num; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (possRow[row].indexOf(i) != -1 && possClm[clm].indexOf(i) != -1 && possSub[sub].indexOf(i) != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poss.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (found == false)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (poss.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possLoc = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cellVal = poss[possLoc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[row][clm] = cellVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = possRow[row].indexOf(cellVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possRow[row][loc] = possRow[row][possRow[row].length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possRow[row].length--;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = possClm[clm].indexOf(cellVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possClm[clm][loc] = possClm[clm][possClm[clm].length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possClm[clm].length--;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = possSub[sub].indexOf(cellVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possSub[sub][loc] = possSub[sub][possSub[sub].length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possSub[sub].length--;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = poss.indexOf(cellVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[loc] = poss[poss.length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss.length--;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cell == num*num-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = A;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = possRow;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = possClm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[4] = possSub;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found = newPuzz(cell+1, A, possRow, possClm, possSub, num)[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!found)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possRow[row][possRow[row].length] = cellVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possClm[clm][possClm[clm].length] = cellVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possSub[sub][possSub[sub].length] = cellVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = A;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = possRow;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = possClm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[4] = possSub;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = A;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = possRow;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = possClm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[4] = possSub;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[1] = A;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[2] = possRow;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[3] = possClm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[4] = possSub;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[78].title[15] = "Sudoku Page -  newPuzz";
fctns[78].src[16] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var num = 9;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var possClm = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var possRow = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var possSub = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var i = 0; i < num; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possClm[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possRow[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possSub[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i] = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var j = 0; j < num; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possClm[i][j] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possRow[i][j] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;possSub[i][j] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A[i][j] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = newPuzz(0, A, possRow, possClm, possSub, num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = ans[1];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var reveal = 27;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var hint = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < num; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < num; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i][j] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint[i][j] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var counts = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rCount = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cCount = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sCount = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i1 = 0; i1 < rem.length; i1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[i1] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rCount[i1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cCount[i1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i2 = 0; i2 < rem[i1].length; i2++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[i1][i2] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sCount[getSub(i1, i2)] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minCount = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = num*num*num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var bestLocs = new Array();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < reveal; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestLocs = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = num*num*num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (bestLocs.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i1 = 0; i1 < counts.length; i1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i2 = 0; i2 < counts[i1].length; i2++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (counts[i1][i2] == minCount)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestLocs[bestLocs.length] = i1 * num + i2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (counts[i1][i2] < temp)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = counts[i1][i2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bestLocs.length == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minCount = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*bestLocs.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rLoc = Math.floor(bestLocs[loc] / num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cLoc = bestLocs[loc] % num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestLocs[loc] = bestLocs[bestLocs.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bestLocs.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rCount[rLoc]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cCount[cLoc]++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sCount[getSub(rLoc, cLoc)]++;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i1 = 0; i1 < counts.length; i1++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i2 = 0; i2 < counts[i1].length; i2++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i1 == rLoc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[i1][i2] += rCount[rLoc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i2 == cLoc)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[i1][cLoc] += cCount[cLoc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (getSub(i1, i2) == getSub(rLoc, cLoc))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[i1][i2] += sCount[getSub(i1, i2)];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i1][i2] == A[rLoc][cLoc])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counts[i1][i2] ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint[rLoc][cLoc] = A[rLoc][cLoc]+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[rLoc][cLoc] = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == reveal - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var r = solve_sudoku(hint);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint = r[1];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (r[0] > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reveal++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var hint2 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < num; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint2[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < num; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint2[i][j] = hint[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < num; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < num; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hint2[i][j] != '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i*num+j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < poss.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rw = Math.floor(poss[loc] / num);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cl = poss[loc] % num;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint2[rw][cl] = '';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint2[cl][rw] = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = solve_sudoku(hint2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint2 = r[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (r[0] > 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint2[rw][cl] = hint[rw][cl];<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint2[cl][rw] = hint[cl][rw];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[loc] = poss[poss.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hint = hint2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < num; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < num; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + (i+1) + (j+1)).value = hint[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hint[i][j] != '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + (i+1) + (j+1)).style.color = '#0000FF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + (i+1) + (j+1)).readOnly = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[78].title[16] = "Sudoku Page -  init";
fctns[78].src[17] = " disp2d(mtrx)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < mtrx.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < mtrx[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td>' + mtrx[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return output;<br>}<br>";
fctns[78].title[17] = "Sudoku Page -  disp2d";
fctns[78].src[18] = " disp1d(list)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < list.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '<td>' + list[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return output;<br>}<br>";
fctns[78].title[18] = "Sudoku Page -  disp1d";
fctns[78].src[19] = " checkSudokuStatus() <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rows = new Array(9);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clms = new Array(9);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sqrs = new Array(9);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows[i] = new Array(9);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[i] = new Array(9);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqrs[i] = new Array(9);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < 9; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rows[i][j] = document.getElementById('c'+(i+1)+(j+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clms[j][i] = document.getElementById('c'+(i+1)+(j+1)).value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(i / 3) * 3 + Math.floor(j / 3);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2 = Math.floor(i * 3 % 9 + j % 3); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sqrs[loc1][loc2] = document.getElementById('c'+(i+1)+(j+1)).value;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < 9; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!validate(clms[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('There is a problem with your solution in column ' + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (!validate(rows[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('There is a problem with your solution in row ' + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (!validate(sqrs[i]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('There is a problem with your solution in square ' + i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You have found the correct solution');<br>}<br>";
fctns[78].title[19] = "Sudoku Page -  checkSudokuStatus";
fctns[78].src[20] = " validate(check) <br>{<br>    var i = 1;<br>    check.sort();<br>    for (var loc = 0; loc < check.length; loc++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>        if (check[loc] != i)<br>            return false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>    }<br>    return true;<br>}<br></scr" + "ipt>";
fctns[78].title[20] = "Sudoku Page -  validate";
fctns[78].loc = "http://learninglover.com/examples.php?id=10";
fctns[79] = new Object();
fctns[79].src = new Array();
fctns[79].title = new Array();
fctns[79].src[0] = "<script type='text/javascript' src='examples/getquote1.js'></scr" + "ipt><br><script type='text/javascript'><br>var maxNo = 207;<br>var M = 1000000;<br>var clusters = new Array();<br>var labels = new Array();";
fctns[79].title[0] = "Term Frequency-Inverse Document Frequency - styleTags";
fctns[79].src[1] = " init()<br>{<br>    var numItems = Math.floor(Math.random()*10)+2;<br>    var list = new Array();<br>    var words;<br>    <br>    var text = '<ol>';<br>    var quotes = new Array();<br>    <br>    for (var i = 0; i < numItems; i++)<br>    {<br>        var loc;<br>        do<br>        {<br>            loc = Math.floor(Math.random()*maxNo);<br>        }<br>        while (list.indexOf(loc) != -1);<br>        <br>        list[list.length] = loc;<br>        <br>        quotes[i] = getQuote(loc);<br>        text += '<li>' + quotes[i];<br>    }<br>    <br>    text += '</ol>';<br>    <br>    words = getWds(quotes);<br>        <br>    var ans = new Array();<br>    ans[0] = quotes;<br>    ans[1] = words;<br><br>    document.getElementById('input').innerHTML = text;<br>    document.getElementById('dispSim').hidden = true;<br>    document.getElementById('values').hidden = true;<br>    document.getElementById('values').options.length = 0;<br>    document.getElementById('output').innerHTML = '';<br>    <br>    return ans;<br>}<br>";
fctns[79].title[1] = "Term Frequency-Inverse Document Frequency -  init";
fctns[79].src[2] = " common()<br>{<br>    var cmn = new Array('a', 'able', 'about', 'above', 'abroad', 'according', 'accordingly', 'across', 'actually', 'adj', 'after', 'afterwards', 'again', 'against', 'ago', 'ahead', 'aint', 'all', 'allow', 'allows', 'almost', 'alone', 'along', 'alongside', 'already', 'also', 'although', 'always', 'am', 'amid', 'amidst', 'among', 'amongst', 'an', 'and', 'another', 'any', 'anybody', 'anyhow', 'anyone', 'anything', 'anyway', 'anyways', 'anywhere', 'apart', 'appear', 'appreciate', 'appropriate', 'are', 'arent', 'around', 'as', 'as', 'aside', 'ask', 'asking', 'associated', 'at', 'available', 'away', 'awfully', <br>'back', 'backward', 'backwards', 'be', 'became', 'because', 'become', 'becomes', 'becoming', 'been', 'before', 'beforehand', 'begin', 'behind', 'being', 'believe', 'below', 'beside', 'besides', 'best', 'better', 'between', 'beyond', 'both', 'brief', 'but', 'by', <br>'came', 'can', 'cannot', 'cant', 'cant', 'caption', 'cause', 'causes', 'certain', 'certainly', 'changes', 'clearly', 'cmon', 'co', 'co.', 'com', 'come', 'comes', 'concerning', 'consequently', 'consider', 'considering', 'contain', 'containing', 'contains', 'corresponding', 'could', 'couldnt', 'course', 'cs', 'currently', <br>'dare', 'darent', 'definitely', 'described', 'despite', 'did', 'didnt', 'different', 'directly', 'do', 'does', 'doesnt', 'doing', 'done', 'dont', 'down', 'downwards', 'during', <br>'each', 'edu', 'eg', 'eight', 'eighty', 'either', 'else', 'elsewhere', 'end', 'ending', 'enough', 'entirely', 'especially', 'et', 'etc', 'even', 'ever', 'evermore', 'every', 'everybody', 'everyone', 'everything', 'everywhere', 'ex', 'exactly', 'example', 'except', <br>'fairly', 'far', 'farther', 'few', 'fewer', 'fifth', 'first', 'five', 'followed', 'following', 'follows', 'for', 'forever', 'former', 'formerly', 'forth', 'forward', 'found', 'four', 'from', 'further', 'furthermore', <br>'get', 'gets', 'getting', 'given', 'gives', 'go', 'goes', 'going', 'gone', 'got', 'gotten', 'greetings', <br>'had', 'hadnt', 'half', 'happens', 'hardly', 'has', 'hasnt', 'have', 'havent', 'having', 'he', 'hed', 'hell', 'hello', 'help', 'hence', 'her', 'here', 'hereafter', 'hereby', 'herein', 'heres', 'hereupon', 'hers', 'herself', 'hes', 'hi', 'him', 'himself', 'his', 'hither', 'hopefully', 'how', 'howbeit', 'however', 'hundred', <br>'id', 'ie', 'if', 'ignored', 'ill', 'im', 'immediate', 'in', 'inasmuch', 'inc', 'inc', 'indeed', 'indicate', 'indicated', 'indicates', 'inner', 'inside', 'insofar', 'instead', 'into', 'inward', 'is', 'isnt', 'it', 'itd', 'itll', 'its', 'its', 'itself', 'ive', 'i', <br>'just', <br>'k', 'keep', 'keeps', 'kept', 'know', 'known', 'knows', <br>'last', 'lately', 'later', 'latter', 'latterly', 'least', 'less', 'lest', 'let', 'lets', 'like', 'liked', 'likely', 'likewise', 'little', 'look', 'looking', 'looks', 'low', 'lower', 'ltd', <br>'made', 'mainly', 'make', 'makes', 'many', 'may', 'maybe', 'maynt', 'me', 'mean', 'meantime', 'meanwhile', 'merely', 'might', 'mightnt', 'mine', 'minus', 'miss', 'more', 'moreover', 'most', 'mostly', 'mr', 'mrs', 'much', 'must', 'mustnt', 'my', 'myself', <br>'name', 'namely', 'nd', 'near', 'nearly', 'necessary', 'need', 'neednt', 'needs', 'neither', 'never', 'neverf', 'neverless', 'nevertheless', 'new', 'next', 'nine', 'ninety', 'no', 'nobody', 'non', 'none', 'nonetheless', 'noone', 'noone', 'nor', 'normally', 'not', 'nothing', 'notwithstanding', 'novel', 'now', 'nowhere', <br>'obviously', 'of', 'off', 'often', 'oh', 'ok', 'okay', 'old', 'on', 'once', 'one', 'ones', 'ones', 'only', 'onto', 'opposite', 'or', 'other', 'others', 'otherwise', 'ought', 'oughtnt', 'our', 'ours', 'ourselves', 'out', 'outside', 'over', 'overall', 'own', <br>'particular', 'particularly', 'past', 'per', 'perhaps', 'placed', 'please', 'plus', 'possible', 'presumably', 'probably', 'provided', 'provides', 'que', 'quite', 'qv', <br>'rather', 'rd', 're', 'really', 'reasonably', 'recent', 'recently', 'regarding', 'regardless', 'regards', 'relatively', 'respectively', 'right', 'round', <br>'said', 'same', 'saw', 'say', 'saying', 'says', 'second', 'secondly', 'see', 'seeing', 'seem', 'seemed', 'seeming', 'seems', 'seen', 'self', 'selves', 'sensible', 'sent', 'serious', 'seriously', 'seven', 'several', 'shall', 'shant', 'she', 'shed', 'shes', 'should', 'shouldnt', 'since', 'six', 'so', 'some', 'somebody', 'someday', 'somehow', 'someone', 'something', 'sometime', 'sometimes', 'somewhat', 'somewhere', 'soon', 'sorry', 'specified', 'specify', 'specifying', 'still', 'sub', 'such', 'sup', 'sure', <br>'take', 'taken', 'taking', 'tell', 'tends', 'th', 'than', 'thank', 'thanks', 'thanx', 'that', 'thatll', 'thats', 'thats', 'thatve', 'the', 'their', 'theirs', 'them', 'themselves', 'then', 'thence', 'there', 'thereafter', 'thereby', 'thered', 'therefore', 'therein', 'therell', 'therere', 'theres', 'theres', 'thereupon', 'thereve', 'these', 'they', 'theyd', 'theyll', 'theyre', 'theyve', 'thing', 'things', 'think', 'third', 'thirty', 'this', 'thorough', 'thoroughly', 'those', 'though', 'three', 'through', 'throughout', 'thru', 'thus', 'till', 'to', 'together', 'too', 'took', 'toward', 'towards', 'tried', 'tries', 'truly', 'try', 'trying', 'ts', 'twice', 'two', <br>'un', 'under', 'underneath', 'undoing', 'unfortunately', 'unless', 'unlike', 'unlikely', 'until', 'unto', 'up', 'upon', 'upwards', 'us', 'use', 'used', 'useful', 'uses', 'using', 'usually', <br>'v', 'value', 'various', 'versus', 'very', 'via', 'viz', 'vs', <br>'want', 'wants', 'was', 'wasnt', 'way', 'we', 'wed', 'welcome', 'well', 'went', 'were', 'werent', 'weve', 'what', 'whatever', 'whatll', 'whats', 'whatve', 'when', 'whence', 'whenever', 'where', 'whereafter', 'whereas', 'whereby', 'wherein', 'wheres', 'whereupon', 'wherever', 'whether', 'which', 'whichever', 'while', 'whilst', 'whither', 'who', 'whod', 'whoever', 'whole', 'wholl', 'whom', 'whomever', 'whos', 'whose', 'why', 'will', 'willing', 'wish', 'with', 'within', 'without', 'wonder', 'wont', 'would', 'wouldnt', <br>'yes', 'yet', 'you', 'youd', 'youll', 'your', 'youre', 'yours', 'yourself', 'yourselves', 'youve', <br>'zero');<br><br>    return cmn;<br>}<br>";
fctns[79].title[2] = "Term Frequency-Inverse Document Frequency -  common";
fctns[79].src[3] = " getWds(docs)<br>{<br>    var words = new Array();<br>    var cmn = common();<br><br>    for (var i = 0; i < docs.length; i++)<br>    {<br>        var currWds = docs[i].split(' ');<br>        for (var j = 0; j < currWds.length; j++)<br>        {<br>            currWds[j] = currWds[j].replace(new RegExp('[^a-zA-Z0-9]'), '');<br><br>            currWds[j] = currWds[j].toLowerCase();<br>            if (currWds[j] != '' && words.indexOf(currWds[j]) == -1 && cmn.indexOf(currWds[j]) == -1)<br>            {<br>                words[words.length] = currWds[j];<br>            }<br>        }<br>    }<br>    <br>    return words;<br>}<br>";
fctns[79].title[3] = "Term Frequency-Inverse Document Frequency -  getWds";
fctns[79].src[4] = " tfidf(docs, words)<br>{<br>    var mtrx = new Array();<br>    var found = new Array();<br>    var sum = new Array();<br>    <br>    for (var i = 0; i < docs.length; i++)<br>    {<br>        mtrx[i] = new Array();<br>        found[i] = new Array();<br>        for (var j = 0; j < words.length; j++)<br>        {<br>            mtrx[i][j] = 0;<br>            found[i][j] = 0;<br>            var doc = docs[i].split(' ');<br>            for (var k = 0; k < doc.length; k++)<br>            {<br>                doc[k] = doc[k].replace(new RegExp('[^a-zA-Z0-9]'), '');<br><br>                doc[k] = doc[k].toLowerCase();<br>                if (doc[k] == words[j])<br>                {<br>                    mtrx[i][j] ++;<br>                    found[i][j] = 1;<br>                }<br>            }<br>        <br>            if (mtrx[i][j] != 0)<br>                mtrx[i][j] = mtrx[i][j];<br>        }<br>    }<br>    <br>    mtrx[docs.length] = new Array();<br>    <br>    for (var j = 0; j < words.length; j++)<br>    {<br>        sum[j] = 0;<br>        for (var i = 0; i < docs.length; i++)<br>        {<br>            sum[j] += found[i][j];<br>        }<br>        mtrx[docs.length][j] = sum[j];<br>    }<br>    <br>    for (var i = 0; i < docs.length; i++)<br>    {<br>        for (var j = 0; j < words.length; j++)<br>        {<br>            mtrx[i][j] = mtrx[i][j]*(Math.log(docs.length/(sum[j])));<br>        }<br>    }<br>    <br>    return mtrx;<br>}<br>";
fctns[79].title[4] = "Term Frequency-Inverse Document Frequency -  tfidf";
fctns[79].src[5] = " cosSim(row1, row2)<br>{<br>    var sum = 0;<br>    var norm1 = 0;<br>    var norm2 = 0;<br>    var sim = 0;<br>    <br>    for (var i = 0; i < row1.length; i++)<br>    {<br>        sum += row1[i]*row2[i];<br>    }<br>    <br>    for (var i = 0; i < row1.length; i++)<br>    {<br>        norm1 += row1[i]*row1[i];<br>        norm2 += row2[i]*row2[i];<br><br>    }<br>    <br>    norm1 = Math.sqrt(norm1);<br>    norm2 = Math.sqrt(norm2);<br>    <br>    sim = sum / (norm1 * norm2);<br>    <br>    return sim;<br>}<br>";
fctns[79].title[5] = "Term Frequency-Inverse Document Frequency -  cosSim";
fctns[79].src[6] = " maxHash(row)<br>{<br>    var max = 0;<br>    var maxLoc = 0;<br>    <br>    for (var i = 0; i < row.length; i++)<br>    {<br>        if (row[i] > max)<br>        {<br>            max = row[i];<br>            maxLoc = i;<br>        }<br>    }<br>    <br>    <br>    return maxLoc;<br>}<br>";
fctns[79].title[6] = "Term Frequency-Inverse Document Frequency -  maxHash";
fctns[79].src[7] = " meanHash(row)<br>{<br>    var mean = 0;<br>    var meanLoc = 0;<br>    var count = 0;<br>    <br>    for(var i = 0; i < row.length; i++)<br>    {<br>        if (row[i] > 0)<br>        {<br>            mean += i*row[i];<br>        }<br>    }<br>    <br>    return Math.round(mean);<br>}<br>";
fctns[79].title[7] = "Term Frequency-Inverse Document Frequency -  meanHash";
fctns[79].src[8] = " clearRect()<br>{<br>    var c = document.getElementById('myCanvas');<br>    var ctx = c.getContext('2d');<br><br>    ctx.fillStyle = '#c3c3c3';<br>    ctx.fillRect(0, 0, c.width, c.height);<br>    ctx.fill();<br>    <br>    return;<br>}<br>";
fctns[79].title[8] = "Term Frequency-Inverse Document Frequency -  clearRect";
fctns[79].src[9] = " EucDist(point1, point2)<br>{<br>    var i, j, sumSq = 0;<br><br>    if (point1.length != point2.length)<br>        return M;<br><br>    for (i = 0; i < point1.length; i++)<br>        sumSq += Math.pow(Math.abs(point1[i] - point2[i]), 2);<br><br>    return Math.sqrt(sumSq);<br>}<br>";
fctns[79].title[9] = "Term Frequency-Inverse Document Frequency -  EucDist";
fctns[79].src[10] = " dispPts(input)<br>{<br>    var i, c = document.getElementById('myCanvas');<br>    var ctx = c.getContext('2d');<br><br>    ctx.clearRect(0, 0, c.width, c.height);<br>    ctx.fillStyle='#000000';<br><br>    for (i = 0; i < input.length; i++)<br>    {<br>        ctx.beginPath();<br>        ctx.arc(input[i][0],c.height-input[i][1],5,0,Math.PI*2,true);<br>        ctx.closePath();<br>        ctx.fill();<br>//        alert('point ' + i + ': ' + input[i][0] + ', ' + input[i][1] + ' drawn.');<br>    }<br>}<br>";
fctns[79].title[10] = "Term Frequency-Inverse Document Frequency -  dispPts";
fctns[79].src[11] = " Kruskal(A, minVal)<br>{<br>    var B = new Array();<br>    for (var i = 0; i < A.length; i++)<br>    {<br>        B[i] = new Array();<br>        <br>        for (var j = 0; j < A.length; j++)<br>        {<br>            B[i][j] = A[i][j];<br>                 if (A[i][j] == 0)<br>                    A[i][j] = M;<br>        }<br>    }<br><br>    <br>    //Each node is initially in its own tree (lookup). <br>    var T = new Array();<br>    var lookup = new Array();<br>    for (var i = 0; i < A.length; i++)<br>    {<br>        T[i] = [i];<br>        lookup[i] = i;<br>    }<br>    <br><br>    var E = new Array();<br>    var sum = 0;<br>    var last = -1;<br>    var m;<br><br>    while (last > minVal || last == -1)<br>    {<br>        //First find the maximum weight edge. <br>        m = -1;<br><br>        for (var i = 0; i < A.length; i++)<br>        {<br>            for (var j = 0; j < i; j++)<br>            {<br>//                alert(A[i][j] + ' vs ' + minVal);<br>                if (A[i][j] > m && lookup[i] != lookup[j] && A[i][j] < M && A[i][j] > minVal)<br>                {<br>                    m = A[i][j];<br>                    u = i;<br>                    v = j;<br>                }<br>            }<br>        }<br>        <br>        if (m == -1)<br>            last = minVal;<br>        else<br>        {<br>            initLen = T[lookup[u]].length;<br>            initLook = lookup[u];<br>            for (var i = initLen - 1; i >= 0; i--)<br>            {<br>                T[lookup[v]][T[lookup[v]].length] = T[initLook][i];<br>                lookup[T[initLook][i]] = lookup[v];<br>            }<br>            E[E.length] = u;<br>            E[E.length] = v;<br>            last = A[u][v];<br>            A[u][v] = M;<br>            A[v][u] = M;<br>            sum += m;<br>        }<br>    }<br>    <br>    for (var i = 0; i < T.length; i++)<br>    {<br>        for (var j = 0; j < T[i].length; j++)<br>        {<br>            if (T[i][j] != i)<br>            {<br>                T[T[i][j]] = '';<br>            }<br>        }<br>    }<br><br>    E[E.length] = sum;<br><br>    for (var i = 0; i < A.length; i++)<br>    {<br>        for (var j = 0; j < A.length; j++)<br>        {<br>            A[i][j] = B[i][j];<br>        }<br>    }<br>    <br>    return T;<br>}<br>";
fctns[79].title[11] = "Term Frequency-Inverse Document Frequency -  Kruskal";
fctns[79].src[12] = " dispClusters(items, k, clusters, labels)<br>{<br>    var text = '<table>';<br>    var i, j;<br><br>    for (i = 0; i < clusters.length; i++)<br>    {<br>        text += '<tr><td width=150><b>Cluster ' + i + ':</b></td>';<br>        text += '<td width=150><b>(' + Math.round(clusters[i][0]*100)/100 + ', ' +<br>        Math.round(clusters[i][1]*100)/100 + ')</b></td>';<br>        for (j = 0; j < items.length; j++)<br>            if (labels[j] == i)<br>                text += '<td width=150>(' + items[j][0] + ', ' + items[j][1] + ')</td>';<br>        text += '</tr>';<br>    }<br><br>    text += '</table>';<br>    return text;<br>}<br>";
fctns[79].title[12] = "Term Frequency-Inverse Document Frequency -  dispClusters";
fctns[79].src[13] = " postProcess1(docs, words)<br>{<br>    var mtrx = tfidf(docs, words);<br>    var sim = new Array();<br>    var inp = new Array();<br>    var clusters = new Array();<br>    var labels = new Array();<br>    var list = new Array();<br>    maxNo = 25;<br>    <br>    var text = 'Relevant TF-IDF Matrix: <table>';<br>    text += '<tr>';<br>    <br>    for (var i1 = 0; i1 < words.length; i1++)<br>    {<br>        if (mtrx[mtrx.length-1][i1] > 1)<br>            text += '<td>' + words[i1] + '</td>';<br>    }<br>    <br>    text += '</tr>';<br>    <br>    for (var i1 = 0; i1 < mtrx.length-1; i1++)<br>    {<br>        text += '<tr>';<br>        for (var i2 = 0; i2 < mtrx[i1].length; i2++)<br>        {<br>            if (mtrx[mtrx.length-1][i2] > 1)<br>                text += '<td>' + Math.round(mtrx[i1][i2]*1000)/1000 + '</td>';<br>        }<br>        text += '</tr>';<br>    }<br>    <br>    text += '</table><br>';<br>    text += 'Similarity Matrix for Quotes: <table>';<br>    for (var i1 = 0; i1 < mtrx.length-1; i1++)<br>    {<br>        sim[i1] = new Array();<br>        text += '<tr>';<br>        for (var i2 = 0; i2 < mtrx.length-1; i2++)<br>        {<br>            sim[i1][i2] = cosSim(mtrx[i1], mtrx[i2]);<br>            text += '<td>' + Math.round(sim[i1][i2]*1000)/1000 + '</td>';<br>            if (list.indexOf(Math.round(sim[i1][i2]*1000)/1000) == -1 && Math.round(sim[i1][i2]*1000)/1000 != 0)<br>            {<br>                list[list.length] = Math.round(sim[i1][i2]*1000)/1000;<br>            }<br>        }<br>        text += '</tr>';<br>//        docHash[i1] = maxHash(mtrx[i1]);<br>    }<br>    <br>    list = sort(list);<br>    <br>    text += '</table>';<br><br>    var select = document.getElementById('values');<br>    select.options.length = 0;<br>    for (var i = 0; i < list.length; i++)<br>    {<br>        select.options[select.options.length] = new Option(list[i], list[i]);<br>    }<br>    select.options[select.options.length-1].selected = true;<br>    select.hidden = false;<br>    document.getElementById('dispSim').hidden = false;<br>    <br>//    labels = kruskal(mtrx);<br>//    text += 'Final Configuration:<br>';<br>//    text += dispClusters(mtrx, labels);<br>    document.getElementById('output').innerHTML = text;<br>    <br>    return sim;<br>}<br>";
fctns[79].title[13] = "Term Frequency-Inverse Document Frequency -  postProcess1";
fctns[79].src[14] = " sort(list)<br>{<br>    for (var i = 0; i < list.length; i++)<br>    {<br>        for (var j = i; j < list.length; j++)<br>        {<br>            if (list[i] < list[j])<br>            {<br>                var temp = list[i];<br>                list[i] = list[j];<br>                list[j] = temp;<br>            }<br>        }<br>    }<br>    <br>    return list;<br>}<br>";
fctns[79].title[14] = "Term Frequency-Inverse Document Frequency -  sort";
fctns[79].src[15] = " postProcess2(mtrx, minVal)<br>{<br>    document.getElementById('output').innerHTML = '';<br>    var labels = Kruskal(mtrx, minVal);<br>    var text = 'Final Configuration:<br>';<br>    var count = 1;<br>    for (var i = 0; i < labels.length; i++)<br>    {<br>        if (labels[i].length != 0)<br>        {<br>            text += 'Group ' + count + ') ';<br>            for (var j = 0; j < labels[i].length; j++)<br>            {<br>                text += (labels[i][j] + 1);<br>                if (j < labels[i].length - 1)<br>                {<br>                    text += ', ';<br>                }<br>            }<br>            text += '<br>';<br>            count++;<br>        }<br>    }<br>    document.getElementById('output').innerHTML += text;<br>}<br></scr" + "ipt>";
fctns[79].title[15] = "Term Frequency-Inverse Document Frequency -  postProcess2";
fctns[79].loc = "http://learninglover.com/examples.php?id=44";
fctns[80] = new Object();
fctns[80].src = new Array();
fctns[80].title = new Array();
fctns[80].src[0] = "<script id='sc1' type='text/javascript'>";
fctns[80].title[0] = "Text Summarization - styleTags";
fctns[80].src[1] = " summarize(text)<br>{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var paras = text.split('\n');<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sent = [];<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count = 0;<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < paras.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (paras[i].length > 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sent[i] = paras[i].split('. ');<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outdata.innerHTML = '<b>First Sentence Summary</b><br><br>';<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < paras.length; i++)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (paras[i].length > 1)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outdata.innerHTML += sent[i][0];<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;outdata.innerHTML += '. <br><br>';<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br> }<br> </scr" + "ipt> ";
fctns[80].title[1] = "Text Summarization -  summarize";
fctns[80].loc = "http://learninglover.com/examples.php?id=8";
fctns[81] = new Object();
fctns[81].src = new Array();
fctns[81].title = new Array();
fctns[81].src[0] = "<script type='text/javascript'>";
fctns[81].title[0] = "The Assignment Problem - styleTags";
fctns[81].src[1] = " indexOf(list, elmt)<br>{<br>    var loc = -1<br>    for (var i = 0; i < list.length && loc == -1; i++)<br>    {<br>        if (list[i] == elmt)<br>        loc = i;<br>    }<br>    return loc;<br>}<br>";
fctns[81].title[1] = "The Assignment Problem -  indexOf";
fctns[81].src[2] = " getData()<br>{<br>    var numPeople = Math.floor(Math.random()*4)+5;<br>    var prob = new Object();<br>    var text = '';<br>    prob.persons = new Array(numPeople);<br>    prob.jobs = new Array(numPeople);<br><br>    document.getElementById('B9').hidden = true;<br>    document.getElementById('B10').hidden = true;<br>    document.getElementById('B11').hidden = true;<br>//    document.getElementById('B12').hidden = true;<br><br>    text += '<table>';<br>    text += '<tr><td></td>';<br>    for (var i = 0; i < numPeople; i++)<br>    {<br>        text += '<td>Job ' + (i+1) + '</td>';<br>    }<br>    text += '</td>';<br>    <br>    for (var k = 0; k < numPeople; k++)<br>    {<br>        text += '<tr><td>Person ' + (k+1) + '</td>';<br>        prob.persons[k] = new Object();<br>        prob.persons[k].remPerson = k+1;<br>        prob.persons[k].asmt = -1;<br>        prob.persons[k].cost = new Array();<br>        for (var i = 0; i < numPeople; i++)<br>        {<br>            prob.persons[k].cost[i] = Math.floor(Math.random()*25)+1;<br>            text += '<td>' + prob.persons[k].cost[i] + '</td>';<br>        }<br>        text += '</tr>';<br>    }<br>    text += '</table>';<br>    <br>    document.getElementById('input').innerHTML += text;<br><br>    <br>    for (var i = 0; i < numPeople; i++)<br>    {<br>        prob.jobs[i] = new Object();<br>        prob.jobs[i].asmt = -1;<br>    }<br><br>    prob = setCaps(prob);<br>        <br>    var c = document.getElementById('stage1');<br>    var ctx = c.getContext('2d');<br>    ctx.fillStyle = '#000000';<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        prob.persons[k].yLoc = k*75+50;<br>        prob.persons[k].xLoc = (0 + c.width) / 5;<br>    }<br>    <br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        prob.jobs[i].yLoc = i*75+50;<br>        prob.jobs[i].xLoc = 4*(0 + c.width) / 5;<br>    }<br>    <br>    return prob;<br>}<br>";
fctns[81].title[2] = "The Assignment Problem -  getData";
fctns[81].src[3] = " dispAsmt(prob)<br>{<br>    var text = '';<br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        text += 'Person ' + k + ' is assigned to job ' + prob.persons[k].asmt + '<br>';<br>    }<br>    <br>    return text;<br>}<br>    ";
fctns[81].title[3] = "The Assignment Problem -  dispAsmt";
fctns[81].src[4] = " nwcInit(prob)<br>{<br>    var text = '';<br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        prob.persons[k].asmt = k;<br>        prob.jobs[k].asmt = k;<br>    }<br>    text += dispAsmt(prob);<br>    <br>    var primalcost = 0;<br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        primalcost += prob.persons[k].cost[prob.persons[k].asmt];<br>    }<br>    <br>    document.getElementById('output').innerHTML += text;<br>    document.getElementById('B9').hidden = false;<br>    document.getElementById('B12').hidden = false;<br>    document.getElementById('B13').hidden = true;<br>    prob = setCaps(prob);<br>    prob = setInitBasis(prob);<br>    document.getElementById('output').innerHTML += dispBasis(prob);<br>    drawStage1Sol(prob);<br>    <br>    return prob;<br>}<br>";
fctns[81].title[4] = "The Assignment Problem -  nwcInit";
fctns[81].src[5] = " minMtrxInit(prob)<br>{<br>    var text = '';<br>    var jobCap = new Array();<br>    var perCap = new Array();<br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        jobCap[k] = 1;<br>        perCap[k] = 1;<br>    }<br>    <br>    var numIter = prob.persons.length;<br>    <br>    var minVal;<br>    var minLocP;<br>    var minLocJ;<br>    <br>    for (var i = 0; i < numIter; i++)<br>    {<br>        minVal = 100000;<br>        minLocP = -1;<br>        minLocJ = -1;<br><br>        for (var k = 0; k < prob.persons.length; k++)<br>        {<br>            for (var j = 0; j < prob.jobs.length; j++)<br>            {<br>                if (prob.persons[k].cost[j] < minVal && jobCap[j] == 1 && perCap[k] == 1)<br>                {<br>                    minVal = prob.persons[k].cost[j];<br>                    minLocP = k;<br>                    minLocJ = j;<br>                }<br>            }<br>        }<br>        <br>        prob.persons[minLocP].asmt = minLocJ;<br>        prob.jobs[minLocJ].asmt = minLocP;<br>        jobCap[minLocJ]--;<br>        perCap[minLocP]--;<br>    }<br>    <br>    text += dispAsmt(prob);<br>    <br>    var primalcost = 0;<br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        primalcost += prob.persons[k].cost[prob.persons[k].asmt];<br>    }<br>    <br>    document.getElementById('output').innerHTML += text;<br>    document.getElementById('B9').hidden = false;<br>    document.getElementById('B10').hidden = true;<br>    document.getElementById('B11').hidden = true;<br>    document.getElementById('B12').hidden = false;<br>    document.getElementById('B13').hidden = true;<br>    <br>    prob = setCaps(prob);<br>    prob = setInitBasis(prob);<br>    document.getElementById('output').innerHTML += dispBasis(prob);<br>    drawStage1Sol(prob);<br>    <br>    return prob;<br>}<br>";
fctns[81].title[5] = "The Assignment Problem -  minMtrxInit";
fctns[81].src[6] = " solveDualStage1(prob)<br>{<br>/*<br>    First we must initialize the basis. These will always be in <br>    (flight, slot) pairs, where flight is the location of the flight<br>    in the array of flights and slot is the location of the slot in the<br>    array of slots (NOT the slot time). <br>*/<br>    var text = '';<br>    <br>//    text += dispBasis(prob);<br><br>    var queue = new Array();<br>    var curr = 0;<br>    queue[curr] = prob.basis[prob.basis.length-1][0] + '-P';<br>    prob.persons[prob.basis[prob.basis.length-1][0]].uVar = 0;<br>    while (curr < 2*prob.persons.length-1)<br>    {<br>        var temp = queue[curr].split('-');<br>        if (temp[1] == 'P')<br>        {<br>            for (var iter = 0; iter < prob.basis.length; iter++)<br>            {<br>                if (prob.basis[iter][0] == temp[0])<br>                {<br>                    if (indexOf(queue, prob.basis[iter][1] + '-J') == -1)<br>                    {<br>                        queue[queue.length] = prob.basis[iter][1] + '-J';<br>                        prob.jobs[prob.basis[iter][1]].vVar = eval(prob.persons[temp[0]].cost[prob.basis[iter][1]] - prob.persons[temp[0]].uVar);<br>                    }<br>                }<br>            }<br>        }<br>        else<br>        {<br>            for (var iter = 0; iter < prob.basis.length; iter++)<br>            {<br>                if (prob.basis[iter][1] == temp[0])<br>                {<br>                    if (indexOf(queue, prob.basis[iter][0] + '-P') == -1)<br>                    {<br>                        queue[queue.length] = prob.basis[iter][0] + '-P';<br>                        prob.persons[prob.basis[iter][0]].uVar = eval(prob.persons[prob.basis[iter][0]].cost[temp[0]] - prob.jobs[temp[0]].vVar);<br>                    }<br>                }<br>            }<br>        }<br>        <br>        curr++;<br>    }<br>    <br>    //Now we have the dual variables for the basis. <br>    <br>    text += 'This process gives the following dual variables: <br>';<br>        <br>    //This should be put into a function dispStage1Dual(prob)<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        text += 'u<sub>' + k + '</sub> = ' + prob.persons[k].uVar.toFixed(3) + '<br>';<br>    }<br>    <br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        text += 'v<sub>' + i + '</sub> = ' + prob.jobs[i].vVar.toFixed(3) + '<br>';<br>    }<br>    <br>    //End of should be function.     <br><br>    document.getElementById('output').innerHTML += text;<br>    drawStage1Basis(prob);<br>    document.getElementById('B9').hidden = false;<br>    document.getElementById('B10').hidden = false;<br>    document.getElementById('B11').hidden = true;<br>    document.getElementById('B12').hidden = false;<br>    document.getElementById('B13').hidden = false;<br>    <br>    return prob;<br>}<br>";
fctns[81].title[6] = "The Assignment Problem -  solveDualStage1";
fctns[81].src[7] = " pivot(prob)<br>{        <br>    var text = '';<br>    if (!prob.feasible)<br>    {<br>        text += 'We have violated the constraint: <br>';<br>        text += 'u<sub>' + prob.newPer + '</sub> + v<sub>' + prob.newJob + '</sub> <= ' + prob.rhs.toFixed(3) + '<br>';<br>        text += 'So we will add the corresponding edge to the basis and remove another arc. <br>';<br>        var queue = new Array();<br>        var parent = new Array();<br>        var curr = 0;<br>        queue[curr] = prob.newPer + '-P';<br>        parent[curr] = -1;<br>        var found = false;<br>        while (!found)<br>        {<br>            text += curr + ') queue = ' + queue + ' - ' + queue.length + '<br>';<br>            text += curr + ') parent = ' + parent + ' - ' + parent.length + '<br>';<br>            var temp = queue[curr].split('-');<br>            for (var iter = 0; iter < prob.basis.length && !found; iter++)<br>            {<br>                if (temp[1] == 'P' && prob.basis[iter][0] == temp[0])<br>                {<br>                    if (indexOf(queue, prob.basis[iter][1] + '-J') == -1)<br>                    {<br>                        queue[queue.length] = prob.basis[iter][1] + '-J';<br>                        if (parent[curr] != -1)<br>                            parent[parent.length] = parent[curr] + '->' + curr;<br>                        else<br>                            parent[parent.length] = curr;<br>                        if (prob.basis[iter][1] == prob.newJob)<br>                        {<br>                            found = true;<br>                        }<br>                    }<br>                }<br>                else if (temp[1] == 'J' && prob.basis[iter][1] == temp[0])<br>                {<br>                    if (indexOf(queue, prob.basis[iter][0] + '-P') == -1)<br>                    {<br>                        queue[queue.length] = prob.basis[iter][0] + '-P';<br>                        if (parent[curr] != -1)<br>                            parent[parent.length] = parent[curr] + '->' + curr;<br>                        else<br>                            parent[parent.length] = curr;<br>                    }<br>                }<br>            }<br>            curr++;<br>        }<br>        curr--;<br>        <br>        text += 'The path from ' + prob.newPer + ' to ' + prob.newJob + ' that already exists in our basis is: <br>';<br>        <br>        var path = parent[parent.length-1].split('->');<br>        var edges = new Array();<br>        for (var i = 0; i < path.length; i++)<br>        {<br>            edges[i] = new Array();<br>            if (i < path.length - 1 && i % 2 == 0)<br>            {<br>                edges[i][0] = queue[path[i]].split('-')[0];<br>                edges[i][1] = queue[path[i+1]].split('-')[0];<br>                text += 'edges[' + i + '] = ' + edges[i][0] + ', ' + edges[i][1] + '<br>';<br>            }<br>            else if (i < path.length - 1 && i % 2 == 1)<br>            {<br>                edges[i][1] = queue[path[i]].split('-')[0];<br>                edges[i][0] = queue[path[i+1]].split('-')[0];<br>                text += 'edges[' + i + '] = ' + edges[i][0] + ', ' + edges[i][1] + '<br>';<br>            }<br>            else<br>            {<br>                edges[i][0] = queue[path[i]].split('-')[0];<br>                edges[i][1] = queue[queue.length-1].split('-')[0];<br>                text += 'edges[' + i + '] = ' + edges[i][0] + ', ' + edges[i][1] + '<br>';<br>            }<br>        }<br>        <br>        var degen = false;<br>        for (var iter_1 = 0; iter_1 < edges.length && !degen; iter_1 += 2)<br>        {<br>            if (prob.persons[edges[iter_1][0]].asmt != edges[iter_1][1])<br>            {<br>                degen = true;<br>            }<br>        }<br>        <br>        if (!degen)<br>        {<br>            text += 'This solution is NOT degenerate<br>';<br>            var newBasis = new Array();<br>            newBasis[0] = new Array();<br>            newBasis[0][0] = prob.newPer;<br>            newBasis[0][1] = prob.newJob;<br>        <br>            for (var iter_1 = 1; iter_1 < edges.length; iter_1 += 2)<br>            {<br>                var loc = newBasis.length;<br>                newBasis[loc] = new Array();<br>                newBasis[loc][0] = edges[iter_1][0];<br>                newBasis[loc][1] = edges[iter_1][1];<br>            }<br>            <br>            for (var iter_0 = 0; iter_0 < newBasis.length; iter_0++)<br>            {<br>                prob.persons[newBasis[iter_0][0]].asmt = newBasis[iter_0][1];<br>                prob.jobs[newBasis[iter_0][1]].asmt = newBasis[iter_0][0];<br>            }<br>            <br>            for (var iter_0 = 0; iter_0 < prob.basis.length; iter_0++)<br>            {<br>                var found = false;<br>                for (var iter_1 = 0; iter_1 < newBasis.length && !false; iter_1++)<br>                {<br>                    if (newBasis[iter_1][0] == prob.basis[iter_0][0] && newBasis[iter_1][1] == prob.basis[iter_0][1])<br>                    {<br>                        found = true;<br>                    }<br>                }<br>                if (!found && (prob.basis[iter_0][0] != edges[0][0] || prob.basis[iter_0][1] != edges[0][1]))<br>                {<br>                    var loc = newBasis.length;<br>                    newBasis[loc] = new Array();<br>                    newBasis[loc][0] = prob.basis[iter_0][0];<br>                    newBasis[loc][1] = prob.basis[iter_0][1];<br>                }<br>            }<br>        }<br>        else<br>        {<br>            text += 'This solution is degenerate<br>';<br>            var newBasis = new Array();<br>            newBasis[0] = new Array();<br>            newBasis[0][0] = prob.newPer;<br>            newBasis[0][1] = prob.newJob;<br>            <br>            for (var iter_1 = 1; iter_1 < edges.length; iter_1++)<br>            {<br>                var loc = newBasis.length;<br>                newBasis[loc] = new Array();<br>                newBasis[loc][0] = edges[iter_1][0];<br>                newBasis[loc][1] = edges[iter_1][1];<br>            }<br>            <br>            for (var iter_0 = 0; iter_0 < prob.basis.length; iter_0++)<br>            {<br>                var found = false;<br>                for (var iter_1 = 0; iter_1 < newBasis.length && !false; iter_1++)<br>                {<br>                    if (newBasis[iter_1][0] == prob.basis[iter_0][0] && newBasis[iter_1][1] == prob.basis[iter_0][1])<br>                    {<br>                        found = true;<br>                    }<br>                }<br>                if (!found && (prob.basis[iter_0][0] != edges[0][0] || prob.basis[iter_0][1] != edges[0][1]))<br>                {<br>                    var loc = newBasis.length;<br>                    newBasis[loc] = new Array();<br>                    newBasis[loc][0] = prob.basis[iter_0][0];<br>                    newBasis[loc][1] = prob.basis[iter_0][1];<br>                }<br>            }<br>        }<br>        <br>        for (var iter_1 = 0; iter_1 < newBasis.length; iter_1++)<br>        {<br>            if (prob.persons[newBasis[iter_1][0]].asmt == newBasis[iter_1][1])<br>            {<br>                text += '<b>newBasis(' + iter_1 + ') = (' + newBasis[iter_1][0] + ', ' + newBasis[iter_1][1] + ')</b><br>';<br>            }<br>            else<br>            {<br>                text += 'newBasis(' + iter_1 + ') = (' + newBasis[iter_1][0] + ', ' + newBasis[iter_1][1] + ')<br>';<br>            }<br>        }<br>        <br>        prob.basis = new Array();<br>        <br>        for (var iter = 0; iter < newBasis.length; iter++)<br>        {<br>            prob.basis[iter] = new Array();<br>            prob.basis[iter][0] = newBasis[iter][0];<br>            prob.basis[iter][1] = newBasis[iter][1];<br>        }<br><br>        text += dispBasis(prob);<br>        resetCanvas(prob);<br>        drawStage1Sol(prob);<br>        <br>//        document.getElementById('B9').hidden = true;<br>        document.getElementById('B10').hidden = true;<br>        document.getElementById('B11').hidden = true;<br>        document.getElementById('B12').hidden = false;<br>        document.getElementById('B13').hidden = true;<br>        <br>        document.getElementById('output').innerHTML += text;<br>        <br>    }<br>    <br>    return prob;<br>}<br>";
fctns[81].title[7] = "The Assignment Problem -  pivot";
fctns[81].src[8] = " primalObj(prob)<br>{<br>    var primalcost = 0;<br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        primalcost += prob.persons[k].cost[prob.persons[k].asmt];<br>    }<br><br>    return primalcost;<br>}<br>";
fctns[81].title[8] = "The Assignment Problem -  primalObj";
fctns[81].src[9] = " dualObj(prob)<br>{<br>    prob = setCaps(prob);<br>    <br>    var dualcost = 0;<br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        dualcost += prob.persons[k].uVar;<br>    }<br>    <br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        dualcost += prob.jobs[i].vVar;<br>    }<br>    <br>    return dualcost;<br>}<br>";
fctns[81].title[9] = "The Assignment Problem -  dualObj";
fctns[81].src[10] = " testStage1(prob)<br>{    <br>    var text = '';<br>    prob.feas = true;<br>    prob.newPer = -1;<br>    prob.newJob = -1;<br>    prob.rhs = -1;<br>    for (var k = 0; k < prob.persons.length && prob.feas; k++)<br>    {<br>        for (var i = 0; i < prob.jobs.length && prob.feas; i++)<br>        {<br>            var found = false;<br>            for (var iter = 0; iter < prob.basis.length; iter++)<br>            {<br>                if (prob.basis[iter][0] == k && prob.basis[iter][1] == i)<br>                {<br>                    found = true;<br>                }<br>            }<br>            if (!found)<br>            {<br>                if (eval(prob.persons[k].uVar + prob.jobs[i].vVar - prob.persons[k].cost[i]) > 0.0000001)  <br>                {<br>                    text += 'The following constraint is violated by this solution<br>';<br>                    text += 'u<sub>' + k + '</sub> + v<sub>' + i + '</sub> <= ' + eval(prob.persons[k].cost[i]) + '<br>';<br>                    text += prob.persons[k].uVar.toFixed(3) + ' + ' + prob.jobs[i].vVar.toFixed(3) + ' <= ' +  eval(prob.persons[k].cost[i]) + '<br>';<br>                    text += eval(prob.persons[k].uVar + prob.jobs[i].vVar).toFixed(3) + ' <= ' + eval(prob.persons[k].cost[i]) + '<br>';<br><br>                    prob.feas = false;<br>                    prob.newPer = k;<br>                    prob.newJob = i;<br>                    prob.rhs = prob.persons[k].cost[i];<br>                    <br>                    drawStage1Infeas(prob);<br>                }<br>            }<br>        }<br>    }<br>    <br>    if (prob.feas)<br>    {<br>        text += 'We did not find any dual constraints violated, so this solution is optimal.<br>';<br>    }<br>    else<br>    {<br>        document.getElementById('B11').hidden = false;<br>    }<br>    <br>    document.getElementById('output').innerHTML += text;<br>        <br>    return prob;<br>}<br>";
fctns[81].title[10] = "The Assignment Problem -  testStage1";
fctns[81].src[11] = " buildLP(prob)<br>{<br>    var text = '';<br>    text += 'Objective Function: <br>';<br>    text += 'minimize ';<br><br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        for (var i = 0; i < prob.jobs.length; i++)<br>        {<br>            text +=  prob.persons[k].cost[i] + ' * w<sub>' + k + ', ' + i + ', ' + j + ', ' + t + '</sub> + ';<br>        }<br>    }<br>    text = text.substring(0, text.length-3);<br>    text += '<br><br>Subject to: <br><br>';<br>    var count = 0;<br><br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        for (var i = 0; i < prob.jobs.length; i++)<br>        {<br>            text += 'x<sub>' + k + ', ' + i + '</sub> + ';<br>            count++;<br>        }<br>        text = text.substring(0, text.length-3);<br>        text += ' = 1<br>';<br>    }<br>    <br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        for (var k = 0; k < prob.persons.length; k++)<br>        {<br>            text += 'x<sub>' + k + ', ' + i + '</sub> + ';<br>        }<br>    }<br>    <br>    document.getElementById('output').innerHTML += text;<br>}<br>";
fctns[81].title[11] = "The Assignment Problem -  buildLP";
fctns[81].src[12] = " setInitBasis(prob)<br>{<br>    prob.basis = new Array();<br>    for (var k = 0; k < prob.persons.length-1; k++)<br>    {<br>        var loc = prob.basis.length;<br>        prob.basis[loc] = new Array();<br>        prob.basis[loc][0] = k;<br>        prob.basis[loc][1] = prob.persons[k].asmt;<br>        <br>        loc++;<br>        prob.basis[loc] = new Array();<br>        var found = false;<br>        for (var k2 = k+1; k2 < prob.persons.length && !found; k2++)<br>        {<br>            prob.basis[loc][0] = k;<br>            prob.basis[loc][1] = prob.persons[k2].asmt;<br>            found = true;<br>        }<br>        if (!found)<br>        {<br>            prob.basis[loc][0] = k;<br>            found = false;<br>            var loc2 = -1;<br>            for (var i = 0; i < prob.jobs.length && !found; i++)<br>            {<br>                found = true;<br>                loc2 = i;<br>            }<br>            prob.basis[loc][1] = loc2;<br>        }<br>    }<br>    <br>    var loc = prob.basis.length;<br>    prob.basis[loc] = new Array();<br>    prob.basis[loc][0] = k;<br>    prob.basis[loc][1] = prob.jobs[k].asmt;<br>    <br>    return prob;<br>}<br>";
fctns[81].title[12] = "The Assignment Problem -  setInitBasis";
fctns[81].src[13] = " dispBasis(prob)<br>{<br>    var text = '';<br>    for (var init = 0; init < prob.basis.length; init++)<br>    {<br>        if (prob.persons[prob.basis[init][0]].asmt == prob.basis[init][1])<br>        {<br>            text += '<b>(' + prob.basis[init][0] + ', ' + prob.basis[init][1] + ')</b><br>';<br>        }<br>        else<br>        {<br>            text += '(' + prob.basis[init][0] + ', ' + prob.basis[init][1] + ')<br>';<br>        }<br>    }<br>    return text;<br>}<br>";
fctns[81].title[13] = "The Assignment Problem -  dispBasis";
fctns[81].src[14] = " setCaps(prob)<br>{<br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        prob.jobs[i].initCap = 1<br>    }<br>    return prob;<br>}<br>";
fctns[81].title[14] = "The Assignment Problem -  setCaps";
fctns[81].src[15] = " resetBoard()<br>{<br>    document.getElementById('input').innerHTML='';<br>    document.getElementById('output').innerHTML='';<br>    resetCanvas(prob);<br>    drawStage1(prob);<br>    drawStage2(prob);<br>}<br>";
fctns[81].title[15] = "The Assignment Problem -  resetBoard";
fctns[81].src[16] = " drawStage1(prob)<br>{<br>    var c = document.getElementById('stage1');<br>    var ctx = c.getContext('2d');<br>    ctx.fillStyle = '#000000';<br>    <br>    ctx.fillText('People', (0 + c.width) / 5 - 30, 20);<br>    ctx.fillText('Jobs', 4*(0 + c.width) / 5, 20);<br><br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        if ((k+1) != 0)<br>            ctx.fillText((k+1), prob.persons[k].xLoc-3*(Math.floor(Math.log(k+1)/Math.log(10))+1), prob.persons[k].yLoc+4);<br>        else<br>            ctx.fillText((k+1), prob.persons[k].xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), prob.persons[k].yLoc+4);<br>    }<br>    <br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        if (prob.jobs[i].initCap > 0)<br>        {<br>            if ((i+1) != 0)<br>                ctx.fillText((i+1), prob.jobs[i].xLoc-3*(Math.floor(Math.log(i+1)/Math.log(10))+1), prob.jobs[i].yLoc+4);<br>            else<br>                ctx.fillText((i+1), prob.jobs[i].xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), prob.jobs[i].yLoc+4);<br>        }<br>    }<br>    <br>    ctx.strokeStyle = '#FF00FF';<br>    ctx.lineWidth = 1;<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        for (var i = 0; i < prob.jobs.length; i++)<br>        {<br>            ctx.beginPath();<br>            ctx.moveTo(prob.persons[k].xLoc + 10, prob.persons[k].yLoc);<br>            ctx.lineTo(prob.jobs[i].xLoc - 10, prob.jobs[i].yLoc);<br>            ctx.stroke();<br>        }<br>    }<br>    <br>    document.getElementById('stage1').focus();<br>}<br>";
fctns[81].title[16] = "The Assignment Problem -  drawStage1";
fctns[81].src[17] = " drawStage1Sol(prob)<br>{<br>    resetCanvas(prob);<br>    var c = document.getElementById('stage1');<br>    var ctx = c.getContext('2d');<br>    <br>    ctx.fillStyle = '#FFFFFF';<br>    ctx.fillRect(0, 0, c.width, c.height);<br>    ctx.fill();<br>    ctx.fillStyle = '#000000';<br>    <br>    ctx.fillText('People', (0 + c.width) / 5 - 30, 20);<br>    ctx.fillText('Jobs', 4*(0 + c.width) / 5, 20);<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        if (k+1 != 0)<br>            ctx.fillText((k+1), prob.persons[k].xLoc-3*(Math.floor(Math.log(k+1)/Math.log(10))+1), prob.persons[k].yLoc+4);<br>        else<br>            ctx.fillText((k+1), prob.persons[k].xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), prob.persons[k].yLoc+4);<br>    }<br>    <br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        if ((i+1) != 0)<br>            ctx.fillText((i+1), prob.jobs[i].xLoc-3*(Math.floor(Math.log(i+1)/Math.log(10))+1), prob.jobs[i].yLoc+4);<br>        else<br>            ctx.fillText((i+1), prob.jobs[i].xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), prob.jobs[i].yLoc+4);<br>    }<br>        <br>    ctx.font = '8pt Calibri';<br>        <br>    ctx.font = '8pt Calibri';<br>    ctx.strokeStyle = '#C0C0C0';<br>    ctx.lineWidth = 1;<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        for (var i = 0; i < prob.jobs.length; i++)<br>        {<br>            ctx.beginPath();<br>            ctx.moveTo(prob.persons[k].xLoc + 10, prob.persons[k].yLoc);<br>            ctx.lineTo(prob.jobs[i].xLoc - 10, prob.jobs[i].yLoc);<br>            ctx.stroke();<br>        }<br>    }<br>    <br>    ctx.strokeStyle = '#0000FF';<br>    ctx.lineWidth = 2;<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        ctx.beginPath();<br>        ctx.moveTo(prob.persons[k].xLoc + 10, prob.persons[k].yLoc);<br>        ctx.lineTo(prob.jobs[prob.persons[k].asmt].xLoc - 10, prob.jobs[prob.persons[k].asmt].yLoc);<br>        ctx.stroke();<br>    }<br>    <br>    ctx.strokeStyle = '#00FFFF';<br>    ctx.lineWidth = 1;<br>    <br>    for (var iter = 0; iter < prob.basis.length; iter++)<br>    {<br>        if (prob.persons[prob.basis[iter][0]].asmt != prob.basis[iter][1])<br>        {<br>            ctx.beginPath();<br>            ctx.moveTo(prob.persons[prob.basis[iter][0]].xLoc + 10, prob.persons[prob.basis[iter][0]].yLoc);<br>            ctx.lineTo(prob.jobs[prob.basis[iter][1]].xLoc - 10, prob.jobs[prob.basis[iter][1]].yLoc);<br>            ctx.stroke();<br>        }<br>    }<br>    <br>    document.getElementById('stage1').focus();<br>}<br>";
fctns[81].title[17] = "The Assignment Problem -  drawStage1Sol";
fctns[81].src[18] = " drawStage1Basis(prob)<br>{<br>    var c = document.getElementById('stage1');<br>    var ctx = c.getContext('2d');<br>    <br>    ctx.fillStyle = '#FFFFFF';<br>    ctx.fillRect(0, 0, c.width, c.height);<br>    ctx.fill();<br>    ctx.fillStyle = '#000000';<br>    <br>    ctx.fillText('People', (0 + c.width) / 5 - 30, 20);<br>    ctx.fillText('Jobs', 4*(0 + c.width) / 5, 20);<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        if (k+1 != 0)<br>            ctx.fillText((k+1), prob.persons[k].xLoc-3*(Math.floor(Math.log(k+1)/Math.log(10))+1), prob.persons[k].yLoc+4);<br>        else<br>            ctx.fillText((k+1), prob.persons[k].xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), prob.persons[k].yLoc+4);<br>    }<br>    <br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        if ((i+1) != 0)<br>            ctx.fillText((i+1), prob.jobs[i].xLoc-3*(Math.floor(Math.log(i+1)/Math.log(10))+1), prob.jobs[i].yLoc+4);<br>        else<br>            ctx.fillText((i+1), prob.jobs[i].xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), prob.jobs[i].yLoc+4);<br>    }<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        ctx.font = '6pt Calibri';<br>        ctx.fillStyle = '#0000FF';<br>        ctx.fillText(prob.persons[k].uVar.toFixed(2), prob.persons[k].xLoc - 35, prob.persons[k].yLoc+4);<br>    }<br>    <br>    ctx.font = '8pt Calibri';<br>    <br>    for (var i = 0; i < prob.jobs.length; i++)<br>    {<br>        ctx.font = '6pt Calibri';<br>        ctx.fillStyle = '#0000FF';<br>        ctx.fillText(prob.jobs[i].vVar.toFixed(2), prob.jobs[i].xLoc + 25, prob.jobs[i].yLoc+4);<br>    }<br>    <br>    ctx.font = '8pt Calibri';<br>    ctx.strokeStyle = '#C0C0C0';<br>    ctx.lineWidth = 1;<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        for (var i = 0; i < prob.jobs.length; i++)<br>        {<br>            ctx.beginPath();<br>            ctx.moveTo(prob.persons[k].xLoc + 10, prob.persons[k].yLoc);<br>            ctx.lineTo(prob.jobs[i].xLoc - 10, prob.jobs[i].yLoc);<br>            ctx.stroke();<br>        }<br>    }<br>    <br>    ctx.strokeStyle = '#0000FF';<br>    ctx.lineWidth = 2;<br>    <br>    for (var k = 0; k < prob.persons.length; k++)<br>    {<br>        ctx.beginPath();<br>        ctx.moveTo(prob.persons[k].xLoc + 10, prob.persons[k].yLoc);<br>        ctx.lineTo(prob.jobs[prob.persons[k].asmt].xLoc - 10, prob.jobs[prob.persons[k].asmt].yLoc);<br>        ctx.stroke();<br>    }<br>    <br>    ctx.strokeStyle = '#00FFFF';<br>    ctx.lineWidth = 1;<br>    <br>    for (var iter = 0; iter < prob.basis.length; iter++)<br>    {<br>        if (prob.persons[prob.basis[iter][0]].asmt != prob.basis[iter][1])<br>        {<br>            ctx.beginPath();<br>            ctx.moveTo(prob.persons[prob.basis[iter][0]].xLoc + 10, prob.persons[prob.basis[iter][0]].yLoc);<br>            ctx.lineTo(prob.jobs[prob.basis[iter][1]].xLoc - 10, prob.jobs[prob.basis[iter][1]].yLoc);<br>            ctx.stroke();<br>        }<br>    }<br>    <br>    document.getElementById('stage1').focus();<br>}<br>";
fctns[81].title[18] = "The Assignment Problem -  drawStage1Basis";
fctns[81].src[19] = " drawStage1Infeas(prob)<br>{<br>    if (!prob.feas)<br>    {<br>        var c = document.getElementById('stage1');<br>        var ctx = c.getContext('2d');<br>        <br>        ctx.strokeStyle = '#FF0000';<br>        ctx.beginPath();<br>        ctx.moveTo(prob.persons[prob.newPer].xLoc + 10, prob.persons[prob.newPer].yLoc);<br>        ctx.lineTo(prob.jobs[prob.newJob].xLoc - 10, prob.jobs[prob.newJob].yLoc);<br>        ctx.stroke();<br>    }<br>    <br>    document.getElementById('stage1').focus();<br>}<br>";
fctns[81].title[19] = "The Assignment Problem -  drawStage1Infeas";
fctns[81].src[20] = " resetCanvas(prob)<br>{<br>    var c = document.getElementById('stage1');<br>    var ctx = c.getContext('2d');<br>    ctx.fillStyle = '#FFFFFF';<br>    ctx.fillRect(0, 0, c.width, c.height);<br>    ctx.fill();<br>}<br><br></scr" + "ipt>";
fctns[81].title[20] = "The Assignment Problem -  resetCanvas";
fctns[81].loc = "http://learninglover.com/examples.php?id=54";
fctns[82] = new Object();
fctns[82].src = new Array();
fctns[82].title = new Array();
fctns[82].src[0] = "<style type='text/css'><br>.chidd<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px solid black;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: 0px;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hidden;<br>}<br><br>.csum<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px solid black;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: 0px;<br>}<br><br>.cleft <br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px solid black;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: 0px;<br>}<br><br>.cright<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text-align: center; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px solid black;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;padding: 0px;<br>}<br></style><br><script type='text/javascript'>";
fctns[82].title[0] = "The Bridge Crossing Problem - styleTags";
fctns[82].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 1; j <= 60; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[j-1] = j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < size; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*rem.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j] = rem[loc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left = sort(left);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table><tr><td>Yet to Cross</td><td>Bridge</td><td>Already Crossed</td><td>Sum</td><td>Light</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += display(left, right, move);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>}<br>";
fctns[82].title[1] = "The Bridge Crossing Problem -  generate";
fctns[82].src[2] = " display(left, right, move)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<tr><td><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < left.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 4 == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td name='0-' + move + '-' + i + '' id='0-' + move + '-' + i + ''';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move % 2 == 0 && move >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' onclick='changeColor(0, ' + i + ', ' + move + ')'';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '><div class='cleft' id='c-0-' + move + '-' + i + ''>' + left[i] + '</div></td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 4 == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table></td><td>==========</td><td><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < right.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 4 == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td name='1-' + move + '-' + i + '' id='1-' + move + '-' + i + ''';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move % 2 == 1 && move >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ' onclick='changeColor(1, ' + i + ', ' + move + ')'';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '><div class='cright' id='c-1-' + move + '-' + i + ''>' + right[i] + '</div></td>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 4 == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table></td><td>' + totalCost + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move % 2 == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>L</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>R</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[82].title[2] = "The Bridge Crossing Problem -  display";
fctns[82].src[3] = " process()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = document.getElementById('queue').innerHTML.split(',');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var max = -1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (queue.length > 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert ('You are trying to let too many pepole cross at once.  Please try again');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cost = parseInt(document.getElementById('c-' + queue[i]).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cost > max)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = cost;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move % 2 == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < left.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (left[j] == cost)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[j] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right[right.length] = cost;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < right.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (right[j] == cost)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right[j] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left[left.length] = cost;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += max;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left = sort(left);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right = sort(right);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move % 2 == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;left.length--<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;right.length--<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;move++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = document.getElementById('output').innerHTML;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output = output.substring(0, output.length-8);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(left, right, move);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;<br>}<br>";
fctns[82].title[3] = "The Bridge Crossing Problem -  process";
fctns[82].src[4] = " sort(arr)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < arr.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var k = j+1; k < arr.length; k++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arr[j] > arr[k])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = arr[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[j] = arr[k];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[k] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>  <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arr;<br>}<br>";
fctns[82].title[4] = "The Bridge Crossing Problem -  sort";
fctns[82].src[5] = " changeColor(side, id, mve)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = side + '-' + mve + '-' + id;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (move != mve)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById('c-' + loc).style.background == '#FF0000' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c-' + loc).style.background == 'rgb(255, 0, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c-' + loc).style.background == 'none repeat scroll 0% 0% rgb(255, 0, 0)')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c-' + loc).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = document.getElementById('queue').innerHTML.split(',');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < queue.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (queue[i] == loc || queue[i] == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[i] = queue[queue.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = queue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c-' + loc).style.background = '#FF0000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var queue = document.getElementById('queue').innerHTML.split(',');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (queue.length == 1 && queue[0] == '')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[0] = loc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;queue[queue.length] = loc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('queue').innerHTML = queue;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[82].title[5] = "The Bridge Crossing Problem -  changeColor";
fctns[82].src[6] = " updateCurr(row, clm)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rsum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var csum = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var currLoc = size + 1;<br><br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document.getElementById('solved').innerHTML += 'row = ' + row + '<br>clm = ' + clm + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i <= size; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById('solved').innerHTML += 'csum = ' + csum + '<br>rsum = ' + rsum + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;csum += parseInt(document.getElementById('c' + row + '-' + i).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rsum += parseInt(document.getElementById('c' + i + '-' + clm).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + row + '-' + currLoc).innerHTML = csum;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c' + currLoc + '-' + clm).innerHTML = rsum;<br>}<br>";
fctns[82].title[6] = "The Bridge Crossing Problem -  updateCurr";
fctns[82].src[7] = " setDim()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sel = document.getElementById('dim');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 3; i <= 10; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[sel.options.length] = new Option(i + ' People', i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sel.options[1].selected = true;<br>}<br>";
fctns[82].title[7] = "The Bridge Crossing Problem -  setDim";
fctns[82].src[8] = " checkProg()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = document.getElementById('dim').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = totalCost;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var opt = solve(false);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans > opt)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Your solution is not the most efficient');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (left.length > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You still have ' + left.length + ' people who need to cross');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Your Solution Is Optimal!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[82].title[8] = "The Bridge Crossing Problem -  checkProg";
fctns[82].src[9] = " solve(show)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var origL = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var origR = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < left.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[i] = parseInt(left[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < right.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[origL.length] = parseInt(right[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var size = origL.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var steps = -2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '<table><tr><td>Yet to Cross</td><td>Bridge</td><td>Already Crossed</td><td>Sum</td><td>Light</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost = 0;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = origL.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (size == 2)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[0]; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[1] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL.length -= 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (size == 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[1] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL.length -= 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[origL.length] = origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[0] = origL[origL.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[1] = origL[origL.length-2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL.length -= 2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (size >= 4)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (origL[0] + 2*origL[1] + origL[origL.length-1] < 2*origL[0] + origL[origL.length-2] + origL[origL.length-1])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[1] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL.length -= 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[origL.length] = origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[origL.length-2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[origL.length-1];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[origL.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL.length -= 2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[origL.length] = origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[origL.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[origL.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[origL.length-1] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL.length -= 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[origL.length] = origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[origR.length] = origL[origL.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origL[origL.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[0] = Number.MAX_VALUE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[origL.length-1] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL.length -= 2;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL[origL.length] = origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalCost += origR[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR[0] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR = sort(origR);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origR.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origL = sort(origL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += display(origL, origR, steps);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;steps--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}while (origL.length > 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (show)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return totalCost;<br>}<br></scr" + "ipt>";
fctns[82].title[9] = "The Bridge Crossing Problem -  solve";
fctns[82].loc = "http://learninglover.com/examples.php?id=81";
fctns[83] = new Object();
fctns[83].src = new Array();
fctns[83].title = new Array();
fctns[83].src[0] = "<meta name='author' content='AfterMath' /><br><link rel='stylesheet' type='text/css' href='style.css' media='screen' /><br><meta name='keywords' content='algorithm, computer science, greedy, JavaScript, clique, math, operations research, programming, backtracking, puzzle' /><br><meta name='description' content='' /><br><title>Topological Sort Problems at LEARNINGlover.com</title><br><style type='text/css'><br>.c {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.rbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white-space:nowrap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.cbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>p<br>{<br>        display: inline;<br>}<br></style><br><script type='text/javascript'>";
fctns[83].title[0] = "Topological Sort - styleTags";
fctns[83].src[1] = " generateDAG()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numNodes = Math.floor(Math.random()*20)+5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numArcs = Math.floor(Math.random()*((numNodes*(numNodes-1)/4) - numNodes)) + numNodes;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var graph = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tree = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var otherNodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rank = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var rem = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[i] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random()*rem.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rank[i] = rem[loc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem[loc] = rem[rem.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rem = null;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i] = new Array(numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < numNodes; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[i][j] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < numNodes; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[i-1] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tree.length < numNodes)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inside = Math.floor(Math.random()*tree.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var outside = Math.floor(Math.random()*otherNodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rank[tree[inside]] < rank[otherNodes[outside]])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[tree[inside]][otherNodes[outside]] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[otherNodes[outside]][tree[inside]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree[tree.length] = otherNodes[outside];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes[outside] = otherNodes[otherNodes.length-1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherNodes.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (count < numArcs)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1, loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc1 = Math.floor(Math.random()*numNodes);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var poss = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < graph.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (graph[loc1][i] == Number.MAX_VALUE && i != loc1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;poss[poss.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc2 = Math.floor(Math.random()*poss.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (poss.length == 0);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (rank[loc1] < rank[poss[loc2]])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[loc1][poss[loc2]] = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;graph[poss[loc2]][loc1] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return graph;<br>}<br>";
fctns[83].title[1] = "Topological Sort -  generateDAG";
fctns[83].src[2] = " inDeg(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var degVec = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degVec[i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degVec[i] ++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return degVec;<br>}<br>";
fctns[83].title[2] = "Topological Sort -  inDeg";
fctns[83].src[3] = " topSort(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var degVec = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ready = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A2 = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degVec = inDeg(A2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < degVec.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (degVec[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ready[ready.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ready.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = ready[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ready[0] = ready[ready.length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ready.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A2[i][n] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][n] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (A2[i][n] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][n] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degVec[i]--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (degVec[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ready[ready.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('node_' + i).style.background = '#C8A2C8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('node_' + i + '_2').innerHTML = ans[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i] = ans[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[83].title[3] = "Topological Sort -  topSort";
fctns[83].src[4] = " dispNodes(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nodeList = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = nodeList.length; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc] = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc].name = 'node' + i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeList[loc].text = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < nodeList.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='c' name='node_' + nodeList[i].text + '' id='node_' + nodeList[i].text + '' onclick=\'changecolor('node_' + i + ''); drawGraph(forest)\'>' + nodeList[i].text + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < nodeList.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td class='c' name='node_' + nodeList[i].text + '' id='node_' + nodeList[i].text + '_2'></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr></table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[83].title[4] = "Topological Sort -  dispNodes";
fctns[83].src[5] = " changecolor(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var node = parseInt(id.split('_')[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#C8A2C8' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    document.getElementById(id).style.background == 'rgb(200, 162, 200)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(200, 162, 200)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(200, 162, 200) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = userAns.indexOf(node);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = loc; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('node_' + i + '_2').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('node_' + i).style.background = '#ffffff';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i] = userAns[userAns.length - 1];<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns.length = loc;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#C8A2C8';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('node_' + userAns.length + '_2').innerHTML = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[userAns.length] = node;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[83].title[5] = "Topological Sort -  changecolor";
fctns[83].src[6] = " init(A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var forest = new Object();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.edges = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.cost = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var theta = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theta[i] = (2*Math.PI*i) / A.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i] = new Object;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].value = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].xVal = 255*Math.cos(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].yVal = 255*Math.sin(theta[i]) + 275;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[i].lookup = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[i][0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawGraph(forest);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>What Node should be selected next?</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>' + dispNodes(A) + '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><input type='button' value='Check' onclick='check(userAns, A)'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td><input type=button onclick=\'newProb();\' value=\'New Problem\'></td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = text;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[83].title[6] = "Topological Sort -  init";
fctns[83].src[7] = " drawGraph(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c = document.getElementById ('myCanvas');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ctx = c.getContext('2d');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var used = new Array(forest.nodes.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < used.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[i] = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.clearRect (0, 0, c.width,  c.height);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.edges.length; i++)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.edges[i][0].xVal, forest.edges[i][0].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.edges[i][1].xVal, forest.edges[i][1].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[forest.edges[i][0].value] = true;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[forest.edges[i][1].value] = true;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var edge = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[0] = forest.nodes[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edge[1] = forest.nodes[j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var drawn = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (indexOf(forest, edge) == -1 && A[i][j] != Number.MAX_VALUE && A[i][j] >= 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userAns.indexOf(edge[0].value) == -1 && userAns.indexOf(edge[1].value) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawn = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (userAns.indexOf(edge[0].value) == -1 || userAns.indexOf(edge[1].value) == -1)<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 5;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#FFCC00';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 5;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#C8A2C8';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#c0c0c0';<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[i].xVal, forest.nodes[i].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (drawn)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var leftRight = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (forest.nodes[i].xVal > forest.nodes[j].xVal)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftRight = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var headlen = 20;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slope1 = (forest.nodes[i].yVal - forest.nodes[j].yVal) / (forest.nodes[i].xVal - forest.nodes[j].xVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var angle = Math.atan(slope1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (leftRight)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal - headlen * Math.sin(angle - Math.PI/7));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//path from the side point of the arrow, to the other side point<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle + Math.PI/7), forest.nodes[j].yVal - headlen*Math.sin(angle + Math.PI/7));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//path from the side point back to the tip of the arrow, and then again to the opposite side point<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal - headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal - headlen*Math.sin(angle - Math.PI/7));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.moveTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal + headlen * Math.sin(angle - Math.PI/7));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//path from the side point of the arrow, to the other side point<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle + Math.PI/7), forest.nodes[j].yVal + headlen*Math.sin(angle + Math.PI/7));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//path from the side point back to the tip of the arrow, and then again to the opposite side point<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal, forest.nodes[j].yVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineTo(forest.nodes[j].xVal + headlen * Math.cos(angle - Math.PI/7), forest.nodes[j].yVal + headlen*Math.sin(angle - Math.PI/7));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//draws the paths created above<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle = '#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.lineWidth = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c0c0c0';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slope1 = (forest.nodes[i].yVal - forest.nodes[j].yVal) / (forest.nodes[i].xVal - forest.nodes[j].xVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var slope2 = -1 / slope1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insideX = forest.nodes[j].xVal - (forest.nodes[i].xVal + forest.nodes[j].xVal) / 16;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;insideY = slope2 * (insideX - forest.nodes[j].xVal) + forest.nodes[j].yVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.nodes.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.strokeStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.stroke();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (used[i])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#00FFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle = '#c9c9c9';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.beginPath();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(forest.nodes[i].xVal, forest.nodes[i].yVal, 10, 0*Math.PI, 2*Math.PI);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillStyle='#000000';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.font='10px Arial';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (forest.nodes[i].value == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value+1)/Math.log(10))+1), forest.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fillText(forest.nodes[i].value, forest.nodes[i].xVal-3*(Math.floor(Math.log(forest.nodes[i].value)/Math.log(10))+1), forest.nodes[i].yVal+2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[83].title[7] = "Topological Sort -  drawGraph";
fctns[83].src[8] = " indexOf(forest, edge)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = -1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i < forest.edges.length && ans == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((forest.edges[i][0] == edge[0] && forest.edges[i][1] == edge[1]))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[83].title[8] = "Topological Sort -  indexOf";
fctns[83].src[9] = " length(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest.edges.length;<br>}<br>";
fctns[83].title[9] = "Topological Sort -  length";
fctns[83].src[10] = " addEdge(forest, edge, cost)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initLen = forest.trees[forest.nodes[edge[0].value].lookup].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initLook = forest.nodes[edge[0].value].lookup;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < initLen; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.trees[forest.nodes[edge[1].value].lookup][forest.trees[forest.nodes[edge[1].value].lookup].length] = forest.trees[initLook][i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.nodes[forest.trees[initLook][i].value].lookup = forest.nodes[edge[1].value].lookup;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.edges[forest.edges.length] = edge;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest.cost += cost;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return forest;<br>}<br>";
fctns[83].title[10] = "Topological Sort -  addEdge";
fctns[83].src[11] = " disp(forest)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < forest.edges.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '(' + forest.edges[i][0].value + ', ' + forest.edges[i][1].value + ')<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<bbr>Total cost: ' + forest.cost + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[83].title[11] = "Topological Sort -  disp";
fctns[83].src[12] = " dispMtrx(A)<br>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + j + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A[i][j] != Number.MAX_VALUE)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + A[i][j] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>-</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[83].title[12] = "Topological Sort -  dispMtrx";
fctns[83].src[13] = " check(userAns, A)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var correct = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var degVec = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ready = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var A2 = new Array()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < A[i].length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][j] = A[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degVec = inDeg(A2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < degVec.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (degVec[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ready[ready.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (ready.length != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = userAns[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = ready.indexOf(n);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (loc == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;correct = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 1; i < userAns.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns[i-1] = userAns[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ready[loc] = ready[ready.length - 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ready.length--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < A2.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (A2[i][n] == 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][n] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (A2[i][n] == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A2[i][n] = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;degVec[i]--;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (degVec[i] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ready[ready.length] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (correct == true)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('You have found a correct solution!');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Sorry, but your answer is not correct');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[83].title[13] = "Topological Sort -  check";
fctns[83].src[14] = " newProb()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A = generateDAG();<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('input').innerHTML = dispMtrx(A);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userAns = new Array(); <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forest = init(A);<br>}<br><br></scr" + "ipt>";
fctns[83].title[14] = "Topological Sort -  newProb";
fctns[83].loc = "http://learninglover.com/examples.php?id=94";
fctns[84] = new Object();
fctns[84].src = new Array();
fctns[84].title = new Array();
fctns[84].src[0] = "<style><br>td {border-style:none; text-align:center}<br>td.frac {border-bottom-style:solid; text-align:cnter}<br>td.none {border-bottom-style:none; text-align:center}<br></style><br><br><script type='text/javascript'>";
fctns[84].title[0] = "Triangle Trigonometry - styleTags";
fctns[84].src[1] = " generate()<br>{<br>        var A = new Array();<br>        var max = 0;<br>        A[0] = Math.floor(Math.random()*30) + 1;<br>        A[0] *= 5;<br>        var rem = 180 - A[0];<br><br>        A[1] = Math.floor(Math.random()*(rem / 5 - 1)) + 1;<br>        A[1] *= 5;<br>        if (A[1] > A[max])<br>                max = 1;<br><br>        rem -= A[1];<br><br>        A[2] = rem;<br>        if (A[2] > A[max])<br>                max = 2;<br><br>        A[max+3] = Math.floor(Math.random()*10)+10;<br>        if (max != 0)<br>                A[3] = Math.round(((A[max+3]*Math.sin(A[0]*(Math.PI/180))) /<br>Math.sin(A[max]*(Math.PI/180)))*100)/100;<br>        if (max != 1)<br>                A[4] = Math.round(((A[max+3]*Math.sin(A[1]*(Math.PI/180))) /<br>Math.sin(A[max]*(Math.PI/180)))*100)/100;<br>        if (max != 2)<br>                A[5] = Math.round(((A[max+3]*Math.sin(A[2]*(Math.PI/180))) /<br>Math.sin(A[max]*(Math.PI/180)))*100)/100;<br><br>//      document.getElementById('output').innerHTML += A;<br><br>        return A;<br>}<br>";
fctns[84].title[1] = "Triangle Trigonometry -  generate";
fctns[84].src[2] = " drawTri(A)<br>{<br>        var c = document.getElementById('myCanvas');<br>        var ctx = c.getContext('2d');<br>        ctx.clearRect (0, 0, c.width, c.height);<br><br>        var min = 0;<br>        for (var i = 0; i < 3; i++)<br>                if (A[i] < A[min])<br>                        min = i;<br><br>        var temp = A[0];<br>        A[0] = A[min];<br>        A[min] = temp;<br><br>        temp = A[3];<br>        A[3] = A[min+3];<br>        A[min+3] = temp;<br><br>        var x1 = ((c.width - 15)/45), x2 = 0, x3 = 0;<br>        var y1 = (c.height - 15)/60, y2 = 0, y3 = 0;<br>        var height, dist;<br><br>        if (A[1] > 90)<br>        {<br>                x2 = x1 + A[3];<br>                height = A[5]*Math.sin((180-A[1])*(Math.PI/180));<br>                dist = Math.sqrt(A[5]*A[5] - height*height);<br>                x3 = x1 - dist;<br><br>                y2 = y1;<br>                y3 = y1 + height;<br>        }<br>        else if (A[2] > 90)<br>        {<br>                x2 = x1 + A[3];<br>                height = A[4]*Math.sin((180-A[1])*(Math.PI/180));<br>                dist = Math.sqrt(A[4]*A[4] - height*height);<br>                x3 = x2 + dist;<br><br>                y2 = y1;<br>                y3 = y1 + height;<br>        }<br>        else if (A[1] == 90)<br>        {<br>                x2 = x1 + A[3];<br>                x3 = x1;<br><br>                height = A[5];<br>                y3 = y1 + height;<br>                y2 = y1;<br>        }<br>        else if (A[2] == 90)<br>        {<br>                x2 = x1 + A[3];<br>                x3 = x2;<br><br>                height = A[4];<br>                y3 = y1 + height;<br>                y2 = y1;<br>        }<br>        else<br>        {<br>                var delta1 = 90 - A[1];<br>                var delta2 = 90 - A[2];<br>                height = A[5]*Math.sin(A[2]*(Math.PI/180));<br>                dist = Math.sqrt(A[5]*A[5] - height*height);<br><br>                x2 = x1 + A[3];<br>                x3 = x1 + dist;<br><br>                y2 = y1;<br>                y3 = y1 + height;<br>        }<br><br>        while(y3 > (c.height - 15)/15)<br>        {<br>                y2--;<br>                y1--;<br>                y3--;<br>        }<br><br>        while(x3 > (c.width - 15)/15)<br>        {<br>                x2--;<br>                x1--;<br>                x3--;<br>        }<br><br>        while(x3 < 15)<br>        {<br>                x2++;<br>                x1++;<br>                x3++;<br>        }<br><br>        var pts = new Array();<br>        pts[0] = new Array();<br><br>        pts[0][0] = x1;<br>        pts[0][1] = y1;<br><br>        pts[1] = new Array();<br>        pts[1][0] = x2;<br>        pts[1][1] = y2;<br><br>        pts[2] = new Array();<br>        pts[2][0] = x3;<br>        pts[2][1] = y3;<br><br>//      document.getElementById('output').innerHTML += '<br>' + pts + '<br>';<br>//      document.getElementById('output').innerHTML += 'width = ' +<br>(c.width - 15)/15 + '<br>';<br>//      document.getElementById('output').innerHTML += 'height = ' +<br>(c.height - 15)/15 + '<br>';<br><br>        for (i = 0; i < 3; i++)<br>        {<br>                for (j = 0; j < 3; j++)<br>                {<br>                        ctx.strokeStyle='#0000FF';<br>                        ctx.beginPath();<br>                        ctx.moveTo(15*pts[i][0], 15*pts[i][1]);<br>                        ctx.lineTo(15*pts[j][0], 15*pts[j][1]);<br>                        ctx.stroke();<br>                }<br>        }<br><br>        ctx.fillText('a',(15*pts[0][0] + 15*pts[1][0])/2 -<br>3*(Math.floor(Math.log(i+1)/Math.log(10))+1),(15*pts[0][1] +<br>15*pts[1][1])/2+4 - 15);<br>        ctx.fillText('b',(15*pts[1][0] + 15*pts[2][0])/2 -<br>3*(Math.floor(Math.log(i+1)/Math.log(10))+1)+10,(15*pts[1][1] +<br>15*pts[2][1])/2+4 + 10);<br>        ctx.fillText('c',(15*pts[2][0] + 15*pts[0][0])/2 -<br>3*(Math.floor(Math.log(i+1)/Math.log(10))+1)-15,(15*pts[2][1] +<br>15*pts[0][1])/2+4 + 10);<br><br>        for (i = 0; i < 3; i++)<br>        {<br>//              ctx.strokeStyle='#000000';<br>//              ctx.beginPath();<br>//              ctx.arc(15*pts[i][0],15*pts[i][1],10,0*Math.PI,2*Math.PI);<br>//              ctx.stroke();<br><br>//              ctx.fillStyle='#00FFFF';<br>//              ctx.beginPath();<br>//              ctx.arc(15*pts[i][0],15*pts[i][1],10,0*Math.PI,2*Math.PI);<br>//              ctx.fill();<br><br>                ctx.fillStyle='#000000';<br>                ctx.font='10px Arial';<br>                if (i == 0)<br>                        ctx.fillText('B',15*pts[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1)-15,15*pts[i][1]+4);<br>                else if (i == 1)<br>                        ctx.fillText('C',15*pts[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1)+15,15*pts[i][1]+4);<br>                else<br>                        ctx.fillText('A',15*pts[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),15*pts[i][1]+4+15);<br>        }<br>}<br>";
fctns[84].title[2] = "Triangle Trigonometry -  drawTri";
fctns[84].src[3] = " init()<br>{<br>        A = generate();<br>        var scenario = Math.floor(Math.random()*10);<br>        drawTri(A);<br>        document.getElementById('input').innerHTML = '';<br>        document.getElementById('output').innerHTML = '';<br><br>        switch (scenario)<br>        {<br>                case 0:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of c, B, and C? <br>';<br>                break;<br><br>                case 1:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of b, c, and C? <br>';<br>                break;<br><br>                case 2:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of b, B, and C? <br>';<br>                break;<br><br>                case 3:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of B, C, and c? <br>';<br>                break;<br><br>                case 4:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of c, A, and C? <br>';<br>                break;<br><br>                case 5:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of A, B, and C? <br>';<br>                break;<br><br>                case 6:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of c, A, and B? <br>';<br>                break;<br><br>                case 7:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of b, A, and C? <br>';<br>                break;<br><br>                case 8:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of b, c, and A? <br>';<br>                break;<br><br>                case 9:<br>                        document.getElementById('input').innerHTML += 'a = ' + A[3] + '<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of b, A, and B? <br>';<br>                break;<br><br>                case 10:<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, c, and C? <br>';<br>                break;<br><br>                case 11:<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, B, and C? <br>';<br>                break;<br><br>                case 12:<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, c, and B? <br>';<br>                break;<br><br>                case 13:<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, b, and C? <br>';<br>                break;<br><br>                case 14:<br>                        document.getElementById('input').innerHTML += 'A = ' + A[0] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, b, and B? <br>';<br>                break;<br><br>                case 15:<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, A, and C? <br>';<br>                break;<br><br>                case 16:<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, A, and c? <br>';<br>                break;<br><br>                case 17:<br>                        document.getElementById('input').innerHTML += 'b = ' + A[4] + '<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, A, and B? <br>';<br>                break;<br><br>                case 18:<br>                        document.getElementById('input').innerHTML += 'B = ' + A[1] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'c = ' + A[5] + '<br>';<br>                        document.getElementById('input').innerHTML += 'C = ' + A[2] + '&deg;<br>';<br>                        document.getElementById('input').innerHTML += 'What are the values of a, b and A? <br>';<br>                break;<br>        }<br><br>        return scenario;<br>}<br>";
fctns[84].title[3] = "Triangle Trigonometry -  init";
fctns[84].src[4] = " solveTri(scenario)<br>{<br>        var text = '';<br>        var show = document.getElementById('show').checked;<br>        switch (scenario)<br>        {<br>                case 0: //a, A, b<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, A, and b, we can use the Law of Sines to solve for B. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td></td><td> = </td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(B) = </td><td><table><tr><td class='frac'>b * sin(A)</td></tr><tr><td class='none'>a</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for B by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(B)) = </td><td>B = </td><td>arcsin(</td><td><table><tr><td class='frac'>b*sin(A)</td></tr><tr><td class='none'>a</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'We enter our values into this formula to obtain the value of B<br>';<br>                                text += '<table><tr><td>B = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[4] + '*sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>' + A[3] + '</td></tr></table></td><td>)</td></tr></table>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for C by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that C = 180 - A - B<Br>';<br>                                text += 'C = 180&deg; - ' + A[0] + '&deg; - ' + A[1] + '&deg; = ' + A[2] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and C, we can use the Law of Sines to solve for c. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>c = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>                                text += '<table><tr><td>c = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                break;<br><br>                case 1: //a, A, B<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, A, and B, we can use the Law of Sines to solve for b. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>b = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>                                text += '<table><tr><td>b = </td><td><table><tr><td class='frac'>' + A[3] + '*sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for C by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that C = 180 - A - B<Br>';<br>                                text += 'C = 180 - ' + A[0] + '&deg; - ' + A[1] + '&deg; = ' + A[2] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and C, we can use the Law of Sines to solve for c. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>c = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>c = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'b = ' + A[4] + '<br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                break;<br><br>                case 2: //a, A, c<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, A, and c, we can use the Law of Sines to solve for C. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(C) = </td><td><table><tr><td class='frac'>c * sin(A)</td></tr><tr><td class='none'>a</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for C by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(C)) = </td><td>C = </td><td>arcsin(</td><td><table><tr><td class='frac'>c*sin(A)</td></tr><tr><td class='none'>a</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'We enter our values into this formula to obtain the value of C<br>';<br>                                text += '<table><tr><td>C = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[5] + '*sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>' + A[3] + '</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for B by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that B = 180 - A - C<Br>';<br>                                text += 'B = 180 - ' + A[0] + '&deg; - ' + A[2] + '&deg; = ' + A[1] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and B, we can use the Law of Sines to solve for b. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>b = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>b = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                break;<br><br>                case 3: //a, A, C<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, A, and C, we can use the Law of Sines to solve for c. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>c = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>c = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for B by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that B = 180 - A - C<Br>';<br>                                text += 'B = 180 - ' + A[0] + '&deg; - ' + A[2] + '&deg; = ' + A[1] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and C, we can use the Law of Sines to solve for b. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>b = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<table><tr><td>b = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'c = ' + A[5] + '<br>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                break;<br><br>                case 4: //a, b, B<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, b, and B, we can use the Law of Sines to solve for A. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(A) = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>b</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for A by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(A)) = </td><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>a*sin(B)</td></tr><tr><td class='none'>b</td></tr></table></td><td>)</td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of A<br>';<br>                                text += '<table><tr><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[3] + '*sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>' + A[4] + '</td></tr></table></td><td>)</td></tr></table>. <br>';;<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for C by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that C = 180 - A - B<Br>';<br>                                text += 'C = 180 - ' + A[0] + '&deg; - ' + A[1] + '&deg; = ' + A[2] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and C, we can use the Law of Sines to solve for c. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>c = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>                                text += '<table><tr><td>c = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                break;<br><br>                case 5: //a, b, c<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, b, and c, we can use the Law of Cosines to solve for C. <br>';<br>                                text += 'The law of Cosines says that c<sup>2</sup> = a<sup>2</sup> + b<sup>2</sup> - 2*a*b*cos(C)<br>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += 'This simplifies to <table><tr><td>cos(C) = </td><td><table><tr><td class='frac'>c<sup>2</sup> - a<sup>2</sup> - b<sup>2</sup></td></tr><tr><td class='none'>-2*a*b</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for C by taking the arccos of both sides<br>';<br>                                text += '<table><tr><td>arccos(cos(C)) = </td><td>C = </td><td>arccos(</td><td><table><tr><td class='frac'>c<sup>2</sup> - a<sup>2</sup> - b<sup>2</sup></td></tr><tr><td class='none'>-2*a*b</td></tr></table><td>)</td></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of A<br>';<br>                                text += '<table><tr><td>C = </td><td>arccos(</td><td><table><tr><td class='frac'>' + (Math.round(A[5]*A[5]*100)/100) + ' - ' + (Math.round(A[3]*A[3]*100)/100) + ' - ' + (Math.round(A[4]*A[4]*100)/100) + '</td></tr><tr><td class='none'>-2*' + A[3] + '*' + A[4]+ '</td></tr></table><td>)</td></td></tr></table>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += '<br>';<br>                                text += 'Now, because we know a, c, and C, we can use the Law of Sines to solve for A. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(A) = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>c</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for A by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(A)) = </td><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>a*sin(C)</td></tr><tr><td class='none'>c</td></tr></table></td><td>)</td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of A<br>';<br>                                text += '<table><tr><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[3] + '*sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>' + A[5] + '</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br><br>                                text += 'Now we can solve for B by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that B = 180 - A - C<Br>';<br>                                text += 'B = 180 - ' + A[0] + '&deg; - ' + A[2] + '&deg; = ' + A[1] + '&deg;<br>';<br>                                text += '<br>'<br>                        }<br>                        else<br>                        {<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                        }<br>                break;<br><br>                case 6: //a, b, C<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, b, and C, we can use the Law of Cosines to solve for c. <br>';<br>                                text += 'The law of Cosines says that c<sup>2</sup> = a<sup>2</sup> + b<sup>2</sup> - 2*a*b*cos(C)<br>'<br>                                text += 'We can thus solve for c by taking the square root of both sides<br>';<br>                                text += 'sqrt(c<sup>2</sup>) = c = sqrt(a<sup>2</sup> + b<sup>2</sup> - 2*a*b*cos(C)). <br>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>                                text += 'c = sqrt(' + (Math.round(A[3]*A[3]*100)/100) + ' + ' + (Math.round(A[4]*A[4]*100/100)) + ' - 2*' + A[3] + '*' + A[4] + '*cos(' + A[2] + '&deg;)) <br>';<br>                                text += 'c = sqrt(' + (Math.round(A[5]*A[5]*100)/100) + ')<br>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now, because we know a, c, and C, we can use the Law of Sines to solve for A. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(A) = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>c</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for A by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(A)) = </td><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>a*sin(C)</td></tr><tr><td class='none'>c</td></tr></table></td><td>)</td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of A<br>';<br>                                text += '<table><tr><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[3] + '*sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>' + A[5] + '</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'Now we can solve for B by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that B = 180 - A - C<Br>';<br>                                text += 'B = 180 - ' + A[0] + '&deg; - ' + A[2] + '&deg; = ' + A[1] + '&deg;<br>';<br>                                text += '<br>'<br>                        }<br>                        else<br>                        {<br>                                text += 'c = ' + A[5] + '<br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                        }<br>                break;<br><br>                case 7: //a, B, c<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, B, and c, we can use the Law of Cosines to solve for b. <br>';<br>                                text += 'The law of Cosines says that b<sup>2</sup> = a<sup>2</sup> + c<sup>2</sup> - 2*a*c*cos(B)<br>'<br>                                text += 'We can thus solve for b by taking the square root of both sides<br>';<br>                                text += 'sqrt(b<sup>2</sup>) = b = sqrt(a<sup>2</sup> + c<sup>2</sup> - 2*a*c*cos(B)). <br>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>                                text += 'b = sqrt(' + (Math.round(A[3]*A[3]*100/100)) + ' + ' + (Math.round(A[5]*A[5]*100/100)) + ' - 2*' + A[3] + '*' + A[5] + '*cos(' + A[1] + '&deg;)) <br>';<br>                                text += 'b = sqrt(' + (Math.round(A[4]*A[4]*100)/100) + ')<br>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now, because we know a, b, and B, we can use the Law of Sines to solve for A. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(A) = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>b</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for A by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(A)) = </td><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>a*sin(B)</td></tr><tr><td class='none'>b</td></tr></table></td><td>)</td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of A<br>';<br>                                text += '<table><tr><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[3] + '*sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>' + A[4] + '</td></tr></table></td><td>)</td></tr></table>. <br>';;<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'Now we can solve for C by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that C = 180 - A - B<Br>';<br>                                text += 'C = 180 - ' + A[0] + '&deg; - ' + A[1] + '&deg; = ' + A[2] + '&deg;<br>';<br>                                text += '<br>'<br>                        }<br>                        else<br>                        {<br>                                text += 'b = ' + A[4] + '<br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                        }<br>                break;<br><br>                case 8: //a, B, C<br>                        if (show)<br>                        {<br>                                text += 'We can solve for A by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that A = 180 - B - C<Br>';<br>                                text += 'A = 180 - ' + A[1] + '&deg; - ' + A[2] + '&deg; = ' + A[0] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and B, we can use the Law of Sines to solve for b. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>b = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>                                text += '<table><tr><td>b = </td><td><table><tr><td class='frac'>' + A[3] + '*sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                                text += '<br>';<br>                                text += 'Because we know a, A, and C, we can use the Law of Sines to solve for c. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>c = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>                                text += '<table><tr><td>c = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                break;<br><br>                case 9: //a, c, C<br>                        if (show)<br>                        {<br>                                text += 'Because we know a, c, and C, we can use the Law of Sines to solve for A. <br>';<br>                                text += 'The law of Sines says that c / sin(C) = a / sin(A)<br>'<br>                                text += 'This simplifies to <table><tr><td>sin(A) = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>c</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for A by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(A)) = </td><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>a*sin(C)</td></tr><tr><td class='none'>c</td></tr></table></td><td>)</td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of A<br>';<br>                                text += '<table><tr><td>A = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[3] + '*sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>' + A[5] + '</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for B by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that B = 180 - A - C<Br>';<br>                                text += 'B = 180 - ' + A[0] + '&deg; - ' + A[2] + '&deg; = ' + A[1] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and B, we can use the Law of Sines to solve for b. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>b = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>                                text += '<table><tr><td>b = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br><br>                break;<br><br>                case 10:        //A, b, B<br>                        if (show)<br>                        {<br>                                text += 'Because we know A, b, and B, we can use the Law of Sines to solve for a. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>a = </td><td><table><tr><td class='frac'>b * sin(A)</td></tr><tr><td class='none'>sin(B)</td></tr></table></td></tr></table><br>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += '<table><tr><td>a = </td><td><table><tr><td class='frac'>' + A[4] + ' * sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[1] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for C by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that C = 180 - A - B<Br>';<br>                                text += 'C = 180 - ' + A[0] + '&deg; - ' + A[1] + '&deg; = ' + A[2] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and C, we can use the Law of Sines to solve for c. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>c = </td><td><table><tr><td class='frac'>a * sin(C)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>                                text += '<table><tr><td>c = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'a = ' + A[3] + '<br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                        }<br>                break;<br><br>                case 11:        //A, b, c<br>                        if (show)<br>                        {<br>                                text += 'Because we know A, b, and c, we can use the Law of Cosines to solve for a. <br>';<br>                                text += 'The law of Cosines says that a<sup>2</sup> = b<sup>2</sup> + c<sup>2</sup> - 2*b*c*cos(A)<br>'<br>                                text += 'We can thus solve for a by taking the square root of both sides<br>';<br>                                text += 'sqrt(a<sup>2</sup>) = a = sqrt(b<sup>2</sup> + c<sup>2</sup> - 2*b*c*cos(A)). <br>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += 'a = sqrt(' + (Math.round(A[4]*A[4]*100)/100) + ' + ' +  (Math.round(A[5]*A[5]*100)/100) + ' - ' +  '2*' + A[4] + '*' + A[5] + '*cos(' + A[0] + '&deg;)) <br>';<br>                                text += 'a = sqrt(' + (Math.round(A[3]*A[3]*100)/100) + ')<br>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now, because we know a, A, and b, we can use the Law of Sines to solve for B. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(B) = </td><td><table><tr><td class='frac'>b * sin(A)</td></tr><tr><td class='none'>a</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for B by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(B)) = </td><td>B = </td><td>arcsin(</td><td><table><tr><td class='frac'>b*sin(A)</td></tr><tr><td class='none'>a</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'We enter our values into this formula to obtain the value of B<br>';<br>                                text += '<table><tr><td>B = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[4] + '*sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>' + A[3] + '</td></tr></table></td><td>)</td></tr></table>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'Now we can solve for C by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that C = 180 - A - B<Br>';<br>                                text += 'C = 180 - ' + A[0] + '&deg; - ' + A[1] + '&deg; = ' + A[2] + '&deg;<br>';<br>                                text += '<br>'<br>                        }<br>                        else<br>                        {<br>                                text += 'a = ' + A[3] + '<br>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                        }<br>                break;<br><br>                case 12:        //A, b, C<br>                        if (show)<br>                        {<br>                                text += 'We can solve for B by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that B = 180 - A - C<Br>';<br>                                text += 'B = 180 - ' + A[0] + '&deg; - ' + A[2] + '&deg; = ' + A[1] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know B, b, and C, we can use the Law of Sines to solve for c. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>c = </td><td><table><tr><td class='frac'>b * sin(C)</td></tr><tr><td class='none'>sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>                                text += '<table><tr><td>c = </td><td><table><tr><td class='frac'>' + A[4] + ' * sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[1] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                                text += '<br>';<br>                                text += 'Because we know b, B, and A, we can use the Law of Sines to solve for a. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>a = </td><td><table><tr><td class='frac'>b * sin(A)</td></tr><tr><td class='none'>sin(B)</td></tr></table></td></tr></table><br>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += 'a = (' + A[4] + ' * sin(' + A[0] + '&deg;)) / sin(' + A[1] + '&deg;)<br>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                break;<br><br>                case 13:        //A, B, c<br>                        if (show)<br>                        {<br>                                text += 'We can solve for C by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that C = 180 - A - B<Br>';<br>                                text += 'C = 180 - ' + A[0] + '&deg; - ' + A[1] + '&deg; = ' + A[2] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know C, c, and A, we can use the Law of Sines to solve for a. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>a = </td><td><table><tr><td class='frac'>c * sin(A)</td></tr><tr><td class='none'>sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += '<table><tr><td>a = </td><td><table><tr><td class='frac'>' + A[5] + ' * sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[2] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                                text += '<br>';<br>                                text += 'Because we know a, A, and B, we can use the Law of Sines to solve for b. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>b = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>                                text += '<table><tr><td>b = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                break;<br><br>                case 14:        //A, c, C<br>                        if (show)<br>                        {<br>                                text += 'Because we know c, C, and A, we can use the Law of Sines to solve for a. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>a = </td><td><table><tr><td class='frac'>c * sin(A)</td></tr><tr><td class='none'>sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += '<table><tr><td>a = </td><td><table><tr><td class='frac'>' + A[5] + ' * sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[2] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for B by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that B = 180 - A - C<Br>';<br>                                text += 'C = 180 - ' + A[0] + '&deg; - ' + A[2] + '&deg; = ' + A[1] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know a, A, and B, we can use the Law of Sines to solve for b. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>b = </td><td><table><tr><td class='frac'>a * sin(B)</td></tr><tr><td class='none'>sin(A)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>                                text += '<table><tr><td>b = </td><td><table><tr><td class='frac'>' + A[3] + ' * sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[0] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'a = ' + A[3] + '<br>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                        }<br>                break;<br><br>                case 15:        //b, B, c<br>                        if (show)<br>                        {<br>                                text += 'Because we know b, B, and c, we can use the Law of Sines to solve for C. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(C) = </td><td><table><tr><td class='frac'>c * sin(B)</td></tr><tr><td class='none'>b</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for C by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(C)) = </td><td>C = </td><td>arcsin(</td><td><table><tr><td class='frac'>c*sin(B)</td></tr><tr><td class='none'>b</td></tr></table></td><td>)</td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of C<br>';<br>                                text += '<table><tr><td>C = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[5] + '*sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>' + A[3] + '</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for A by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that A = 180 - B - C<Br>';<br>                                text += 'A = 180 - ' + A[1] + '&deg; - ' + A[2] + '&deg; = ' + A[0] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know c, C, and A, we can use the Law of Sines to solve for a. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>a = </td><td><table><tr><td class='frac'>c * sin(A)</td></tr><tr><td class='none'>sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += '<table><tr><td>a = </td><td><table><tr><td class='frac'>' + A[5] + ' * sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[2] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'C = ' + A[2] + '&deg;<br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                break;<br><br>                case 16:        //b, B, C<br>                        if (show)<br>                        {<br>                                text += 'Because we know b, B, and C, we can use the Law of Sines to solve for c. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>c = </td><td><table><tr><td class='frac'>b * sin(C)</td></tr><tr><td class='none'>sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of c<br>';<br>                                text += '<table><tr><td>c = </td><td><table><tr><td class='frac'>' + A[4] + ' * sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[1] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'c = ' + A[5] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for A by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that A = 180 - B - C<Br>';<br>                                text += 'A = 180 - ' + A[1] + '&deg; - ' + A[2] + '&deg; = ' + A[0] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know b, B, and A, we can use the Law of Sines to solve for a. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>a = </td><td><table><tr><td class='frac'>c * sin(A)</td></tr><tr><td class='none'>sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += '<table><tr><td>a = </td><td><table><tr><td class='frac'>' + A[5] + ' * sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[2] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'c = ' + A[5] + '<br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                break;<br><br>                case 17:        //b, C, c<br>                        if (show)<br>                        {<br>                                text += 'Because we know b, C, and c, we can use the Law of Sines to solve for B. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>sin(B) = </td><td><table><tr><td class='frac'>b * sin(C)</td></tr><tr><td class='none'>c</td></tr></table></td></tr></table>';<br>                                text += 'We can thus solve for B by taking the arcsin of both sides<br>';<br>                                text += '<table><tr><td>arcsin(sin(B)) = </td><td>B = </td><td>arcsin(</td><td><table><tr><td class='frac'>b*sin(C)</td></tr><tr><td class='none'>c</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'We enter our values into this formula to obtain the value of B<br>';<br>                                text += '<table><tr><td>B = </td><td>arcsin(</td><td><table><tr><td class='frac'>' + A[4] + '*sin(' + A[2] + '&deg;)</td></tr><tr><td class='none'>' + A[5] + '</td></tr></table></td><td>)</td></tr></table>. <br>';<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for A by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that A = 180 - B - C<Br>';<br>                                text += 'A = 180 - ' + A[1] + '&deg; - ' + A[2] + '&deg; = ' + A[0] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know c, C, and A, we can use the Law of Sines to solve for a. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>a = </td><td><table><tr><td class='frac'>c * sin(A)</td></tr><tr><td class='none'>sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += '<table><tr><td>a = </td><td><table><tr><td class='frac'>' + A[5] + ' * sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[2] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'B = ' + A[1] + '&deg;<br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                break;<br><br>                case 18:        //B, c, C<br>                        if (show)<br>                        {<br>                                text += 'Because we know B, c, and C, we can use the Law of Sines to solve for b. <br>';<br>                                text += 'The law of Sines says that <table><tr><td><table><tr><td class='frac'> b </td></tr><tr><td class='none'> sin(B)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>'<br>                                text += 'This simplifies to <table><tr><td>b = </td><td><table><tr><td class='frac'>c * sin(B)</td></tr><tr><td class='none'>sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of b<br>';<br>                                text += '<table><tr><td>b = </td><td><table><tr><td class='frac'>' + A[5] + ' * sin(' + A[1] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[2] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'b = ' + A[4] + '<br>';<br>                                text += '<br>';<br>                                text += 'Now we can solve for A by remembering that the sum of the interior angles of a triangle is 180 degrees. <br>';<br>                                text += 'This implies that A = 180 - B - C<Br>';<br>                                text += 'A = 180 - ' + A[1] + '&deg; - ' + A[2] + '&deg; = ' + A[1] + '&deg;<br>';<br>                                text += '<br>'<br>                                text += 'Because we know c, C, and A, we can use the Law of Sines to solve for a. <br>';<br>                                text += 'The Law of Sines says that <table><tr><td><table><tr><td class='frac'> a </td></tr><tr><td class='none'> sin(A)</td></tr></table></td><td> = </td><td></td><td><table><tr><td class='frac'> c </td></tr><tr><td class='none'> sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'This simplifies to <table><tr><td>a = </td><td><table><tr><td class='frac'>c * sin(A)</td></tr><tr><td class='none'>sin(C)</td></tr></table></td></tr></table>';<br>                                text += 'We enter our values into this formula to obtain the value of a<br>';<br>                                text += '<table><tr><td>a = </td><td><table><tr><td class='frac'>' + A[5] + ' * sin(' + A[0] + '&deg;)</td></tr><tr><td class='none'>sin(' + A[2] + '&deg;)</td></tr></table></td></tr></table>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                        else<br>                        {<br>                                text += 'b = ' + A[4] + '<br>';<br>                                text += 'A = ' + A[0] + '&deg;<br>';<br>                                text += 'a = ' + A[3] + '<br>';<br>                        }<br>                break;<br>        }<br><br>        document.getElementById('output').innerHTML = text;<br>}<br></scr" + "ipt>";
fctns[84].title[4] = "Triangle Trigonometry -  solveTri";
fctns[84].loc = "http://learninglover.com/examples.php?id=37";
fctns[85] = new Object();
fctns[85].src = new Array();
fctns[85].title = new Array();
fctns[85].src[0] = "<title>Truth Tables</title><br><script type='text/javascript'>";
fctns[85].title[0] = "Truth Tables - styleTags";
fctns[85].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numVars = Math.floor(Math.random()*3)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var numOpers = Math.floor(Math.random()*4)+1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = genFmla(numVars, numOpers, 0);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var varSet = usedVars(ans);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans2 = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var header = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < varSet.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[zen] = disp(varSet[zen]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = ans.length-1; zen >= 0; zen--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[zen].indexOf('O') != -1 && ans[zen].indexOf('0') == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[zen + 1].indexOf('O') == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = header.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] = '(' + disp(ans[zen + 1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += ' ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += disp(ans[zen]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += ' ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += disp(ans[zen + 2]) + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = header.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] = '(' + disp(header[count-1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += ' ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += disp(ans[zen]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += ' ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += disp(header[count-2]) + ')';&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (ans[zen].indexOf('O') != -1 && ans[zen].indexOf('0') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans[zen + 1].indexOf('O') == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = header.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] = '(' + disp(ans[zen]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += ' ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += disp(ans[zen + 1]) + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = header.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] = '(' + disp(ans[zen]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += ' ';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header[count] += disp(header[count-1]) + ')';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += 'We'd like to build a truth table for ' + header[header.length-1] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < Math.pow(2, varSet.length); zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output[zen] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempAns = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < ans.length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempAns[yin] = ans[yin];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var binRep = toBinary(zen, varSet.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < binRep.length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (binRep[yin])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output[zen][yin] = 'T';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output[zen][yin] = 'F';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var count = output[zen].length;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sols = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tempAns[0] != 'T' && tempAns[0] != 'F')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = tempAns.length-1; yin >= 0; yin--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tempFmla = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tempAns[yin].indexOf('O') != -1 && tempAns[yin].indexOf('0') == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFmla[0] = tempAns[yin];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFmla[1] = tempAns[yin + 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFmla[2] = tempAns[yin + 2];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempAns[yin] = evalFmla(tempFmla, binRep, varSet);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output[zen][count] = tempAns[yin];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tempAns[yin + 2] != 'T' && tempAns[yin + 2] != 'F')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempAns = remove(tempAns, yin + 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tempAns[yin + 1] != 'T' && tempAns[yin + 1] != 'F')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempAns = remove(tempAns, yin + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (tempAns[yin].indexOf('O') != -1 && tempAns[yin].indexOf('0') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFmla[0] = tempAns[yin];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempFmla[1] = tempAns[yin + 1];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempAns[yin] = evalFmla(tempFmla, binRep, varSet);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output[zen][count] = tempAns[yin];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tempAns[yin + 1] != 'T' && tempAns[yin + 1] != 'F')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempAns = remove(tempAns, yin + 1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newOut = '<table><tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < header.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (zen < varSet.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<td align=center name='ttclm' + zen + '' id='ttclm' + zen + ''>' + header[zen] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<td align=center name='ttclm' + zen + '' id='ttclm' + zen + '' hidden=true>' + header[zen] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yin = 0; yin < output.length; yin++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var yang = 0; yang < output[yin].length; yang++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (yang % 2 == 0 && yang < varSet.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<td align=center style='background-color: #CC9999;' name='ttclm' + yang + '' id='ttclm' + yang + ''>' + output[yin][yang] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (yang % 2 == 1 && yang < varSet.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<td align=center style='background-color: #9999CC;' name='ttclm' + yang + '' id='ttclm' + yang + ''>' + output[yin][yang] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (yang % 2 == 0 && yang >= varSet.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<td align=center style='background-color: #CC9999;' name='ttclm' + yang + '' id='ttclm' + yang + '' hidden=true>' + output[yin][yang] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (yang % 2 == 1 && yang >= varSet.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<td align=center style='background-color: #9999CC;' name='ttclm' + yang + '' id='ttclm' + yang + '' hidden=true>' + output[yin][yang] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<form name='shwhde'>\n';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += 'Show columns: <br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < header.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (zen < varSet.length)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<input type=checkbox name='clm' + zen + '' onclick='showHide(this.name)' checked>' + header[zen] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '<input type=checkbox name='clm' + zen + '' onclick='showHide(this.name)'>' + header[zen] + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newOut += '</form>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += newOut;<br>}<br>";
fctns[85].title[1] = "Truth Tables -  generate";
fctns[85].src[2] = " showHide(clmn)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clmn = document.forms['shwhde'].elements[clmn];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells = document.getElementsByName('tt' + clmn.name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clmn.checked)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mode = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mode = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(var zen = 0; zen < cells.length; zen++) <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cells[zen].hidden = mode;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[85].title[2] = "Truth Tables -  showHide";
fctns[85].src[3] = " remove(arr, loc)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var res = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < loc; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res[zen] = arr[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = loc+1; zen < arr.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res[zen-1] = arr[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return res;<br>}<br>";
fctns[85].title[3] = "Truth Tables -  remove";
fctns[85].src[4] = " usedVars(fmla)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var used = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < fmla.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fmla[zen].indexOf('L') != -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (used.indexOf(fmla[zen]) == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;used[used.length] = fmla[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return used;<br>}<br>";
fctns[85].title[4] = "Truth Tables -  usedVars";
fctns[85].src[5] = " toBinary(number, digits)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var binary = new Array(digits);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var index = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < digits; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary[zen] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (number > 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary[digits - index-1] = number % 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number = Math.floor(number / 2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return binary;<br>}<br>";
fctns[85].title[5] = "Truth Tables -  toBinary";
fctns[85].src[6] = " evalFmla(fmla, vars, varSet)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var oper = parseInt(fmla[0][0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val1 = ''; <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var val2 = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fmla[1] == 'T')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val1 = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla[1] == 'F')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val1 = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var varLoc = parseInt(fmla[1][0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varLoc = varSet.indexOf(varLoc + 'L');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val1 = vars[varLoc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fmla.length >= 3 && fmla[2] == 'T')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val2 = true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla.length >= 3 && fmla[2] == 'F')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val2 = false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla.length >= 3)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var varLoc = parseInt(fmla[2][0]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varLoc = varSet.indexOf(varLoc + 'L');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val2 = vars[varLoc];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (oper)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = !val1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = (val1 && val2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = (val1 || val2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3: <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = (!val1 || val2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'T';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 'F';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[85].title[6] = "Truth Tables -  evalFmla";
fctns[85].src[7] = " genFmla(numVars, numOpers, depth)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var oper = Math.floor(Math.random()*4);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fmla = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var args = new Array(2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[0] = oper + 'O';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (depth < numOpers)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmla[0] = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmla[1] = Math.floor(Math.random()*2);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmla[0] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fmla[1] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fmla[0] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = Math.floor(Math.random()*numVars) + 'L';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = genFmla(numVars, numOpers, depth+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < temp.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = temp[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (oper != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fmla[0] == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = Math.floor(Math.random()*numVars) + 'L';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = genFmla(numVars, numOpers, depth+1);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < temp.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[ans.length] = temp[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[85].title[7] = "Truth Tables -  genFmla";
fctns[85].src[8] = " disp(fmla)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var output = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var zen = 0; zen < fmla.length; zen++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fmla[zen] == '0' && fmla[zen+1] == 'O')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '&#172;';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla[zen] == '1' && fmla[zen+1] == 'O')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '&#8743;';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla[zen] == '2' && fmla[zen+1] == 'O')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '&#8744;';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla[zen] == '3' && fmla[zen+1] == 'O')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '&#8594;';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla[zen] == '0' && fmla[zen+1] == 'L')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'P';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla[zen] == '1' && fmla[zen+1] == 'L')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'Q';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla[zen] == '2' && fmla[zen+1] == 'L')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += 'R';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (fmla[zen] == 'O' || fmla[zen] == 'L')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output += fmla[zen];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return output;<br>}<br></scr" + "ipt><br>";
fctns[85].title[8] = "Truth Tables -  disp";
fctns[85].loc = "http://learninglover.com/examples.php?id=72";
fctns[86] = new Object();
fctns[86].src = new Array();
fctns[86].title = new Array();
fctns[86].src[0] = "<style type='text/css'><br>.c {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.rbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;white-space:nowrap;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>.cbeg {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 1px black solid;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 1.2em;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 1.2em;<br>}<br><br>p<br>{<br>        display: inline;<br>}<br></style><br><script type='text/javascript'>";
fctns[86].title[0] = "Unidirectional TSP - styleTags";
fctns[86].src[1] = " generate()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m = Math.floor(Math.random()*10) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = Math.floor(Math.random()*10) + 5;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('numRows').value = m;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('numClms').value = n;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob = '<table border = '1'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prob2 = '<table border = '1'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var k1 = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob2 += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans[i][j] = Math.floor(Math.random()*9) + 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<td class='c' name='tdc_' + i + '_' + j + '' id='tdc_' + i + '_' + j + '' onclick=changecolor('tdc_' + i + '_' + j + '')>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '<p name='c_' + i + '_' + j + '' id='c_' + i + '_' + j + ''></p></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob2 += '<td class='c' name='tdc2_' + i + '_' + j + '' id='tdc2_' + i + '_' + j + ''>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob2 += '<p name='c2_' + i + '_' + j + '' id='c2_' + i + '_' + j + ''></p></td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob2 += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prob2 += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('toSolve').innerHTML = prob;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('totalCost').innerHTML = 'Total Cost: ' + 0;<br>//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('solved').innerHTML = prob2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc_' + i + '_' + j).style.background = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('c_' + i + '_' + j).innerHTML = ans[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ans;<br>}<br>";
fctns[86].title[1] = "Unidirectional TSP -  generate";
fctns[86].src[2] = " clearcells()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m = document.getElementById('numRows').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = document.getElementById('numClms').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc_' + i + '_' + j).style.background = '#ffffff';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('totalCost').innerHTML = 0;<br>}<br>";
fctns[86].title[2] = "Unidirectional TSP -  clearcells";
fctns[86].src[3] = " changecolor(id)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var row = parseInt(id.split('_')[1]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var clm = parseInt(id.split('_')[2]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m = parseInt(document.getElementById('numRows').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = parseInt(document.getElementById('numClms').value);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nextRow = (parseInt(row) + 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nextRow == m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextRow = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prevRow = (parseInt(row) - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prevRow == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevRow = m-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prevClm = (parseInt(clm) - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prevClm == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevClm = n-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var uleft = 'tdc_' + prevRow + '_' + prevClm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var left = 'tdc_' + row + '_' + prevClm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var lleft = 'tdc_' + nextRow + '_'+ prevClm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((clm == 0) || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;    (clm > 0 && <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((document.getElementById(uleft).style.background == '#00FF00' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(uleft).style.background == 'rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(uleft).style.background == 'none repeat scroll 0% 0% rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(uleft).style.background == 'rgb(0, 255, 0) none repeat scroll 0% 0%') ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (document.getElementById(left).style.background == '#00FF00' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(left).style.background == 'rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(left).style.background == 'none repeat scroll 0% 0% rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(left).style.background == 'rgb(0, 255, 0) none repeat scroll 0% 0%') ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  (document.getElementById(lleft).style.background == '#00FF00' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(lleft).style.background == 'rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(lleft).style.background == 'none repeat scroll 0% 0% rgb(0, 255, 0)' ||<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   document.getElementById(lleft).style.background == 'rgb(0, 255, 0) none repeat scroll 0% 0%'))))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(id).style.background == '#00FF00' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'none repeat scroll 0% 0% rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background == 'rgb(0, 255, 0) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = clm+1; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cell = 'tdc_' + i + '_' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cell = 'tdc_' + i + '_' + clm;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(id).style.background = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = clm+1; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cell = 'tdc_' + i + '_' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var userCst = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j <= clm; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cell = 'tdc_' + i + '_' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.getElementById(cell).style.background == '#00FF00' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell).style.background == 'rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell).style.background == 'none repeat scroll 0% 0% rgb(0, 255, 0)' || <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell).style.background == 'rgb(0, 255, 0) none repeat scroll 0% 0%')<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;userCst += parseInt(document.getElementById('c_' + i + '_' + j).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (clm == n-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minCst = solveNoHint();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (userCst > minCst)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Sorry, but there is a cheaper route');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert('Congratulations! You have found the minimum route');<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('totalCost').innerHTML = 'Total Cost: ' + userCst + '<br>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br>";
fctns[86].title[3] = "Unidirectional TSP -  changecolor";
fctns[86].src[4] = " solve()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m = document.getElementById('numRows').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = document.getElementById('numClms').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cost = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pathCst = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathCst[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost[i][j] = parseInt(document.getElementById('c_' + i + '_' + j).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('tdc_' + i + '_' + j).style.background = '#FFFFFF';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathCst[i][j] = cost[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nextRow = (i + 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nextRow == m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextRow = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prevRow = (i - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prevRow == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevRow = m-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prevClm = (j - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prevClm == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevClm = n-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathCst[i][j] = Math.min(pathCst[prevRow][prevClm], pathCst[i][prevClm], pathCst[nextRow][prevClm]) + cost[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var path = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = n-1; j >= 0; j--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == n-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pathCst[i][j] < ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = pathCst[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path[j] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nextRow = path[j+1]+1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nextRow == m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextRow = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prevRow = path[j+1]-1<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prevRow == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevRow = m-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prevClm = (j - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pathCst[i][j] < ans && (i == prevRow || i == path[j+1] || i == nextRow))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = pathCst[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path[j] = i<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cell = 'tdc_' + path[j] + '_' + j;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(cell).style.background = '#00FF00';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('totalCost').innerHTML = 'Total Cost: ' + pathCst[path[n-1]][n-1] + '<br>';<br>}<br>";
fctns[86].title[4] = "Unidirectional TSP -  solve";
fctns[86].src[5] = " solveNoHint()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var m = document.getElementById('numRows').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var n = document.getElementById('numClms').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cost = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pathCst = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathCst[i] = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cost[i][j] = parseInt(document.getElementById('c_' + i + '_' + j).innerHTML);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = 0; j < n; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathCst[i][j] = cost[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var nextRow = (i + 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nextRow == m)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextRow = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prevRow = (i - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prevRow == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevRow = m-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var prevClm = (j - 1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prevClm == -1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prevClm = n-1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathCst[i][j] = Math.min(pathCst[prevRow][prevClm], pathCst[i][prevClm], pathCst[nextRow][prevClm]) + cost[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var path = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var j = n-1; j >= 0; j--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = Number.MAX_VALUE;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < m; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (j == n-1)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pathCst[i][j] < ans)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = pathCst[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path[j] = i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pathCst[i][j] < ans && (i == path[j+1]-1 || i == path[j+1] || i == path[j+1]+1))<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = pathCst[i][j];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path[j] = i<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (pathCst[path[n-1]][n-1]);<br>}<br></scr" + "ipt>";
fctns[86].title[5] = "Unidirectional TSP -  solveNoHint";
fctns[86].loc = "http://learninglover.com/examples.php?id=86";
fctns[87] = new Object();
fctns[87].src = new Array();
fctns[87].title = new Array();
fctns[87].src[0] = "<script type='text/javascript'>";
fctns[87].title[0] = "XOR Excryption - styleTags";
fctns[87].src[1] = " toAscii(text)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var num = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < text.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num[i] = text.charCodeAt(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return num;<br>}<br>";
fctns[87].title[1] = "XOR Excryption -  toAscii";
fctns[87].src[2] = " init()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var words = ['Abundant', 'Accomplished', 'Achieving', 'Active', 'Admirable', 'Adorable', 'Adventurous', 'Admired', 'Affluent', 'Agreeable', 'Alert', 'Aligned', 'Alive', 'Amazing', 'Appealing', 'Appreciate', 'Artistic', 'Astounding', 'Astute', 'Attentive', 'Attractive', 'Auspicious', 'Authentic', 'Awake', 'Aware', 'Beaming', 'Beautiful', 'Best', 'Blessed', 'Bliss', 'Bold', 'Bright', 'Brilliant', 'Brisk', 'Buoyant', 'Calm', 'Capable', 'Centered', 'Certain', 'Charming', 'Cheerful', 'Clear', 'Clever', 'Competent', 'Complete', 'Confident', 'Connected', 'Conscious', 'Considerate', 'Convenient', 'Courageous', 'Creative', 'Daring', 'Dazzling', 'Delicious', 'Delightful', 'Desirable', 'Determined', 'Diligent', 'Discerning', 'Discover', 'Dynamic', 'Eager', 'Easy', 'Efficient', 'Effortless', 'Elegant', 'Eloquent', 'Energetic', 'Endless', 'Enhancing', 'Engaging', 'Enormous', 'Enterprising', 'Enthusiastic', 'Enticing', 'Excellent', 'Exceptional', 'Exciting', 'Experienced', 'Exquisite', 'Fabulous', 'Fair', 'Far-Sighted', 'Fascinating', 'Fine', 'Flattering', 'Flourishing', 'Fortunate', 'Free', 'Friendly', 'Fulfilled', 'Fun', 'Generous', 'Genuine', 'Gifted', 'Glorious', 'Glowing', 'Good', 'Good-Looking', 'Gorgeous', 'Graceful', 'Gracious', 'Grand', 'Great', 'Handsome', 'Happy', 'Hardy', 'Harmonious', 'Healed', 'Healthy', 'Helpful', 'Honest', 'Humorous', 'Ideal', 'Imaginative', 'Impressive', 'Industrious', 'Ingenious', 'Innovative', 'Inspired', 'Intelligent', 'Interested', 'Interesting', 'Intuitive', 'Inventive', 'Invincible', 'Inviting', 'Irresistible', 'Joyous', 'Judicious', 'Keen', 'Kind', 'Knowing', 'Limitless', 'Lively', 'Loving', 'Lucky', 'Luminous', 'Magical', 'Magnificent', 'Marvelous', 'Masterful', 'Mighty', 'Miraculous', 'Motivated', 'Natural', 'Neat', 'Nice', 'Nurturing', 'Noble', 'Optimistic', 'Outstanding', 'Passionate', 'Peaceful', 'Perfect', 'Persevering', 'Persistent', 'Playful', 'Pleasing', 'Plentiful', 'Positive', 'Powerful', 'Precious', 'Prepared', 'Productive', 'Profound', 'Prompt', 'Prosperous', 'Proud', 'Qualified', 'Quick', 'Radiant', 'Reasonable', 'Refined', 'Refreshing', 'Relaxing', 'Reliable', 'Remarkable', 'Resolute', 'Resourceful', 'Respected', 'Rewarding', 'Robust', 'Safe', 'Satisfied', 'Secure', 'Seductive', 'Self-Reliant', 'Sensational', 'Sensible', 'Sensitive', 'Serene', 'Sharing', 'Skillful', 'Smart', 'Smashing', 'Smooth', 'Sparkling', 'Spiritual', 'Splendid', 'Strong', 'Stunning', 'Successful', 'Superb', 'Swift', 'Talented', 'Tenacious', 'Terrific', 'Thankful', 'Thrilling', 'Thriving', 'Timely', 'Trusting', 'Truthful', 'Ultimate', 'Unique', 'Valiant', 'Valuable', 'Versatile', 'Vibrant', 'Victorious', 'Vigorous', 'Vivacious', 'Vivid', 'Warm', 'Wealthy', 'Well', 'Whole', 'Wise', 'Wonderful', 'Worthy', 'Young', 'Youthful', 'Zeal', 'Zest'];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var keys = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < words.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('msg').options[i] = new Option(words[i], words[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < keys.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('key').options[i] = new Option(keys[i], keys[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var loc = Math.floor(Math.random() * words.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('msg').options[loc].selected = true;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loc = Math.floor(Math.random() * keys.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('key').options[loc].selected = true;<br>}<br>";
fctns[87].title[2] = "XOR Excryption -  init";
fctns[87].src[3] = " toString(asciiNums)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < asciiNums.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[i] = asciiNums.fromCharCode(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[87].title[3] = "XOR Excryption -  toString";
fctns[87].src[4] = " toBinary(num)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = new Array(), i, j;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j < num.length; j++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var digits = Math.floor(Math.log(num[j])/Math.log(2)) + 1;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (digits < 8)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;digits = 8;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = digits-1; i >= 0; i--)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var div = Math.pow(2, i);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (num[j] >= div)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[j*8 + (digits-1)-i] = 1;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;num[j] -= div;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text[j*8 + (digits-1)-i] = 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[87].title[4] = "XOR Excryption -  toBinary";
fctns[87].src[5] = " dispBin(num)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '', i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < num.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += num[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(text);<br>}<br>";
fctns[87].title[5] = "XOR Excryption -  dispBin";
fctns[87].src[6] = " getBin(num)<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var arr = new Array(), i;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < num.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[i] = num[i];<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(arr);<br>}<br>";
fctns[87].title[6] = "XOR Excryption -  getBin";
fctns[87].src[7] = " encode()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pswd = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<b>Encryption</b><table>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var inp = document.getElementById('msg').value;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < inp.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + inp[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ans = toAscii(inp);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + ans[i] + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var msg = dispBin(toBinary(ans));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < msg.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 8 == 0) if (i != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += msg[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var key = dispBin(toBinary(toAscii(document.getElementById('key').value)));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < inp.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + key + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td style='border-top:solid 1px black'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < msg.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 8 == 0) if (i != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td><td style='border-top:solid 1px black'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += (msg[i]*1 + key[i % 8]*1) % 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoded += (msg[i]*1 + key[i % 8]*1) % 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td></tr></table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('dcr').style.display = 'inline';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br>";
fctns[87].title[7] = "XOR Excryption -  encode";
fctns[87].src[8] = " decode()<br>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var ans = getBin(encoded);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pswd = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var text = '<b>Decryption</b><table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var key = dispBin(toBinary(toAscii(document.getElementById('key').value)));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var decoded = new Array();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 8 == 0) if (i != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td><td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += ans[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < ans.length; i+=8)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + key + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr><td style='border-top:solid 1px black'>'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var temp = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < ans.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i % 8 == 0) if (i != 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td><td style='border-top:solid 1px black'>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decoded[decoded.length] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp = '';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += (ans[i]*1 + key[i % 8]*1) % 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp += (ans[i]*1 + key[i % 8]*1) % 2;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</td></tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;decoded[decoded.length] = temp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < decoded.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + parseInt(decoded[i], 2) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i < decoded.length; i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '<td>' + String.fromCharCode(parseInt(decoded[i], 2)) + '</td>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</tr>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += '</table>';<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return text;<br>}<br><br></scr" + "ipt><br>";
fctns[87].title[8] = "XOR Excryption -  decode";
fctns[87].loc = "http://learninglover.com/examples.php?id=65";
</script>
</head>
<body>
<div id="wrapper">
<div id="content">
<h3><center>LEARNINGlover.com: Examples</center></h3>
<p>This is a collection of all the functions I have saved at this site. </p>
<div name="fctInfo" id="fctInfo">
  <select name="fName" id="fName"></select><br>
  <p name="fVal" id="fVal"></p>
</div>
<script type="text/javascript">
var fSel = document.getElementById("fName");
var fTBox = document.getElementById("fVal");
for (var zen = 0; zen < fctns.length; zen++)
{
	for (var yin = 0; yin < fctns[zen].src.length; yin++)
	{
		var option = document.createElement('option');
		option.text = fctns[zen].title[yin];
		option.value = zen + '_' + yin;
		fSel.add(option);
	}
}
fSel.onchange = function(){vals = document.getElementById("fName").value.split("_");fTBox.innerHTML = fctns[vals[0]].src[vals[1]]};
</script>

</div> <!-- end #content -->
</div> <!-- End #wrapper -->
</body>
</html>