<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
Huffman'sCodingAlgorithm<script type="text/javascript">
var t;
function generate(n)
{
	var A = new Array();
	var i, rep, j;
	for (i = 0; i < n; i++)
	{
		next = Math.floor((Math.random())*100);
		rep = Math.floor((Math.random())*10);
		for (j = 0; j < rep; j++)
			A[A.length] = next;
	}

	return A;
}

function linsear(set, elmnt)
{
	var i;
	var ans = -1;

	for (i = 0; i < set.length && ans == -1; i++)
		if (set[i].value == elmnt)
			ans = i;

	return ans;
}

function remove (set, loc)
{
	var i, len = set.length;

	for (i = loc; i < len; i++)
		set[i] = set[i+1];

	set.length--;

	return set;
}

function insert(set, loc, val)
{
	var i, len = set.length;

	for (i = len; i >= loc; i--)
		set[i] = set[i-1];

	set[loc] = val;

	return set;
}

function initTree(val, prob)
{
	var tree = new Object();
	tree.value = val;
	tree.left = null;
	tree.right = null;
	tree.code = "";
	tree.xval = 0;
	tree.yval = 0;
	tree.prob = prob;
	tree.order = 0;
	tree.drawn = false;
	tree.parent = null;

	return tree;
}

function joinBinTree(tree1, tree2, val, order)
{
	var tree3 = new Object();

	tree3.value = val;

	tree1 = code(tree1, "0");
	tree2 = code(tree2, "1");

	tree3.left = tree1;
	tree3.left.parent = tree3;
	tree3.right = tree2;
	tree3.right.parent = tree3;
	tree3.code = "";
	tree3.xval = (tree1.xval + tree2.xval) / 2;

	if (tree1.yval <= tree2.yval)
		tree3.yval = tree1.yval - 50;
	else
		tree3.yval = tree2.yval - 50;

	tree3.prob = tree1.prob + tree2.prob;
	tree3.order = order;
	tree3.drawn = false;
	tree3.parent = null;

	return tree3;
}

function display(tree)
{
	var text = "";
	if (tree.left == null && tree.right == null)
		text += tree.value + " - " + tree.code + "<br>";

	if (tree.left != null)
		text += display(tree.left);

	if (tree.right != null)
		text += display(tree.right);

	return text;
}

function code(tree, val)
{
	tree.code = val + tree.code;

	if (tree.left != null)
		tree.left = code(tree.left, val);

	if (tree.right != null)
		tree.right = code(tree.right, val);

	return tree;
}

function tooclose(tree, loc)
{
	var i, ans = false, dist = 0;

	for (i = 0; i < tree.length && ans == false; i++)
	{
		if (i != loc)
		{
			dist = Math.sqrt(Math.pow(tree[loc].xval - tree[i].xval, 

2) + Math.pow(tree[loc].yval - tree[i].yval, 2));
			if (dist < 50)
			{
				ans = true;
			}
		}
	}

	return ans;
}

function count(set, elmnt)
{
	var i;
	var ans = 0;

	for (i = 0; i < set.length; i++)
		if (set[i] == elmnt)
			ans++;

	return ans;
}

function prob(set, elmnt)
{
	var ans = count(set, elmnt) / set.length;
	return ans;
}

function setXvals(tree)
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	var orig = 50;
	var maxim = c.width - 50;
	var incr = (maxim - orig) / (tree.length-1);

	for (var i = 0; i < tree.length; i++)
	{
		tree[i].xval = orig + i*incr;
		tree[i].yval = c.height - 150;
	}

	return tree;
}

function draw(tree, order)
{
	if (order == "-..")
		order = -1;
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	var i;

	if (order == -1)
	{
		ctx.fillStyle = "#FFFFFF";
		ctx.fillRect(0, 0, c.width, c.height);
		ctx.fill();
		tree.drawn = false;
		if (tree.left != null && tree.right != null)
		{
			t = draw(tree.left, order);
			t = draw(tree.right, order);
		}
		else if (tree.left == null && tree.right != null)
		{
			t = draw(tree.right, order);
		}
		else if (tree.left != null && tree.right == null)
		{
			t = draw(tree.left, order);
			t = draw(tree.right, order);
		}
		if (tree.left == null && tree.right == null)
		{
			order++;
		}
	}
	else if (order == 0)
	{
		if (tree.left == null && tree.right == null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			ctx.fillStyle = "#000000";
			ctx.font = "10px Arial";
			tree.drawn = true;

			if (tree.value != 0)
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(tree.value)/Math.log(10))+1), tree.yval+4);
			else
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), tree.yval+4);

			ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-

10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
		else if (tree.left != null && tree.right == null)
		{
			t = draw(tree.left, order);
		}
		else if (tree.left == null && tree.right != null)
		{
			t = draw(tree.right, order);
		}
		else if (tree.left != null && tree.right != null)
		{
			t = draw(tree.left, order);
			t = draw(tree.right, order);
		}
	}
	else if (tree.order == order)
	{
		if (tree.left != null && tree.right == null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;

			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.left.xval, tree.left.yval);
			ctx.stroke();

			ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-

10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);			
		}
		else if (tree.left == null && tree.right != null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;

			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.right.xval, tree.right.yval);
			ctx.stroke();

			ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-

10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
		else if (tree.left != null && tree.right != null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;

			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.left.xval, tree.left.yval);
			ctx.stroke();

			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.right.xval, tree.right.yval);
			ctx.stroke();

			ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-

10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
	}
	else if (tree.left != null && tree.right != null)
	{
		t = draw(tree.left, order);
		t = draw(tree.right, order);
	}
	else if (tree.left != null && tree.right == null)
		t = draw(tree.left, order);
	else if (tree.left == null && tree.right != null)
		t = draw(tree.right, order);

	if (tree.parent == null && tree.drawn == true)
		order = -1;
	else if (tree.parent != null || (tree.parent == null && tree.drawn == false))
		order += 1;

	if (tree.parent == null)
	{
		var f = function(){t = draw(tree, order);};
		t = setTimeout(f, 2000);
	}

	return t;
}

function huffman(set)
{
	var curr = new Array();
	var probs = new Array();
	var temp = new Array();
	var text = "", loc1, loc2, val;
	var tree = new Array();
	var order = 0;

	var i, j, ans = false, sum = 0;
	for (i = 0; i < set.length; i++)
	{
		if (linsear(tree, set[i]) == -1)
		{
			tree[tree.length] = initTree(set[i], prob(set, set[i]));
			sum += tree[tree.length-1].prob;
		}
	}

	for (i = 0; i < tree.length; i++)
		for (j = i; j < tree.length; j++)
			if (tree[i].prob < tree[j].prob)
			{
				temp = tree[i];
				tree[i] = tree[j];
				tree[j] = temp;
			}

	text += "sum = " + sum + "<br>";

	tree = setXvals(tree);

	while(tree[tree.length-1].prob < .99998)
	{
		order++;
		text += "<table><tr>";
		for (i = 0; i < tree.length; i++)
			text += "<td>" + (Math.round(tree[i].prob*100)/100) + "</td>";

		text += "</tr><tr>";

		for (i = 0; i < tree.length; i++)
			text += "<td>" + display(tree[i]) + "</td>";
		text += "</tr></table><hr><br><br>";

		loc1 = tree.length - 2;
		loc2 = tree.length - 1;

		var ans = false;
		for (i = 0; i < tree.length && !ans; i++)
		{
			if (tree[i].prob < tree[loc1].prob + tree[loc2].prob)
				ans = true;
		}

		insert(tree, i-1, joinBinTree(tree[loc1], tree[loc2], "(" + tree[loc1].value + "|" + tree[loc2].value + ")", order));
		while (tooclose(tree, i-1))
		{
			tree[i-1].yval = tree[i-1].yval - 1;
		}

		remove(tree, tree.length-1);
		remove(tree, tree.length-1);
	}

	if (document.getElementById("show").checked)
		document.getElementById("output").innerHTML += text;
	draw(tree[tree.length-1], 0);

	return display(tree[tree.length-1]);
}

function init(set, k1)
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");

	ctx.fillStyle = "#FFFFFF";
	ctx.fillRect(0, 0, c.width, c.height);
	ctx.fill();

	clearInterval(t);

	var set = generate(k1);
	var ans = new Array();

	var text = "";

	text += "set = {";
	for (var i = 0; i < set.length; i++)
	{
		if (i < set.length-1)
			text += set[i] + ", ";
		else
			text += set[i];
		ans[ans.length] = set[i];
	}
	text += "}<br>";

	document.getElementById("list").innerHTML = text;
	return ans;
}

function retreive(set, start, finish)
{
	var i;
	var ans = new Array();
	for (i = start; i < finish; i++)
		ans[ans.length] = set[i];

	return ans;
}
</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" /><meta name="keywords" content="huffman, coding, huffman coding, encoding, encryption, probability, entropy, grouping, binary, tree, join, binary tree" /> 
<meta name="description" content="This page contains a script I've written to help understand the Huffman Coding Algorithm." />
<title> at LEARNINGlover.com</title>
<script type="text/javascript">
var t;
function generate(n)
{
	var A = new Array();
	var i, rep, j;
	for (i = 0; i < n; i++)
	{
		next = Math.floor((Math.random())*100);
		rep = Math.floor((Math.random())*10);
		for (j = 0; j < rep; j++)
			A[A.length] = next;
	}

	return A;
}

function linsear(set, elmnt)
{
	var i;
	var ans = -1;

	for (i = 0; i < set.length && ans == -1; i++)
		if (set[i].value == elmnt)
			ans = i;

	return ans;
}

function remove (set, loc)
{
	var i, len = set.length;

	for (i = loc; i < len; i++)
		set[i] = set[i+1];

	set.length--;

	return set;
}

function insert(set, loc, val)
{
	var i, len = set.length;

	for (i = len; i >= loc; i--)
		set[i] = set[i-1];

	set[loc] = val;

	return set;
}

function initTree(val, prob)
{
	var tree = new Object();
	tree.value = val;
	tree.left = null;
	tree.right = null;
	tree.code = "";
	tree.xval = 0;
	tree.yval = 0;
	tree.prob = prob;
	tree.order = 0;
	tree.drawn = false;
	tree.parent = null;

	return tree;
}

function joinBinTree(tree1, tree2, val, order)
{
	var tree3 = new Object();

	tree3.value = val;

	tree1 = code(tree1, "0");
	tree2 = code(tree2, "1");

	tree3.left = tree1;
	tree3.left.parent = tree3;
	tree3.right = tree2;
	tree3.right.parent = tree3;
	tree3.code = "";
	tree3.xval = (tree1.xval + tree2.xval) / 2;

	if (tree1.yval <= tree2.yval)
		tree3.yval = tree1.yval - 50;
	else
		tree3.yval = tree2.yval - 50;

	tree3.prob = tree1.prob + tree2.prob;
	tree3.order = order;
	tree3.drawn = false;
	tree3.parent = null;

	return tree3;
}

function display(tree)
{
	var text = "";
	if (tree.left == null && tree.right == null)
		text += tree.value + " - " + tree.code + "<br>";

	if (tree.left != null)
		text += display(tree.left);

	if (tree.right != null)
		text += display(tree.right);

	return text;
}

function code(tree, val)
{
	tree.code = val + tree.code;

	if (tree.left != null)
		tree.left = code(tree.left, val);

	if (tree.right != null)
		tree.right = code(tree.right, val);

	return tree;
}

function tooclose(tree, loc)
{
	var i, ans = false, dist = 0;

	for (i = 0; i < tree.length && ans == false; i++)
	{
		if (i != loc)
		{
			dist = Math.sqrt(Math.pow(tree[loc].xval - tree[i].xval, 

2) + Math.pow(tree[loc].yval - tree[i].yval, 2));
			if (dist < 50)
			{
				ans = true;
			}
		}
	}

	return ans;
}

function count(set, elmnt)
{
	var i;
	var ans = 0;

	for (i = 0; i < set.length; i++)
		if (set[i] == elmnt)
			ans++;

	return ans;
}

function prob(set, elmnt)
{
	var ans = count(set, elmnt) / set.length;
	return ans;
}

function setXvals(tree)
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	var orig = 50;
	var maxim = c.width - 50;
	var incr = (maxim - orig) / (tree.length-1);

	for (var i = 0; i < tree.length; i++)
	{
		tree[i].xval = orig + i*incr;
		tree[i].yval = c.height - 150;
	}

	return tree;
}

function draw(tree, order)
{
	if (order == "-..")
		order = -1;
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	var i;

	if (order == -1)
	{
		ctx.fillStyle = "#FFFFFF";
		ctx.fillRect(0, 0, c.width, c.height);
		ctx.fill();
		tree.drawn = false;
		if (tree.left != null && tree.right != null)
		{
			t = draw(tree.left, order);
			t = draw(tree.right, order);
		}
		else if (tree.left == null && tree.right != null)
		{
			t = draw(tree.right, order);
		}
		else if (tree.left != null && tree.right == null)
		{
			t = draw(tree.left, order);
			t = draw(tree.right, order);
		}
		if (tree.left == null && tree.right == null)
		{
			order++;
		}
	}
	else if (order == 0)
	{
		if (tree.left == null && tree.right == null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			ctx.fillStyle = "#000000";
			ctx.font = "10px Arial";
			tree.drawn = true;

			if (tree.value != 0)
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(tree.value)/Math.log(10))+1), tree.yval+4);
			else
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), tree.yval+4);

			ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-

10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
		else if (tree.left != null && tree.right == null)
		{
			t = draw(tree.left, order);
		}
		else if (tree.left == null && tree.right != null)
		{
			t = draw(tree.right, order);
		}
		else if (tree.left != null && tree.right != null)
		{
			t = draw(tree.left, order);
			t = draw(tree.right, order);
		}
	}
	else if (tree.order == order)
	{
		if (tree.left != null && tree.right == null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;

			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.left.xval, tree.left.yval);
			ctx.stroke();

			ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-

10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);			
		}
		else if (tree.left == null && tree.right != null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;

			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.right.xval, tree.right.yval);
			ctx.stroke();

			ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-

10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
		else if (tree.left != null && tree.right != null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;

			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.left.xval, tree.left.yval);
			ctx.stroke();

			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.right.xval, tree.right.yval);
			ctx.stroke();

			ctx.fillText(Math.round(tree.prob*100)/100, tree.xval-

10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
	}
	else if (tree.left != null && tree.right != null)
	{
		t = draw(tree.left, order);
		t = draw(tree.right, order);
	}
	else if (tree.left != null && tree.right == null)
		t = draw(tree.left, order);
	else if (tree.left == null && tree.right != null)
		t = draw(tree.right, order);

	if (tree.parent == null && tree.drawn == true)
		order = -1;
	else if (tree.parent != null || (tree.parent == null && tree.drawn == false))
		order += 1;

	if (tree.parent == null)
	{
		var f = function(){t = draw(tree, order);};
		t = setTimeout(f, 2000);
	}

	return t;
}

function huffman(set)
{
	var curr = new Array();
	var probs = new Array();
	var temp = new Array();
	var text = "", loc1, loc2, val;
	var tree = new Array();
	var order = 0;

	var i, j, ans = false, sum = 0;
	for (i = 0; i < set.length; i++)
	{
		if (linsear(tree, set[i]) == -1)
		{
			tree[tree.length] = initTree(set[i], prob(set, set[i]));
			sum += tree[tree.length-1].prob;
		}
	}

	for (i = 0; i < tree.length; i++)
		for (j = i; j < tree.length; j++)
			if (tree[i].prob < tree[j].prob)
			{
				temp = tree[i];
				tree[i] = tree[j];
				tree[j] = temp;
			}

	text += "sum = " + sum + "<br>";

	tree = setXvals(tree);

	while(tree[tree.length-1].prob < .99998)
	{
		order++;
		text += "<table><tr>";
		for (i = 0; i < tree.length; i++)
			text += "<td>" + (Math.round(tree[i].prob*100)/100) + "</td>";

		text += "</tr><tr>";

		for (i = 0; i < tree.length; i++)
			text += "<td>" + display(tree[i]) + "</td>";
		text += "</tr></table><hr><br><br>";

		loc1 = tree.length - 2;
		loc2 = tree.length - 1;

		var ans = false;
		for (i = 0; i < tree.length && !ans; i++)
		{
			if (tree[i].prob < tree[loc1].prob + tree[loc2].prob)
				ans = true;
		}

		insert(tree, i-1, joinBinTree(tree[loc1], tree[loc2], "(" + tree[loc1].value + "|" + tree[loc2].value + ")", order));
		while (tooclose(tree, i-1))
		{
			tree[i-1].yval = tree[i-1].yval - 1;
		}

		remove(tree, tree.length-1);
		remove(tree, tree.length-1);
	}

	if (document.getElementById("show").checked)
		document.getElementById("output").innerHTML += text;
	draw(tree[tree.length-1], 0);

	return display(tree[tree.length-1]);
}

function init(set, k1)
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");

	ctx.fillStyle = "#FFFFFF";
	ctx.fillRect(0, 0, c.width, c.height);
	ctx.fill();

	clearInterval(t);

	var set = generate(k1);
	var ans = new Array();

	var text = "";

	text += "set = {";
	for (var i = 0; i < set.length; i++)
	{
		if (i < set.length-1)
			text += set[i] + ", ";
		else
			text += set[i];
		ans[ans.length] = set[i];
	}
	text += "}<br>";

	document.getElementById("list").innerHTML = text;
	return ans;
}

function retreive(set, start, finish)
{
	var i;
	var ans = new Array();
	for (i = start; i < finish; i++)
		ans[ans.length] = set[i];

	return ans;
}
</script>
<h3><center></center></h3>
<p>This page executes Huffman's Coding Algorithm. 

You can read more about this algorithm at <a href="http://en.wikipedia.org/wiki/Huffman_coding">The Wikipedia Page on Huffman Coding</a>.
</p>
<p>
</p>
<form name=data id=data> 
<input type=button onclick="k1 = Math.floor(Math.random()*20)+5;ans = init(set1, 

k1);set1 = retreive(ans, 0, ans.length);document.getElementById

('output').innerHTML = ''" value="New Problem"><br> 
<p name=list id=list></p><br>
<input type="checkbox" name="show" id="show">Show Work?
<input type="button" value="Huffman Coding" onclick="document.getElementById

('output').innerHTML = '';ans = huffman(set1); document.getElementById

('output').innerHTML += 'The Huffman Coding foor this text is<br>' + ans;">  
</FORM>
<canvas id="myCanvas" width="550" height="600" style="border:1px solid 

#d3d3d3;">
your browser does not support the canvas tag
</canvas>
<script type="text/javascript">
	var k1 = Math.floor(Math.random()*20)+5;
	var set1 = new Array();
	var elmnt;
	var ans = init(set1, k1);
	set1 = retreive(ans, 0, ans.length);
</script>
<p name="output" id="output">
</p>
