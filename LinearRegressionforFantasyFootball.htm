<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
LinearRegressionforFantasyFootball<script type="text/javascript">
function GramSchmidt(A, show)
{
	var text = "";
	var uVector = new Array();
	var eVector = new Array();
	var sum = new Array();

	for (var i = 0; i < A.length; i++)
	{
		text += "i = " + i + "<br>";
		uVector[i] = new Array()

		for (var j = 0; j < A[i].length; j++)
		{
			sum[j] = 0;
		}
		
		text += "sum = " + sum + "<br>";
		for (var j = 0; j < i; j++)
		{
			temp = proj(eVector[j], A[i]);
			for (var k = 0; k < temp.length; k++)
			{
				sum[k] += temp[k];
			}
			text += "proj<sub>e<sub>" + j + "</sub></sub>(" + A + "<sub>" + i + "</sub>) = " + proj(eVector[j], A[i]) + "<br>";
		}
		
		for (var j = 0; j < A[i].length; j++)
		{
			uVector[i][j] = A[i][j] - sum[j];
		}
		text += "u[" + i + "] = " + A[i] + " - <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 0 to " + (i-1) + "</sub> proj<sub>e<sub>i</sub></sub>(" + A[i] + ") = " + uVector[i] + "<br>";
		
		var norm = normal(uVector[i]);
		
		eVector[i] = new Array();
		
		for (var j = 0; j < A[i].length; j++)
		{
			eVector[i][j] = uVector[i][j] / norm;
		}
		text += "e[" + i + "] = " + uVector[i] + " / ||" + uVector[i] + "|| = " + uVector[i] + " / " + norm + " = " + eVector[i] + "<br>";
	}

	if (show)
	{
		document.getElementById('output').innerHTML += text;
	}

	return uVector;
}

function multiply(A, B, show)
{
	var C = new Array(A.length);
	
	for (var i = 0; i < C.length; i++)
	{
		C[i] = new Array(B[0].length);
	}
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < B[0].length; j++)
		{
			var sum = 0;
			for (var k = 0; k < A[i].length; k++)
			{
				sum += A[i][k]*B[k][j];
			}
			
			C[i][j] = sum;
		}
	}
	
	return C;
}

function transpose(A)
{
	var ATrans = new Array(A[0].length);
	for (var i = 0; i < ATrans.length; i++)
	{
		ATrans[i] = new Array(A.length);
		for (var j = 0; j < ATrans[i].length; j++)
		{
			ATrans[i][j] = A[j][i];
		}
	}
	
	return ATrans;
}

function mean(data)
{
	var size = data.length;
	var sum = 0;
	
	for (var i = 0; i < data.length; i++)
	{
		sum += parseFloat(data[i]);
	}
	
	return (sum / size);
}

function autocorr(lag, data)
{
	var numer = 0;
	var denom = 0;
	var mu = mean(data);
	
	for (var i = lag; i < data.length; i++)
	{
		numer += ((data[i] - mu)*(data[i-lag] - mu));
	}

	for (var i = 0; i < data.length; i++)
	{
		denom += (data[i] - mu)*(data[i] - mu);
	}

	return (numer / denom);
}

function multLinReg(X, y, show)
{
	var text = "";

	//1. Conduct QR Decomposition of X = QR
	var decomp = QRDecomp(X, show);
	
	text += "<table><tr><td>";
	
	text += "Q = <table>";
	
	for (var i = 0; i < decomp.Q.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.Q[i].length; j++)
		{
			text += "<td>" + decomp.Q[i][j].toFixed(4) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	text += "</td><td>";
	
	text += "R = <table>";
	
	for (var i = 0; i < decomp.R.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.R[i].length; j++)
		{
			text += "<td>" + decomp.R[i][j].toFixed(4) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	text += "</td></tr></table>";

	//2. Compute Q^T y
	var rhs = multiply(transpose(decomp.Q), y, show);
	//3. Solve the triangular system R[beta] = Q^Ty for [beta]
	
	for (var i = 0; i < rhs.length; i++)
	{
		text += "rhs[" + i + "] = " + rhs[i][0].toFixed(4) + "<br>";
	}

	text += "<br>";
	
	text += dispSystem(decomp.R, rhs);

	text += "<br>";
	
	var sol = GElim(decomp.R, rhs);
	
	for (var i = 0; i < sol.length; i++)
	{
		text += "<img src='http://learninglover.com/chars/beta.gif'><sub>" + (i+1) + "</sub> = " + sol[i].toFixed(4) + "<br>";
	}

	text += "<br>";

	text += "So the trend line evaluates to <br>";
	text += "y = ";

	for (var i = 0; i < sol.length; i++)
	{
		text += sol[i].toFixed(4);
		if (i == 1)
		{
			text += "*x<br>";
		}
		else
		{
			text += " + ";
		}
	}
	
	return sol;
}

function GElim(A, b) 
{ 
	var x = new Array();
	var rowmax;
 	var temp;
	//Display the initial matrix

	for (var i = 0; i < A.length; i++)
 	{
		//Find the Maximum element of row i. 
		rowmax = i;
 		for (var j = i + 1; j < A[i].length; j++)
		{
			if (Math.abs(A[j][i]) > Math.abs(A[rowmax][i]))
			{
				rowmax = j;
			}
		}

		if (rowmax != i)
		{
			for (var k = i; k < A[i].length; k++)
			{
				temp = A[i][k];
				A[i][k] = A[rowmax][k];
				A[rowmax][k] = temp;
			}
			
			temp = b[i];
			b[i] = b[rowmax];
			b[rowmax] = temp;
		}

		if (Math.abs(A[i][i]) < 0.00001)
		{
			text += "The Matrix is singular, so we cannot perform Gaussian Elimination on this problem. ";
			return FALSE;
		}
		
		denom = A[i][i];
		for (var k = i; k < A[i].length; k++)
		{
			A[i][k] = (A[i][k] / denom);
		}
		b[i] = b[i] / denom;

		for (var j = i+1; j < A.length; j++)
		{
			b[j] -= (b[i] * A[j][i]);
			for (var k = A[i].length-1; k >= i; k--)
			{
				A[j][k] -= (A[i][k] * A[j][i]);
			}
		}
	}

 	for (var j = A.length-1; j >= 0; j--) 	
	{
		temp = 0.0; 		
		for (var k = j+1; k < A.length; k++)
		{
			temp += A[j][k] * x[k];
		}
		x[j] = ((b[j]-temp) / A[j][j]); 	
	} 	 	
	
	return x;
}

function dispSystem(A, b)
{
	var text = "";
	
	for (var i = 0; i < A.length; i++) 
	{
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] != 0)
			{
				text += A[i][j].toFixed(4) + "x<sub>" + j + "</sub> + ";
			}
		}
		
		text += " = " + b[i][0].toFixed(4) + "<br>";
	}
	
	return text;
}

function QRDecomp(A, show)
{
	var aVectors = transpose(A);
	
	text = "aVectors = <table>";
	
	for (var i = 0; i < aVectors.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < aVectors[i].length; j++)
		{
			text += "<td>" + aVectors[i][j].toFixed(4) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	var uVector = new Array();
	var eVector = new Array();
	var eVectorTxt = new Array();
	var sum = new Array();

	for (var i = 0; i < aVectors.length; i++)
	{
		uVector[i] = new Array()

		for (var j = 0; j < aVectors[i].length; j++)
		{
			sum[j] = 0;
		}
		
		for (var j = 0; j < i; j++)
		{
			temp = proj(eVector[j], aVectors[i]);
			for (var k = 0; k < temp.length; k++)
			{
				sum[k] += temp[k];
			}
			proj(eVector[j], aVectors[i]) + "<br>";
		}
		
		for (var j = 0; j < aVectors[i].length; j++)
		{
			uVector[i][j] = aVectors[i][j] - sum[j];
		}
		
		var norm = normal(uVector[i]);
		
		eVector[i] = new Array();
		eVectorTxt[i] = new Array();
		
		for (var j = 0; j < aVectors[i].length; j++)
		{
			eVector[i][j] = uVector[i][j] / norm;
			eVectorTxt[i][j] = uVector[i][j] + " / " + norm;
		}
	}
	
	uVector = transpose(uVector);
	eVector = transpose(eVector);
	eVectorTxt = transpose(eVectorTxt);
	
	text += "</table>uVector = <table>";
	
	for (var i = 0; i < uVector.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < uVector[i].length; j++)
		{
			text += "<td>" + uVector[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";

	var decomp = new Object();
	decomp.Q = new Array();
	
	for (var i = 0; i < eVector.length; i++)
	{
		decomp.Q[i] = eVectorTxt[i];
	}
	
	for (var i = 0; i < eVector.length; i++)
	{
		decomp.Q[i] = eVector[i];
	}
	
	decomp.R = multiply(transpose(decomp.Q), A, false);
	
	if (show)
	{
		document.getElementById("output").innerHTML += text;
	}
	
	QRCheck(decomp, aVectors);
	
	return decomp;
}

function QRCheck(decomp, A)
{
	var text = "A = <table>";
	
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j] + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>Q = <table>";
	
	for (var i = 0; i < decomp.Q.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.Q[i].length; j++)
		{
			text += "<td>" + decomp.Q[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>R = <table>";
	
	for (var i = 0; i < decomp.R.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.R[i].length; j++)
		{
			text += "<td>" + decomp.R[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table> QR = <table>";
	var QR = multiply(decomp.Q, decomp.R, false);
	
	for (var i = 0; i < QR.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < QR[i].length; j++)
		{
			text += "<td>" + QR[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
//	document.getElementById("output").innerHTML += text;
}

function proj(vec1, vec2)
{
	var denom = innerProd(vec1, vec1);
	var numer = innerProd(vec1, vec2);
	
	var vec3 = new Array();
	
	for (var i = 0; i < vec1.length; i++)
	{
		vec3[i] = (numer / denom) * vec1[i];
	}
	
//	document.getElementById("output").innerHTML += text;
	
	return vec3;
}

function innerProd(vec1, vec2)
{
	if (vec1.length == vec2.length)
	{
		var ans = 0;
		for (var i = 0; i < vec1.length; i++)
		{
			ans += vec1[i] * vec2[i];
		}
		
		return ans;
	}
}

function normal(vec)
{
	var norm = 0;
	for (var i = 0; i < vec.length; i++)
	{
		norm += vec[i]*vec[i];
	}
	norm = Math.sqrt(norm);
	
	return norm;
}

function postProcess1()
{
	document.getElementById('output').innerHTML = '';
	text2 = 'Orthogonal Basis = <table>';
	sol = GramSchmidt(A, true);
	for (var i = 0; i < sol.length; i++) 
	{
		text2 += '<tr><td>v<sub>' + i + '</sub><sup>T</sup> = (</td>';
		for(var j = 0; j < sol[i].length; j++)
		{
			text2 += '<td>' + sol[i][j].toFixed(3) + '</td>';
		}
		text2 += '<td>)<sup>T</sup></td></tr>'; 
	}
	text2 += '</table>';
	text2 += 'Orthonormal Basis = <table>';
	for (var i = 0; i < sol.length; i++) 
	{
		sol[i] = normalize(sol[i]); 
	}
	for (var i = 0; i < sol.length; i++) 
	{
		text2 += '<tr><td>v<sub>' + i + '</sub><sup>T</sup> = (</td>';
		for(var j = 0; j < sol[i].length; j++)
		{
			text2 += '<td>' + sol[i][j].toFixed(3) + '</td>';
		}
		text2 += '<td>)<sup>T</sup></td></tr>'; 
	} 
	text2 += '</table>';
	document.getElementById('output').innerHTML += text2;
}

function postProcess2()
{
	document.getElementById('output').innerHTML = '';
	var data = document.getElementById("Player").value.split(", ");
	
	var A = new Array();
	var b = new Array();
	var lagged = new Array();
	var text = "";
	
	data = sort(data);
	
	for (var i = 1; i < data.length; i++)
	{
		var temp0 = data[i].split(":");
		var temp1 = data[i-1].split(":");
		var len = b.length;
		b[len] = new Array();
		b[len][0] = parseFloat(temp0[1]);
		A[len] = new Array();
		A[len][0] = 1;
		A[len][1] = parseFloat(temp1[1]);
		lagged[len] = new Array();
		lagged[len][0] = parseFloat(temp1[1]);
	}
	
	text += "<table><tr><td>";
	
	text += "A = <table>";
	
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j].toFixed(4) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	text += "</td><td>";
	
	text += "<table><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>1</sub></td></tr><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>2</sub></td></tr></table>";
	
	text += "</td><td> = </td><td>";
	
	text += "<table>"
	
//	var pts = new Array();
//	
//	for (var i = 0; i < data.length; i++)
//	{
//		pts[i] = new Array();
//		var temp = data[i].split(":");
//		pts[i][0] = temp[1];
//	}
	
	for (var i = 0; i < b.length; i++)
	{
		text += "<tr><td>" + b[i][0].toFixed(4) + "</td></tr>";
	}
	
	text += "</table>";
	
	text += "</td></tr></table>";
	
//	if (document.getElementById("show").checked)
//	{
		document.getElementById("output").innerHTML += text;
//	}
	sol = multLinReg(A, b, true);
	
	text += "y = " + sol[0].toFixed(4) + " + " + sol[1].toFixed(4) + "*x<br>";

	text += "We would like to check the 'Goodness of Fit' of this model. To do this, we will perform the R-squared test<br>";
	text += "To compute this we will calculate: <br>";
	text += "<ol>";
	text += "<li>SS<sub>tot</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - <img src='http://learninglover.com/chars/ybar.jpg'>)<sup>2</sup>";
	text += "<li>SS<sub>reg</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(f<sub>i</sub> - <img src='http://learninglover.com/chars/ybar.jpg'>)<sup>2</sup>";
	text += "<li>SS<sub>res</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - f<sub>i</sub>)<sup>2</sup>";
	text += "</ol>";

	text += "The most general definition of the R-squared test is 1 - SS<sub>res</sub> / SS<sub>tot</sub><br>";

	var sstot = 0;
	var ssres = 0;
	var dtamean = 0;

	for (var i = 0; i < b.length; i++)
	{
		dtamean += parseFloat(lagged[i][0]);
	}

	dtamean = dtamean / lagged.length;

	text += "<img src='http://www.learninglover.com/chars/ybar.jpg'> = " + dtamean.toFixed(4) + "<br>";

	var z = new Array();

	for (var i = 0; i < lagged.length; i++)
	{
		z[i] = sol[1]*(i+1) + sol[0];
		sstot += ((lagged[i][0] - dtamean)*(lagged[i][0] - dtamean));
		ssres += ((lagged[i][0] - (sol[1]*(i+1) + sol[0]))*(lagged[i][0] - (sol[1]*(i+1) + sol[0])));
	}

	text += "SS<sub>tot</sub> = " + sstot.toFixed(4) + "<br>";
	text += "SS<sub>res</sub> = " + ssres.toFixed(4) + "<br>";

	var rsq = 1 - (ssres / sstot);

	text += "The R-squared term for this linear regression is <br>";

	text += "R-Squared: " + rsq.toFixed(4) + "<br>";

	text += "The values of this regression are <br>";
	for (var i = 0; i < z.length; i++)
	{
		text += z[i].toFixed(4) + "<br>";
	}

	if (rsq < 0.5)
	{
		text += "This implies that we should not have too much faith in this linear regression. To see why, we must understand that this data represents a time series and not an independent data set (a player's results for this current week are influenced by how he's performed in previous weeks).<br>";
		text += "We can also see this by looking at the autocorrelation of the residuals. <br><br>";
		var ers = new Array();
		ers = getErrors(b, sol);

		text += "This trend line gives the following errors: <br>";
		for (var i = 0; i < ers.length; i++)
		{
			text += "Error[" + (i+1) + "] = " + ers[i].toFixed(4) + "<br>";
		}

		text += "<br>";

		text += "To check how accurate we can use this model to predict future events, we consider the autocorrelation of these errors: <br>";

		var acr = new Array();
		acr[0] = 1;
		for (var i = 1; i < b.length - 1; i++)
		{
			var len = acr.length;
			acr[len] = autocorr(i, ers);
		}

		for (var i = 0; i < acr.length; i++)
		{
			text += "autoCorrelation(" + i + ") = " + acr[i].toFixed(4) + "<br>";
		}

		text += "For linear regressions, we would the expected value of the autocorrelation of errors to be zero. We can see here that they are not. <br><br>";

		drawACR(acr);
	}
//	if (show)
//	{
		document.getElementById("output").innerHTML += text;
//	}

	drawLine(lagged, sol);	
}

function postProcess3()
{
	document.getElementById('output').innerHTML = '';
	var data = document.getElementById("Player").value.split(", ");
	
	var A = new Array();
	var b = new Array();
	var text = "";
	
	data = sort(data);
	
	for (var i = 0; i < data.length; i++)
	{
		var temp = data[i].split(":");
		var len = b.length;
		b[len] = new Array();
		b[len][0] = temp[1];
		A[len] = new Array();
		A[len][0] = 1;
		A[len][1] = parseFloat(temp[0]);
	}
	
	text += "<table><tr><td>";
	
	text += "A = <table>";
	
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	text += "</td><td>";
	
	text += "<table><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>1</sub></td></tr><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>2</sub></td></tr></table>";
	
	text += "</td><td> = </td><td>";
	
	text += "<table>"
	
	for (var i = 0; i < b.length; i++)
	{
		text += "<tr><td>" + b[i][0] + "</td></tr>";
	}
	
	text += "</table>";
	
	text += "</td></tr></table>";
	
//	if (document.getElementById("show").checked)
//	{
		document.getElementById("output").innerHTML += text;
//	}
	sol = multLinReg(A, b, true);
	
	text += "y = " + sol[0].toFixed(4) + " + " + sol[1].toFixed(4) + "*x<br>";

	text += "We would like to check the 'Goodness of Fit' of this model. To do this, we will perform the R-squared test<br>";
	text += "To compute this we will calculate: <br>";
	text += "<ol>";
	text += "<li>SS<sub>tot</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - <img src='http://learninglover.com/chars/ybar.jpg'>)<sup>2</sup>";
	text += "<li>SS<sub>reg</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(f<sub>i</sub> - <img src='http://learninglover.com/chars/ybar.jpg'>)<sup>2</sup>";
	text += "<li>SS<sub>res</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - f<sub>i</sub>)<sup>2</sup>";
	text += "</ol>";

	text += "The most general definition of the R-squared test is 1 - SS<sub>res</sub> / SS<sub>tot</sub><br>";

	var sstot = 0;
	var ssres = 0;
	var dtamean = 0;

	for (var i = 0; i < b.length; i++)
	{
		dtamean += parseFloat(b[i][0]);
	}

	dtamean = dtamean / b.length;

	text += "<img src='http://www.learninglover.com/chars/ybar.jpg'> = " + dtamean.toFixed(4) + "<br>";

	var z = new Array();

	for (var i = 0; i < b.length; i++)
	{
		z[i] = sol[1]*(i) + sol[0];
		sstot += ((b[i][0] - dtamean)*(b[i][0] - dtamean));
		ssres += ((b[i][0] - (sol[1]*(i) + sol[0]))*(b[i][0] - (sol[1]*(i) + sol[0])));
	}

	text += "SS<sub>tot</sub> = " + sstot.toFixed(4) + "<br>";
	text += "SS<sub>res</sub> = " + ssres.toFixed(4) + "<br>";

	var rsq = 1 - (ssres / sstot);

	text += "The R-squared term for this linear regression is <br>";

	text += "R-Squared: " + rsq.toFixed(4) + "<br>";

	if (rsq < 0.5)
	{
		text += "This implies that we should not have too much faith in this linear regression. To see why, we must understand that this data represents a time series and not an independent data set (a player's results for this current week are influenced by how he's performed in previous weeks).<br>";
		text += "We can also see this by looking at the autocorrelation of the residuals. <br><br>";
		var ers = new Array();
		ers = getErrors(b, sol);

		text += "This trend line gives the following errors: <br>";
		for (var i = 0; i < ers.length; i++)
		{
			text += "Error[" + (i+1) + "] = " + ers[i].toFixed(4) + "<br>";
		}

		text += "<br>";

		text += "To check how accurate we can use this model to predict future events, we consider the autocorrelation of these errors: <br>";

		var acr = new Array();
		acr[0] = 1;
		for (var i = 1; i < b.length - 1; i++)
		{
			var len = acr.length;
			acr[len] = autocorr(i, ers);
		}

		for (var i = 0; i < acr.length; i++)
		{
			text += "autoCorrelation(" + i + ") = " + acr[i].toFixed(4) + "<br>";
		}

		text += "For linear regressions, we would the expected value of the autocorrelation of errors to be zero. We can see here that they are not. <br><br>";

		drawACR(acr);
	}
//	if (show)
//	{
		document.getElementById("output").innerHTML += text;
//	}

	drawLine(b, sol);	
}

function sort(data)
{
	for (var i = 0; i < data.length; i++)
	{
		for (var j = i+1; j < data.length; j++)
		{
			var week1 = parseInt(data[i].split(":")[0]);
			var week2 = parseInt(data[j].split(":")[0]);
			
			if (week1 > week2)
			{
				var temp = data[i];
				data[i] = data[j];
				data[j] = temp;
			}
		}
	}
	
	return data;
}

function init()
{
	document.getElementById("acrGph").hidden = true;
	document.getElementById('output').innerHTML = '';
	var data = document.getElementById("Player").value.split(", ");
	
	var b = new Array();
	var text = "";
	
	data = sort(data);
	
	for (var i = 0; i < data.length; i++)
	{
		var temp = data[i].split(":");
		var len = b.length;
		b[len] = new Array();
		b[len][0] = temp[1];
	}
	
	drawPoints(b);
}

function maximum(data)
{
	var mxm = -1;
	for (var i = 0; i < data.length;  i++)
	{
		for (var j = 0; j < data[i].length;  j++)
		{
			if (parseFloat(data [i][j]) > mxm)
			{
				mxm = parseFloat(data [i][j]);
			}
		}
	}
	
	return mxm;
}

function evalReg(beta, xVal)
{
	return (beta[0] + beta[1]*xVal);
}

function getErrors(data, beta)
{
	var errors = new Array();
	
	for (var i = 0; i < data.length; i++)
	{
		errors[i] = data[i][0] - evalReg(beta, i);
	}
	
	document.getElementById("output").innerHTML += "The Errors in this Regression are :<br>";
	
	for (var i = 0; i < errors.length; i++)
	{
		document.getElementById("output").innerHTML += "Week " + (i+1) + ": " + errors[i].toFixed(4) + "<br>";
	}

	return errors;
}

function drawPoints(data)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
	var numClms = 17;
	var numRows = Math.ceil (maximum (data)) + 5;
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
	
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
	
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height);
	ctx.lineTo(c.width, c.height);
	ctx.stroke();
	
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-i);
		ctx.lineTo(5, c.height-i);
		ctx.stroke();
	}
	
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, c.height);
		ctx.lineTo(i, c.height-5);
		ctx.stroke();
	}	
	
	for (var i = 0; i < data.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height - data [i][0]*yHeight,3,0,2*Math.PI);
		ctx.stroke();
	}
}

function drawLine(data, beta)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
	var numClms = 17;
	var numRows = Math.ceil (maximum (data)) + 5;
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
	
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
	
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height);
	ctx.lineTo(c.width, c.height);
	ctx.stroke();
	
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-i);
		ctx.lineTo(5, c.height-i);
		ctx.stroke();
	}
	
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, c.height);
		ctx.lineTo(i, c.height-5);
		ctx.stroke();
	}	
	
	for (var i = 0; i < data.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height - data [i][0]*yHeight,3,0,2*Math.PI);
		ctx.stroke();
	}
	
	var pt0x = 0;
	var pt0y = beta [0];
	
	var pt1x = 17;
	var pt1y = (beta [0] + beta [1]*pt1x);

	ctx.strokeStyle = "#3333ff";
	ctx.beginPath ();
	ctx.moveTo (pt0x*xWidth, c.height - pt0y*yHeight);
	ctx.lineTo (pt1x*xWidth, c.height - pt1y*yHeight);
	ctx.stroke ();

	for (var i = 0; i < data.length; i++)
	{
		ctx.strokeStyle = "#FFFF00";
		ctx.beginPath();
		ctx.moveTo((i+1)*xWidth, c.height - evalReg(beta, (i+1))*yHeight);
		ctx.lineTo((i+1)*xWidth, c.height - data[i]*yHeight)
		ctx.stroke();
	}
}

function drawACR(acr)
{
	document.getElementById("acrGph").hidden = false;
	var c = document.getElementById ("acrGph");
	var ctx = c.getContext("2d");
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
	var numClms = 17;
	var numRows = 2;
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
	
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
	
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height / 2);
	ctx.lineTo(c.width, c.height / 2);
	ctx.stroke();
	
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-i);
		ctx.lineTo(5, c.height-i);
		ctx.stroke();
	}
	
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, (c.height/2)+5);
		ctx.lineTo(i, (c.height/2)-5);
		ctx.stroke();
	}	
	
	for (var i = 0; i < acr.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height/2 - (c.height/2)* acr[i],3,0,2*Math.PI);
		ctx.stroke();
	}
	
//	var pt0x = 0;
//	var pt0y = beta [0];
//	
//	var pt1x = 17;
//	var pt1y = (beta [0] + beta [1]*pt1x);
//
//	ctx.strokeStyle = "#3333ff";
//	ctx.beginPath ();
//	ctx.moveTo (pt0x*xWidth, c.height - pt0y*yHeight);
//	ctx.lineTo (pt1x*xWidth, c.height - pt1y*yHeight);
//	ctx.stroke ();

	for (var i = 0; i < acr.length; i++)
	{
		ctx.strokeStyle = "#000000";
		ctx.beginPath();
		ctx.moveTo((i+1)*xWidth, c.height/2);
		ctx.lineTo((i+1)*xWidth, c.height/2 - (c.height/2)* acr[i]);
		ctx.stroke();
	}
}
</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" />

<title> at LEARNINGlover.com</title>
<script type="text/javascript">
function GramSchmidt(A, show)
{
	var text = "";
	var uVector = new Array();
	var eVector = new Array();
	var sum = new Array();

	for (var i = 0; i < A.length; i++)
	{
		text += "i = " + i + "<br>";
		uVector[i] = new Array()

		for (var j = 0; j < A[i].length; j++)
		{
			sum[j] = 0;
		}
		
		text += "sum = " + sum + "<br>";
		for (var j = 0; j < i; j++)
		{
			temp = proj(eVector[j], A[i]);
			for (var k = 0; k < temp.length; k++)
			{
				sum[k] += temp[k];
			}
			text += "proj<sub>e<sub>" + j + "</sub></sub>(" + A + "<sub>" + i + "</sub>) = " + proj(eVector[j], A[i]) + "<br>";
		}
		
		for (var j = 0; j < A[i].length; j++)
		{
			uVector[i][j] = A[i][j] - sum[j];
		}
		text += "u[" + i + "] = " + A[i] + " - <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 0 to " + (i-1) + "</sub> proj<sub>e<sub>i</sub></sub>(" + A[i] + ") = " + uVector[i] + "<br>";
		
		var norm = normal(uVector[i]);
		
		eVector[i] = new Array();
		
		for (var j = 0; j < A[i].length; j++)
		{
			eVector[i][j] = uVector[i][j] / norm;
		}
		text += "e[" + i + "] = " + uVector[i] + " / ||" + uVector[i] + "|| = " + uVector[i] + " / " + norm + " = " + eVector[i] + "<br>";
	}

	if (show)
	{
		document.getElementById('output').innerHTML += text;
	}

	return uVector;
}

function multiply(A, B, show)
{
	var C = new Array(A.length);
	
	for (var i = 0; i < C.length; i++)
	{
		C[i] = new Array(B[0].length);
	}
	
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < B[0].length; j++)
		{
			var sum = 0;
			for (var k = 0; k < A[i].length; k++)
			{
				sum += A[i][k]*B[k][j];
			}
			
			C[i][j] = sum;
		}
	}
	
	return C;
}

function transpose(A)
{
	var ATrans = new Array(A[0].length);
	for (var i = 0; i < ATrans.length; i++)
	{
		ATrans[i] = new Array(A.length);
		for (var j = 0; j < ATrans[i].length; j++)
		{
			ATrans[i][j] = A[j][i];
		}
	}
	
	return ATrans;
}

function mean(data)
{
	var size = data.length;
	var sum = 0;
	
	for (var i = 0; i < data.length; i++)
	{
		sum += parseFloat(data[i]);
	}
	
	return (sum / size);
}

function autocorr(lag, data)
{
	var numer = 0;
	var denom = 0;
	var mu = mean(data);
	
	for (var i = lag; i < data.length; i++)
	{
		numer += ((data[i] - mu)*(data[i-lag] - mu));
	}

	for (var i = 0; i < data.length; i++)
	{
		denom += (data[i] - mu)*(data[i] - mu);
	}

	return (numer / denom);
}

function multLinReg(X, y, show)
{
	var text = "";

	//1. Conduct QR Decomposition of X = QR
	var decomp = QRDecomp(X, show);
	
	text += "<table><tr><td>";
	
	text += "Q = <table>";
	
	for (var i = 0; i < decomp.Q.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.Q[i].length; j++)
		{
			text += "<td>" + decomp.Q[i][j].toFixed(4) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	text += "</td><td>";
	
	text += "R = <table>";
	
	for (var i = 0; i < decomp.R.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.R[i].length; j++)
		{
			text += "<td>" + decomp.R[i][j].toFixed(4) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	text += "</td></tr></table>";

	//2. Compute Q^T y
	var rhs = multiply(transpose(decomp.Q), y, show);
	//3. Solve the triangular system R[beta] = Q^Ty for [beta]
	
	for (var i = 0; i < rhs.length; i++)
	{
		text += "rhs[" + i + "] = " + rhs[i][0].toFixed(4) + "<br>";
	}

	text += "<br>";
	
	text += dispSystem(decomp.R, rhs);

	text += "<br>";
	
	var sol = GElim(decomp.R, rhs);
	
	for (var i = 0; i < sol.length; i++)
	{
		text += "<img src='http://learninglover.com/chars/beta.gif'><sub>" + (i+1) + "</sub> = " + sol[i].toFixed(4) + "<br>";
	}

	text += "<br>";

	text += "So the trend line evaluates to <br>";
	text += "y = ";

	for (var i = 0; i < sol.length; i++)
	{
		text += sol[i].toFixed(4);
		if (i == 1)
		{
			text += "*x<br>";
		}
		else
		{
			text += " + ";
		}
	}
	
	return sol;
}

function GElim(A, b) 
{ 
	var x = new Array();
	var rowmax;
 	var temp;
	//Display the initial matrix

	for (var i = 0; i < A.length; i++)
 	{
		//Find the Maximum element of row i. 
		rowmax = i;
 		for (var j = i + 1; j < A[i].length; j++)
		{
			if (Math.abs(A[j][i]) > Math.abs(A[rowmax][i]))
			{
				rowmax = j;
			}
		}

		if (rowmax != i)
		{
			for (var k = i; k < A[i].length; k++)
			{
				temp = A[i][k];
				A[i][k] = A[rowmax][k];
				A[rowmax][k] = temp;
			}
			
			temp = b[i];
			b[i] = b[rowmax];
			b[rowmax] = temp;
		}

		if (Math.abs(A[i][i]) < 0.00001)
		{
			text += "The Matrix is singular, so we cannot perform Gaussian Elimination on this problem. ";
			return FALSE;
		}
		
		denom = A[i][i];
		for (var k = i; k < A[i].length; k++)
		{
			A[i][k] = (A[i][k] / denom);
		}
		b[i] = b[i] / denom;

		for (var j = i+1; j < A.length; j++)
		{
			b[j] -= (b[i] * A[j][i]);
			for (var k = A[i].length-1; k >= i; k--)
			{
				A[j][k] -= (A[i][k] * A[j][i]);
			}
		}
	}

 	for (var j = A.length-1; j >= 0; j--) 	
	{
		temp = 0.0; 		
		for (var k = j+1; k < A.length; k++)
		{
			temp += A[j][k] * x[k];
		}
		x[j] = ((b[j]-temp) / A[j][j]); 	
	} 	 	
	
	return x;
}

function dispSystem(A, b)
{
	var text = "";
	
	for (var i = 0; i < A.length; i++) 
	{
		for (var j = 0; j < A[i].length; j++)
		{
			if (A[i][j] != 0)
			{
				text += A[i][j].toFixed(4) + "x<sub>" + j + "</sub> + ";
			}
		}
		
		text += " = " + b[i][0].toFixed(4) + "<br>";
	}
	
	return text;
}

function QRDecomp(A, show)
{
	var aVectors = transpose(A);
	
	text = "aVectors = <table>";
	
	for (var i = 0; i < aVectors.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < aVectors[i].length; j++)
		{
			text += "<td>" + aVectors[i][j].toFixed(4) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	var uVector = new Array();
	var eVector = new Array();
	var eVectorTxt = new Array();
	var sum = new Array();

	for (var i = 0; i < aVectors.length; i++)
	{
		uVector[i] = new Array()

		for (var j = 0; j < aVectors[i].length; j++)
		{
			sum[j] = 0;
		}
		
		for (var j = 0; j < i; j++)
		{
			temp = proj(eVector[j], aVectors[i]);
			for (var k = 0; k < temp.length; k++)
			{
				sum[k] += temp[k];
			}
			proj(eVector[j], aVectors[i]) + "<br>";
		}
		
		for (var j = 0; j < aVectors[i].length; j++)
		{
			uVector[i][j] = aVectors[i][j] - sum[j];
		}
		
		var norm = normal(uVector[i]);
		
		eVector[i] = new Array();
		eVectorTxt[i] = new Array();
		
		for (var j = 0; j < aVectors[i].length; j++)
		{
			eVector[i][j] = uVector[i][j] / norm;
			eVectorTxt[i][j] = uVector[i][j] + " / " + norm;
		}
	}
	
	uVector = transpose(uVector);
	eVector = transpose(eVector);
	eVectorTxt = transpose(eVectorTxt);
	
	text += "</table>uVector = <table>";
	
	for (var i = 0; i < uVector.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < uVector[i].length; j++)
		{
			text += "<td>" + uVector[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";

	var decomp = new Object();
	decomp.Q = new Array();
	
	for (var i = 0; i < eVector.length; i++)
	{
		decomp.Q[i] = eVectorTxt[i];
	}
	
	for (var i = 0; i < eVector.length; i++)
	{
		decomp.Q[i] = eVector[i];
	}
	
	decomp.R = multiply(transpose(decomp.Q), A, false);
	
	if (show)
	{
		document.getElementById("output").innerHTML += text;
	}
	
	QRCheck(decomp, aVectors);
	
	return decomp;
}

function QRCheck(decomp, A)
{
	var text = "A = <table>";
	
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j] + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>Q = <table>";
	
	for (var i = 0; i < decomp.Q.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.Q[i].length; j++)
		{
			text += "<td>" + decomp.Q[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>R = <table>";
	
	for (var i = 0; i < decomp.R.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.R[i].length; j++)
		{
			text += "<td>" + decomp.R[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table> QR = <table>";
	var QR = multiply(decomp.Q, decomp.R, false);
	
	for (var i = 0; i < QR.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < QR[i].length; j++)
		{
			text += "<td>" + QR[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
//	document.getElementById("output").innerHTML += text;
}

function proj(vec1, vec2)
{
	var denom = innerProd(vec1, vec1);
	var numer = innerProd(vec1, vec2);
	
	var vec3 = new Array();
	
	for (var i = 0; i < vec1.length; i++)
	{
		vec3[i] = (numer / denom) * vec1[i];
	}
	
//	document.getElementById("output").innerHTML += text;
	
	return vec3;
}

function innerProd(vec1, vec2)
{
	if (vec1.length == vec2.length)
	{
		var ans = 0;
		for (var i = 0; i < vec1.length; i++)
		{
			ans += vec1[i] * vec2[i];
		}
		
		return ans;
	}
}

function normal(vec)
{
	var norm = 0;
	for (var i = 0; i < vec.length; i++)
	{
		norm += vec[i]*vec[i];
	}
	norm = Math.sqrt(norm);
	
	return norm;
}

function postProcess1()
{
	document.getElementById('output').innerHTML = '';
	text2 = 'Orthogonal Basis = <table>';
	sol = GramSchmidt(A, true);
	for (var i = 0; i < sol.length; i++) 
	{
		text2 += '<tr><td>v<sub>' + i + '</sub><sup>T</sup> = (</td>';
		for(var j = 0; j < sol[i].length; j++)
		{
			text2 += '<td>' + sol[i][j].toFixed(3) + '</td>';
		}
		text2 += '<td>)<sup>T</sup></td></tr>'; 
	}
	text2 += '</table>';
	text2 += 'Orthonormal Basis = <table>';
	for (var i = 0; i < sol.length; i++) 
	{
		sol[i] = normalize(sol[i]); 
	}
	for (var i = 0; i < sol.length; i++) 
	{
		text2 += '<tr><td>v<sub>' + i + '</sub><sup>T</sup> = (</td>';
		for(var j = 0; j < sol[i].length; j++)
		{
			text2 += '<td>' + sol[i][j].toFixed(3) + '</td>';
		}
		text2 += '<td>)<sup>T</sup></td></tr>'; 
	} 
	text2 += '</table>';
	document.getElementById('output').innerHTML += text2;
}

function postProcess2()
{
	document.getElementById('output').innerHTML = '';
	var data = document.getElementById("Player").value.split(", ");
	
	var A = new Array();
	var b = new Array();
	var lagged = new Array();
	var text = "";
	
	data = sort(data);
	
	for (var i = 1; i < data.length; i++)
	{
		var temp0 = data[i].split(":");
		var temp1 = data[i-1].split(":");
		var len = b.length;
		b[len] = new Array();
		b[len][0] = parseFloat(temp0[1]);
		A[len] = new Array();
		A[len][0] = 1;
		A[len][1] = parseFloat(temp1[1]);
		lagged[len] = new Array();
		lagged[len][0] = parseFloat(temp1[1]);
	}
	
	text += "<table><tr><td>";
	
	text += "A = <table>";
	
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j].toFixed(4) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	text += "</td><td>";
	
	text += "<table><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>1</sub></td></tr><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>2</sub></td></tr></table>";
	
	text += "</td><td> = </td><td>";
	
	text += "<table>"
	
//	var pts = new Array();
//	
//	for (var i = 0; i < data.length; i++)
//	{
//		pts[i] = new Array();
//		var temp = data[i].split(":");
//		pts[i][0] = temp[1];
//	}
	
	for (var i = 0; i < b.length; i++)
	{
		text += "<tr><td>" + b[i][0].toFixed(4) + "</td></tr>";
	}
	
	text += "</table>";
	
	text += "</td></tr></table>";
	
//	if (document.getElementById("show").checked)
//	{
		document.getElementById("output").innerHTML += text;
//	}
	sol = multLinReg(A, b, true);
	
	text += "y = " + sol[0].toFixed(4) + " + " + sol[1].toFixed(4) + "*x<br>";

	text += "We would like to check the 'Goodness of Fit' of this model. To do this, we will perform the R-squared test<br>";
	text += "To compute this we will calculate: <br>";
	text += "<ol>";
	text += "<li>SS<sub>tot</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - <img src='http://learninglover.com/chars/ybar.jpg'>)<sup>2</sup>";
	text += "<li>SS<sub>reg</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(f<sub>i</sub> - <img src='http://learninglover.com/chars/ybar.jpg'>)<sup>2</sup>";
	text += "<li>SS<sub>res</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - f<sub>i</sub>)<sup>2</sup>";
	text += "</ol>";

	text += "The most general definition of the R-squared test is 1 - SS<sub>res</sub> / SS<sub>tot</sub><br>";

	var sstot = 0;
	var ssres = 0;
	var dtamean = 0;

	for (var i = 0; i < b.length; i++)
	{
		dtamean += parseFloat(lagged[i][0]);
	}

	dtamean = dtamean / lagged.length;

	text += "<img src='http://www.learninglover.com/chars/ybar.jpg'> = " + dtamean.toFixed(4) + "<br>";

	var z = new Array();

	for (var i = 0; i < lagged.length; i++)
	{
		z[i] = sol[1]*(i+1) + sol[0];
		sstot += ((lagged[i][0] - dtamean)*(lagged[i][0] - dtamean));
		ssres += ((lagged[i][0] - (sol[1]*(i+1) + sol[0]))*(lagged[i][0] - (sol[1]*(i+1) + sol[0])));
	}

	text += "SS<sub>tot</sub> = " + sstot.toFixed(4) + "<br>";
	text += "SS<sub>res</sub> = " + ssres.toFixed(4) + "<br>";

	var rsq = 1 - (ssres / sstot);

	text += "The R-squared term for this linear regression is <br>";

	text += "R-Squared: " + rsq.toFixed(4) + "<br>";

	text += "The values of this regression are <br>";
	for (var i = 0; i < z.length; i++)
	{
		text += z[i].toFixed(4) + "<br>";
	}

	if (rsq < 0.5)
	{
		text += "This implies that we should not have too much faith in this linear regression. To see why, we must understand that this data represents a time series and not an independent data set (a player's results for this current week are influenced by how he's performed in previous weeks).<br>";
		text += "We can also see this by looking at the autocorrelation of the residuals. <br><br>";
		var ers = new Array();
		ers = getErrors(b, sol);

		text += "This trend line gives the following errors: <br>";
		for (var i = 0; i < ers.length; i++)
		{
			text += "Error[" + (i+1) + "] = " + ers[i].toFixed(4) + "<br>";
		}

		text += "<br>";

		text += "To check how accurate we can use this model to predict future events, we consider the autocorrelation of these errors: <br>";

		var acr = new Array();
		acr[0] = 1;
		for (var i = 1; i < b.length - 1; i++)
		{
			var len = acr.length;
			acr[len] = autocorr(i, ers);
		}

		for (var i = 0; i < acr.length; i++)
		{
			text += "autoCorrelation(" + i + ") = " + acr[i].toFixed(4) + "<br>";
		}

		text += "For linear regressions, we would the expected value of the autocorrelation of errors to be zero. We can see here that they are not. <br><br>";

		drawACR(acr);
	}
//	if (show)
//	{
		document.getElementById("output").innerHTML += text;
//	}

	drawLine(lagged, sol);	
}

function postProcess3()
{
	document.getElementById('output').innerHTML = '';
	var data = document.getElementById("Player").value.split(", ");
	
	var A = new Array();
	var b = new Array();
	var text = "";
	
	data = sort(data);
	
	for (var i = 0; i < data.length; i++)
	{
		var temp = data[i].split(":");
		var len = b.length;
		b[len] = new Array();
		b[len][0] = temp[1];
		A[len] = new Array();
		A[len][0] = 1;
		A[len][1] = parseFloat(temp[0]);
	}
	
	text += "<table><tr><td>";
	
	text += "A = <table>";
	
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
	
	text += "</td><td>";
	
	text += "<table><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>1</sub></td></tr><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>2</sub></td></tr></table>";
	
	text += "</td><td> = </td><td>";
	
	text += "<table>"
	
	for (var i = 0; i < b.length; i++)
	{
		text += "<tr><td>" + b[i][0] + "</td></tr>";
	}
	
	text += "</table>";
	
	text += "</td></tr></table>";
	
//	if (document.getElementById("show").checked)
//	{
		document.getElementById("output").innerHTML += text;
//	}
	sol = multLinReg(A, b, true);
	
	text += "y = " + sol[0].toFixed(4) + " + " + sol[1].toFixed(4) + "*x<br>";

	text += "We would like to check the 'Goodness of Fit' of this model. To do this, we will perform the R-squared test<br>";
	text += "To compute this we will calculate: <br>";
	text += "<ol>";
	text += "<li>SS<sub>tot</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - <img src='http://learninglover.com/chars/ybar.jpg'>)<sup>2</sup>";
	text += "<li>SS<sub>reg</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(f<sub>i</sub> - <img src='http://learninglover.com/chars/ybar.jpg'>)<sup>2</sup>";
	text += "<li>SS<sub>res</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(y<sub>i</sub> - f<sub>i</sub>)<sup>2</sup>";
	text += "</ol>";

	text += "The most general definition of the R-squared test is 1 - SS<sub>res</sub> / SS<sub>tot</sub><br>";

	var sstot = 0;
	var ssres = 0;
	var dtamean = 0;

	for (var i = 0; i < b.length; i++)
	{
		dtamean += parseFloat(b[i][0]);
	}

	dtamean = dtamean / b.length;

	text += "<img src='http://www.learninglover.com/chars/ybar.jpg'> = " + dtamean.toFixed(4) + "<br>";

	var z = new Array();

	for (var i = 0; i < b.length; i++)
	{
		z[i] = sol[1]*(i) + sol[0];
		sstot += ((b[i][0] - dtamean)*(b[i][0] - dtamean));
		ssres += ((b[i][0] - (sol[1]*(i) + sol[0]))*(b[i][0] - (sol[1]*(i) + sol[0])));
	}

	text += "SS<sub>tot</sub> = " + sstot.toFixed(4) + "<br>";
	text += "SS<sub>res</sub> = " + ssres.toFixed(4) + "<br>";

	var rsq = 1 - (ssres / sstot);

	text += "The R-squared term for this linear regression is <br>";

	text += "R-Squared: " + rsq.toFixed(4) + "<br>";

	if (rsq < 0.5)
	{
		text += "This implies that we should not have too much faith in this linear regression. To see why, we must understand that this data represents a time series and not an independent data set (a player's results for this current week are influenced by how he's performed in previous weeks).<br>";
		text += "We can also see this by looking at the autocorrelation of the residuals. <br><br>";
		var ers = new Array();
		ers = getErrors(b, sol);

		text += "This trend line gives the following errors: <br>";
		for (var i = 0; i < ers.length; i++)
		{
			text += "Error[" + (i+1) + "] = " + ers[i].toFixed(4) + "<br>";
		}

		text += "<br>";

		text += "To check how accurate we can use this model to predict future events, we consider the autocorrelation of these errors: <br>";

		var acr = new Array();
		acr[0] = 1;
		for (var i = 1; i < b.length - 1; i++)
		{
			var len = acr.length;
			acr[len] = autocorr(i, ers);
		}

		for (var i = 0; i < acr.length; i++)
		{
			text += "autoCorrelation(" + i + ") = " + acr[i].toFixed(4) + "<br>";
		}

		text += "For linear regressions, we would the expected value of the autocorrelation of errors to be zero. We can see here that they are not. <br><br>";

		drawACR(acr);
	}
//	if (show)
//	{
		document.getElementById("output").innerHTML += text;
//	}

	drawLine(b, sol);	
}

function sort(data)
{
	for (var i = 0; i < data.length; i++)
	{
		for (var j = i+1; j < data.length; j++)
		{
			var week1 = parseInt(data[i].split(":")[0]);
			var week2 = parseInt(data[j].split(":")[0]);
			
			if (week1 > week2)
			{
				var temp = data[i];
				data[i] = data[j];
				data[j] = temp;
			}
		}
	}
	
	return data;
}

function init()
{
	document.getElementById("acrGph").hidden = true;
	document.getElementById('output').innerHTML = '';
	var data = document.getElementById("Player").value.split(", ");
	
	var b = new Array();
	var text = "";
	
	data = sort(data);
	
	for (var i = 0; i < data.length; i++)
	{
		var temp = data[i].split(":");
		var len = b.length;
		b[len] = new Array();
		b[len][0] = temp[1];
	}
	
	drawPoints(b);
}

function maximum(data)
{
	var mxm = -1;
	for (var i = 0; i < data.length;  i++)
	{
		for (var j = 0; j < data[i].length;  j++)
		{
			if (parseFloat(data [i][j]) > mxm)
			{
				mxm = parseFloat(data [i][j]);
			}
		}
	}
	
	return mxm;
}

function evalReg(beta, xVal)
{
	return (beta[0] + beta[1]*xVal);
}

function getErrors(data, beta)
{
	var errors = new Array();
	
	for (var i = 0; i < data.length; i++)
	{
		errors[i] = data[i][0] - evalReg(beta, i);
	}
	
	document.getElementById("output").innerHTML += "The Errors in this Regression are :<br>";
	
	for (var i = 0; i < errors.length; i++)
	{
		document.getElementById("output").innerHTML += "Week " + (i+1) + ": " + errors[i].toFixed(4) + "<br>";
	}

	return errors;
}

function drawPoints(data)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
	var numClms = 17;
	var numRows = Math.ceil (maximum (data)) + 5;
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
	
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
	
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height);
	ctx.lineTo(c.width, c.height);
	ctx.stroke();
	
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-i);
		ctx.lineTo(5, c.height-i);
		ctx.stroke();
	}
	
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, c.height);
		ctx.lineTo(i, c.height-5);
		ctx.stroke();
	}	
	
	for (var i = 0; i < data.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height - data [i][0]*yHeight,3,0,2*Math.PI);
		ctx.stroke();
	}
}

function drawLine(data, beta)
{
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
	var numClms = 17;
	var numRows = Math.ceil (maximum (data)) + 5;
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
	
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
	
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height);
	ctx.lineTo(c.width, c.height);
	ctx.stroke();
	
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-i);
		ctx.lineTo(5, c.height-i);
		ctx.stroke();
	}
	
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, c.height);
		ctx.lineTo(i, c.height-5);
		ctx.stroke();
	}	
	
	for (var i = 0; i < data.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height - data [i][0]*yHeight,3,0,2*Math.PI);
		ctx.stroke();
	}
	
	var pt0x = 0;
	var pt0y = beta [0];
	
	var pt1x = 17;
	var pt1y = (beta [0] + beta [1]*pt1x);

	ctx.strokeStyle = "#3333ff";
	ctx.beginPath ();
	ctx.moveTo (pt0x*xWidth, c.height - pt0y*yHeight);
	ctx.lineTo (pt1x*xWidth, c.height - pt1y*yHeight);
	ctx.stroke ();

	for (var i = 0; i < data.length; i++)
	{
		ctx.strokeStyle = "#FFFF00";
		ctx.beginPath();
		ctx.moveTo((i+1)*xWidth, c.height - evalReg(beta, (i+1))*yHeight);
		ctx.lineTo((i+1)*xWidth, c.height - data[i]*yHeight)
		ctx.stroke();
	}
}

function drawACR(acr)
{
	document.getElementById("acrGph").hidden = false;
	var c = document.getElementById ("acrGph");
	var ctx = c.getContext("2d");
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
	var numClms = 17;
	var numRows = 2;
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
	
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
	
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height / 2);
	ctx.lineTo(c.width, c.height / 2);
	ctx.stroke();
	
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-i);
		ctx.lineTo(5, c.height-i);
		ctx.stroke();
	}
	
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, (c.height/2)+5);
		ctx.lineTo(i, (c.height/2)-5);
		ctx.stroke();
	}	
	
	for (var i = 0; i < acr.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height/2 - (c.height/2)* acr[i],3,0,2*Math.PI);
		ctx.stroke();
	}
	
//	var pt0x = 0;
//	var pt0y = beta [0];
//	
//	var pt1x = 17;
//	var pt1y = (beta [0] + beta [1]*pt1x);
//
//	ctx.strokeStyle = "#3333ff";
//	ctx.beginPath ();
//	ctx.moveTo (pt0x*xWidth, c.height - pt0y*yHeight);
//	ctx.lineTo (pt1x*xWidth, c.height - pt1y*yHeight);
//	ctx.stroke ();

	for (var i = 0; i < acr.length; i++)
	{
		ctx.strokeStyle = "#000000";
		ctx.beginPath();
		ctx.moveTo((i+1)*xWidth, c.height/2);
		ctx.lineTo((i+1)*xWidth, c.height/2 - (c.height/2)* acr[i]);
		ctx.stroke();
	}
}
</script>
<h3><center></center></h3>
<p>We will use the Linear Regression technique to generate trend lines for NFL player  fantasy football statistics. We do this by solving the system of equations A<img src="http://learninglover.com/chars/beta.gif"> = b, where b is the vector of weekly fantasy values that each player has received over the year and A is the matrix representing the coefficient matrix <img src="http://learninglover.com/chars/beta.gif"><sub>1</sub> + <img src="http://learninglover.com/chars/beta.gif"><sub>2</sub> for each equation. 
<br>
<br>Because A is a rectangular matrix, we will be able to solve this system by decomposing A into an orthogonal matrix Q and an upper triangular matrix R (using QR decomposition), i.e A = QR. 
<br>
<br>Once we have decomposed the matrix, we can multiply both sides of the system of equations by Q<sup>T</sup> which by the definition of orthogonal matrices is the inverse of Q and we arrive at the system of linear equations R<img src="http://learninglover.com/chars/beta.gif"> = Q<sup>T</sup>b. 
<br>
<br>We can then use back-substitution to solve the system of equations for the vector <img src="http://learninglover.com/chars/beta.gif">. </p>
<select name="Player" id="Player" onChange="init()">
<option value="10:21.10, 9:12.80, 8:11.50, 7:21.50, 6:16.30, 5:6.10, 4:5.10, 3:10.60, 2:4.10, 1:28.20">A.J. Green Cin WR</option>
<option value="3:0.60">A.J. Jenkins KC WR</option>
<option value="9:25.00, 8:12.00, 7:3.40, 6:6.30, 5:4.90, 4:1.00, 3:5.20, 2:11.60">Aaron Dobson NE WR</option>
<option value="9:1.98, 8:26.50, 7:29.60, 6:18.70, 5:17.76, 3:14.16, 2:51.90, 1:30.62">Aaron Rodgers GB QB</option>
<option value="10:2.70, 8:2.70, 6:1.10, 5:0.50, 4:6.90, 3:2.50, 2:6.40, 1:3.70">Ace Sanders Jax WR</option>
<option value="10:19.70, 9:23.70, 8:14.30, 7:5.60, 6:8.30, 4:26.00, 3:15.50, 2:8.70, 1:29.10">Adrian Peterson Min RB</option>
<option value="3:17.10, 2:14.40, 1:3.30">Ahmad Bradshaw Ind RB</option>
<option value="9:0.40, 7:12.40, 2:1.30">Aldrick Robinson Was WR</option>
<option value="8:2.70, 4:0.20, 3:1.40">Alex Green NYJ RB</option>
<option value="10:0.30">Alex Smith Cin TE</option>
<option value="9:5.66, 8:25.00, 7:16.00, 6:8.02, 5:8.80, 4:29.22, 3:14.12, 2:26.62, 1:21.42">Alex Smith KC QB</option>
<option value="7:3.00, 5:1.80, 3:9.40, 2:0.60, 1:2.60">Alfonso Smith Ari RB</option>
<option value="10:13.90, 9:18.10, 8:15.30, 7:9.50, 6:14.10, 4:7.10, 3:13.30, 2:12.00, 1:9.40">Alfred Morris Was RB</option>
<option value="2:0.90, 1:3.10">Allen Reisner Jax TE</option>
<option value="10:11.90, 9:12.10, 7:12.10, 6:4.20, 5:29.80, 4:21.40, 3:5.10, 2:4.10, 1:4.20">Alshon Jeffery Chi WR</option>
<option value="10:17.90">Andre Brown NYG RB</option>
<option value="8:1.40, 6:0.70, 4:0.50, 2:3.60, 1:8.80">Andre Caldwell Den WR</option>
<option value="10:7.30, 8:24.20, 7:1.30, 6:15.20, 5:8.30, 4:5.10, 3:7.60, 2:12.20, 1:1.30">Andre Ellington Ari RB</option>
<option value="10:15.70, 9:42.90, 7:8.90, 6:8.80, 5:3.90, 4:11.00, 3:3.60, 2:7.60, 1:14.60">Andre Johnson Hou WR</option>
<option value="10:13.20, 8:0.80, 7:3.30, 6:0.50, 4:0.60, 3:0.60, 2:3.60, 1:9.70">Andre Roberts Ari WR</option>
<option value="7:1.00">Andre Smith Dal TE</option>
<option value="9:1.00">Andrew Hawkins Cin WR</option>
<option value="10:19.82, 9:30.84, 7:36.02, 6:7.98, 5:22.06, 4:22.88, 3:14.76, 2:20.64, 1:28.92">Andrew Luck Ind QB</option>
<option value="10:0.80, 9:3.40, 8:1.30, 3:2.10, 2:0.70">Andrew Quarless GB TE</option>
<option value="10:19.16, 9:6.72, 8:41.00, 7:37.48, 6:31.18, 5:8.98, 4:5.54, 3:17.70, 2:18.20, 1:19.48">Andy Dalton Cin QB</option>
<option value="10:2.30, 8:5.60, 7:7.40, 6:2.80, 5:2.10, 4:15.00, 3:6.70, 2:0.70, 1:28.80">Anquan Boldin SF WR</option>
<option value="10:1.80, 8:4.90, 7:0.80, 6:0.70, 5:7.20, 4:6.60, 2:0.40, 1:3.00">Anthony Dixon SF RB</option>
<option value="9:2.00, 8:1.40, 7:2.70, 2:2.60, 1:0.80">Anthony Fasano KC TE</option>
<option value="9:0.20, 8:8.30, 7:1.00, 5:1.30, 4:0.60, 3:1.00, 1:4.40">Anthony Sherman KC RB</option>
<option value="5:0.80">Antone Smith Atl RB</option>
<option value="10:17.80, 9:15.50, 8:13.10, 7:7.10, 6:10.30, 4:10.10, 3:32.00, 2:9.40, 1:9.20">Antonio Brown Pit WR</option>
<option value="10:6.20, 9:5.30, 7:3.10, 6:2.80, 5:7.40, 4:19.60, 3:11.50, 2:10.40, 1:4.90">Antonio Gates SD TE</option>
<option value="7:1.10, 6:19.80, 5:11.80, 4:23.10, 3:5.20, 2:16.50, 1:9.00">Arian Foster Hou RB</option>
<option value="9:2.40">Armanti Edwards Cle WR</option>
<option value="6:0.50">Armond Smith Car RB</option>
<option value="7:1.00, 6:2.40">Austin Collie NE WR</option>
<option value="9:1.30, 8:3.30, 7:1.70, 6:1.20, 5:16.90, 4:5.90, 3:8.00, 2:13.80, 1:1.60">Austin Pettis StL WR</option>
<option value="7:0.40, 6:1.40, 3:0.20, 2:1.20">Bear Pascoe NYG TE</option>
<option value="4:0.80">Ben Obomanu NYJ WR</option>
<option value="10:12.16, 9:42.90, 8:13.10, 7:14.90, 6:17.66, 4:21.32, 3:29.94, 2:14.64, 1:11.64">Ben Roethlisberger Pit QB</option>
<option value="10:6.40, 9:7.90, 7:5.50, 6:8.80, 5:2.00, 4:2.50, 3:4.30, 2:10.10, 1:6.20">Ben Tate Hou RB</option>
<option value="10:0.50, 8:4.50, 6:6.10, 4:6.40, 3:1.40, 1:3.10">Benjamin Watson NO TE</option>
<option value="10:3.60, 9:7.20, 8:3.30, 7:2.40, 6:8.60, 5:12.70, 4:1.30, 3:6.90, 2:8.00, 1:8.90">BenJarvus Green-Ellis Cin RB</option>
<option value="10:9.00, 6:6.70, 5:6.50, 4:11.70, 3:6.80, 2:2.50, 1:4.60">Benny Cunningham StL RB</option>
<option value="10:4.30, 9:1.10, 7:2.20, 6:3.10, 5:4.60, 4:0.90, 3:13.20, 2:11.50, 1:2.20">Bernard Pierce Bal RB</option>
<option value="9:2.90, 8:3.90, 7:0.60, 6:5.00, 5:4.70, 4:10.80, 3:15.80, 2:13.00, 1:6.40">Bilal Powell NYJ RB</option>
<option value="2:1.80">Billy Bajema Bal TE</option>
<option value="5:9.84, 4:2.16, 1:2.44">Blaine Gabbert Jax QB</option>
<option value="10:13.10, 4:2.90, 3:2.10, 2:4.40, 1:11.30">Bobby Rainey TB RB</option>
<option value="2:1.40, 1:1.50">Bradie Ewing Atl RB</option>
<option value="9:3.60, 8:8.90, 7:10.30, 6:2.80, 5:6.40, 4:1.20, 3:10.00">Brandon Bolden NE RB</option>
<option value="10:10.20">Brandon Bostick GB TE</option>
<option value="8:6.40, 7:16.00, 5:7.40, 4:7.10, 3:4.90, 2:1.10, 1:7.70">Brandon Gibson Mia WR</option>
<option value="6:23.40, 5:1.70, 4:1.00, 3:0.20, 2:6.40">Brandon Jacobs NYG RB</option>
<option value="10:4.80, 9:7.40, 8:2.30, 7:3.50, 6:17.60, 5:4.70, 3:17.30, 2:1.30">Brandon LaFell Car WR</option>
<option value="10:25.90, 9:16.70, 7:7.50, 6:20.70, 5:9.00, 4:9.90, 3:5.20, 2:17.30, 1:16.40">Brandon Marshall Chi WR</option>
<option value="8:4.20, 7:1.50, 5:3.50, 3:3.30, 2:7.40, 1:12.60">Brandon Myers NYG TE</option>
<option value="10:7.00, 8:3.10, 7:6.70, 6:3.60, 5:5.90, 4:5.40, 2:3.20">Brandon Pettigrew Det TE</option>
<option value="3:0.90, 2:3.60, 1:3.40">Brandon Stokley Bal WR</option>
<option value="10:9.70, 9:9.40, 8:16.20, 6:14.80, 5:3.60, 4:7.50, 3:12.10, 2:3.80">Brandon Tate Cin WR</option>
<option value="7:11.96, 6:20.68, 5:13.88, 2:9.78, 1:11.56">Brandon Weeden Cle QB</option>
<option value="10:0.70, 9:8.70, 8:1.70, 7:0.90, 6:1.00, 5:10.70, 4:5.70, 3:1.80, 1:11.60">Brent Celek Phi TE</option>
<option value="10:5.70, 9:3.90, 8:3.70, 7:6.90, 5:6.00, 4:3.40, 3:11.60, 2:6.80, 1:17.40">Brian Hartline Mia WR</option>
<option value="5:2.10, 4:23.46, 3:24.64">Brian Hoyer Cle QB</option>
<option value="10:7.30, 9:6.80, 8:3.90, 7:1.50, 6:0.30, 4:1.10, 3:1.70, 1:0.40">Brian Leonard TB RB</option>
<option value="9:3.00, 7:9.70, 6:6.40, 5:4.50, 4:1.20, 3:0.70, 2:1.50, 1:1.60">Brian Quick StL WR</option>
<option value="6:0.50, 5:2.00, 4:0.60, 3:5.40, 2:1.00, 1:0.80">Brice Butler Oak WR</option>
<option value="6:5.30">Brittan Golden Ari WR</option>
<option value="4:0.70">Brock Osweiler Den QB</option>
<option value="10:1.00, 8:5.60, 7:1.00, 6:1.70, 5:0.40, 4:2.20, 3:1.00, 2:2.20, 1:2.40">Bruce Miller SF RB</option>
<option value="10:1.10, 9:6.00, 8:0.10, 7:0.40, 6:2.00, 5:1.70, 4:6.00, 3:0.70, 2:1.40, 1:2.50">Bryce Brown Phi RB</option>
<option value="8:2.20">C.J. Anderson Den RB</option>
<option value="10:3.40, 9:15.50, 7:0.70, 6:6.60, 5:12.60, 4:7.70, 3:1.00, 2:11.70, 1:3.50">C.J. Spiller Buf RB</option>
<option value="10:20.30, 8:41.90, 7:27.50, 6:2.50, 4:10.40, 3:17.50, 2:23.60, 1:3.70">Calvin Johnson Det WR</option>
<option value="10:6.26, 9:20.16, 8:31.84, 7:16.76, 6:36.68, 5:6.82, 3:35.42, 2:20.66, 1:14.80">Cam Newton Car QB</option>
<option value="10:17.44, 8:17.78, 7:12.82, 6:19.92, 5:6.70, 4:12.52, 3:3.48, 2:13.72, 1:21.08">Carson Palmer Ari QB</option>
<option value="10:25.34, 9:38.60, 7:15.84">Case Keenum Hou QB</option>
<option value="10:4.20, 8:7.40, 7:8.00, 5:13.40, 4:6.10, 3:14.30, 2:9.30, 1:4.00">Cecil Shorts III Jax WR</option>
<option value="8:1.10, 7:2.10">Cedric Peerman Cin RB</option>
<option value="5:0.90">Chad Hall KC WR</option>
<option value="10:3.10, 8:15.22, 7:11.22, 6:7.82, 5:9.76, 3:5.90, 2:16.54, 1:1.44">Chad Henne Jax QB</option>
<option value="10:2.10, 9:3.50, 8:3.80, 7:6.70, 5:11.20, 4:10.20, 3:4.00, 2:17.00, 1:5.40">Charles Clay Mia TE</option>
<option value="10:0.20">Chase Ford Min TE</option>
<option value="10:5.40, 9:5.50, 8:7.50, 7:2.40, 6:2.00, 5:1.60, 4:4.90, 3:3.00, 2:10.50, 1:2.70">Chris Givens StL WR</option>
<option value="10:8.50">Chris Gragg Buf TE</option>
<option value="10:1.60, 6:0.20, 5:1.60">Chris Hogan Buf WR</option>
<option value="9:19.90, 8:1.10, 7:10.20, 6:1.60, 5:2.70, 3:0.50, 2:5.20, 1:1.50">Chris Ivory NYJ RB</option>
<option value="10:5.30, 9:31.00, 7:17.00, 6:5.40, 5:14.00, 4:3.10, 3:9.10, 2:9.70, 1:7.00">Chris Johnson Ten RB</option>
<option value="9:3.90, 8:2.70, 7:1.50, 6:14.50, 5:0.70, 4:10.80, 3:5.30, 2:2.40, 1:1.00">Chris Ogbonnaya Cle RB</option>
<option value="7:2.70, 6:2.80">Chris Owusu TB WR</option>
<option value="5:0.30, 4:11.20">Chris Polk Phi RB</option>
<option value="4:1.10, 3:5.60, 2:6.80, 1:6.10">Chris Thompson Was RB</option>
<option value="10:18.26, 9:20.34, 8:15.60, 3:21.72, 2:14.88, 1:8.64">Christian Ponder Min QB</option>
<option value="10:3.30, 3:3.70">Christine Michael Sea RB</option>
<option value="5:2.50, 3:0.40">Cierre Wood NE RB</option>
<option value="10:1.30, 8:0.70, 6:2.90, 5:1.90, 4:3.90, 2:9.40, 1:0.50">Clay Harbor Jax TE</option>
<option value="6:9.20, 5:5.70, 4:7.00, 3:5.30, 2:4.20, 1:1.70">Clyde Gates NYJ WR</option>
<option value="10:5.30, 9:8.40, 7:9.80, 6:1.60, 5:1.50, 4:13.70, 3:1.30, 2:12.90, 1:0.70">Coby Fleener Ind TE</option>
<option value="10:2.90, 9:6.80, 8:0.80, 7:5.30, 6:4.40, 5:10.70, 4:1.60, 3:2.20">Cole Beasley Dal WR</option>
<option value="10:3.24, 8:29.96, 7:20.76, 6:19.88, 5:11.92, 4:17.78, 3:4.00, 2:5.78, 1:45.68">Colin Kaepernick SF QB</option>
<option value="9:2.20, 4:0.30, 2:0.50">Collin Mooney Ten RB</option>
<option value="8:0.52">Colt McCoy SF QB</option>
<option value="10:11.90, 9:12.80, 8:32.40, 7:9.30, 6:0.30, 4:16.30, 3:10.80, 2:23.30, 1:6.40">Cordarrelle Patterson Min WR</option>
<option value="10:1.40, 7:1.40, 6:6.20, 5:1.70, 2:0.60">Cory Harkey StL TE</option>
<option value="10:0.60">Craig Stevens Ten TE</option>
<option value="7:0.30, 1:1.40">Cyrus Gray KC RB</option>
<option value="6:2.10, 4:2.60, 3:2.20, 2:9.20, 1:7.40">Da'Rel Scott NYG RB</option>
<option value="10:6.10, 9:1.40, 7:6.90, 6:14.10, 4:3.40, 3:4.60, 2:0.80, 1:8.70">Dallas Clark Bal TE</option>
<option value="8:7.80, 7:2.80, 6:6.80, 5:2.40, 4:4.70, 3:7.20, 2:19.60, 1:2.70">Damaris Johnson Phi WR</option>
<option value="10:6.80, 9:8.70, 7:2.50, 6:2.20, 4:5.30, 3:0.90, 1:1.30">Damian Williams Ten WR</option>
<option value="8:1.80, 7:0.70, 6:2.30, 4:0.60">Dane Sanzenbacher Cin WR</option>
<option value="10:7.00">Daniel Herron Ind RB</option>
<option value="9:4.20, 8:11.20, 7:5.80, 5:1.20, 4:0.60, 3:9.70, 2:4.00, 1:7.90">Daniel Thomas Mia RB</option>
<option value="9:18.20, 8:1.50, 6:0.10, 5:5.50, 1:10.40">Danny Amendola NE WR</option>
<option value="10:10.40, 9:9.80, 7:13.60, 6:8.30, 5:16.10, 4:22.40, 3:6.60, 2:6.40, 1:1.60">Danny Woodhead SD RB</option>
<option value="7:0.60">Dante Rosario Chi TE</option>
<option value="10:7.20, 9:1.00, 8:4.00, 7:2.40">Darius Johnson Atl WR</option>
<option value="7:5.60, 6:13.10, 5:6.60, 4:3.60, 3:13.00, 2:1.80, 1:5.70">Darius Reynaud Ten RB</option>
<option value="9:19.20, 6:1.90, 4:0.40">Darrel Young Was RB</option>
<option value="9:1.50, 8:19.80, 6:8.30, 4:2.90, 3:13.54, 2:13.70, 1:12.60">Darren McFadden Oak RB</option>
<option value="10:20.60, 9:0.20, 8:5.10, 6:13.40, 5:8.10, 4:32.20, 3:10.90, 2:8.30, 1:14.00">Darren Sproles NO RB</option>
<option value="10:3.00, 9:1.10, 7:13.40, 6:1.10, 5:0.70, 4:3.30, 3:5.90, 2:1.00, 1:3.30">Darrius Heyward-Bey Ind WR</option>
<option value="8:4.70, 7:1.80, 6:2.30, 5:4.80, 4:2.40, 2:8.00, 1:9.60">Daryl Richardson StL RB</option>
<option value="TE:4.00, TE:3.00, TE:1.00">David Johnson Pit RB</option>
<option value="9:1.90, 8:8.00, 7:8.00, 6:1.10, 5:0.90">David Nelson NYJ WR</option>
<option value="7:1.70, 3:0.60, 2:2.90">David Paulson Pit TE</option>
<option value="10:4.90, 9:9.60, 6:13.40, 5:11.70, 4:4.50">David Reed Ind WR</option>
<option value="5:9.20, 4:12.40, 3:6.30, 2:14.80">David Wilson NYG RB</option>
<option value="9:14.40, 8:1.50, 7:1.10, 6:2.10, 5:2.50, 4:2.50, 3:6.70, 2:3.80, 1:4.70">Davone Bess Cle WR</option>
<option value="10:6.90, 9:5.40, 7:13.60, 6:2.70, 5:2.30, 4:2.70, 3:6.00, 2:17.70, 1:6.60">DeAndre Hopkins Hou WR</option>
<option value="10:10.60, 9:5.40, 8:11.10, 7:5.90, 6:11.70, 5:6.90, 3:11.70, 2:8.50, 1:8.00">DeAngelo Williams Car RB</option>
<option value="10:7.50">Deji Karim Hou RB</option>
<option value="10:12.20, 9:1.30, 7:11.20, 6:2.90, 5:4.30, 4:7.40, 3:4.90, 2:7.00, 1:4.00">Delanie Walker Ten TE</option>
<option value="10:15.50, 9:5.00, 6:11.00, 5:10.80, 4:9.20, 3:28.30, 2:7.40, 1:12.50">DeMarco Murray Dal RB</option>
<option value="10:28.80, 8:13.50, 7:14.20, 6:7.80, 5:5.70, 4:20.60, 3:9.40, 2:5.20, 1:28.10">Demaryius Thomas Den WR</option>
<option value="RB:10.00, RB:8.00, RB:7.00, RB:6.00, RB:4.00, RB:3.00, RB:1.00">Denard Robinson Jax WR</option>
<option value="10:4.50, 9:8.20, 8:3.20, 6:14.20, 5:14.40, 4:6.60, 3:18.40, 1:10.30">Denarius Moore Oak WR</option>
<option value="10:2.10, 9:5.70">Dennis Johnson Hou RB</option>
<option value="9:2.40, 5:14.90, 4:12.30">Deonte Thompson Bal WR</option>
<option value="7:1.90, 2:6.10">Derek Moye Pit WR</option>
<option value="7:0.80, 6:0.60, 4:0.40, 1:3.00">Derrick Coleman Sea RB</option>
<option value="10:14.00, 9:24.90, 8:6.30, 7:2.10, 6:18.40, 5:19.20, 4:3.40, 3:6.20, 2:25.30, 1:17.40">DeSean Jackson Phi WR</option>
<option value="10:3.40, 9:2.30, 7:4.20, 6:0.30, 5:0.50, 3:2.90">DeVier Posey Hou WR</option>
<option value="10:14.00, 9:12.30, 7:19.50, 6:7.30, 5:6.60, 4:17.40, 3:2.60, 2:25.90, 1:3.20">Devin Hester Chi WR</option>
<option value="9:0.50, 8:17.00, 7:10.60, 6:4.60, 5:3.90, 4:23.10, 3:1.30, 2:5.50, 1:12.30">Dexter McCluster KC WR</option>
<option value="10:4.40, 9:6.40, 8:19.30, 7:11.00, 6:3.60, 5:24.10, 4:20.10, 3:9.80, 2:20.10, 1:2.20">Dez Bryant Dal WR</option>
<option value="8:0.40, 3:6.10">Dion Sims Mia TE</option>
<option value="10:0.90, 8:0.40, 3:0.80">Domenik Hixon Car WR</option>
<option value="4:2.10, 2:1.30">Dominique Jones KC TE</option>
<option value="10:12.30, 9:4.90, 7:6.50, 6:3.40, 5:10.00, 4:7.60, 3:2.50, 2:3.00">Donald Brown Ind RB</option>
<option value="9:2.20, 8:3.50, 7:3.30, 5:9.10, 4:2.30, 3:14.10, 2:4.00, 1:7.10">Donnie Avery KC WR</option>
<option value="10:7.60, 9:13.50, 8:1.20, 7:1.60, 6:4.80, 5:8.00, 4:3.90, 3:9.50, 2:5.10, 1:9.40">Doug Baldwin Sea WR</option>
<option value="7:5.40, 6:9.10, 4:6.10, 3:10.80, 2:14.40, 1:14.40">Doug Martin TB RB</option>
<option value="10:43.68, 9:27.18, 8:43.18, 6:20.54, 5:23.32, 4:49.72, 3:37.78, 2:14.88, 1:28.48">Drew Brees NO QB</option>
<option value="9:0.20, 8:13.70, 7:2.40">Drew Davis Atl WR</option>
<option value="1:8.00">Dwayne Allen Ind TE</option>
<option value="9:6.70, 8:0.70, 7:6.60, 6:4.60, 5:3.50, 4:11.80, 3:0.40, 2:11.60, 1:3.00">Dwayne Bowe KC WR</option>
<option value="10:13.20, 9:13.80, 8:14.80, 7:6.80, 6:29.20, 5:9.20, 4:14.60, 3:6.50, 2:6.10, 1:3.10">Dwayne Harris Dal WR</option>
<option value="10:1.00, 7:2.40, 5:1.40, 4:7.90, 3:8.20, 2:1.90, 1:0.60">Earl Bennett Chi WR</option>
<option value="10:2.80, 9:0.30, 7:1.70, 5:5.10, 4:1.20, 1:1.30">Ed Dickson Bal TE</option>
<option value="10:8.40, 9:23.00, 8:17.20, 7:16.80, 6:12.50, 5:9.70, 2:1.00, 1:11.20">Eddie Lacy GB RB</option>
<option value="10:3.60, 9:11.60, 7:12.90, 6:0.40, 5:0.60, 4:5.40, 3:4.10, 2:27.50, 1:14.90">Eddie Royal SD WR</option>
<option value="10:11.90, 5:6.56, 4:6.78, 3:21.72, 2:17.14, 1:20.30">EJ Manuel Buf QB</option>
<option value="10:9.30, 8:9.74, 7:14.50, 6:9.56, 5:19.36, 4:9.88, 3:4.16, 2:16.48, 1:45.80">Eli Manning NYG QB</option>
<option value="10:3.80, 9:11.70, 8:16.80, 7:5.10, 6:13.00, 4:5.70, 3:3.90, 2:7.80, 1:5.70">Emmanuel Sanders Pit WR</option>
<option value="10:5.20, 8:4.20, 7:21.00, 6:5.00, 5:12.70, 4:8.80, 3:19.30, 2:8.70, 1:3.20">Eric Decker Den WR</option>
<option value="10:5.50, 9:4.30, 8:6.40, 7:8.30, 6:7.50, 4:2.20, 3:6.70, 2:3.30, 1:6.20">Eric Page TB WR</option>
<option value="7:2.30, 3:1.50">Eric Weems Chi WR</option>
<option value="9:1.40, 8:0.20, 4:2.00, 3:0.10">Erik Lorig TB RB</option>
<option value="10:1.70, 9:8.10, 8:1.90, 7:6.10, 6:5.60, 4:9.90, 3:7.50, 2:9.10">Felix Jones Pit RB</option>
<option value="9:4.60, 8:9.80, 7:13.70, 3:2.10, 2:9.30, 1:4.20">Fozzy Whittaker Cle RB</option>
<option value="10:10.30, 8:17.70, 7:22.40, 6:10.10, 5:14.10, 4:21.30, 3:10.30, 2:3.00, 1:12.50">Frank Gore SF RB</option>
<option value="9:0.40, 8:0.30, 7:1.40, 2:4.90">Frank Summers Buf RB</option>
<option value="2:0.30, 1:2.20">Fred Davis Was TE</option>
<option value="10:6.20, 9:9.90, 8:11.30, 7:14.50, 6:4.80, 5:21.30, 4:14.70, 3:10.90, 2:12.50, 1:10.80">Fred Jackson Buf RB</option>
<option value="3:3.00">Garrett Celek SF TE</option>
<option value="10:1.80, 9:4.60, 7:3.80, 6:2.50, 5:1.50, 4:12.90, 2:9.00, 1:8.70">Garrett Graham Hou TE</option>
<option value="9:6.40, 8:0.30, 6:0.60, 5:0.20, 4:0.20, 1:0.90">Gary Barnidge Cle TE</option>
<option value="5:2.50, 3:8.40, 2:0.90, 1:0.70">Gavin Escobar Dal TE</option>
<option value="9:12.40, 8:3.16, 7:22.52, 6:4.84, 5:28.06, 4:10.26, 3:28.64, 2:4.26, 1:16.94">Geno Smith NYJ QB</option>
<option value="10:15.50, 9:22.40, 8:2.70, 7:5.90, 6:16.00, 5:4.90, 4:7.50, 3:15.90, 2:18.50, 1:3.00">Giovani Bernard Cin RB</option>
<option value="10:22.10, 9:12.10, 8:22.20, 7:10.40, 6:4.80, 5:15.30, 4:7.70, 3:15.00, 2:7.40, 1:9.90">Golden Tate Sea WR</option>
<option value="10:1.80, 9:5.60, 8:0.90, 7:4.10, 6:3.40, 4:21.20, 3:4.30, 2:8.40, 1:3.30">Greg Jennings Min WR</option>
<option value="10:6.20, 7:0.20, 6:0.40, 4:0.10">Greg Jones Hou RB</option>
<option value="9:12.20, 8:0.80, 7:4.90, 6:9.30, 5:11.50, 4:6.00, 3:4.50, 2:3.30, 1:2.60">Greg Little Cle WR</option>
<option value="10:1.40, 9:12.60, 8:8.10, 7:4.70, 6:1.90, 5:7.90, 3:5.40, 2:14.40, 1:5.60">Greg Olsen Car TE</option>
<option value="9:5.70">Greg Salas NYJ WR</option>
<option value="10:3.60, 9:3.20, 2:2.80">Griff Whalen Ind WR</option>
<option value="10:4.90, 8:5.10, 7:2.80, 6:7.00, 5:14.20, 4:3.30, 2:8.30, 1:11.40">Hakeem Nicks NYG WR</option>
<option value="10:2.90, 9:8.20, 8:12.10, 7:20.90, 5:2.80, 4:7.40, 2:4.70, 1:11.40">Harry Douglas Atl WR</option>
<option value="10:0.60, 9:4.30, 8:1.90, 7:5.70, 6:8.40, 4:7.00, 3:3.50">Heath Miller Pit TE</option>
<option value="3:0.50">Henry Hynoski NYG RB</option>
<option value="2:1.10">Isaac Redman Pit RB</option>
<option value="3:6.30, 2:1.90">Isaiah Pead StL RB</option>
<option value="7:0.70">Jack Doyle Ind TE</option>
<option value="9:2.60, 7:0.60, 5:6.20, 4:4.20, 3:1.20, 2:1.30, 1:8.10">Jackie Battle Ten RB</option>
<option value="8:1.50, 7:0.70, 3:0.50">Jacob Tamme Den TE</option>
<option value="9:2.80, 6:3.00, 5:10.70, 4:4.30, 3:6.40, 2:3.80, 1:4.90">Jacoby Ford Oak WR</option>
<option value="10:5.80, 9:7.20, 7:11.30, 6:21.40, 1:2.40">Jacoby Jones Bal WR</option>
<option value="10:12.30, 9:8.30, 8:7.30, 7:20.30, 5:20.10, 4:11.70, 3:9.30, 2:6.20, 1:0.20">Jacquizz Rodgers Atl RB</option>
<option value="10:1.50">Jake Ballard Ari TE</option>
<option value="9:10.40, 7:25.94, 4:25.66, 3:30.76, 2:18.92, 1:5.30">Jake Locker Ten QB</option>
<option value="9:9.60, 8:12.00, 7:16.30, 6:24.80, 5:18.50, 4:18.70, 3:23.20, 2:16.30, 1:16.00">Jamaal Charles KC RB</option>
<option value="10:1.80, 8:1.10, 4:1.20">James Casey Phi TE</option>
<option value="4:1.50, 2:0.40">James Develin NE RB</option>
<option value="10:1.10, 9:2.10, 8:1.20, 5:0.30, 2:2.00">James Hanna Dal TE</option>
<option value="10:4.40, 9:1.70, 6:1.00, 5:18.70, 3:9.40, 2:15.80">James Jones GB WR</option>
<option value="10:1.40, 9:10.00, 8:11.70, 3:5.50, 2:22.80, 1:0.80">James Starks GB RB</option>
<option value="5:1.50, 4:1.50">Jamize Olawale Oak RB</option>
<option value="10:1.70, 9:9.60, 8:3.10, 7:3.30, 6:4.50, 5:2.60, 4:4.50, 3:4.40, 2:1.00, 1:24.10">Jared Cook StL TE</option>
<option value="10:3.40, 9:3.10, 7:1.30, 6:1.00, 4:0.60, 3:3.50, 2:2.10">Jarius Wright Min WR</option>
<option value="10:0.70, 7:7.70, 6:0.50, 4:1.90, 2:1.10, 1:1.40">Jaron Brown Ari WR</option>
<option value="10:11.20, 9:1.50, 8:8.90, 7:16.30, 6:4.30">Jarrett Boykin GB WR</option>
<option value="10:2.50, 8:5.40, 7:3.20, 6:2.10, 5:3.30, 4:0.70, 3:14.70, 2:3.90">Jason Avant Phi WR</option>
<option value="9:30.48, 8:25.42, 2:0.24">Jason Campbell Cle QB</option>
<option value="10:3.20, 7:1.40, 5:8.30, 4:3.40, 3:17.10, 2:12.00, 1:1.70">Jason Snelling Atl RB</option>
<option value="10:2.70, 9:16.20, 8:1.50, 7:4.80, 6:2.70, 5:18.10, 4:4.30, 3:6.70, 2:1.20, 1:19.00">Jason Witten Dal TE</option>
<option value="10:14.00, 6:24.48, 5:31.02, 4:21.58, 3:13.46, 2:24.58, 1:21.28">Jay Cutler Chi QB</option>
<option value="9:0.70, 8:0.80, 6:0.40, 5:2.80, 4:0.60, 3:0.50">Jed Collins NO RB</option>
<option value="8:0.90, 7:4.10, 6:5.90, 5:13.90, 4:9.40, 3:2.60">Jeff Cumberland NYJ TE</option>
<option value="6:3.70, 4:9.10">Jeff Demps TB RB</option>
<option value="9:1.90, 6:0.50, 4:10.30">Jeff Maehl Phi WR</option>
<option value="9:12.86, 5:1.20">Jeff Tuel Buf QB</option>
<option value="4:0.50, 2:0.50">Jeremy Ebert Jax WR</option>
<option value="9:0.10, 8:2.70, 7:15.70, 6:6.40, 5:15.70, 4:7.20, 3:4.30, 1:7.20">Jeremy Kerley NYJ WR</option>
<option value="10:2.80, 8:5.10, 3:0.90, 2:2.50, 1:4.90">Jeremy Ross Det WR</option>
<option value="9:10.50, 5:0.10, 4:2.90">Jeremy Stewart Oak RB</option>
<option value="9:3.30, 8:7.40, 7:6.40, 6:0.50, 5:2.40, 4:5.30, 3:0.70, 2:6.60, 1:3.50">Jermaine Gresham Cin TE</option>
<option value="10:15.70, 9:13.90, 7:3.50, 6:11.20, 5:10.90, 4:3.00, 3:4.00, 1:10.90">Jermaine Kearse Sea WR</option>
<option value="7:13.20, 6:7.50, 5:3.20, 2:12.50, 1:11.60">Jermichael Finley GB TE</option>
<option value="9:1.10, 7:0.10">Jerome Felton Min RB</option>
<option value="10:4.50, 9:2.40, 8:1.80, 7:3.20, 6:3.00, 4:12.40, 3:2.90, 2:4.90, 1:14.00">Jerome Simpson Min WR</option>
<option value="8:0.90, 6:1.30, 4:0.80, 1:4.10">Jeron Mastrud Oak TE</option>
<option value="8:2.90, 7:2.50, 6:7.20, 5:5.40, 3:0.50">Jerrel Jernigan NYG WR</option>
<option value="10:9.10, 9:27.60, 8:3.90, 7:4.10, 4:16.30, 3:5.20, 2:5.40, 1:9.40">Jerricho Cotchery Pit WR</option>
<option value="10:0.90, 7:0.80, 6:0.40, 5:7.30, 4:1.00, 2:3.10, 1:2.10">Jim Dray Ari TE</option>
<option value="10:5.90, 9:23.60, 8:15.70, 5:13.50, 4:22.00, 3:25.40, 2:23.90, 1:10.50">Jimmy Graham NO TE</option>
<option value="7:3.60, 3:3.20, 2:1.40">Joe Anderson Chi WR</option>
<option value="10:12.00, 9:24.50, 7:16.00, 6:24.28, 5:10.06, 4:15.88, 3:6.84, 2:15.04, 1:26.48">Joe Flacco Bal QB</option>
<option value="WR:10.00, WR:6.00">Joe Webb Min QB</option>
<option value="8:6.90, 6:0.40">Joel Dreessen Den TE</option>
<option value="10:15.80, 9:2.30, 8:0.30, 7:2.10, 6:1.20, 4:0.40, 3:0.30">John Carlson Min TE</option>
<option value="8:1.20, 7:1.70">John Conner NYG RB</option>
<option value="10:1.20, 8:0.70, 7:3.10, 1:0.30">John Kuhn GB RB</option>
<option value="7:0.50, 4:0.70">John Phillips SD TE</option>
<option value="8:3.40, 7:3.20, 6:0.40, 5:0.10, 3:16.60">Johnathan Franklin GB RB</option>
<option value="10:4.10, 8:11.40, 7:5.60, 6:3.30, 5:5.10, 4:2.20, 3:19.20, 2:7.20, 1:21.20">Joique Bell Det RB</option>
<option value="6:0.90, 4:1.90">Jon Baldwin SF WR</option>
<option value="10:4.10, 9:9.10, 8:3.40, 7:0.40, 6:1.00, 4:0.70, 3:4.80, 2:0.20">Jonathan Dwyer Pit RB</option>
<option value="10:4.10, 9:6.50">Jonathan Stewart Car RB</option>
<option value="9:0.40, 8:8.10, 7:11.50, 6:6.40, 5:3.60, 4:15.10, 3:24.60, 2:9.50, 1:16.80">Jordan Cameron Cle TE</option>
<option value="10:12.20, 9:5.50, 8:9.00, 7:19.40, 6:5.80, 3:5.00, 2:7.80, 1:3.80">Jordan Reed Was TE</option>
<option value="10:17.20, 8:12.50, 7:7.00, 5:8.00, 4:5.70, 3:6.50, 2:0.70, 1:2.20">Jordan Todman Jax RB</option>
<option value="10:5.60, 9:6.70, 8:24.30, 7:10.20, 6:17.30, 5:8.20, 3:9.30, 2:18.60, 1:19.00">Jordy Nelson GB WR</option>
<option value="10:2.50, 7:1.50, 6:21.40, 3:6.50, 1:8.70">Joseph Fauria Det TE</option>
<option value="9:0.30, 8:4.40, 7:9.30, 6:9.20">Joseph Randle Dal RB</option>
<option value="4:2.40">Josh Boyce NE WR</option>
<option value="9:17.20, 8:15.20, 7:7.50">Josh Cribbs NYJ WR</option>
<option value="7:5.60, 3:7.84, 2:8.60, 1:12.40">Josh Freeman Min QB</option>
<option value="9:5.40, 8:19.20, 7:2.10, 6:12.60, 5:14.60, 4:7.10, 3:22.80">Josh Gordon Cle WR</option>
<option value="8:1.70">Josh Hill NO TE</option>
<option value="8:1.70">Josh Johnson Cin QB</option>
<option value="10:8.48, 9:24.88, 7:17.46">Josh McCown Chi QB</option>
<option value="9:6.90, 8:3.90, 7:5.30, 6:4.30, 4:0.60, 3:6.20, 2:3.90, 1:5.10">Joshua Morgan Was WR</option>
<option value="9:5.40, 8:2.00, 7:10.20, 6:6.60, 5:8.50, 4:11.80, 3:7.30, 2:15.40, 1:23.10">Julian Edelman NE WR</option>
<option value="5:9.90, 4:10.80, 3:12.20, 2:24.20, 1:11.60">Julio Jones Atl WR</option>
<option value="10:15.60, 8:2.90, 7:10.10, 6:8.20, 5:24.20, 4:4.30, 3:9.70, 2:10.70, 1:23.00">Julius Thomas Den TE</option>
<option value="6:0.80, 5:0.60, 2:1.00, 1:6.30">Junior Hemingway KC WR</option>
<option value="9:3.20">Juron Criner Oak WR</option>
<option value="8:3.00, 7:5.80, 6:19.00, 5:19.60">Justin Blackmon Jax WR</option>
<option value="8:2.70, 7:2.90, 6:1.80, 5:0.20, 4:1.30, 2:0.70, 1:2.90">Justin Forsett Jax RB</option>
<option value="10:5.10, 9:1.30, 6:0.80, 4:7.60, 3:9.40">Justin Hunter Ten WR</option>
<option value="10:4.10, 9:18.80, 7:7.80, 6:16.70, 5:19.60, 4:8.00, 2:3.40">Keenan Allen SD WR</option>
<option value="10:20.08, 9:14.00, 8:3.42">Kellen Clemens StL QB</option>
<option value="7:6.10, 3:3.10">Kellen Davis Sea TE</option>
<option value="5:6.10, 4:7.30, 2:1.60, 1:13.90">Kellen Winslow NYJ TE</option>
<option value="7:1.60, 6:10.50, 5:1.60, 4:18.70, 3:16.10, 2:4.70, 1:4.20">Kenbrell Thompkins NE WR</option>
<option value="8:8.40, 7:0.60, 6:7.10, 5:2.90, 4:11.80, 3:10.70, 1:2.40">Kendall Hunter SF RB</option>
<option value="10:7.80, 9:6.90, 7:9.80, 6:6.90, 5:7.40, 4:5.60, 3:7.10, 2:11.40, 1:1.10">Kendall Wright Ten WR</option>
<option value="8:0.30, 5:0.50">Kenjon Barner Car RB</option>
<option value="7:0.80, 6:0.70, 5:0.90, 2:2.80, 1:1.50">Kenny Britt Ten WR</option>
<option value="10:13.50, 9:3.50, 8:25.30, 6:12.40, 4:3.80, 2:1.00, 1:8.60">Kenny Stills NO WR</option>
<option value="2:4.00">Kerry Taylor Jax WR</option>
<option value="2:2.80">Kerwynn Williams SD RB</option>
<option value="10:1.20, 9:9.80, 7:2.80, 6:7.10, 5:15.50, 4:5.90, 3:10.80, 2:16.00, 1:14.70">Keshawn Martin Hou WR</option>
<option value="6:0.90, 4:2.70">Kevin Brock KC TE</option>
<option value="5:1.20">Kevin Cone Atl WR</option>
<option value="7:5.00, 6:0.50, 5:2.00, 4:3.00, 3:3.50, 2:6.50, 1:2.50">Kevin Ogletree Det WR</option>
<option value="8:0.90, 6:11.30, 5:0.90, 4:3.70, 3:3.80">Khiry Robinson NO RB</option>
<option value="9:2.40, 8:2.50, 7:0.50, 5:0.20, 4:0.20, 3:2.50, 1:1.70">Knile Davis KC RB</option>
<option value="10:11.40, 8:19.20, 7:10.90, 6:28.40, 5:21.00, 4:15.10, 3:4.50, 2:22.70, 1:6.50">Knowshon Moreno Den RB</option>
<option value="1:0.70">Konrad Reuland NYJ TE</option>
<option value="1:1.60">Kory Sperry Ari TE</option>
<option value="10:6.50, 8:5.40, 7:4.10, 6:8.30, 5:9.00, 4:5.80, 3:3.30, 1:1.10">Kris Durham Det WR</option>
<option value="9:9.50, 8:5.10, 7:2.70, 6:15.70, 4:0.60, 3:2.80, 2:10.20, 1:2.70">Kyle Rudolph Min TE</option>
<option value="8:4.70, 7:2.10, 6:10.80, 5:4.10, 3:2.60, 2:3.90, 1:4.40">Kyle Williams KC WR</option>
<option value="10:2.50, 9:1.00, 7:4.00, 6:2.50, 3:4.80">Ladarius Green SD TE</option>
<option value="10:1.10, 9:10.90, 8:11.20, 7:4.70, 5:1.50, 4:12.80, 3:6.40, 2:13.50, 1:1.00">Lamar Miller Mia RB</option>
<option value="10:3.40, 5:6.00">LaMichael James SF RB</option>
<option value="9:1.10, 8:1.60, 5:2.80, 4:0.70, 3:1.90">Lance Dunbar Dal RB</option>
<option value="9:1.30, 8:2.30, 7:0.70, 6:6.20, 5:9.70, 4:6.60, 3:3.60, 2:2.30, 1:2.50">Lance Kendricks StL TE</option>
<option value="10:1.40, 9:7.00, 8:9.40, 3:0.60, 2:1.50, 1:2.30">Lance Moore NO WR</option>
<option value="1:5.50">LaRod Stephens-Howling Pit RB</option>
<option value="2:3.10">Larry Donnell NYG TE</option>
<option value="10:2.30, 8:10.80, 7:1.70, 6:16.10, 5:4.30, 4:12.80, 3:6.40, 2:3.30, 1:20.00">Larry Fitzgerald Ari WR</option>
<option value="9:12.40, 7:1.80, 6:2.40">Lavelle Hawkins SD WR</option>
<option value="10:3.60, 9:0.90, 7:1.60">LaVon Brazill Ind WR</option>
<option value="7:0.40, 6:0.20, 4:1.10, 3:0.10, 1:0.20">Le'Ron McClain SD RB</option>
<option value="10:15.60, 9:13.90, 8:11.10, 7:9.90, 6:5.60, 4:20.40">Le'Veon Bell Pit RB</option>
<option value="7:1.80, 4:2.80">Lee Smith Buf TE</option>
<option value="9:17.90, 8:9.20, 7:10.00, 6:6.00, 5:3.10, 4:12.40, 3:8.90, 2:3.60, 1:5.00">LeGarrette Blount NE RB</option>
<option value="5:1.90, 2:0.10">Leon Washington NE RB</option>
<option value="10:6.10, 9:5.50, 8:6.70, 7:2.60, 6:3.60, 4:4.90, 3:2.10, 2:3.50, 1:20.00">Leonard Hankerson Was WR</option>
<option value="10:18.10, 9:14.00, 8:6.50, 7:8.10, 6:15.10, 5:15.20, 4:9.40, 3:23.80, 2:16.70, 1:26.90">LeSean McCoy Phi RB</option>
<option value="7:2.10, 6:1.40">Lestar Jean Hou WR</option>
<option value="8:0.60, 5:7.50, 4:0.40, 3:6.20, 2:0.40">Levine Toilolo Atl TE</option>
<option value="10:6.30, 9:0.90, 4:2.60, 3:5.10, 2:1.30">Logan Paulsen Was TE</option>
<option value="10:1.90, 7:2.30, 6:1.70, 5:2.80, 3:7.60">Luke Willson Sea TE</option>
<option value="2:10.20, 1:4.70">Malcom Floyd SD WR</option>
<option value="10:3.90, 7:3.10">Marcedes Lewis Jax TE</option>
<option value="10:3.00, 9:2.20, 8:1.00, 6:0.90, 5:5.70, 3:10.50, 2:7.50, 1:0.90">Marcel Reece Oak RB</option>
<option value="10:1.30, 5:3.70, 3:1.80">Marcus Easley Buf WR</option>
<option value="10:6.40, 9:7.90, 8:7.90, 7:7.00, 5:6.50, 4:12.30, 3:4.80, 2:7.30, 1:3.10">Marcus Thigpen Mia RB</option>
<option value="10:3.00">Mario Manningham SF WR</option>
<option value="10:22.00, 9:1.90, 2:2.00, 1:1.10">Mark Ingram NO RB</option>
<option value="4:2.60, 1:3.70">Markus Wheaton Pit WR</option>
<option value="10:1.00, 9:19.40, 7:2.20, 6:6.90, 4:9.40, 3:0.60, 2:10.50, 1:12.50">Marlon Brown Bal WR</option>
<option value="2:0.60">Marlon Moore Mia WR</option>
<option value="TE:9.00, TE:8.00, TE:6.00">MarQueis Gray Cle RB</option>
<option value="10:16.70, 8:1.80, 6:1.10, 5:1.50, 4:9.60, 3:7.10, 2:6.30, 1:12.80">Marques Colston NO WR</option>
<option value="7:0.30">Marquess Wilson Chi WR</option>
<option value="10:2.70, 9:14.80, 8:5.60, 7:4.90, 6:20.40">Marquise Goodwin Buf WR</option>
<option value="10:22.10, 9:14.10, 8:2.70, 7:15.40, 6:27.50, 5:10.70, 4:18.30, 3:6.90, 2:31.50, 1:5.20">Marshawn Lynch Sea RB</option>
<option value="10:2.90, 9:3.60, 7:6.70, 6:6.80, 5:5.60, 4:9.00, 3:1.00, 2:19.60, 1:10.90">Martellus Bennett Chi TE</option>
<option value="10:0.90, 9:6.60, 8:36.20, 7:11.70, 6:16.50, 5:4.70, 3:9.80, 2:3.50, 1:2.10">Marvin Jones Cin WR</option>
<option value="9:0.32, 8:2.32">Matt Barkley Phi QB</option>
<option value="10:1.78, 6:12.34, 4:22.42">Matt Cassel Min QB</option>
<option value="3:0.76">Matt Flynn GB QB</option>
<option value="10:4.90, 9:23.90, 7:28.90, 6:11.10, 5:11.50, 4:17.70, 3:17.10, 2:14.10, 1:15.10">Matt Forte Chi RB</option>
<option value="10:0.62, 4:1.48">Matt Hasselbeck Ind QB</option>
<option value="9:3.48">Matt McGloin Oak QB</option>
<option value="10:14.38, 9:8.96, 8:11.34, 7:27.72, 5:22.76, 4:35.84, 3:19.24, 2:30.96, 1:23.36">Matt Ryan Atl QB</option>
<option value="6:7.44, 5:0.92, 4:26.70, 3:5.76, 2:25.92, 1:29.84">Matt Schaub Hou QB</option>
<option value="8:4.18">Matt Simms NYJ QB</option>
<option value="4:6.10">Matthew Mulligan NE TE</option>
<option value="9:1.00">Matthew Slater NE WR</option>
<option value="10:24.66, 8:37.72, 7:36.28, 6:32.52, 5:16.38, 4:18.48, 3:29.60, 2:21.22, 1:27.98">Matthew Stafford Det QB</option>
<option value="10:13.40, 8:12.20, 7:5.60, 6:13.40, 5:8.60, 4:2.80, 3:12.20, 2:2.80, 1:4.50">Maurice Jones-Drew Jax RB</option>
<option value="9:4.00, 6:1.40, 5:1.20, 3:6.90, 1:1.50">Michael Bush Chi RB</option>
<option value="8:3.00, 7:2.40, 4:1.30, 1:2.60">Michael Cox NYG RB</option>
<option value="10:0.70, 9:1.30, 8:1.10, 3:0.80">Michael Egnew Mia TE</option>
<option value="10:3.10, 8:9.00, 7:7.10, 6:10.40, 5:6.10, 4:8.70, 3:4.90, 2:2.20, 1:8.20">Michael Floyd Ari WR</option>
<option value="6:1.90">Michael Hill TB RB</option>
<option value="9:1.70, 6:5.70, 5:0.20, 3:3.10, 1:0.50">Michael Hoomanawanui NE TE</option>
<option value="10:0.80, 6:0.50">Michael Palmer Pit TE</option>
<option value="3:0.40">Michael Preston Ten WR</option>
<option value="5:12.10, 4:14.02, 3:17.94, 2:47.32, 1:29.52">Michael Vick Phi QB</option>
<option value="10:7.10, 7:3.60, 6:2.20, 5:4.00, 4:12.90, 3:2.40, 2:2.50, 1:3.70">Micheal Spurlock Det WR</option>
<option value="10:4.00, 8:10.30, 7:12.00, 6:4.90, 1:1.40">Mike Brown Jax WR</option>
<option value="10:9.26, 9:20.02, 8:17.20, 7:21.54, 6:22.92, 4:7.62">Mike Glennon TB QB</option>
<option value="6:3.90, 5:4.10">Mike Goodson NYJ RB</option>
<option value="10:4.10, 9:24.68, 8:6.40, 7:5.30, 6:0.70, 4:0.20, 3:0.50">Mike James TB RB</option>
<option value="2:0.50">Mike McNeill StL TE</option>
<option value="10:2.30, 9:9.70, 8:12.40, 7:9.60, 6:16.70, 5:4.00, 3:7.80, 2:4.30, 1:0.40">Mike Tolbert Car RB</option>
<option value="10:1.50, 9:8.20, 8:4.90, 7:8.80, 5:10.50, 4:2.40, 3:2.20, 2:17.50, 1:1.50">Mike Wallace Mia WR</option>
<option value="8:2.00, 7:3.20, 4:9.80, 3:6.50, 2:0.90, 1:11.20">Mike Williams TB WR</option>
<option value="6:0.90">Mikel Leshoure Det RB</option>
<option value="3:2.20, 2:3.10, 1:7.20">Miles Austin Dal WR</option>
<option value="10:2.60, 9:6.20, 8:2.40, 7:1.20, 6:4.40, 5:2.80, 4:1.90, 3:6.80, 2:4.40">Mohamed Sanu Cin WR</option>
<option value="10:2.00, 8:9.80, 6:1.50, 5:0.10, 4:2.40, 3:4.10, 2:2.10, 1:2.40">Montee Ball Den RB</option>
<option value="10:2.20, 9:3.60, 6:1.00, 5:0.50, 4:10.40, 3:2.10, 2:3.20, 1:2.60">Mychal Rivera Oak TE</option>
<option value="10:0.90, 9:0.80, 8:3.50, 7:0.90">Myles White GB WR</option>
<option value="3:11.60, 2:3.70, 1:7.80">Nate Burleson Det WR</option>
<option value="3:0.30, 2:3.40, 1:0.10">Nate Byham TB TE</option>
<option value="10:2.90, 7:6.20, 6:1.50, 5:3.00, 4:22.50, 3:13.10, 2:5.00, 1:4.60">Nate Washington Ten WR</option>
<option value="10:28.92, 9:68.64, 7:5.70, 6:36.04, 5:19.98, 4:7.96">Nick Foles Phi QB</option>
<option value="6:0.70, 5:3.50, 4:1.80">Nick Toon NO WR</option>
<option value="10:7.40, 9:3.00, 6:0.90, 4:2.00">Niles Paul Was TE</option>
<option value="5:6.00, 4:7.20, 3:2.90, 2:8.40, 1:18.70">Owen Daniels Hou TE</option>
<option value="8:1.30, 5:1.20">Patrick DiMarco Atl RB</option>
<option value="5:1.60, 1:3.00">Patrick Edwards Det WR</option>
<option value="10:0.10, 8:8.50, 7:14.10">Peyton Hillis NYG RB</option>
<option value="10:35.10, 8:33.86, 7:35.34, 6:17.10, 5:52.76, 4:37.08, 3:34.76, 2:23.98, 1:69.28">Peyton Manning Den QB</option>
<option value="10:15.42, 9:23.04, 7:17.80, 6:15.38, 5:31.44, 4:41.04, 3:12.46, 2:44.86, 1:31.60">Philip Rivers SD QB</option>
<option value="8:2.50, 7:6.80, 6:0.20, 1:1.10">Phillip Tanner Dal RB</option>
<option value="10:17.90, 9:17.20, 8:4.60, 7:5.80, 6:6.90, 4:11.90, 3:8.30, 2:20.30, 1:6.40">Pierre Garcon Was WR</option>
<option value="10:23.10, 9:9.00, 8:9.40, 6:7.20, 5:21.10, 4:3.80, 3:6.70, 2:4.80, 1:5.90">Pierre Thomas NO RB</option>
<option value="3:0.70">Quinton Patton SF WR</option>
<option value="6:5.30, 5:11.40, 3:5.40, 2:19.80, 1:19.00">Randall Cobb GB WR</option>
<option value="10:10.70, 9:23.60, 8:0.80, 6:2.10, 5:4.10, 4:11.60, 3:1.50, 2:3.40, 1:0.20">Rashad Jennings Oak RB</option>
<option value="10:3.10, 7:8.20, 6:4.20, 5:11.00, 4:1.40, 3:4.10, 2:15.40, 1:6.40">Rashard Mendenhall Ari RB</option>
<option value="10:5.60, 9:3.80, 7:7.20, 6:4.90, 5:20.20, 4:1.70, 2:2.50, 1:13.10">Ray Rice Bal RB</option>
<option value="10:11.30, 8:16.20, 7:9.40, 6:19.50, 5:6.90, 4:23.30, 2:6.90, 1:25.10">Reggie Bush Det RB</option>
<option value="7:5.00, 6:8.80, 5:8.50, 4:16.00, 3:6.30, 2:4.60, 1:15.60">Reggie Wayne Ind WR</option>
<option value="9:0.50">Ricardo Lockette Sea WR</option>
<option value="8:1.20">Richie Brockel Car TE</option>
<option value="10:22.20, 9:33.70, 8:1.30, 7:8.80, 6:18.00, 4:2.50, 3:2.90, 2:8.50, 1:1.40">Riley Cooper Phi WR</option>
<option value="10:24.00, 9:2.40, 8:3.00, 4:2.10, 3:4.20">Rishard Matthews Mia WR</option>
<option value="9:20.30, 8:2.70, 7:11.40">Rob Gronkowski NE TE</option>
<option value="10:11.70, 8:1.40, 7:5.30, 6:3.20, 4:2.30, 3:1.30">Rob Housler Ari TE</option>
<option value="10:33.64, 9:11.34, 8:5.98, 7:30.32, 6:13.54, 4:16.08, 3:12.74, 2:28.90, 1:23.56">Robert Griffin III Was QB</option>
<option value="5:0.60">Robert Hughes Ind RB</option>
<option value="10:1.70, 9:9.30, 8:1.50, 3:9.40">Robert Meachem NO WR</option>
<option value="10:0.80, 9:3.70, 8:2.10, 7:1.50, 6:3.60, 5:1.40, 4:0.40, 3:0.50, 2:3.10, 1:3.00">Robert Turbin Sea RB</option>
<option value="9:4.40, 8:0.70, 7:2.40, 6:0.90, 5:6.40, 4:15.30, 3:3.50, 2:9.10, 1:7.80">Robert Woods Buf WR</option>
<option value="10:0.60, 9:9.80, 8:4.50, 6:4.60, 5:11.60, 4:1.80, 3:4.20, 2:4.20, 1:7.90">Rod Streater Oak WR</option>
<option value="10:2.00, 5:4.50, 4:2.80, 3:1.60, 2:2.10, 1:1.90">Roddy White Atl WR</option>
<option value="10:3.60, 7:1.40, 6:0.30, 5:3.20, 4:0.70, 3:6.60, 2:1.80, 1:5.10">Ronnie Brown SD RB</option>
<option value="7:0.60, 6:3.60, 5:5.90, 4:5.70, 3:13.80, 2:0.30, 1:4.20">Ronnie Hillman Den RB</option>
<option value="10:3.10, 9:2.90, 8:2.50, 7:22.60, 6:7.70, 4:14.40, 3:3.50, 2:0.20, 1:1.60">Roy Helu Jr. Was RB</option>
<option value="10:14.00, 8:0.90, 7:10.50, 6:13.50, 5:22.40, 4:4.20, 3:4.00, 2:2.70, 1:12.10">Rueben Randle NYG WR</option>
<option value="10:25.48, 9:26.28, 8:19.16, 7:26.30, 6:16.38, 5:26.60, 4:10.62, 3:29.48, 2:12.98, 1:17.50">Russell Wilson Sea QB</option>
<option value="8:1.20, 7:1.60, 5:2.70, 3:3.40">Ryan Broyles Det WR</option>
<option value="10:27.86, 6:6.14, 5:22.88, 4:10.12">Ryan Fitzpatrick Ten QB</option>
<option value="10:6.20, 6:1.80">Ryan Griffin Hou TE</option>
<option value="10:12.10, 9:3.40, 7:17.00, 6:10.20, 5:0.80, 4:10.30, 3:5.80, 2:5.60, 1:11.50">Ryan Mathews SD RB</option>
<option value="10:19.36, 9:14.42, 8:14.88, 7:20.26, 5:18.88, 4:12.76, 3:18.14, 2:16.86, 1:15.18">Ryan Tannehill Mia QB</option>
<option value="10:0.40, 3:1.10">Ryan Taylor GB TE</option>
<option value="7:14.30, 6:23.08, 5:27.28, 4:9.68, 3:15.60, 2:36.58, 1:24.06">Sam Bradford StL QB</option>
<option value="10:1.30, 9:3.50, 8:2.00, 6:3.90, 3:7.70, 2:10.10, 1:6.30">Santana Moss Was WR</option>
<option value="4:2.50, 3:21.40, 2:5.10, 1:1.30">Santonio Holmes NYJ WR</option>
<option value="10:2.10, 9:2.60, 8:7.20, 7:1.80, 6:10.70, 5:4.90, 4:2.80, 3:13.90, 2:1.00, 1:3.80">Scott Chandler Buf TE</option>
<option value="10:15.10">Scott Tolzien GB QB</option>
<option value="8:2.50, 7:0.10, 5:5.40, 4:12.40, 3:3.10, 2:3.10">Sean McGrath KC TE</option>
<option value="10:1.00, 9:2.56">Seneca Wallace GB QB</option>
<option value="1:15.90">Shane Vereen NE RB</option>
<option value="3:5.50">Shaun Draughn Bal RB</option>
<option value="10:3.20, 9:12.60, 7:0.20, 1:1.80">Shonn Greene Ten RB</option>
<option value="7:11.00, 6:1.50, 5:0.80, 4:1.10, 3:19.90, 2:1.30, 1:3.50">Sidney Rice Sea WR</option>
<option value="10:5.90, 9:1.40, 8:0.90">Skye Dawson TB WR</option>
<option value="2:1.00">Spencer Ware Sea RB</option>
<option value="10:2.60, 9:0.10, 7:8.20, 6:1.20, 4:0.10, 2:1.20">Stanley Havili Ind RB</option>
<option value="9:1.20, 7:2.60">Stedman Bailey StL WR</option>
<option value="10:0.60, 8:3.80, 6:0.70, 3:0.20, 2:0.20">Stepfan Taylor Ari RB</option>
<option value="10:1.10, 3:4.20, 2:8.80, 1:2.50">Stephen Burton Jax WR</option>
<option value="8:2.30, 7:1.70, 6:4.60, 5:2.10, 3:16.80, 2:6.60, 1:3.90">Stephen Hill NYJ WR</option>
<option value="9:22.40, 8:13.90, 7:11.30, 6:23.00, 4:7.90, 3:4.30, 2:4.00, 1:2.60">Stevan Ridley NE RB</option>
<option value="10:6.30, 9:5.20, 8:4.20, 7:12.90, 6:8.10, 5:6.00, 3:4.00, 2:5.20, 1:11.10">Steve Smith Car WR</option>
<option value="10:2.00, 9:7.60, 8:1.30, 2:6.80, 1:12.20">Steven Jackson Atl RB</option>
<option value="10:4.80, 9:4.60, 8:13.20, 7:6.10, 5:1.90, 3:10.60, 2:17.10, 1:9.90">Stevie Johnson Buf WR</option>
<option value="10:0.50, 8:1.90, 7:3.60, 6:7.40, 5:2.10, 4:4.60, 3:0.50, 2:0.80, 1:2.40">T.J. Graham Buf WR</option>
<option value="5:0.60">T.J. Yates Hou QB</option>
<option value="10:13.00, 9:33.50, 7:6.20, 6:5.30, 5:26.00, 4:7.00, 3:2.90, 2:13.10, 1:4.30">T.Y. Hilton Ind WR</option>
<option value="10:7.70, 9:2.00, 8:4.60, 4:1.90">Taiwan Jones Oak RB</option>
<option value="10:1.70, 9:8.00, 7:4.70, 6:13.70, 5:10.80, 4:7.80, 3:15.30, 2:4.30">Tandon Doss Bal WR</option>
<option value="3:17.36">Tarvaris Jackson Sea QB</option>
<option value="9:1.70, 8:3.50, 7:1.60, 6:3.30, 5:2.20, 4:1.10, 2:0.10">Tashard Choice Buf RB</option>
<option value="10:50.40, 9:6.40, 8:9.50, 7:9.20, 6:1.10, 5:4.70, 4:2.50, 3:4.90, 2:18.10, 1:4.10">Tavon Austin StL WR</option>
<option value="10:6.90">Taylor Thompson Ten TE</option>
<option value="10:13.60, 9:3.40, 8:13.10, 7:8.70, 6:7.20, 5:14.70, 3:15.40, 2:23.20, 1:2.00">Ted Ginn Jr. Car WR</option>
<option value="10:8.10, 9:3.30, 8:12.90, 7:13.10, 6:8.70, 5:23.30, 4:5.10, 2:2.50, 1:3.20">Terrance Williams Dal WR</option>
<option value="10:8.78, 9:16.92, 8:16.12, 6:14.24, 5:23.94, 3:20.84, 2:10.04, 1:21.88">Terrelle Pryor Oak QB</option>
<option value="8:9.86, 7:7.38, 6:26.34">Thad Lewis Buf QB</option>
<option value="8:1.40, 3:0.60">Theo Riddick Det RB</option>
<option value="TE:10.00, TE:9.00, TE:8.00, TE:7.00, TE:6.00, TE:4.00, TE:3.00">Tim Wright TB WR</option>
<option value="10:6.40, 9:8.90, 8:4.70, 7:0.60">Tiquan Underwood TB WR</option>
<option value="10:3.50, 9:2.60, 8:10.70, 7:1.70, 6:1.60, 4:0.70, 3:3.30, 2:0.80">Toby Gerhart Min RB</option>
<option value="9:50.18, 8:9.14, 7:7.12, 6:16.36, 5:5.88, 4:24.44, 3:19.50, 2:13.20, 1:19.12">Tom Brady NE QB</option>
<option value="9:6.20, 7:1.40">Tom Crabtree TB TE</option>
<option value="9:1.10, 7:2.10, 6:1.50, 4:3.40, 3:0.90, 2:0.90, 1:2.10">Tommy Bohanon NYJ RB</option>
<option value="10:0.40, 6:3.00">Tony Fiammetta Chi RB</option>
<option value="10:2.90, 9:14.10, 8:2.60, 7:3.00, 5:9.70, 4:26.90, 3:2.40, 2:3.30, 1:9.60">Tony Gonzalez Atl TE</option>
<option value="10:11.12, 9:24.28, 8:26.84, 7:14.88, 6:10.80, 5:59.94, 4:23.34, 3:26.40, 2:16.22, 1:20.42">Tony Romo Dal QB</option>
<option value="5:5.50, 4:2.20, 3:0.50">Tony Scheffler Det TE</option>
<option value="1:1.50">Tori Gurley Cle WR</option>
<option value="10:10.60, 9:7.80, 7:6.10, 6:1.20, 5:12.10, 4:22.60, 3:9.20, 2:8.50, 1:9.20">Torrey Smith Bal WR</option>
<option value="9:6.10, 6:6.30">Travaris Cadet NO RB</option>
<option value="8:7.10, 7:8.60, 6:3.50, 5:24.90, 4:4.60, 2:4.10, 1:7.50">Travis Benjamin Cle WR</option>
<option value="10:3.50, 9:5.30, 7:1.70, 6:5.30, 5:5.60, 4:12.60, 3:9.50, 2:7.90, 1:7.70">Trent Richardson Ind RB</option>
<option value="10:11.90, 8:4.70, 7:12.90, 6:0.10, 5:9.60, 4:17.50, 3:3.40, 2:22.50, 1:3.60">Trindon Holliday Den WR</option>
<option value="10:5.50, 9:1.40, 8:2.30, 7:10.50, 6:1.30, 5:5.30, 4:3.90, 3:0.70, 2:6.60, 1:4.70">Tyler Eifert Cin TE</option>
<option value="10:1.80">Tyrod Taylor Bal QB</option>
<option value="7:2.00, 6:0.70, 4:0.90, 3:0.60, 2:1.90, 1:2.50">Vance McDonald SF TE</option>
<option value="10:0.20, 8:11.20, 7:6.20, 6:30.00, 5:14.80, 4:7.80, 2:2.00, 1:21.80">Vernon Davis SF TE</option>
<option value="1:5.80">Vick Ballard Ind RB</option>
<option value="10:3.70, 8:8.60, 7:5.00, 6:6.80, 5:4.80, 4:22.40, 3:2.50, 2:11.80, 1:29.80">Victor Cruz NYG WR</option>
<option value="10:3.50, 9:1.70, 7:2.60, 6:3.10, 5:11.70, 4:4.10, 3:1.10, 2:2.60, 1:7.30">Vincent Brown SD WR</option>
<option value="10:2.80, 9:1.10, 8:7.90, 7:25.80, 6:23.40, 4:2.70, 3:3.40, 2:7.70, 1:15.40">Vincent Jackson TB WR</option>
<option value="10:0.40, 4:0.50, 3:0.30, 2:0.50">Virgil Green Den TE</option>
<option value="10:0.20, 9:0.20, 7:1.30, 4:0.20, 3:1.90, 2:1.20, 1:7.20">Vonta Leach Bal RB</option>
<option value="10:2.10, 8:14.10, 7:9.60, 6:12.30, 5:10.90, 4:19.60, 3:14.40, 2:9.90, 1:19.40">Wes Welker Den WR</option>
<option value="6:0.20, 3:0.50">Will Johnson Pit RB</option>
<option value="8:0.30, 6:0.60, 5:0.50, 3:0.60, 2:1.00, 1:1.10">Will Ta'ufo'ou Jax RB</option>
<option value="9:1.10, 8:2.80, 7:3.90, 6:3.90, 5:13.20, 4:4.60, 3:0.90">Willis McGahee Cle RB</option>
<option value="10:12.80, 9:29.80, 8:12.90, 7:14.70, 6:9.00, 5:7.80, 1:0.40">Zac Stacy StL RB</option>
<option value="9:10.20, 8:0.50, 7:3.30, 6:1.30, 5:3.80, 4:3.80, 3:0.50, 2:5.80, 1:1.10">Zach Ertz Phi TE</option>
<option value="1:0.80">Zach Line Min RB</option>
<option value="9:4.90, 8:1.40, 7:10.00, 4:0.70, 3:12.50, 2:2.20, 1:4.20">Zach Miller Sea TE</option>
<option value="9:4.60, 8:1.00">Zach Sudfeld NYJ TE</option>
</select>
<form name="data" id="data">
<p name="input" id="input"></p>
<!--<input type="checkbox" name="show" id="show"> Show Work?-->
<!--<input type="button" value="Gram-Schmidt" id=button1 name=button1 onclick="postProcess1()">
<input type="button" value="QR Decomposition" id=button1 name=button1 onclick="postProcess2()">-->
<input type="button" value="Trend Line" id=button1 name=button1 onclick="postProcess3()">
<input type="button" value="Autoregressive Model" id=button1 name=button1 onclick="postProcess2()">
<center>
<canvas name="myCanvas"  id="myCanvas" width=550 height=550 style="border:1px solid #000000;">your browser does not support the canvas tag</canvas>
</center>
<p name="output" id="output"></p>
<canvas name="acrGrp"  id="acrGph" width=550 height=550 style="border:1px solid #000000;">your browser does not support the canvas tag</canvas>
<script type="text/javascript">
var A;
var b;
init();
</script>
</FORM>