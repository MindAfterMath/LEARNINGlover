<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
QRDecomposition<script type="text/javascript">
function multiply(A, B, show)
{
	var C = new Array(A.length);
   
	for (var i = 0; i < C.length; i++)
	{
		C[i] = new Array(B[0].length);
	}
   
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < B[0].length; j++)
		{
			var sum = 0;
			for (var k = 0; k < A[i].length; k++)
			{
				sum += A[i][k]*B[k][j];
			}
		   
			C[i][j] = sum;
		}
	}
   
	return C;
}
function transpose(A)
{
	var ATrans = new Array(A[0].length);
	for (var i = 0; i < ATrans.length; i++)
	{
		ATrans[i] = new Array(A.length);
		for (var j = 0; j < ATrans[i].length; j++)
		{
			ATrans[i][j] = A[j][i];
		}
	}
   
	return ATrans;
}
function dispMatrix(A)
{
	var text = "<table>";
   
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			if (Math.floor(A[i][j]) != A[i][j])
			{
				text += "<td>" + A[i][j].toFixed(3) + "</td>";
			}
			else
			{
				text += "<td>" + Math.floor(A[i][j]) + "</td>";
			}
		}
	   
		text += "</tr>";
	}
   
	text += "</table>";
   
	return text;
}
function dispVectors(A)
{
	var text = "<table>";
   
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr><td>(</td>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j].toFixed(3) + "</td>";
		}
		text += "<td>)</td></tr>";
	}
   
	text += "</table>";
   
	return text;
}
function QRDecomp(A, show)
{
	document.getElementById("output").innerHTML = "";
	var aVectors = transpose(A);   
	var uVector = new Array();
	var eVector = new Array();
	var eVectorTxt = new Array();
	var sum = new Array();
	var text = "";
	var work = "";
   
	var testTest = new Array();
   
	work += "The columns of A become the following vectors: <br>";
	work += dispVectors(aVectors);
	for (var i = 0; i < aVectors.length; i++)
	{
		uVector[i] = new Array()
		for (var j = 0; j < aVectors[i].length; j++)
		{
			sum[j] = 0;
		}
	   
		for (var j = 0; j < i; j++)
		{
			temp = proj(eVector[j], aVectors[i]);
			for (var k = 0; k < temp.length; k++)
			{
				sum[k] += temp[k];
			}
		}
	   
		for (var j = 0; j < aVectors[i].length; j++)
		{
			uVector[i][j] = aVectors[i][j] - sum[j];
		}
	   
		var norm = normal(uVector[i]);
	   
		eVector[i] = new Array();
		eVectorTxt[i] = new Array();
	   
		for (var j = 0; j < aVectors[i].length; j++)
		{
			eVector[i][j] = uVector[i][j] / norm;
			eVectorTxt[i][j] = uVector[i][j] + " / " + norm;
		}
	   
		work += "u<sub>" + i + "</sub> = ";
		for (var j = 0; j < aVectors[i].length; j++)
		{
			work += uVector[i][j].toFixed(3);
			if (j < aVectors[i].length - 1)
			{
				work += ", ";
			}
		}
		work += "<br>";
	   
		work += "e<sub>" + i + "</sub> = ";
		for (var j = 0; j < aVectors[i].length; j++)
		{
			work += eVector[i][j].toFixed(3);
			if (j < aVectors[i].length - 1)
			{
				work += ", ";
			}
		}
	   
		work += "<br><br>";   
	}
   
	for (var i = 0; i < aVectors.length; i++)
	{
		testTest[i] = new Array();
		work += "a<sub>" + i + "</sub> = ";
		for (var j = 0; j < aVectors[i].length; j++)
		{
			testTest[i][j] = 0;
		}
	   
		for (var j = 0; j <= i; j++)
		{
			var tempVec = innerProd(aVectors[i], eVector[j]);
		   
			for (var k = 0; k < eVector[i].length; k++)
			{
				testTest[i][k] += eVector[j][k] * tempVec;
			}		   
		}
	   
		for (var k = 0; k < eVector[i].length; k++)
		{
			work += (testTest[i][k]).toFixed(3);
			if (k < aVectors[i].length - 1)
			{
				work += ", ";
			}
		}
		work += "<br>";
	}
   
	uVector = transpose(uVector);
	eVector = transpose(eVector);
	eVectorTxt = transpose(eVectorTxt);
	var decomp = new Object();
	decomp.Q = new Array();
   
	for (var i = 0; i < eVector.length; i++)
	{
		decomp.Q[i] = eVectorTxt[i];
	}
   
	for (var i = 0; i < eVector.length; i++)
	{
		decomp.Q[i] = eVector[i];
	}
   
	decomp.R = multiply(transpose(decomp.Q), A, false);
   
	QRCheck(decomp, aVectors);
	text += "A = QR, where <table><tr><td>Q = </td><td>";
	text += "<table>";
	for (var i = 0; i < decomp.Q.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.Q[i].length; j++)
		{
			text += "<td>" + decomp.Q[i][j].toFixed(3) + "</td>";
		}
	   
		text += "</tr>";
	}
   
	text += "</table></td></tr></table>";
	text += "<table><tr><td>R = </td><td><table>";
	for (var i = 0; i < decomp.R.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.R[i].length; j++)
		{
			text += "<td>" + decomp.R[i][j].toFixed(3) + "</td>";
		}
	   
		text += "</tr>";
	}
	text += "</table></tr></td></table>";
	if (show)
	{
		document.getElementById("output").innerHTML += work;
	}

	document.getElementById("output").innerHTML += text;
	return decomp;
}

function QRCheck(decomp, A)
{
	var text = "A = <table>";
   
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j] + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>Q = <table>";
   
	for (var i = 0; i < decomp.Q.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.Q[i].length; j++)
		{
			text += "<td>" + decomp.Q[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>R = <table>";
   
	for (var i = 0; i < decomp.R.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.R[i].length; j++)
		{
			text += "<td>" + decomp.R[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table> QR = <table>";
	var QR = multiply(decomp.Q, decomp.R, false);
   
	for (var i = 0; i < QR.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < QR[i].length; j++)
		{
			text += "<td>" + QR[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
   
//	document.getElementById("output").innerHTML += text;
}
function proj(vec1, vec2)
{
	var denom = innerProd(vec1, vec1);
	var numer = innerProd(vec1, vec2);
   
	var vec3 = new Array();
   
	for (var i = 0; i < vec1.length; i++)
	{
		vec3[i] = (numer / denom) * vec1[i];
	}
   
	return vec3;
}
function innerProd(vec1, vec2)
{
	if (vec1.length == vec2.length)
	{
		var ans = 0;
		for (var i = 0; i < vec1.length; i++)
		{
			ans += vec1[i] * vec2[i];
		}
	   
		return ans;
	}
}
function normal(vec)
{
	var norm = 0;
	for (var i = 0; i < vec.length; i++)
	{
		norm += vec[i]*vec[i];
	}
	norm = Math.sqrt(norm);
   
	return norm;
}
function postProcess(b, show)
{
	document.getElementById('output').innerHTML = "b = ";
	for (var zen = 0; zen < b.length; zen++)
	{
		document.getElementById('output').innerHTML += b[zen][0].toFixed(3) + ", ";
	}
	document.getElementById("output").innerHTML += "<br>";
	var A = new Array(b.length);
	for (var i = 0; i < b.length; i++)
	{
		A[i] = new Array();
		A[i][0] = 1;
		A[i][1] = i;
	}
   
	var text = "";
	if (show)
	{
		text += "<table><tr><td>";   
		text += "A = <table>";
   
		for (var i = 0; i < A.length; i++)
		{
			text += "<tr>";
			for (var j = 0; j < A[i].length; j++)
			{
				text += "<td>" + A[i][j].toFixed(3) + "</td>";
			}
			text += "</tr>";
		}
		text += "</table>";
		text += "</td><td>";
		text += "<table><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>1</sub></td></tr><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>2</sub></td></tr></table>";
		text += "</td><td> = </td><td>";
		text += "<table>"
   
		for (var i = 0; i < b.length; i++)
		{
			text += "<tr><td>" + b[i][0].toFixed(3) + "</td></tr>";
		}
		text += "</table>";
		text += "</td></tr></table>";
	}
   
	sol = multLinReg(A, b, show);
   
	text += "f<sub>i</sub> = " + sol[0].toFixed(4) + " + " + sol[1].toFixed(3) + "*i<br>";
	document.getElementById("output").innerHTML += text;
	document.getElementById("fitBtn").hidden = false;
	drawLine(b, sol);   
}
function checkFit(b, sol, show)
{
	var text = "";
	if (show)
	{
		text += "We would like to check the 'Goodness of Fit' of this model. To do this, we will perform the R-squared test<br>";
		text += "To compute this we will calculate: <br>";
		text += "<ol>";
		text += "<li>SS<sub>tot</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(b<sub>i</sub> - <img src='http://learninglover.com/chars/bbar.jpg'>)<sup>2</sup>";
		text += "<li>SS<sub>res</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(b<sub>i</sub> - f<sub>i</sub>)<sup>2</sup>";
		text += "</ol>";
		text += "The definition of the R-squared test is ";
		text += "<table><tr><td>1 - </td><td><table><tr><td>SS<sub>res</sub></td></tr><tr><td><hr></td></tr><tr><td>SS<sub>tot</sub></td></tr></table></td></tr></table>";
	}
   
	var sstot = 0;
	var ssres = 0;
	var dtamean = 0;
	for (var i = 0; i < b.length; i++)
	{
		dtamean += parseFloat(b[i][0]);
	}
	dtamean = dtamean / b.length;
	if (show)
	{
		text += "<img src='http://www.learninglover.com/chars/ybar.jpg'> = " + dtamean.toFixed(3) + "<br>";
	}
	var z = new Array();
	for (var i = 0; i < b.length; i++)
	{
		z[i] = sol[1]*(i) + sol[0];
		sstot += ((b[i][0] - dtamean)*(b[i][0] - dtamean));
		ssres += ((b[i][0] - (sol[1]*(i) + sol[0]))*(b[i][0] - (sol[1]*(i) + sol[0])));
	}
   
	if (show)
	{
		text += "SS<sub>tot</sub> = " + sstot.toFixed(3) + "<br>";
		text += "SS<sub>res</sub> = " + ssres.toFixed(3) + "<br>";
	}
	var rsq = 1 - (ssres / sstot);
	text += "The R-squared term for this linear regression is <br>";
	text += "R-Squared: " + rsq.toFixed(3) + "<br>";
	if (rsq < 0.5)
	{
		text += "This implies that we should not have too much faith in this linear regression. To see why, we must understand that this data represents a time series and not an independent data set (a player's results for this current week are influenced by how he's performed in previous weeks).<br>";
		text += "We can also see this by looking at the autocorrelation of the residuals. <br><br>";
		var ers = new Array();
		ers = getErrors(b, sol);
		text += "This trend line gives the following errors: <br>";
		for (var i = 0; i < ers.length; i++)
		{
			text += "Error[" + (i+1) + "] = " + ers[i].toFixed(3) + "<br>";
		}
		text += "<br>";
		text += "To check how accurate we can use this model to predict future events, we consider the autocorrelation of these errors: <br>";
		var acr = new Array();
		acr[0] = 1;
		for (var i = 1; i < b.length - 1; i++)
		{
			var len = acr.length;
			acr[len] = autocorr(i, ers);
		}
		for (var i = 0; i < acr.length; i++)
		{
			text += "autoCorrelation(" + i + ") = " + acr[i].toFixed(3) + "<br>";
		}
		text += "For linear regressions, we would the expected value of the autocorrelation of errors to be zero. We can see here that they are not. <br><br>";
	}
	document.getElementById("output").innerHTML += text;
}
function genMatrix()
{   
	var ydim = Math.floor(Math.random()*10+2);
	var xdim = Math.floor(Math.random()*2)+ydim;
   
	var A = new Array();
	   
	for (var i = 0; i < xdim; i++)
	{   
		A[i] = new Array();   
		for (var j = 0; j < ydim; j++)   
		{	   
			A[i][j] = Math.floor(Math.random()*25);	   
			var sign = Math.floor(Math.random()*2);	   
			if (sign == 0)
			{		   
				A[i][j] = A[i][j]*-1;	   
			}
		}   
	}
   
	return A;
}
function maximum(data)
{
	var mxm = Number.MIN_VALUE;
	for (var i = 0; i < data.length;  i++)
	{
		for (var j = 0; j < data[i].length;  j++)
		{
			if (parseFloat(data [i][j]) > mxm)
			{
				mxm = parseFloat(data [i][j]);
			}
		}
	}
   
	return mxm;
}
function minimum(data)
{
	var mnm = Number.MAX_VALUE;
	for (var i = 0; i < data.length;  i++)
	{
		for (var j = 0; j < data[i].length;  j++)
		{
			if (parseFloat(data [i][j]) < mnm)
			{
				mnm = parseFloat(data [i][j]);
			}
		}
	}
   
	return mnm;
}
function evalReg(beta, xVal)
{
	return (beta[0] + beta[1]*xVal);
}
function getErrors(data, beta)
{
	var errors = new Array();
   
	for (var i = 0; i < data.length; i++)
	{
		errors[i] = data[i][0] - evalReg(beta, i);
	}
   
//	document.getElementById("output").innerHTML += "The Errors in this Regression are :<br>";
//   
//	for (var i = 0; i < errors.length; i++)
//	{
//		document.getElementById("output").innerHTML += (i+1) + ": " + errors[i].toFixed(3) + "<br>";
//	}
	return errors;
}
function drawPoints(data)
{
	var mxm = maximum(data);
	var mnm = minimum(data);
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	var vpp;
	var numRows;
	var loc;
   
	if (mnm < 0)
	{
		vpp = (mxm - mnm) / c.height;
		numRows = Math.ceil(mxm - mnm);
		loc = c.height - (mxm) / vpp;
	}
	else
	{
		vpp = (mxm) / c.height;
		numRows = Math.ceil (mxm);
		loc = 0;
	}
   
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
	var numClms = data.length + 1;
   
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
   
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
   
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height - loc);
	ctx.lineTo(c.width, c.height - loc);
	ctx.stroke();
   
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-loc-i);
		ctx.lineTo(5, c.height-loc-i);
		ctx.stroke();
	}
   
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, c.height-loc+5);
		ctx.lineTo(i, c.height-loc-5);
		ctx.stroke();
	}   
   
	for (var i = 0; i < data.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height - data [i][0]*yHeight - loc,3,0,2*Math.PI);
		ctx.stroke();
	}
}
function drawLine(data, beta)
{
	var mxm = maximum(data);
	var mnm = minimum(data);
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	var vpp;
	var numRows;
	var loc;
   
	if (mnm < 0)
	{
		vpp = (mxm - mnm) / c.height;
		numRows = Math.ceil (mxm - mnm);
		loc = c.height - (mxm) / vpp;
	}
	else
	{
		vpp = (mxm) / c.height;
		numRows = Math.ceil (mxm);
		loc = 0;
	}
   
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
   
	var numClms = data.length + 1;
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
   
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
   
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height - loc);
	ctx.lineTo(c.width, c.height - loc);
	ctx.stroke();
   
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-loc-i);
		ctx.lineTo(5, c.height-loc-i);
		ctx.stroke();
	}
   
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, c.height-loc+5);
		ctx.lineTo(i, c.height-loc-5);
		ctx.stroke();
	}
   
	for (var i = 0; i < data.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height - data[i][0]*yHeight - loc,3,0,2*Math.PI);
		ctx.stroke();
	}
   
	var pt0x = 0;
	var pt0y = evalReg(beta, pt0x-1);
   
	var pt1x = data.length+1;
	var pt1y = evalReg(beta, pt1x-1);
	ctx.strokeStyle = "#3333ff";
	ctx.beginPath();
	ctx.moveTo(pt0x*xWidth, c.height - pt0y*yHeight - loc);
	ctx.lineTo(pt1x*xWidth, c.height - pt1y*yHeight - loc);
	ctx.stroke();
	for (var i = 0; i < data.length;  i++)
	{
		ctx.strokeStyle = "#FFFF00";
		ctx.beginPath();
		ctx.moveTo((i+1)*xWidth, c.height - evalReg(beta, (i))*yHeight-loc);
		ctx.lineTo((i+1)*xWidth, c.height - data[i][0]*yHeight - loc)
		ctx.stroke();
	}   
}
</script>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" /><meta name="keywords" content="matrix, QR Decomposition, linearly independent, inverse, script, mathematics, math, linear algebra, upper triagnular, orthogonal" />

<meta name="description" content="This procedure finds the QR Decomposition for a given matrix" />
<title> at LEARNINGlover.com</title>
<script type="text/javascript">
function multiply(A, B, show)
{
	var C = new Array(A.length);
   
	for (var i = 0; i < C.length; i++)
	{
		C[i] = new Array(B[0].length);
	}
   
	for (var i = 0; i < A.length; i++)
	{
		for (var j = 0; j < B[0].length; j++)
		{
			var sum = 0;
			for (var k = 0; k < A[i].length; k++)
			{
				sum += A[i][k]*B[k][j];
			}
		   
			C[i][j] = sum;
		}
	}
   
	return C;
}
function transpose(A)
{
	var ATrans = new Array(A[0].length);
	for (var i = 0; i < ATrans.length; i++)
	{
		ATrans[i] = new Array(A.length);
		for (var j = 0; j < ATrans[i].length; j++)
		{
			ATrans[i][j] = A[j][i];
		}
	}
   
	return ATrans;
}
function dispMatrix(A)
{
	var text = "<table>";
   
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			if (Math.floor(A[i][j]) != A[i][j])
			{
				text += "<td>" + A[i][j].toFixed(3) + "</td>";
			}
			else
			{
				text += "<td>" + Math.floor(A[i][j]) + "</td>";
			}
		}
	   
		text += "</tr>";
	}
   
	text += "</table>";
   
	return text;
}
function dispVectors(A)
{
	var text = "<table>";
   
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr><td>(</td>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j].toFixed(3) + "</td>";
		}
		text += "<td>)</td></tr>";
	}
   
	text += "</table>";
   
	return text;
}
function QRDecomp(A, show)
{
	document.getElementById("output").innerHTML = "";
	var aVectors = transpose(A);   
	var uVector = new Array();
	var eVector = new Array();
	var eVectorTxt = new Array();
	var sum = new Array();
	var text = "";
	var work = "";
   
	var testTest = new Array();
   
	work += "The columns of A become the following vectors: <br>";
	work += dispVectors(aVectors);
	for (var i = 0; i < aVectors.length; i++)
	{
		uVector[i] = new Array()
		for (var j = 0; j < aVectors[i].length; j++)
		{
			sum[j] = 0;
		}
	   
		for (var j = 0; j < i; j++)
		{
			temp = proj(eVector[j], aVectors[i]);
			for (var k = 0; k < temp.length; k++)
			{
				sum[k] += temp[k];
			}
		}
	   
		for (var j = 0; j < aVectors[i].length; j++)
		{
			uVector[i][j] = aVectors[i][j] - sum[j];
		}
	   
		var norm = normal(uVector[i]);
	   
		eVector[i] = new Array();
		eVectorTxt[i] = new Array();
	   
		for (var j = 0; j < aVectors[i].length; j++)
		{
			eVector[i][j] = uVector[i][j] / norm;
			eVectorTxt[i][j] = uVector[i][j] + " / " + norm;
		}
	   
		work += "u<sub>" + i + "</sub> = ";
		for (var j = 0; j < aVectors[i].length; j++)
		{
			work += uVector[i][j].toFixed(3);
			if (j < aVectors[i].length - 1)
			{
				work += ", ";
			}
		}
		work += "<br>";
	   
		work += "e<sub>" + i + "</sub> = ";
		for (var j = 0; j < aVectors[i].length; j++)
		{
			work += eVector[i][j].toFixed(3);
			if (j < aVectors[i].length - 1)
			{
				work += ", ";
			}
		}
	   
		work += "<br><br>";   
	}
   
	for (var i = 0; i < aVectors.length; i++)
	{
		testTest[i] = new Array();
		work += "a<sub>" + i + "</sub> = ";
		for (var j = 0; j < aVectors[i].length; j++)
		{
			testTest[i][j] = 0;
		}
	   
		for (var j = 0; j <= i; j++)
		{
			var tempVec = innerProd(aVectors[i], eVector[j]);
		   
			for (var k = 0; k < eVector[i].length; k++)
			{
				testTest[i][k] += eVector[j][k] * tempVec;
			}		   
		}
	   
		for (var k = 0; k < eVector[i].length; k++)
		{
			work += (testTest[i][k]).toFixed(3);
			if (k < aVectors[i].length - 1)
			{
				work += ", ";
			}
		}
		work += "<br>";
	}
   
	uVector = transpose(uVector);
	eVector = transpose(eVector);
	eVectorTxt = transpose(eVectorTxt);
	var decomp = new Object();
	decomp.Q = new Array();
   
	for (var i = 0; i < eVector.length; i++)
	{
		decomp.Q[i] = eVectorTxt[i];
	}
   
	for (var i = 0; i < eVector.length; i++)
	{
		decomp.Q[i] = eVector[i];
	}
   
	decomp.R = multiply(transpose(decomp.Q), A, false);
   
	QRCheck(decomp, aVectors);
	text += "A = QR, where <table><tr><td>Q = </td><td>";
	text += "<table>";
	for (var i = 0; i < decomp.Q.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.Q[i].length; j++)
		{
			text += "<td>" + decomp.Q[i][j].toFixed(3) + "</td>";
		}
	   
		text += "</tr>";
	}
   
	text += "</table></td></tr></table>";
	text += "<table><tr><td>R = </td><td><table>";
	for (var i = 0; i < decomp.R.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.R[i].length; j++)
		{
			text += "<td>" + decomp.R[i][j].toFixed(3) + "</td>";
		}
	   
		text += "</tr>";
	}
	text += "</table></tr></td></table>";
	if (show)
	{
		document.getElementById("output").innerHTML += work;
	}

	document.getElementById("output").innerHTML += text;
	return decomp;
}

function QRCheck(decomp, A)
{
	var text = "A = <table>";
   
	for (var i = 0; i < A.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < A[i].length; j++)
		{
			text += "<td>" + A[i][j] + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>Q = <table>";
   
	for (var i = 0; i < decomp.Q.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.Q[i].length; j++)
		{
			text += "<td>" + decomp.Q[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>R = <table>";
   
	for (var i = 0; i < decomp.R.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < decomp.R[i].length; j++)
		{
			text += "<td>" + decomp.R[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table> QR = <table>";
	var QR = multiply(decomp.Q, decomp.R, false);
   
	for (var i = 0; i < QR.length; i++)
	{
		text += "<tr>";
		for (var j = 0; j < QR[i].length; j++)
		{
			text += "<td>" + QR[i][j].toFixed(3) + "</td>";
		}
		text += "</tr>";
	}
	text += "</table>";
   
//	document.getElementById("output").innerHTML += text;
}
function proj(vec1, vec2)
{
	var denom = innerProd(vec1, vec1);
	var numer = innerProd(vec1, vec2);
   
	var vec3 = new Array();
   
	for (var i = 0; i < vec1.length; i++)
	{
		vec3[i] = (numer / denom) * vec1[i];
	}
   
	return vec3;
}
function innerProd(vec1, vec2)
{
	if (vec1.length == vec2.length)
	{
		var ans = 0;
		for (var i = 0; i < vec1.length; i++)
		{
			ans += vec1[i] * vec2[i];
		}
	   
		return ans;
	}
}
function normal(vec)
{
	var norm = 0;
	for (var i = 0; i < vec.length; i++)
	{
		norm += vec[i]*vec[i];
	}
	norm = Math.sqrt(norm);
   
	return norm;
}
function postProcess(b, show)
{
	document.getElementById('output').innerHTML = "b = ";
	for (var zen = 0; zen < b.length; zen++)
	{
		document.getElementById('output').innerHTML += b[zen][0].toFixed(3) + ", ";
	}
	document.getElementById("output").innerHTML += "<br>";
	var A = new Array(b.length);
	for (var i = 0; i < b.length; i++)
	{
		A[i] = new Array();
		A[i][0] = 1;
		A[i][1] = i;
	}
   
	var text = "";
	if (show)
	{
		text += "<table><tr><td>";   
		text += "A = <table>";
   
		for (var i = 0; i < A.length; i++)
		{
			text += "<tr>";
			for (var j = 0; j < A[i].length; j++)
			{
				text += "<td>" + A[i][j].toFixed(3) + "</td>";
			}
			text += "</tr>";
		}
		text += "</table>";
		text += "</td><td>";
		text += "<table><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>1</sub></td></tr><tr><td><img src='http://www.learninglover.com/chars/beta.gif'><sub>2</sub></td></tr></table>";
		text += "</td><td> = </td><td>";
		text += "<table>"
   
		for (var i = 0; i < b.length; i++)
		{
			text += "<tr><td>" + b[i][0].toFixed(3) + "</td></tr>";
		}
		text += "</table>";
		text += "</td></tr></table>";
	}
   
	sol = multLinReg(A, b, show);
   
	text += "f<sub>i</sub> = " + sol[0].toFixed(4) + " + " + sol[1].toFixed(3) + "*i<br>";
	document.getElementById("output").innerHTML += text;
	document.getElementById("fitBtn").hidden = false;
	drawLine(b, sol);   
}
function checkFit(b, sol, show)
{
	var text = "";
	if (show)
	{
		text += "We would like to check the 'Goodness of Fit' of this model. To do this, we will perform the R-squared test<br>";
		text += "To compute this we will calculate: <br>";
		text += "<ol>";
		text += "<li>SS<sub>tot</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(b<sub>i</sub> - <img src='http://learninglover.com/chars/bbar.jpg'>)<sup>2</sup>";
		text += "<li>SS<sub>res</sub> = <img src='http://www.learninglover.com/chars/sum.gif'><sub>i = 1 to n</sub>(b<sub>i</sub> - f<sub>i</sub>)<sup>2</sup>";
		text += "</ol>";
		text += "The definition of the R-squared test is ";
		text += "<table><tr><td>1 - </td><td><table><tr><td>SS<sub>res</sub></td></tr><tr><td><hr></td></tr><tr><td>SS<sub>tot</sub></td></tr></table></td></tr></table>";
	}
   
	var sstot = 0;
	var ssres = 0;
	var dtamean = 0;
	for (var i = 0; i < b.length; i++)
	{
		dtamean += parseFloat(b[i][0]);
	}
	dtamean = dtamean / b.length;
	if (show)
	{
		text += "<img src='http://www.learninglover.com/chars/ybar.jpg'> = " + dtamean.toFixed(3) + "<br>";
	}
	var z = new Array();
	for (var i = 0; i < b.length; i++)
	{
		z[i] = sol[1]*(i) + sol[0];
		sstot += ((b[i][0] - dtamean)*(b[i][0] - dtamean));
		ssres += ((b[i][0] - (sol[1]*(i) + sol[0]))*(b[i][0] - (sol[1]*(i) + sol[0])));
	}
   
	if (show)
	{
		text += "SS<sub>tot</sub> = " + sstot.toFixed(3) + "<br>";
		text += "SS<sub>res</sub> = " + ssres.toFixed(3) + "<br>";
	}
	var rsq = 1 - (ssres / sstot);
	text += "The R-squared term for this linear regression is <br>";
	text += "R-Squared: " + rsq.toFixed(3) + "<br>";
	if (rsq < 0.5)
	{
		text += "This implies that we should not have too much faith in this linear regression. To see why, we must understand that this data represents a time series and not an independent data set (a player's results for this current week are influenced by how he's performed in previous weeks).<br>";
		text += "We can also see this by looking at the autocorrelation of the residuals. <br><br>";
		var ers = new Array();
		ers = getErrors(b, sol);
		text += "This trend line gives the following errors: <br>";
		for (var i = 0; i < ers.length; i++)
		{
			text += "Error[" + (i+1) + "] = " + ers[i].toFixed(3) + "<br>";
		}
		text += "<br>";
		text += "To check how accurate we can use this model to predict future events, we consider the autocorrelation of these errors: <br>";
		var acr = new Array();
		acr[0] = 1;
		for (var i = 1; i < b.length - 1; i++)
		{
			var len = acr.length;
			acr[len] = autocorr(i, ers);
		}
		for (var i = 0; i < acr.length; i++)
		{
			text += "autoCorrelation(" + i + ") = " + acr[i].toFixed(3) + "<br>";
		}
		text += "For linear regressions, we would the expected value of the autocorrelation of errors to be zero. We can see here that they are not. <br><br>";
	}
	document.getElementById("output").innerHTML += text;
}
function genMatrix()
{   
	var ydim = Math.floor(Math.random()*10+2);
	var xdim = Math.floor(Math.random()*2)+ydim;
   
	var A = new Array();
	   
	for (var i = 0; i < xdim; i++)
	{   
		A[i] = new Array();   
		for (var j = 0; j < ydim; j++)   
		{	   
			A[i][j] = Math.floor(Math.random()*25);	   
			var sign = Math.floor(Math.random()*2);	   
			if (sign == 0)
			{		   
				A[i][j] = A[i][j]*-1;	   
			}
		}   
	}
   
	return A;
}
function maximum(data)
{
	var mxm = Number.MIN_VALUE;
	for (var i = 0; i < data.length;  i++)
	{
		for (var j = 0; j < data[i].length;  j++)
		{
			if (parseFloat(data [i][j]) > mxm)
			{
				mxm = parseFloat(data [i][j]);
			}
		}
	}
   
	return mxm;
}
function minimum(data)
{
	var mnm = Number.MAX_VALUE;
	for (var i = 0; i < data.length;  i++)
	{
		for (var j = 0; j < data[i].length;  j++)
		{
			if (parseFloat(data [i][j]) < mnm)
			{
				mnm = parseFloat(data [i][j]);
			}
		}
	}
   
	return mnm;
}
function evalReg(beta, xVal)
{
	return (beta[0] + beta[1]*xVal);
}
function getErrors(data, beta)
{
	var errors = new Array();
   
	for (var i = 0; i < data.length; i++)
	{
		errors[i] = data[i][0] - evalReg(beta, i);
	}
   
//	document.getElementById("output").innerHTML += "The Errors in this Regression are :<br>";
//   
//	for (var i = 0; i < errors.length; i++)
//	{
//		document.getElementById("output").innerHTML += (i+1) + ": " + errors[i].toFixed(3) + "<br>";
//	}
	return errors;
}
function drawPoints(data)
{
	var mxm = maximum(data);
	var mnm = minimum(data);
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	var vpp;
	var numRows;
	var loc;
   
	if (mnm < 0)
	{
		vpp = (mxm - mnm) / c.height;
		numRows = Math.ceil(mxm - mnm);
		loc = c.height - (mxm) / vpp;
	}
	else
	{
		vpp = (mxm) / c.height;
		numRows = Math.ceil (mxm);
		loc = 0;
	}
   
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
	var numClms = data.length + 1;
   
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
   
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
   
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height - loc);
	ctx.lineTo(c.width, c.height - loc);
	ctx.stroke();
   
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-loc-i);
		ctx.lineTo(5, c.height-loc-i);
		ctx.stroke();
	}
   
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, c.height-loc+5);
		ctx.lineTo(i, c.height-loc-5);
		ctx.stroke();
	}   
   
	for (var i = 0; i < data.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height - data [i][0]*yHeight - loc,3,0,2*Math.PI);
		ctx.stroke();
	}
}
function drawLine(data, beta)
{
	var mxm = maximum(data);
	var mnm = minimum(data);
	var c = document.getElementById ("myCanvas");
	var ctx = c.getContext("2d");
	var vpp;
	var numRows;
	var loc;
   
	if (mnm < 0)
	{
		vpp = (mxm - mnm) / c.height;
		numRows = Math.ceil (mxm - mnm);
		loc = c.height - (mxm) / vpp;
	}
	else
	{
		vpp = (mxm) / c.height;
		numRows = Math.ceil (mxm);
		loc = 0;
	}
   
	ctx.fillStyle = "#ffffff";
	ctx.fillRect (0, 0, c.width, c.height);
   
	var numClms = data.length + 1;
	var xWidth = c.width / numClms;
	var yHeight = c.height / numRows;
   
	//Draw the axes
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, 0);
	ctx.lineTo(0, c.height);
	ctx.stroke();
   
	ctx.lineWidth = 2;
	ctx.strokeStyle="#000000";
	ctx.beginPath();
	ctx.moveTo(0, c.height - loc);
	ctx.lineTo(c.width, c.height - loc);
	ctx.stroke();
   
	//Draw the notches
	for (var i = 0; i < c.height; i += 5*yHeight)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(0, c.height-loc-i);
		ctx.lineTo(5, c.height-loc-i);
		ctx.stroke();
	}
   
	for (var i = 0; i < c.width; i += xWidth)
	{
		ctx.lineWidth = 2;
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.moveTo(i, c.height-loc+5);
		ctx.lineTo(i, c.height-loc-5);
		ctx.stroke();
	}
   
	for (var i = 0; i < data.length;  i++)
	{
		ctx.beginPath();
		ctx.arc((i+1)*xWidth,c.height - data[i][0]*yHeight - loc,3,0,2*Math.PI);
		ctx.stroke();
	}
   
	var pt0x = 0;
	var pt0y = evalReg(beta, pt0x-1);
   
	var pt1x = data.length+1;
	var pt1y = evalReg(beta, pt1x-1);
	ctx.strokeStyle = "#3333ff";
	ctx.beginPath();
	ctx.moveTo(pt0x*xWidth, c.height - pt0y*yHeight - loc);
	ctx.lineTo(pt1x*xWidth, c.height - pt1y*yHeight - loc);
	ctx.stroke();
	for (var i = 0; i < data.length;  i++)
	{
		ctx.strokeStyle = "#FFFF00";
		ctx.beginPath();
		ctx.moveTo((i+1)*xWidth, c.height - evalReg(beta, (i))*yHeight-loc);
		ctx.lineTo((i+1)*xWidth, c.height - data[i][0]*yHeight - loc)
		ctx.stroke();
	}   
}
</script>

<h3><center></center></h3>
<p><p>We will begin with a rectangular matrix A, and we will be able to solve this system by decomposing A into an orthogonal matrix Q and an upper triangular matrix R (using QR decomposition), i.e A = QR. </p>
 <p>We will first convert the columns of the matrix A into Vectors. Then, for each vector a<sub>k</sub>, we will calculate the vectors u<sub>k</sub> and e<sub>k</sub> given by<br>
<center>
 u<sub>k</sub> = [Sigma]<sub>i = 1 to k-1</sub>proj<sub>e<sub>j</sub></sub> a<sub>k</sub><br>
 and<br>
 e<sub>k</sub> = u<sub>k</sub> / ||u<sub>k</sub>||<br>
 Then <br><br>
Q = [e<sub>1</sub>, ..., e<sub>n</sub>] and
<br>
<br>
 <table>
	<tr>
		<td>R = </td>
		<td>
			<table>
				<tr>
					<td>&lt;e<sub>1</sub>, a<sub>1</sub>&gt;</td><td>&lt;e<sub>1</sub>, a<sub>2</sub>&gt;</td><td>&lt;e<sub>1</sub>, a<sub>3</sub>&gt;</td><td><img src="http://www.learninglover.com/chars/cdots.gif"></td>
				</tr>
				<tr>
					<td>0</td><td>&lt;e<sub>2</sub>, a<sub>2</sub>&gt;</td><td>&lt;e<sub>2</sub>, a<sub>3</sub>&gt;</td><td><img src="http://www.learninglover.com/chars/cdots.gif"></td>
				</tr>
				<tr>
					<td>0</td><td>0</td><td>&lt;e<sub>3</sub>, a<sub>3</sub>&gt;</td><td><img src="http://www.learninglover.com/chars/cdots.gif"></td>
				</tr>
				<tr>
					<td><img src="http://www.learninglover.com/chars/vdots.gif"></td><td><img src="http://www.learninglover.com/chars/vdots.gif"></td><td><img src="http://www.learninglover.com/chars/vdots.gif"></td><td><img src="http://www.learninglover.com/chars/ddots.gif"></td>
				</tr>
			</table>
		</td>
	</tr>
</table>
</center></p>
<form name="data" id="data">
<center>
 <p name="input" id="input"></p>
 Show Work <input type="checkbox" id="show" name="show"><br>
	<input type="button" value="QR Decomposition" id=button0 name=button0 onclick="sol = QRDecomp(A, document.getElementById('show').checked)">
	<input type="button" value="New Problem" id=button1 name=button1 onclick="A = genMatrix(); document.getElementById('input').innerHTML = dispMatrix(A); document.getElementById('output').innerHTML = '';">
</center>
 <p name="output" id="output"></p>
 <script type="text/javascript">
	var sol;
	var A = genMatrix();
	document.getElementById("input").innerHTML = dispMatrix(A);
 </script>
</FORM>
