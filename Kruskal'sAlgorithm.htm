<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
Kruskal'sAlgorithm<script id="sc1" type="text/javascript">
var M_VAL = 50000;
function Kruskal(A, n, show)
{
	var B = new Array();
	for (i = 0; i < n; i++)
	{
		B[i] = new Array();
		for (j = 0; j < n; j++)
		{
			B[i][j] = A[i][j];
		 		if (A[i][j] == 0)
					A[i][j] = M_VAL;
		}
	}

	T = [];
	lookup = [];
	for (i = 0; i < n; i++)
	{
		T[i] = [i];
		lookup[i] = i;
	}

	E = [];
	sum = 0;
	k = 1;

	while (k < n)
	{
		 if (show)
		 {
			  text = "";
			  for (i = 0; i < n; i++)
			  {
				   if (lookup[i] == i)
				   {
					    bb = "<b>";
					    bbe = "</b>";
				   }
				   else
				   {
					    bb = "";
					    bbe = "";
				   }

				   text += bb + "Tree[" + i + "] = {";
				   for (j = 0; j < T[i].length; j++)
				   {
					    text += T[i][j];
					    if (j != T[i].length-1)
						     text += ", ";
				   }
				   text += "}, lookup[" + i + "] = " + lookup[i] + bbe + "<br>";
			  }
			  text += "<br>";
		 }
		 m = M_VAL;

		 for (i = 0; i < n; i++)
		 for (j = 0; j < i; j++)
		 {
			  if (A[i][j] < m && lookup[i] != lookup[j])
			  {
				   m = A[i][j];
				   u = i;
				   v = j;
			  }
		 }
		 if (m == M_VAL)
			  k = n;
		 else
		 {
			  initLen = T[lookup[u]].length;
			  initLook = lookup[u];
			  for (i = initLen-1; i >=0; i--)
			  {
				   T[lookup[v]][T[lookup[v]].length] = T[initLook][i];
				   lookup[T[initLook][i]] = lookup[v];
			  }
			  E[E.length] = u;
			  E[E.length] = v;
			  A[u][v] = M_VAL;
			  A[v][u] = M_VAL;
			  sum += m;
			  k++;
		 }
		 if (show)
			  document.getElementById('output').innerHTML += "e = (" + u + ", "
+ v + ")<br>----------<br>";
	}

	E[E.length] = sum;

	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			A[i][j] = B[i][j];
		}
	}
	return E;
}

function EucDist(point1_x, point1_y, point2_x, point2_y)
{
	var i, j, sumSq = 0;

	sumSq += Math.pow(point1_x - point2_x, 2);
	sumSq += Math.pow(point1_y - point2_y, 2);

	return Math.sqrt(sumSq);
}

function used(list, num1, num2)
{
	var i, ans = false;
	for (i = 0; i < list.length && ans == false; i++)
	{
		if (EucDist(list[i][0], list[i][1], num1, num2) < 5)
			ans = true;
	}

	return ans;
}

function drawGraph(A)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	ctx.clearRect (0, 0, c.width, c.height);
	var i, j, num1, num2;
	var points = new Array();
	ctx.lineWidth = 1;
	ctx.strokeStyle="#000000";

	var theta = new Array();

	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2 * Math.PI * i) / A.length;

		points[i] = new Array();
		points[i][0] = 255 * Math.cos(theta[i]) + 275;
		points[i][1] = 255 * Math.sin(theta[i]) + 275;
	}

	for (i = 0; i < A.length; i++)
	{
		for (j = 0; j < A[0].length; j++)
		{
			if (A[i][j] != 0)
			{
				ctx.beginPath();
				ctx.moveTo(points[i][0], points[i][1]);
				ctx.lineTo(points[j][0], points[j][1]);
				ctx.stroke();
				ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);
			}
		}
	}

	for (i = 0; i < A.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.stroke();

		ctx.fillStyle="#00FFFF";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
	}

	return points;
}

function drawNodes(A, points)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	var i, j, num1, num2;
	ctx.lineWidth = 1;
	for (i = 0; i < A.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.stroke();

		ctx.fillStyle="#00FFFF";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
	}
}

function drawLines(A, points)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	ctx.clearRect (0, 0, c.width, c.height);
	var i, j;

	for (i = 0; i < A.length; i++)
	{
		for (j = 0; j < A[0].length; j++)
		{
			if (A[i][j] != 0)
			{
				ctx.lineWidth = 1;
				ctx.strokeStyle="#000000";
				ctx.beginPath();
				ctx.moveTo(points[i][0], points[i][1]);
				ctx.lineTo(points[j][0], points[j][1]);
				ctx.stroke();
				ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);
			}
		}
	}
}

function drawAns(A, points, ans, start)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	var i, j, num1, num2;

	ctx.strokeStyle="#00FF00";
	ctx.lineWidth = 2;
	ctx.beginPath();
	ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);
	ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);
	ctx.stroke();
	drawNodes(A, points);
	if ((start + 2) == ans.length-1)
	{
		start = 0;
	}
	else
		start += 2;
	var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A, points, ans, start);drawNodes(A, points);};
	t = setTimeout(f, 2000);

	return t;
}
</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" /><meta name="keywords" content="algorithm, computer science, cycles, edges, graph, greedy, JavaScript, Kruskal's algorithm, math, mathematics, minimum spanning tree, MST, script, spanning tree, vertex, weight" /> 
<meta name="description" content="This page contains a script I've written to help understand Kruskal's Algorithm." />
<title> at LEARNINGlover.com</title>
<script id="sc1" type="text/javascript">
var M_VAL = 50000;
function Kruskal(A, n, show)
{
	var B = new Array();
	for (i = 0; i < n; i++)
	{
		B[i] = new Array();
		for (j = 0; j < n; j++)
		{
			B[i][j] = A[i][j];
		 		if (A[i][j] == 0)
					A[i][j] = M_VAL;
		}
	}

	T = [];
	lookup = [];
	for (i = 0; i < n; i++)
	{
		T[i] = [i];
		lookup[i] = i;
	}

	E = [];
	sum = 0;
	k = 1;

	while (k < n)
	{
		 if (show)
		 {
			  text = "";
			  for (i = 0; i < n; i++)
			  {
				   if (lookup[i] == i)
				   {
					    bb = "<b>";
					    bbe = "</b>";
				   }
				   else
				   {
					    bb = "";
					    bbe = "";
				   }

				   text += bb + "Tree[" + i + "] = {";
				   for (j = 0; j < T[i].length; j++)
				   {
					    text += T[i][j];
					    if (j != T[i].length-1)
						     text += ", ";
				   }
				   text += "}, lookup[" + i + "] = " + lookup[i] + bbe + "<br>";
			  }
			  text += "<br>";
		 }
		 m = M_VAL;

		 for (i = 0; i < n; i++)
		 for (j = 0; j < i; j++)
		 {
			  if (A[i][j] < m && lookup[i] != lookup[j])
			  {
				   m = A[i][j];
				   u = i;
				   v = j;
			  }
		 }
		 if (m == M_VAL)
			  k = n;
		 else
		 {
			  initLen = T[lookup[u]].length;
			  initLook = lookup[u];
			  for (i = initLen-1; i >=0; i--)
			  {
				   T[lookup[v]][T[lookup[v]].length] = T[initLook][i];
				   lookup[T[initLook][i]] = lookup[v];
			  }
			  E[E.length] = u;
			  E[E.length] = v;
			  A[u][v] = M_VAL;
			  A[v][u] = M_VAL;
			  sum += m;
			  k++;
		 }
		 if (show)
			  document.getElementById('output').innerHTML += "e = (" + u + ", "
+ v + ")<br>----------<br>";
	}

	E[E.length] = sum;

	for (i = 0; i < n; i++)
	{
		for (j = 0; j < n; j++)
		{
			A[i][j] = B[i][j];
		}
	}
	return E;
}

function EucDist(point1_x, point1_y, point2_x, point2_y)
{
	var i, j, sumSq = 0;

	sumSq += Math.pow(point1_x - point2_x, 2);
	sumSq += Math.pow(point1_y - point2_y, 2);

	return Math.sqrt(sumSq);
}

function used(list, num1, num2)
{
	var i, ans = false;
	for (i = 0; i < list.length && ans == false; i++)
	{
		if (EucDist(list[i][0], list[i][1], num1, num2) < 5)
			ans = true;
	}

	return ans;
}

function drawGraph(A)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	ctx.clearRect (0, 0, c.width, c.height);
	var i, j, num1, num2;
	var points = new Array();
	ctx.lineWidth = 1;
	ctx.strokeStyle="#000000";

	var theta = new Array();

	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2 * Math.PI * i) / A.length;

		points[i] = new Array();
		points[i][0] = 255 * Math.cos(theta[i]) + 275;
		points[i][1] = 255 * Math.sin(theta[i]) + 275;
	}

	for (i = 0; i < A.length; i++)
	{
		for (j = 0; j < A[0].length; j++)
		{
			if (A[i][j] != 0)
			{
				ctx.beginPath();
				ctx.moveTo(points[i][0], points[i][1]);
				ctx.lineTo(points[j][0], points[j][1]);
				ctx.stroke();
				ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);
			}
		}
	}

	for (i = 0; i < A.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.stroke();

		ctx.fillStyle="#00FFFF";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
	}

	return points;
}

function drawNodes(A, points)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	var i, j, num1, num2;
	ctx.lineWidth = 1;
	for (i = 0; i < A.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.stroke();

		ctx.fillStyle="#00FFFF";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
	}
}

function drawLines(A, points)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	ctx.clearRect (0, 0, c.width, c.height);
	var i, j;

	for (i = 0; i < A.length; i++)
	{
		for (j = 0; j < A[0].length; j++)
		{
			if (A[i][j] != 0)
			{
				ctx.lineWidth = 1;
				ctx.strokeStyle="#000000";
				ctx.beginPath();
				ctx.moveTo(points[i][0], points[i][1]);
				ctx.lineTo(points[j][0], points[j][1]);
				ctx.stroke();
				ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);
			}
		}
	}
}

function drawAns(A, points, ans, start)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	var i, j, num1, num2;

	ctx.strokeStyle="#00FF00";
	ctx.lineWidth = 2;
	ctx.beginPath();
	ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);
	ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);
	ctx.stroke();
	drawNodes(A, points);
	if ((start + 2) == ans.length-1)
	{
		start = 0;
	}
	else
		start += 2;
	var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A, points, ans, start);drawNodes(A, points);};
	t = setTimeout(f, 2000);

	return t;
}
</script>
<h3><center></center></h3>
<p><p>Given a weighted graph, many times we are interested in finding a
minimum spanning tree (MST) for that
graph. Kruskal's algorithm is a greedy method which does just this. A
spanning tree is a subset of the edges
of a graph that connects to every vertex, but contains no cycles. This
spanning tree is called a minimum
spanning tree if in addition the sum of the weights of the edges
included in this tree is less than or
equal to the sum of the weights of the edges of any other spanning
tree for this graph.</p>
<p>Kruskal's algorithm works by the following procedure. <br>
1. Initially each vertex is a stand-alone tree, so for each <i>v</i>
in <i>V</i>, we define the tree
Tree<sub>v</sub> = {v}. The set of selected edges <i>E*</i> is
initially empty. <br>
2. Find the edge <i>e</i> = (<i>u</i>, <i>v</i>) of minimum weight
such that <i>u</i> and v</u> belong to
different trees. If no such edge exists, go to 6. <br>
3. Merge the trees T<sub>lookup(u)</sub> and T<sub>lookup(v)</sub>. <br>
4. Add the edge <i>e</i> to <i>E*</i> and remove the edge <i>e</i>
from the graph. <br>
5. If the size of E* is less than n - 1, go to step 2. Else go to step 7. <br>
6. If you reached this step. then the graph is not connected. <br>
7. If you reached this step, then E* is a minimum spanning tree. <br>
</p></p>
<script id="sc2" type="text/javascript">
n = Math.floor(Math.random()*20)+5;
A = RandGraph(n);
text = "<table>";
for (i = 0; i < n; i++)
{
	text += "<tr>";
	for (j = 0; j < n; j++)
	{
		 if (A[i][j] != 0)
			  text += "<td>" + A[i][j] + "</td>";
		 else
			  text += "<td>-</td>";
	}
	text += "</tr>";
}
text += "</table>";
document.write(text);
var t;
</script>
<form name=data id=data>
<input type=button onclick="javascript:location.reload(true)"
value="New Problem"><br>
<input type="checkbox" name="show" id="show"> Show Work?
<input type="button" value="Solve" onclick="text2 ='<table><tr><td>MST = ';sol = Kruskal(A, n, document.getElementById('show').checked);for (i = 0; i < 2*(n-1);i+=2)

text2 += '(' + sol[i] + ', ' + sol[i+1] + '), ';text2 += 'Cost = ' + sol[2*n-2] + '</td></tr></table>'; document.getElementById('output').innerHTML += text2;t = 

drawAns(A, pts, sol, 0);">
<input type=button onclick="t=clearTimeout(t);pts = drawGraph(A)" value="Redraw Graph">
</form>

<canvas id="myCanvas" width="550" height="600" style="border:1px solid
#d3d3d3;">
your browser does not support the canvas tag
</canvas>
<script type="text/javascript">
var pts = drawGraph(A);
</script>
<P name=output id=output>&nbsp;</P>
