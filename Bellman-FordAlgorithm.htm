<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
Bellman-FordAlgorithm<script id="sc1" type="text/javascript"> 
function bellmanFord(A, n, show) 
{
 	text = "";
 	B = [];
 	change = 1;
 	M_VAL = 50000;
 	for (i = 0; i < n; i++)
 	{
 		B[i] = [];
 		for (j = 0; j < n; j++)
 			if (A[i][j] == 0)
 				B[i][j] = M_VAL;
 			else
 				B[i][j] = A[i][j];
 	}
  	T = [];
 	E = [];
 	sum = 0;
 	k = 0;
 	w = [];
 	p = [];
 	for (i = 0; i < n; i++)
 	{
 		w[i] = M_VAL;
 		p[i] = -1;
 	}
 	w[0] = 0;
  	while (k < n && change)
 	{
 		change = 0;
 		m = M_VAL;
  		for (i = 0; i < n; i++)
 		for (j = 0; j < n; j++)
 		{
 			if (B[i][j] != M_VAL && w[i] + B[i][j] < w[j])
 			{
 				change++;
 				if (show)
 				{
 					text += "w[" + i + "] + B[" + i + "][" + j + "] < w[" + j + "], ";
 					text += w[i] + " + " + B[i][j] + " < " + w[j] + "<br>";
 				}
 				w[j] = w[i] + B[i][j];
 				u = i;
 				v = j;
 				p[j] = i;
 			}
 		}
  		T[T.length] = k;
  		k++;
  		if (show && change)
 		{
 			text += "w = " + w + "<BR>";
 			text += "k = " + k + "<br>";
 		}
 	}
  	error = 0;
  	for (i = 0; i < n; i++)
 	for (j = 0; j < n; j++)
 		if (w[i] + B[i][j] < w[j])
 		{
 			error = 1;
 		}
  	if (error)
 	{
 		for (i = 0; i < n; i++)
 			w[i] = M_VAL;
 		text += "There is a negative cycle<br>";
 	}
  	document.getElementById("output").innerHTML += text;
 	return w;
}

function direct(A) 
{
 	for (i = 0; i < A.length; i++)
 	for (j = 0; j < A[0].length; j++)
 	{
 		if (A[i][j] != 0)
 		{
 			direction = Math.floor(Math.random()*3);
 			if (direction == 2)
 				A[i][j] = 0;
 			else if (direction == 1)
 				A[j][i] = 0;
 			else
 				A[i][j] = Math.floor(Math.random()*25);
 		}
 	}
  	neg = 0;
 	for (i = 0; i < A.length; i++)
 	for (j = 0; j < A[0].length; j++)
 	{
 		if (A[i][j] != 0 || A[j][i] != 0)
 		{
 			sign = Math.floor(Math.random()*2);
 			direc = Math.floor(Math.random()*2);
 			if (neg >= Math.floor(A.length/5))
 				sign = 1;
  			if (!sign && direc)
 			{
 				A[i][j] *= -1;
 				neg++;
 			}
 			else if (!sign && !direc)
 			{
 				A[j][i] *= -1;
 				neg++;
 			}
 		}
 	}
  	return A;
}

function EucDist(point1_x, point1_y, point2_x, point2_y)
{
	var i, j, sumSq = 0;

	sumSq += Math.pow(point1_x - point2_x, 2);
	sumSq += Math.pow(point1_y - point2_y, 2);

	return Math.sqrt(sumSq);
}

function disp(set)
{
	var text = "";
	text += "<table><tr><td>node </td>";
	for (var i = 0; i < set.length; i++)
		text += "<td>" + i + "</td>";
	text += "</tr><tr><td>path length</td>";
	for (var i = 0; i < set.length; i++)
	{
		text += "<td>" + set[i] + "</td>";
	}
	text += "</tr></table>";

	return text;
}

function used(list, num1, num2)
{
	var i, ans = false;
	for (i = 0; i < list.length && ans == false; i++)
	{
		if (EucDist(list[i][0], list[i][1], num1, num2) < 5)
			ans = true;
	}

	return ans;
}

function drawGraph(A)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	ctx.clearRect (0, 0, c.width, c.height);
	var i, j, num1, num2;
	var points = new Array();
	ctx.lineWidth = 1;
	ctx.strokeStyle="#000000";

	var theta = new Array();

	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2 * Math.PI * i) / A.length;

		points[i] = new Array();
		points[i][0] = 255 * Math.cos(theta[i]) + 275;
		points[i][1] = 255 * Math.sin(theta[i]) + 275;
	}

	for (i = 0; i < A.length; i++)
	{
		for (j = 0; j < A[0].length; j++)
		{
			if (A[i][j] != 0)
			{
				ctx.beginPath();
				ctx.moveTo(points[i][0], points[i][1]);
				ctx.lineTo(points[j][0], points[j][1]);
				ctx.stroke();
				ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);
			}
		}
	}

	for (i = 0; i < A.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.stroke();

		ctx.fillStyle="#00FFFF";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
	}

	return points;
}

function drawNodes(A, points)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	var i, j, num1, num2;
	ctx.lineWidth = 1;
	for (i = 0; i < A.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.stroke();

		ctx.fillStyle="#00FFFF";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
	}
}

function drawLines(A, points)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	ctx.clearRect (0, 0, c.width, c.height);
	var i, j;

	for (i = 0; i < A.length; i++)
	{
		for (j = 0; j < A[0].length; j++)
		{
			if (A[i][j] != 0)
			{
				ctx.lineWidth = 1;
				ctx.strokeStyle="#000000";
				ctx.beginPath();
				ctx.moveTo(points[i][0], points[i][1]);
				ctx.lineTo(points[j][0], points[j][1]);
				ctx.stroke();
				ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);
			}
		}
	}
}

function drawAns(A, points, ans, start)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	var i, j, num1, num2;

	ctx.strokeStyle="#00FF00";
	ctx.lineWidth = 2;
	ctx.beginPath();
	ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);
	ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);
	ctx.stroke();
	drawNodes(A, points);
	if ((start + 2) >= ans.length-1)
	{
		start = 0;
	}
	else
		start += 2;
	var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A, points, ans, start);drawNodes(A, points);};
	t = setTimeout(f, 2000);

	return t;
}
</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" /><meta name="keywords" content="algorithm, computer science, Bellman-Ford algorithm, math, graph, greedy, JavaScript, mathematics, script, shortest path, single node shortest path problem, tree, weight" /> 
<meta name="description" content="This page contains a script I've written to help understand the Bellman-Ford Algorithm." />
<title> at LEARNINGlover.com</title>
<script id="sc1" type="text/javascript"> 
function bellmanFord(A, n, show) 
{
 	text = "";
 	B = [];
 	change = 1;
 	M_VAL = 50000;
 	for (i = 0; i < n; i++)
 	{
 		B[i] = [];
 		for (j = 0; j < n; j++)
 			if (A[i][j] == 0)
 				B[i][j] = M_VAL;
 			else
 				B[i][j] = A[i][j];
 	}
  	T = [];
 	E = [];
 	sum = 0;
 	k = 0;
 	w = [];
 	p = [];
 	for (i = 0; i < n; i++)
 	{
 		w[i] = M_VAL;
 		p[i] = -1;
 	}
 	w[0] = 0;
  	while (k < n && change)
 	{
 		change = 0;
 		m = M_VAL;
  		for (i = 0; i < n; i++)
 		for (j = 0; j < n; j++)
 		{
 			if (B[i][j] != M_VAL && w[i] + B[i][j] < w[j])
 			{
 				change++;
 				if (show)
 				{
 					text += "w[" + i + "] + B[" + i + "][" + j + "] < w[" + j + "], ";
 					text += w[i] + " + " + B[i][j] + " < " + w[j] + "<br>";
 				}
 				w[j] = w[i] + B[i][j];
 				u = i;
 				v = j;
 				p[j] = i;
 			}
 		}
  		T[T.length] = k;
  		k++;
  		if (show && change)
 		{
 			text += "w = " + w + "<BR>";
 			text += "k = " + k + "<br>";
 		}
 	}
  	error = 0;
  	for (i = 0; i < n; i++)
 	for (j = 0; j < n; j++)
 		if (w[i] + B[i][j] < w[j])
 		{
 			error = 1;
 		}
  	if (error)
 	{
 		for (i = 0; i < n; i++)
 			w[i] = M_VAL;
 		text += "There is a negative cycle<br>";
 	}
  	document.getElementById("output").innerHTML += text;
 	return w;
}

function direct(A) 
{
 	for (i = 0; i < A.length; i++)
 	for (j = 0; j < A[0].length; j++)
 	{
 		if (A[i][j] != 0)
 		{
 			direction = Math.floor(Math.random()*3);
 			if (direction == 2)
 				A[i][j] = 0;
 			else if (direction == 1)
 				A[j][i] = 0;
 			else
 				A[i][j] = Math.floor(Math.random()*25);
 		}
 	}
  	neg = 0;
 	for (i = 0; i < A.length; i++)
 	for (j = 0; j < A[0].length; j++)
 	{
 		if (A[i][j] != 0 || A[j][i] != 0)
 		{
 			sign = Math.floor(Math.random()*2);
 			direc = Math.floor(Math.random()*2);
 			if (neg >= Math.floor(A.length/5))
 				sign = 1;
  			if (!sign && direc)
 			{
 				A[i][j] *= -1;
 				neg++;
 			}
 			else if (!sign && !direc)
 			{
 				A[j][i] *= -1;
 				neg++;
 			}
 		}
 	}
  	return A;
}

function EucDist(point1_x, point1_y, point2_x, point2_y)
{
	var i, j, sumSq = 0;

	sumSq += Math.pow(point1_x - point2_x, 2);
	sumSq += Math.pow(point1_y - point2_y, 2);

	return Math.sqrt(sumSq);
}

function disp(set)
{
	var text = "";
	text += "<table><tr><td>node </td>";
	for (var i = 0; i < set.length; i++)
		text += "<td>" + i + "</td>";
	text += "</tr><tr><td>path length</td>";
	for (var i = 0; i < set.length; i++)
	{
		text += "<td>" + set[i] + "</td>";
	}
	text += "</tr></table>";

	return text;
}

function used(list, num1, num2)
{
	var i, ans = false;
	for (i = 0; i < list.length && ans == false; i++)
	{
		if (EucDist(list[i][0], list[i][1], num1, num2) < 5)
			ans = true;
	}

	return ans;
}

function drawGraph(A)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	ctx.clearRect (0, 0, c.width, c.height);
	var i, j, num1, num2;
	var points = new Array();
	ctx.lineWidth = 1;
	ctx.strokeStyle="#000000";

	var theta = new Array();

	for (var i = 0; i < A.length; i++)
	{
		theta[i] = (2 * Math.PI * i) / A.length;

		points[i] = new Array();
		points[i][0] = 255 * Math.cos(theta[i]) + 275;
		points[i][1] = 255 * Math.sin(theta[i]) + 275;
	}

	for (i = 0; i < A.length; i++)
	{
		for (j = 0; j < A[0].length; j++)
		{
			if (A[i][j] != 0)
			{
				ctx.beginPath();
				ctx.moveTo(points[i][0], points[i][1]);
				ctx.lineTo(points[j][0], points[j][1]);
				ctx.stroke();
				ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);
			}
		}
	}

	for (i = 0; i < A.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.stroke();

		ctx.fillStyle="#00FFFF";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
	}

	return points;
}

function drawNodes(A, points)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	var i, j, num1, num2;
	ctx.lineWidth = 1;
	for (i = 0; i < A.length; i++)
	{
		ctx.strokeStyle="#000000";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.stroke();

		ctx.fillStyle="#00FFFF";
		ctx.beginPath();
		ctx.arc(points[i][0],points[i][1],10,0*Math.PI,2*Math.PI);
		ctx.fill();

		ctx.fillStyle="#000000";
		ctx.font="10px Arial";
		ctx.fillText(i,points[i][0]-3*(Math.floor(Math.log(i+1)/Math.log(10))+1),points[i][1]+4);
	}
}

function drawLines(A, points)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	ctx.clearRect (0, 0, c.width, c.height);
	var i, j;

	for (i = 0; i < A.length; i++)
	{
		for (j = 0; j < A[0].length; j++)
		{
			if (A[i][j] != 0)
			{
				ctx.lineWidth = 1;
				ctx.strokeStyle="#000000";
				ctx.beginPath();
				ctx.moveTo(points[i][0], points[i][1]);
				ctx.lineTo(points[j][0], points[j][1]);
				ctx.stroke();
				ctx.fillText(A[i][j], (points[i][0] + points[j][0])/2, (points[i][1] + points[j][1])/2);
			}
		}
	}
}

function drawAns(A, points, ans, start)
{
	var c=document.getElementById("myCanvas");
	var ctx=c.getContext("2d");
	var i, j, num1, num2;

	ctx.strokeStyle="#00FF00";
	ctx.lineWidth = 2;
	ctx.beginPath();
	ctx.moveTo(points[ans[start]][0], points[ans[start]][1]);
	ctx.lineTo(points[ans[start+1]][0], points[ans[start+1]][1]);
	ctx.stroke();
	drawNodes(A, points);
	if ((start + 2) >= ans.length-1)
	{
		start = 0;
	}
	else
		start += 2;
	var f = function(){if (start == 0)drawLines(A, points);t = drawAns(A, points, ans, start);drawNodes(A, points);};
	t = setTimeout(f, 2000);

	return t;
}
</script>
<h3><center></center></h3>
<p><p>The Bellman Ford algorithm is another shortest path algorithm. Unlike Dijkstra's algorithm, though, this algorithm can handle edges with negative weights and detect negative cycles in a graph. Negative cycles are important because in a graph with negative cycles, there is no shortest path to some nodes since a negative cycle can be iterated an infinite number of times. </p> <p>The algorithm works by initially setting the distance from the source node to all other nodes to be infinity. The distance to the source is then updated to be 0 since we are already there. <br>Next we proceed through each edge (u, v) and check the condition that if the distance to u plus the weight of the edge (u, v) is less than the distance to the node v, then we have just found a shorter route to v. </p> <p>This condition on the edges only needs to be checked at most |V| times for each edge since any path will contain at most |V| edges, which means that the distance of a node can be updated at most |V| times. </p> <p>If after |V| times there is still a node whose weight can be updated, it signifies the existence of a negative weight cycle and the Bellman-Ford will show that this cycle exists, but will be unable to find shortest paths in this problem as shortest paths no longer exist. </p> </p>
<script id="sc2" type="text/javascript">
n = Math.floor(Math.random()*20)+5;
A = RandGraph(n); 
A = direct(A); 
text = "<table>"; 
for (i = 0; i < n; i++) 
{
 	text += "<tr>";
 	for (j = 0; j < n; j++)
 	{
 		if (A[i][j] != 0)
 			text += "<td>" + A[i][j] + "</td>";
 		else
 			text += "<td>-</td>";
 	}
 	text += "</tr>";
}
 
text += "</table>";
document.write(text); 
var t;
</script> 
<form name=data id=data> 
<input type=button onclick="javascript:location.reload(true)" value="New Problem"><br> 
<input type="checkbox" name="show" id="show"> Show Work? 

<input type="button" value="Solve" onclick="document.getElementById('output').innerHTML='';text2 = '<table><tr><td>Shortest Path Lengths = ';sol = bellmanFord(A, n, document.getElementById('show').checked);text2 += sol + '</td></tr></table>';document.getElementById('output').innerHTML += text2;t=drawAns(A, pts, sol, 0);"> 
<input type=button onclick="t=clearTimeout(t);pts = drawGraph(A)" value="Redraw Graph">
</form>

<canvas id="myCanvas" width="550" height="600" style="border:1px solid #d3d3d3;">
your browser does not support the canvas tag
</canvas>
<script type="text/javascript">
var pts = drawGraph(A);
</script> 
<P name=output id=output>&nbsp;</P> 