<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta name="author" content="AfterMath" />
<link rel="stylesheet" type="text/css" href="style.css" media="screen" />
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
WholeNumbersFlashCards<script type="text/javascript">
function generate()
{
	var quest = Math.floor(Math.random() * 2);
	var text; 
	switch (quest)
	{
	case 0:
		var num = Math.floor(Math.random() * 5000);
		text = "Is the number " + num + " a prime number? <br>";
		document.getElementById("output").innerHTML += text;
		ans = isPrime(num);
		break;
	case 1:
		var num = Math.floor(Math.random() * 5000);
		text = "What is the prime factorization of  " + num + "? <br>";
		document.getElementById("output").innerHTML += text;
		ans = primeFact(num);
		break;
	case 2:
		var nums = new Array();
		var ops = new Array();
		var eqCse = Math.floor(Math.random() * 17);
		var pars = new Array();
		ans = evalEq(eqCse, nums, ops, pars);
			
//			nums[0] ops[0] nums[1]
//			nums[0] ops[0] nums[1] ops[1] nums[2]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] nums[3]
//			nums[0] ops[0] nums[1] ops[1] lp[0] nums[2] ops[2] nums[3] rp[0]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] nums[3]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] nums[3]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] lp[1] nums[2] ops[2] nums[3] rp[1]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] nums[3] ops[3] nums[4]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] lp[0] nums[3] ops[3] nums[4] rp[0]
//			nums[0] ops[0] nums[1] ops[1] lp[0] nums[2] ops[2] nums[3] rp[0] ops[3] nums[4]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] nums[3] ops[3] nums[4]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] nums[3] ops[3] nums[4]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] lp[1[ nums[3] ops[3] nums[4] rp[1]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] lp[1] nums[3] ops[3] nums[4] rp[1]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] lp[1] nums[2] ops[2] nums[3] rp[1] ops[3] nums[4]
//		}
		break;
	case 3:
		break;
	case 4:
		break;
	case 5:
		break;
	case 6:
		break;
	}
}

function nextOp(nums, ops, pars)
{
	if (pars.length != 0)
	{
		return pars[0];
	}
	else
	{
		var loc = -1;
		for (var i = 0; i < ops.length && loc == -1; i++)
		{
			if (ops[i] == 4)
			{
				loc = i;
			}
		}
		if (loc != -1)
		{
			return loc;
		}
		else
		{
			loc = -1;
			for (var i = 0; i < ops.length && loc == -1; i++)
			{
				if (ops[i] == 2 || ops[i] == 3)
				{
					loc = i;
				}
			}
			if (loc != -1)
			{
				return loc;
			}
			else
			{
				return 0;
			}
		}
	}
}

function evalEq(nums, ops, pars)
{
	var next = nextOp(nums, ops, pars);
	
	var newNums = new Array();
	for (var i = 0; i < next; i++)
	{
		newNums[i] = nums[i];
	}
	
	var newOps = new Array();
	for (var i = 0; i < next; i++)
	{
		newOps[i] = ops[i];
	}
	
	var newPars = new Array();
	if (pars.indexOf(next) != -1)
	{
		for (var i = 1; i < pars.length; i++)
		{
			newPars[i-1] = pars[i];
		}
	}
	
	switch (ops[next])
	{
	case 0:
		newNums[next] = nums[next] + nums[next+1];
		break;
	case 1:
		newNums[next] = nums[next] - nums[next+1];
		break;
	case 2:
		newNums[next] = nums[next] * nums[next+1];
		break;
	case 3:
		newNums[next] = nums[next] / nums[next+1];
		break;
	case 4:
		newNums[next] = Math.exp(nums[next], nums[next+1]);
		break;
	}
	
	for (var i = next + 1; i < ops.length; i++)
	{
		newOps[i-1] = ops[i];
	}
	
	for (var i = next + 2; i < nums.length; i++)
	{
		newNums[i-1] = nums[i];
	}
}
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] nums[3]
//			nums[0] ops[0] nums[1] ops[1] lp[0] nums[2] ops[2] nums[3] rp[0]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] nums[3]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] nums[3]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] lp[1] nums[2] ops[2] nums[3] rp[1]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] nums[3] ops[3] nums[4]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] lp[0] nums[3] ops[3] nums[4] rp[0]
//			nums[0] ops[0] nums[1] ops[1] lp[0] nums[2] ops[2] nums[3] rp[0] ops[3] nums[4]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] nums[3] ops[3] nums[4]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] nums[3] ops[3] nums[4]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] lp[1[ nums[3] ops[3] nums[4] rp[1]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] lp[1] nums[3] ops[3] nums[4] rp[1]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] lp[1] nums[2] ops[2] nums[3] rp[1] ops[3] nums[4]

function isPrime(num)
{
	var ans = 0;
	var max = Math.floor(Math.sqrt(num));
	for (var i = 0; i < max && !ans; i++)
	{
		if (num % i == 0)
		{
			ans = 1;
		}
	}
	
	return ans;
}

function primeFact(num)
{
	var ans = new Array();
	var max = Math.floor(Math.sqrt(num));
	for (var i = 2; i < max; i++)
	{
		if (num % i == 0)
		{
			ans[ans.length] = i;
			num = num / i;
			i = 2;
		}
	}
	if (num != 1)
	{
		ans[ans.length] = num;
	}
	
	return ans;
}
</script><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta name="author" content="AfterMath" /><link rel="stylesheet" type="text/css" href="style.css" media="screen" />

<title> at LEARNINGlover.com</title>
<script type="text/javascript">
function generate()
{
	var quest = Math.floor(Math.random() * 2);
	var text; 
	switch (quest)
	{
	case 0:
		var num = Math.floor(Math.random() * 5000);
		text = "Is the number " + num + " a prime number? <br>";
		document.getElementById("output").innerHTML += text;
		ans = isPrime(num);
		break;
	case 1:
		var num = Math.floor(Math.random() * 5000);
		text = "What is the prime factorization of  " + num + "? <br>";
		document.getElementById("output").innerHTML += text;
		ans = primeFact(num);
		break;
	case 2:
		var nums = new Array();
		var ops = new Array();
		var eqCse = Math.floor(Math.random() * 17);
		var pars = new Array();
		ans = evalEq(eqCse, nums, ops, pars);
			
//			nums[0] ops[0] nums[1]
//			nums[0] ops[0] nums[1] ops[1] nums[2]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] nums[3]
//			nums[0] ops[0] nums[1] ops[1] lp[0] nums[2] ops[2] nums[3] rp[0]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] nums[3]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] nums[3]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] lp[1] nums[2] ops[2] nums[3] rp[1]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] nums[3] ops[3] nums[4]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] lp[0] nums[3] ops[3] nums[4] rp[0]
//			nums[0] ops[0] nums[1] ops[1] lp[0] nums[2] ops[2] nums[3] rp[0] ops[3] nums[4]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] nums[3] ops[3] nums[4]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] nums[3] ops[3] nums[4]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] lp[1[ nums[3] ops[3] nums[4] rp[1]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] lp[1] nums[3] ops[3] nums[4] rp[1]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] lp[1] nums[2] ops[2] nums[3] rp[1] ops[3] nums[4]
//		}
		break;
	case 3:
		break;
	case 4:
		break;
	case 5:
		break;
	case 6:
		break;
	}
}

function nextOp(nums, ops, pars)
{
	if (pars.length != 0)
	{
		return pars[0];
	}
	else
	{
		var loc = -1;
		for (var i = 0; i < ops.length && loc == -1; i++)
		{
			if (ops[i] == 4)
			{
				loc = i;
			}
		}
		if (loc != -1)
		{
			return loc;
		}
		else
		{
			loc = -1;
			for (var i = 0; i < ops.length && loc == -1; i++)
			{
				if (ops[i] == 2 || ops[i] == 3)
				{
					loc = i;
				}
			}
			if (loc != -1)
			{
				return loc;
			}
			else
			{
				return 0;
			}
		}
	}
}

function evalEq(nums, ops, pars)
{
	var next = nextOp(nums, ops, pars);
	
	var newNums = new Array();
	for (var i = 0; i < next; i++)
	{
		newNums[i] = nums[i];
	}
	
	var newOps = new Array();
	for (var i = 0; i < next; i++)
	{
		newOps[i] = ops[i];
	}
	
	var newPars = new Array();
	if (pars.indexOf(next) != -1)
	{
		for (var i = 1; i < pars.length; i++)
		{
			newPars[i-1] = pars[i];
		}
	}
	
	switch (ops[next])
	{
	case 0:
		newNums[next] = nums[next] + nums[next+1];
		break;
	case 1:
		newNums[next] = nums[next] - nums[next+1];
		break;
	case 2:
		newNums[next] = nums[next] * nums[next+1];
		break;
	case 3:
		newNums[next] = nums[next] / nums[next+1];
		break;
	case 4:
		newNums[next] = Math.exp(nums[next], nums[next+1]);
		break;
	}
	
	for (var i = next + 1; i < ops.length; i++)
	{
		newOps[i-1] = ops[i];
	}
	
	for (var i = next + 2; i < nums.length; i++)
	{
		newNums[i-1] = nums[i];
	}
}
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] nums[3]
//			nums[0] ops[0] nums[1] ops[1] lp[0] nums[2] ops[2] nums[3] rp[0]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] nums[3]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] nums[3]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] lp[1] nums[2] ops[2] nums[3] rp[1]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] nums[3] ops[3] nums[4]
//			nums[0] ops[0] nums[1] ops[1] nums[2] ops[2] lp[0] nums[3] ops[3] nums[4] rp[0]
//			nums[0] ops[0] nums[1] ops[1] lp[0] nums[2] ops[2] nums[3] rp[0] ops[3] nums[4]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] nums[3] ops[3] nums[4]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] nums[3] ops[3] nums[4]
//			nums[0] ops[0] lp[0] nums[1] ops[1] nums[2] rp[0] ops[2] lp[1[ nums[3] ops[3] nums[4] rp[1]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] nums[2] ops[2] lp[1] nums[3] ops[3] nums[4] rp[1]
//			lp[0] nums[0] ops[0] nums[1] rp[0] ops[1] lp[1] nums[2] ops[2] nums[3] rp[1] ops[3] nums[4]

function isPrime(num)
{
	var ans = 0;
	var max = Math.floor(Math.sqrt(num));
	for (var i = 0; i < max && !ans; i++)
	{
		if (num % i == 0)
		{
			ans = 1;
		}
	}
	
	return ans;
}

function primeFact(num)
{
	var ans = new Array();
	var max = Math.floor(Math.sqrt(num));
	for (var i = 2; i < max; i++)
	{
		if (num % i == 0)
		{
			ans[ans.length] = i;
			num = num / i;
			i = 2;
		}
	}
	if (num != 1)
	{
		ans[ans.length] = num;
	}
	
	return ans;
}
</script>
<h3><center></center></h3>
<p><p>This page generates flash cards to serve as a test preperation material for those interested in learning more about whole numbers. </p>
</p>
<form name="data" id="data">
<table id="defs" name="defs">
</table>
<input type="button" value = "Next" onclick="text = document.getElementById('output').innerHTML; text = 'Last ans = ' + text + '<br>' + ans + '<br>'; document.getElementById('output').innerHTML = text; generate()">
<p name="output"  id="output"></p>
<script type="text/javascript">
var ans = "";
generate();
</script>