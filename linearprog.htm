<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>The Simplex Method at LEARNINGlover.com</title>
<script type="text/javascript">
function disp(lp)
{
	var text = "", i, j;
	if (lp.opt) 
		text += "Maximize ";
	else
		text += "Minimize ";

	for (i = 0; i < lp.c.length; i++)
	{
		if (i < lp.c.length-1 && lp.c[i] != 0)
			text += lp.c[i] + "x<sub>" + i + "</sub> + ";
		else if (lp.c[i] != 0)
			text += lp.c[i] + "x<sub>" + i + "</sub><br>";
	}

	text += "Subject to <br>";

	if (text.indexOf("+ Subject to") != -1)
		text = text.replace("+ Subject to", "<br>Subject to");

	for (i = 0; i < lp.A.length; i++)
	{
		for (j = 0; j < lp.A[i].length; j++)
		{
			if (j < lp.A[i].length-1 && lp.A[i][j] != 0)
				text += lp.A[i][j] + "x<sub>" + j + "</sub> + ";
			else if (lp.A[i][j] != 0)
			{
				text += lp.A[i][j] + "x<sub>" + j + "</sub>";
			}
		}

		if (lp.ineq[i] == -1)
			text += " <= " + lp.b[i] + "<br>";
		else if (lp.ineq[i] == 0)
			text += " = " + lp.b[i] + "<br>";
		else
			text += " >= " + lp.b[i] + "<br>";

		if (text.indexOf("+  <=") != -1)
			text = text.replace("+  <=", " <= ");
		if (text.indexOf("+  =") != -1)
			text = text.replace("+  =", " = ");
		if (text.indexOf("+  >=") != -1)
			text = text.replace("+  >=", " >= ");
	}

	while (text.indexOf("+ -") != -1)
	{
		text = text.replace("+ -", "- ");
	}

	for (i = 0; i < lp.bds.length; i++)
	{
		if (lp.bds[i] == -1)
			text += "x<sub>" + i + "</sub> <= " + 0 + "<br>";
		else if (lp.bds[i] == 1)
			text += "x<sub>" + i + "</sub> >= " + 0 + "<br>";
	}
	
	document.getElementById('output').innerHTML += text;
}

function initSol(lp, show)
{
/*
Input: A linear Program in Standard form
Output: The columns of the matrix that represent the initial basis, as well as an updated matrix that contains the necessary row operations to make these columns into elements of the Basis matrix. 
Method: 
 - If a row has a slack variable, that column is in the basis. 
 - If a row has a surplus variable, add an artificial variable and add that column to the basis. 
 - If a row has neither a slack or surplus variable, add an artificial variable and add that column to the basis. 
 - I shouldn't need to check if a variable is a slack variable more than once, so calling isSlackVar on each row and column is redundant. 
*/
	var i, j, k, basis = [], poss = 1;

	for (i = 0; i < lp.A.length; i++)
	{
		basis[i] = -1;
		for (j = 0; j < lp.A[i].length && basis[i] == -1; j++)
		{
			if (lp.A[i][j] == 1)
			{
				poss = 1;
				for (k = 0; k < lp.A.length && poss; k++)
				{
					if (lp.A[k][j] != 0 && k != i)
					{
						poss = 0;
					}
				}
			}
			else
				poss = 0;

			if (poss)
			{
				basis[i] = j;
			}
		}
	}

	return basis;
}

function toStdFrm(lp, show)
{
	var B = [];

	for (var i = 0; i < lp.A.length; i++)
	{
		B[i] = [];

		for (var j = 0; j < lp.A[0].length; j++)
			B[i][j] = lp.A[i][j];
	}

	var text = "";

	for (i = 0; i < lp.bds.length; i++)
	{
		if (lp.bds[i] == 0)
		{
			if (show)
				text += "variable x<sub>" + i + "</sub> is unbounded.<br>";

			text += "Shifting columns after variable x<sub>" + i + "</sub> right one column <br>";

			for (k = 0; k < B.length; k++)		
			for (j = B[k].length-1; j > i; j--)	
			{
				{
					B[k][j+1] = B[k][j];
				}
				lp.c[j+1] = lp.c[j];
				lp.bds[j+1] = lp.bds[j];
			}

			for (k = 0; k < B.length; k++)
			{
				B[k][j+1] = -1*B[k][j];
			}
			lp.bds[i] = 1;
			lp.bds[i+1] = 1;
			lp.c[i+1] = -1*lp.c[j];
		}
		else if (lp.bds[i] == -1)
		{
			if (show)
				text += "variable x<sub>" + i + "</sub> is negative.<br>";

			for (k = 0; k < B.length; k++)
				B[k][i] = -1*B[k][i];

			lp.c[i] = -1*lp.c[i];
			lp.bds[i] = 1;
		}
	}

	for (i = 0; i < lp.b.length; i++)
	{
		if (lp.b[i] < 0)
		{
			if (show)
				text += "Now we make " + lp.b[i] + " nonnegative by multiplying this row by -1<br>";

			for (j = 0; j < B[i].length; j++)
				B[i][j] = -1*B[i][j];
			lp.b[i] = -1*lp.b[i];
			lp.ineq[i] = -1*lp.ineq[i];
		}
	}

	for (i = 0; i < lp.ineq.length; i++)
	{
		place = B[i].length;
		if (lp.ineq[i] == -1)
		{
			if (show)
				text += "Constraint " + i + " is a less than inequality, so we add a slack variable to it. <br>";

			for (j = 0; j < B.length; j++)
				B[j][place] = 0;
			B[i][place] = 1;
			lp.ineq[i] = 0;
			lp.bds[place] = 1;
			lp.c[place] = 0;
		}
		else if (lp.ineq[i] == 1)

		{
			if (show)
				text += "Constraint " + i + " is a greater than inequality, so we add both a surplus variable and an artificial variable to it. <br>";

			for (j = 0; j < B.length; j++)
			{
				B[j][place] = 0;
				B[j][place+1] = 0;
			}
			B[i][place] = -1;
			B[i][place+1] = 1;
			lp.ineq[i] = 0;
			lp.bds[place] = 1;
			lp.bds[place+1] = 1;
			lp.c[place] = 0;
			if (lp.opt)
				lp.c[place+1] = -10000000;
			else
				lp.c[place+1] = 10000000;
		}
		else if (lp.ineq[i] == 0)
		{
			if (show)
				text += "Constraint " + i + " is an equality, so we add an artificial variable to it. <br>";

			for (j = 0; j < B.length; j++)
				B[j][place] = 0;
			B[i][place] = 1;
			lp.ineq[i] = 0;
			lp.bds[place] = 1;
			if (lp.opt)
				lp.c[place] = -10000000;
			else
				lp.c[place] = 10000000;
		}
	}

	if (show)
	{
		text += "The matrix is now in standard form. <br>";
		document.getElementById('output').innerHTML += text;
	}

	return B;
}

function simplex(lp, show)
{
	var corig = [];
	var text = "";
	var rcost = [];
	var ratio = 1000000;
	var minrow = -1;

	if (show)
		text += "We are now ready to run to the Simplex Method. <br>";

	var newLP = lp;
	newLP.A = toStdFrm(lp, show);

	if (show)
		disp(newLP);

	for (i = 0; i < newLP.c.length; i++)
		corig[i] = newLP.c[i];

	if (show)
		text += "Now that the problem is in standard form, we can easily figure out an initial feasible solution, and put the problem into tableau form. <br>";

	var basic = initSol(newLP, show);

	for (i = 0; i < basic.length; i++)
		if (newLP.c[basic[i]] != 0)
			for (j = 0; j < newLP.A[i].length; j++)
				newLP.c[j] -= newLP.A[i][j] * newLP.c[basic[i]];
	
	do
	{
		if (show)
		{
			text += "<table><tr>";
			for (j = 0; j < newLP.A[0].length; j++)
				text += "<td>x<sub>" + j + "</sub></td>";
			text += "<td>b</td>";
			text += "</tr>";

			for (i = 0; i < newLP.A.length; i++)
			{
				text += "<tr>";

				for (j = 0; j < newLP.A[i].length; j++)
				{
					text += "<td>";
					if (basic[i] == j)
						text += "<b>";

					text += (Math.round(newLP.A[i][j]*100)/100);
					if (basic[i] == j)
						text += "</b>";
					text += "</td>";
				}
				text += "<td>" + (Math.round(newLP.b[i]*100)/100) + "</td>";
				text += "</tr>";
			}

			text += "<tr>";

			for (i = 0; i < newLP.c.length; i++)
				text += "<td>" + (Math.round(newLP.c[i]*100)/100) + "</td>";
			text += "</table>";
		}
	
		if (show)
			text += "We now search for a variable that improves our solution. <br>";
		optloc = -1;

		for (i = 0; i < newLP.c.length; i++)
			if (newLP.opt == 1 && newLP.c[i] > 0 && (optloc == -1 || newLP.c[i] > newLP.c[optloc]))
				optloc = i;
			else if (newLP.opt == 0 && newLP.c[i] < 0 && (optloc == -1 || newLP.c[i] < newLP.c[optloc]))
				optloc = i;
		if (optloc != -1)
		{
			if (show)
			{
				text += "The variable with the most ";
				if (newLP.opt == 1)
					text += "positive";
				else
					text += "negative";
				text += " reduced cost is x<sub>" + optloc + "</sub>, whose reduced cost is " + newLP.c[optloc] + "<br>";
			}
			ratio = 1000000;
			minrow = -1;

			if (show)
				text += "Now we need to find the row that constrains this variable the most. <br>";

			for (i = 0; i < newLP.A.length; i++)
			{
				if (newLP.A[i][optloc] > 0 && (newLP.b[i] / newLP.A[i][optloc]) < ratio)
				{
					ratio = newLP.b[i] / newLP.A[i][optloc];
					minrow = i;
				}
			}

			if (show)
				text += "This variable is constrained the most by equation " + minrow + "</br>";

			if (minrow != -1)
			{
				if (show)
					text += "Thus we pivot at row " + minrow + ", column " + optloc + " of our matrix. <br><br>";

				denom = newLP.A[minrow][optloc];
				for (j = 0; j < newLP.A[minrow].length; j++)
				{
					newLP.A[minrow][j] = newLP.A[minrow][j] / denom;
				}
				newLP.b[minrow] = newLP.b[minrow] / denom;

				for (i = 0; i < newLP.A.length; i++)
				{
					denom = newLP.A[i][optloc];
					if (i != minrow)
					{
						for (j = 0; j < newLP.A[i].length; j++)
						{
							newLP.A[i][j] -= newLP.A[minrow][j] * denom;
						}
						newLP.b[i] -= newLP.b[minrow] * denom;
					}
				}

				denom = newLP.c[optloc];
				for (j = 0; j < newLP.c.length; j++)
					newLP.c[j] -= newLP.A[minrow][j] * denom;

				basic[minrow] = optloc;
			}
			else
				text += "None of the rows of this matrix constrain this variable, and so our solution is unbounded.<br>";
		}
		else
		{
			if (show)
			{
				text += "Since none of the reduced costs are ";
				if (newLP.opt == 1)
					text += "positive";
				else
					text += "negative";
				text += ", we have finished the simplex method.<br>";
			}

			text += "The optimal basis is ";
			for (i = 0; i < basic.length-1; i++)
				text += "x<sub>" + basic[i] + "</sub> = " + (Math.round(newLP.b[i]*100)/100) + ", ";
			text += "x<sub>" + basic[i] + "</sub> = " + (Math.round(newLP.b[i]*100)/100) + "<br>";

			var artbasic = false;
			for (i = 0; i < basic.length; i++)
				if (corig[basic[i]] == 10000000 || corig[basic[i]] == -10000000)
					artbasic = true;
 
			if (artbasic)
				text += "This solution is not feasible, though, because we still have an artificial variable in our basis. <br>";
			else
			{
				j = 0;
				for (i = 0; i < basic.length; i++)
				{
					j += corig[basic[i]] * newLP.b[i];
				}
				text += "The objective function value of this solution is " + (Math.round(j*100)/100) + "<br>";
			}
		}

	} while (optloc != -1 && minrow != -1);

	document.getElementById('output').innerHTML += text;
}

function findDual(lp, show)
{
	var newLP = new Object();
	newLP.opt = 0;
	newLP.c = new Array();
	newLP.A = new Array();
	newLP.b = new Array();
	newLP.ineq = new Array();
	newLP.bds = new Array();
//	var newopt, newc = new Array(), newA = new Array(), newb = new Array(), newineq = new Array(), newbds = new Array();
	var i, j;
	
	if (lp.opt == 1)
		newLP.opt = 0;
	else if (lp.opt == 0)
		newLP.opt = 1;
		
	for (i = 0; i < lp.b.length; i++)
	{
		newLP.c[i] = lp.b[i];
		newLP.bds[i] = -1*lp.ineq[i];
	}
	
	for (i = 0; i < lp.c.length; i++)
	{
		newLP.b[i] = lp.c[i];
		newLP.ineq[i] = lp.bds[i];
	}
	
	for (i = 0; i < lp.A[0].length; i++)
		newLP.A[i] = new Array();
	
	for (i = 0; i < lp.A.length; i++)
	{
		for (j = 0; j < lp.A[0].length; j++)
			newLP.A[j][i] = lp.A[i][j];
	}
	
	disp(newLP);
	return newLP;
}

</script>
</head>
<body><div id="content"><h3><center>The Simplex Method</center></h3><p><P>The Simplex Algorithm</P><P>This program generates a random linear programming problem, converts it to standard form, and solves it using the Simplex method.<br><br>
A linear program is in standard form if: <br>
 - Each constraint is an equality constraint<br>
 - Every variable is nonnegative<br>
 - We will add artificial variables to equality constraints to help find an initial feasible solution<br><br>

The Simplex Method operates as follows: 
<ol>
<li>Locate the variable with the greatest (or lowest if its a minimization prbolem) objective function coefficient. </li>
<li>Designate that column the work column. </li>
<li>Form ratio's by dividing each positive number in the work column (excluding the last row) into the element in the same row and last column. </li>
<li>Designate the element in the work column with the smallest ratio as the pivot element. </li>
<li>If no element in the work column is positive, then the program has no solution. </li>
<li>Use elementary row operations to convert the pivot element to 1 and then reduce all other elements in the work column to 0. </li>
<li>Repeat steps 1 through 6 until there are no positive (negative) numbers in the last row, excluding the last column. </li>
<li>The optimal solution is obtained by assigning to each variable in the first column that value in the corresponding row and last column. </li>
<li>All other variables are assigned the value zero. </li></ol></P></p>
<form name="data" id="data">
<input type=button onclick="javascript:location.reload(true)" value="New Problem"><br>
<script type="text/javascript">
var m = Math.floor(Math.random()*10+2);
var n = Math.floor(Math.random()*10+2);

var lp = new Object();
lp.A = new Array();
lp.b = new Array();
lp.c = new Array();
lp.opt = 0;
lp.ineq = new Array();
lp.bds = new Array();

for (i = 0; i < m; i++)
{
	lp.A[i] = new Array();
	for (j = 0; j < n; j++)
	{
		lp.A[i][j] = Math.floor(Math.random()*25);
		sign = Math.floor(Math.random()*2);
		if (sign == 0)
			lp.A[i][j] = lp.A[i][j]*-1;
	}
}

for (i = 0; i < m; i++)
{
	lp.b[i] = Math.floor(Math.random()*25);
	var sign = Math.floor(Math.random()*3);
	if (sign == 0)
		lp.b[i] = lp.b[i]*-1;
	lp.ineq[i] = Math.floor(Math.random()*3);
	if (lp.ineq[i] == 2)
		lp.ineq[i] = -1;
}

for (i = 0; i < n; i++)
{
	lp.c[i] = Math.floor(Math.random()*25);
	var sign = Math.floor(Math.random()*3);
	if (sign == 0)
		lp.c[i] = lp.c[i]*-1;
	lp.bds[i] = Math.floor(Math.random()*3);
	if (lp.bds[i] == 2)
		lp.bds[i] = -1;
}
lp.opt = Math.floor(Math.random()*2);
</script>
<input type="checkbox" name="show" id="show"> Show Work?
<input type="button" onclick="ans = simplex(lp, document.getElementById('show').checked);" value="Solve" id=button1 name=button1>
<input type="button" onclick="lp = findDual(lp, document.getElementById('show').checked);" value="Find Dual" id=button1 name=button1>
<p name="output" id="output"></p>
</FORM>
<script type="text/javascript">
disp(lp);
</script>
</body></html>