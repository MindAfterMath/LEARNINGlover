<html>
<head>
<title>Binary Search Trees</title>
<script type="text/javascript">
var t;
function generate(n)
{
	var A = new Array();
	var i;
	for (i = 0; i < n; i++)
	{
		next = Math.floor((Math.random())*100);
		if (linsear(A, next) == -1)
			A[A.length] = next;
		else 
			i--;
	}

	return A;
}

function linsear(set, elmnt)
{
	var i;
	var ans = -1;

	for (i = 0; i < set.length && ans == -1; i++)
		if (set[i].value == elmnt)
			ans = i;

	return ans;
}
/*function remove (set, loc)
{
	var i, len = set.length;

	for (i = loc; i < len; i++)
		set[i] = set[i+1];

	set.length--;

	return set;
}*/

/*function insert(set, loc, val)
{
	var i, len = set.length;

	for (i = len; i >= loc; i--)
		set[i] = set[i-1];

	set[loc] = val;

	return set;
}*/

/*function initTree(val)
{
	var tree = new Object();
	tree.value = val;
	tree.left = null;
	tree.right = null;
	tree.code = "";
	tree.xval = 0;
	tree.yval = 0;
	tree.order = 0;
	tree.drawn = false;
	tree.parent = null;

	return tree;
}*/

/*function joinBinTree(tree1, tree2, val, order)
{
	var tree3 = new Object();

	tree3.value = val;

	tree1 = code(tree1, "0");
	tree2 = code(tree2, "1");

	tree3.left = tree1;
	tree3.left.parent = tree3;
	tree3.right = tree2;
	tree3.right.parent = tree3;
	tree3.code = "";
	tree3.xval = (tree1.xval + tree2.xval) / 2;

	if (tree1.yval <= tree2.yval)
		tree3.yval = tree1.yval - 50;
	else
		tree3.yval = tree2.yval - 50;

	tree3.order = order;
	tree3.drawn = false;
	tree3.parent = null;

	return tree3;
}*/

function preorder(tree)
{
	var text = "";
	if (tree != null)
		text += "(" + tree.value + ")" + preorder(tree.left) + preorder(tree.right);
	else
		text += ".";
	
	return text;
}

function inorder(tree)
{
	var text = "";
	if (tree != null)
		text += inorder(tree.left) + "(" + tree.value + ")" + inorder(tree.right);
	else
		text += ".";
		
	return text;
}

function postorder(tree)
{
	var text = "";
	if (tree != null)
		text += postorder(tree.left) + postorder(tree.right) + "(" + tree.value + ")";
	else
		text += ".";
		
	return text;
}

function tooclose(tree, loc)
{
	var i, ans = false, dist = 0;

//	alert("tree.length = " + tree.length + "ans = " + ans);
	for (i = 0; i < tree.length && ans == false; i++)
	{
		if (i != loc)
		{
			dist = Math.sqrt(Math.pow(tree[loc].xval - tree[i].xval, 2) + Math.pow(tree[loc].yval - tree[i].yval, 2));
//			alert("dist(" + i + ", " + loc + ") = " + dist);
			if (dist < 50)
			{
				ans = true;
			}
		}
	}
	
	return ans;
}

function count(set, elmnt)
{
	var i;
	var ans = 0;

	for (i = 0; i < set.length; i++)
		if (set[i] == elmnt)
			ans++;

	return ans;
}

function setXvals(tree)
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	var orig = 50;
	var maxim = c.width - 50;
	var incr = (maxim - orig) / (tree.length-1);

	for (var i = 0; i < tree.length; i++)
	{
		tree[i].xval = orig + i*incr;
		tree[i].yval = c.height - 150;
	}

	return tree;
}

function draw(tree, order)
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	var i;

//	if (order == -1)
//	{
//		ctx.fillStyle = "#FFFFFF";
//		ctx.fillRect(0, 0, c.width, c.height);
//		ctx.fill();
//		tree.drawn = false;
//		if (tree.left != null && tree.right != null)
//		{
//			t = draw(tree.left, order);
//			t = draw(tree.right, order);
//		}
//		else if (tree.left == null && tree.right != null)
//		{
//			t = draw(tree.right, order);
//		}
//		else if (tree.left != null && tree.right == null)
//		{
//			t = draw(tree.left, order);
//			t = draw(tree.right, order);
//		}
//		if (tree.left == null && tree.right == null)
//		{
//			order++;
//		}
//	}
//	else if (order == 0)
//	{
//		if (tree.left != null && tree.right == null)
//		{
//			t = draw(tree.left, order);
//		}
//		else if (tree.left == null && tree.right != null)
//		{
//			t = draw(tree.right, order);
//		}
//		else if (tree.left != null && tree.right != null)
//		{
//			t = draw(tree.left, order);
//			t = draw(tree.right, order);
//		}
//	}
	if (tree.order == order)
	{
		if (tree.left == null && tree.right == null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			ctx.fillStyle = "#000000";
			ctx.font = "10px Arial";
			tree.drawn = true;
			
			ctx.strokeStyle = "#00FF00";
			ctx.beginPath();
			ctx.moveTo(tree.xval, tree.yval);
			ctx.lineTo(tree.parent.xval, tree.parent.yval);
//			ctx.lineTo(tree.left.xval, tree.left.yval);
			ctx.stroke();

			
			if (tree.value != 0)
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(tree.value)/Math.log(10))+1), tree.yval+4);
			else
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), tree.yval+4);

			ctx.fillText(Math.round(tree.order*100)/100, tree.xval-10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
		else if (tree.left != null && tree.right == null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;


			if (tree.value != 0)
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(tree.value)/Math.log(10))+1), tree.yval+4);
			else
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), tree.yval+4);
			
			ctx.fillText(Math.round(tree.order*100)/100, tree.xval-10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);			
		}
		else if (tree.left == null && tree.right != null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;

//			ctx.strokeStyle = "#00FF00";
//			ctx.beginPath();
//			ctx.moveTo(tree.xval, tree.yval);
//			ctx.lineTo(tree.right.xval, tree.right.yval);
//			ctx.stroke();

			if (tree.value != 0)
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(tree.value)/Math.log(10))+1), tree.yval+4);
			else
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), tree.yval+4);

			ctx.fillText(Math.round(tree.order*100)/100, tree.xval-10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
		else if (tree.left != null && tree.right != null && tree.drawn == false)
		{
			ctx.strokeStyle = "#000000";
			ctx.beginPath();
			ctx.arc(tree.xval, tree.yval, 10, 0*Math.PI, 2*Math.PI);
			ctx.stroke();
			tree.drawn = true;

			ctx.lineWidth = 1;

//			ctx.strokeStyle = "#00FF00";
//			ctx.beginPath();
//			ctx.moveTo(tree.xval, tree.yval);
//			ctx.lineTo(tree.left.xval, tree.left.yval);
//			ctx.stroke();

//			ctx.strokeStyle = "#00FF00";
//			ctx.beginPath();
//			ctx.moveTo(tree.xval, tree.yval);
//			ctx.lineTo(tree.right.xval, tree.right.yval);
//			ctx.stroke();

			if (tree.value != 0)
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(tree.value)/Math.log(10))+1), tree.yval+4);
			else
				ctx.fillText(tree.value, tree.xval-3*(Math.floor(Math.log(1)/Math.log(10))+1), tree.yval+4);

			ctx.fillText(Math.round(tree.order*100)/100, tree.xval-10*(Math.floor(Math.log(4)/Math.log(10))+1), tree.yval+20);
		}
	}
	else if (tree.left != null && tree.right != null)
	{
		t = draw(tree.left, order);
		t = draw(tree.right, order);
	}
	else if (tree.left != null && tree.right == null)
		t = draw(tree.left, order);
	else if (tree.left == null && tree.right != null)
		t = draw(tree.right, order);
	
//	if (tree.left != null && tree.drawn == true)
//		order = -1;
//	else if (tree.parent != null || (tree.parent == null && tree.drawn == false))
		order += 1;
	
//	if (tree.parent != null)
//	{
		var f = function(){t = draw(tree, order);};
		t = setTimeout(f, 2000);
//	}

	return t;
}

function huffman(set)
{
	var curr = new Array();
	var probs = new Array();
	var temp = new Array();
	var text = "", loc1, loc2, val;
	var tree = null;
	var order = 0;

	var i, j, ans = false, sum = 0;
	for (i = 0; i < set.length; i++)
	{
//		if (linsear(tree, set[i]) == -1)
//		{
			tree = insert(tree, set[i]);
//			sum += tree[tree.length-1].prob;
//		}
	}

	return display(tree);
}

function init(curr, k1)
{
	curr = generate(k1);
	document.getElementById("next").value = Math.floor((Math.random())*100);

	var text = "set = {";
	for (var i = 0; i < curr.length; i++)
	{
		if (i < curr.length - 1)
			text += curr[i] + ", ";
		else
			text += curr[i];
	}
	text += "}<br>";

	document.getElementById("list").innerHTML = text;
	return curr;
}



function retreive(set, start, finish)
{
	var i;
	var ans = new Array();
	for (i = start; i < finish; i++)
		ans[ans.length] = set[i];

	return ans;
}

function insert(tree, elmnt, order)
{
	if (tree != null)
	{
		if (elmnt > tree.value)
		{
			tree.right = insert(tree.right, elmnt, order);
			tree.right.parent = tree;
			if (tree.parent != null && tree.value < tree.parent.value)
				tree.right.xval = (tree.parent.xval + tree.xval)/2;
			else
			{
				var temp = tree;
				if (temp == null)
					alert("null");
				while (temp != null && temp.value < tree.right.value)
				{
					alert("temp = " + temp.value);
					temp = tree.parent;
				}
				if (temp == null)
					tree.right.xval = (document.getElementById("myCanvas").width + tree.xval) / 2;
				else 
					tree.right.xval = (temp.xval + tree.xval) / 2;
			}
			tree.right.yval = tree.yval + 20;
		}
		else if (elmnt < tree.value)
		{
			tree.left = insert(tree.left, elmnt, order);
			tree.left.parent = tree;
			if (tree.parent != null && tree.value > tree.parent.value)
				tree.left.xval = (tree.parent.xval + tree.xval)/2;
			else
			{
				var temp = tree;
				if (temp == null)
					alert("null");
				while (temp != null && temp.value > tree.right.value)
				{
					alert("temp = " + temp.value);
					temp = tree.parent;
				}
				if (temp == null)
					tree.left.xval = (document.getElementById("myCanvas").width + tree.xval) / 2;
				else 
					tree.left.xval = (temp.xval + tree.xval) / 2;
			}
			tree.left.yval = tree.yval + 20;
		}
	}
	else
	{
		tree = new Object();
		tree.value = elmnt;
		tree.left = null;
		tree.right = null;
		tree.xval = document.getElementById("myCanvas").width / 2;
		tree.yval = 20;
		tree.order = order;
		tree.drawn = false;
		tree.parent = null;
	}
	
	return tree;
}

function search(tree, elmnt)
{
	var ans = false;
	if (tree != null)
	{
		if (tree.value == elmnt)
			ans = true;
		else if (elmnt > tree.value)
			ans = search(tree.right, elmnt);
		else if (elmnt < tree.value)
			ans = search(tree.left, elmnt);
	}
	else
		ans = false;
	
	return ans;
}

function remove(tree, elmnt)
{
	if (tree != null)
	{
		if (tree.value == elmnt)
		{
			if (tree.left == null && tree.right == null)
				tree = null;
			else if (tree.left == null && tree.right != null)
			{
				tree = tree.right;
			}
			else if (tree.left != null && tree.right == null)
			{
				tree = tree.left;
			}
			else if (tree.left != null && tree.right != null)
			{
				tree.value = minValue(tree.right);
				tree.right = remove(tree.right, tree.right.value);
			}
		}
		else if (elmnt > tree.value)
			tree = remove(tree.right, elmnt);
		else if (elmnt < tree.value)
			tree = remove(tree.left, elmnt);
	}

	return tree;
}

function minValue(tree)
{
	var ans = null;
	if (tree != null)
	{
		ans = tree.value;
		if (tree.left != null)
			ans = minValue(tree.left);
	}
	
	return ans;
}

function maxValue(tree)
{
	var ans = null;
	if (tree != null)
	{
		ans = tree.value;
		if (tree.right != null)
			ans = maxValue(tree.right);
	}
	
	return ans;
}

function buildBST(set)
{
	var tree = null;
	var i;
	for (i = 0; i < set.length; i++)
	{
		tree = insert(tree, set[i], i);
	}
	draw(tree, 0);
	
	return tree;
}

function operate(curr)
{
	if (document.getElementById("alg").value == 0)
		curr = buildBST(curr);

 	if (document.getElementById("alg").value == 1)
 		curr = insert(curr);

 	else if (document.getElementById("alg").value == 2)
 		curr = remove(curr);

	else if (document.getElementById("alg").value == 3)
		document.getElementById("output").innerHTML = "This tree currently contains " + size(cutt) + " elements<br>";

	else if (document.getElementById("alg").value == 4)
		document.getElementById("output").innerHTML = "The depth of this tree is currently " + depth(curr) + "<br>";

	else if (document.getElementById("alg").value == 5)
		document.getElementById("output").innerHTML = "The maximum value of this tree is currently " + maxValue(curr) + "<br>";
		
	else if (document.getElementById("alg").value == 6)
		document.getElementById("output").innerHTML = "The minimum value of this tree is currently " + minValue(curr) + "<br>";

	else if (document.getElementById("alg").value == 7)
		document.getElementById("output").innerHTML = "The preorder traversal of this tree is <br>" + preorder(curr);
		
	else if (document.getElementById("alg").value == 8)
		document.getElementById("output").innerHTML = "The inorder traversal of this tree is <br>" + inorder(curr);

	else if (document.getElementById("alg").value == 9)
		document.getElementById("output").innerHTML = "The postorder traversal of this tree is <br>" + postorder(curr);

  	return curr;
}
</script>
</head>
<body>
<p>
</p>
<form name=data id=data> 
<input type=button onclick="k1 = Math.floor(Math.random()*20)+5;ans = init(set1, k1);set1 = retreive(ans, 0, ans.length);document.getElementById('output').innerHTML = ''" value="New Problem"><br> 
<table><tr><td>
<p name=list id=list></p>
</td></tr>
<tr><td valign="top">
<select name="alg" id="alg">
 <option value=0 selected>Build BST</OPTION>
 <option value=1>Insert</OPTION>
 <option value=2>Remove</OPTION>
 <option value=3>Size</OPTION>
 <option value=4>Depth</option>
 <option value=5>Maximum Value</OPTION>
 <option value=6>Minimum Value</OPTION>
 <option value=7>Preorder Traversal</OPTION>
 <option value=8>Inorder Traversal</OPTION>
 <option value=9>Postorder Traversal</OPTION>
</SELECT>
<br>
<input size=3 name=last id=last> Last Popped Value<br>
<input size=3 name=next id=next> Next Value to Push<br>
<input type="button" value="Operate" onclick="set1 = operate(set1);">  </FORM>
</FORM>
</td><td valign="top">
<p name="output" id="output"></p>
</td></tr></table>
<canvas id="myCanvas" width="600" height="600" style="border:1px solid #d3d3d3;">
your browser does not support the canvas tag
</canvas>
<script type="text/javascript">
	var k1 = Math.floor(Math.random()*20)+5;
	var set1 = new Array();
	var elmnt;
	var set1 = init(set1, k1);
</script>
</body>
</html>