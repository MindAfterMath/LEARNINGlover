<html>
<head>
<script type="text/javascript">
function ansymm(rel)
{
	var ans = true;

	for (var i = 0; i < rel.length; i++)
	{
		for (var j = i + 1; j < rel.length; j++)
		{	
			if (rel[i].x1.value == rel[j].x2.value && rel[i].x2.value == rel[j].x1.value && rel[i].x1.value != rel[i].x2.value)
			{
				ans = false;
			}
		}
	}

	return ans;
}

function cartProd(set1, set2)
{
	var set3 = new Array()
	var i, j;

	for (i = 0; i < set1.length; i++)
	{
		for (j = 0; j < set2.length; j++)
		{
			set3[set3.length] = new Object();
			set3[set3.length - 1].x1 = new Object();
			set3[set3.length - 1].x2 = new Object();
			set3[set3.length - 1].x1.value = set1[i];
			set3[set3.length - 1].x2.value = set2[j];
		}
	}

	return set3;
}

function clearRect()
{
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");

	ctx.fillStyle = "#FFFFFF";
	ctx.fillRect(0, 0, c.width, c.height);
	ctx.fill();
	
	return;
}

function compress(rel)
{
	var rel2 = new Array();
	for (var i = 0; i < rel.length; i++)
	{
		if (!search2(rel2, rel[i].x1.value, rel[i].x2.value))
		{
			rel2[rel2.length] = new Object();
			rel2[rel2.length - 1].x1 = new Object();
			rel2[rel2.length - 1].x2 = new Object();
			rel2[rel2.length - 1].x1.value = rel[i].x1.value;
			rel2[rel2.length - 1].x1.xLoc = rel[i].x1.xLoc;
			rel2[rel2.length - 1].x1.yLoc = rel[i].x1.yLoc;
			rel2[rel2.length - 1].x2.value = rel[i].x2.value;
			rel2[rel2.length - 1].x2.xLoc = rel[i].x2.xLoc;
			rel2[rel2.length - 1].x2.yLoc = rel[i].x2.yLoc;
		}
	}

	return rel2;
}

function display(rel)
{
	var i, text = "";
	text += "{";
	for (i = 0; i < rel.length; i++)
	{
		if (i < rel.length - 1)
			text += "(" + rel[i].x1.value + ", " + rel[i].x2.value + "), ";
		else
			text += "(" + rel[i].x1.value + ", " + rel[i].x2.value + ")";
	}
	text += "}";
	
	return text;
}

function domain(rel)
{
	var dom = new Array();
	for (var i = 0; i < rel.length; i++)
	{
		if (!search1(dom, rel[i].x1.value))
			dom[dom.length] = rel[i].x1.value;
	}

	return dom;
}

function drawLines(rel)
{
//	alert("inside drawLines");
	var i, j;
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	
	for (i = 0; i < rel.length; i++)
	{
//		alert("i = " + i + ") " + rel[i].x1.xLoc);

		ctx.strokeStyle = "#FF00FF";
		ctx.lineWidth = 2;
		ctx.beginPath();
		ctx.moveTo(rel[i].x1.xLoc + 10, rel[i].x1.yLoc);
		ctx.lineTo(rel[i].x2.xLoc - 10, rel[i].x2.yLoc);
		ctx.stroke();
	}
//	alert("end drawLines");
}

function drawPts(rel)
{
	var i, j;
	var c = document.getElementById("myCanvas");
	var ctx = c.getContext("2d");
	ctx.fillStyle = "#000000";
	
	for (i = 0; i < rel.length; i++)
	{
		if (rel[i].x1.value != 0)
			ctx.fillText(rel[i].x1.value, rel[i].x1.xLoc-3*(Math.floor(Math.log(rel[i].x1.value)/Math.log(10))+1), rel[i].x1.yLoc+4);
		else
			ctx.fillText(rel[i].x1.value, rel[i].x1.xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), rel[i].x1.yLoc+4);

		if (rel[i].x2.value != 0)
			ctx.fillText(rel[i].x2.value, rel[i].x2.xLoc-3*(Math.floor(Math.log(rel[i].x2.value)/Math.log(10))+1), rel[i].x2.yLoc+4);
		else
			ctx.fillText(rel[i].x2.value, rel[i].x2.xLoc-3*(Math.floor(Math.log(1)/Math.log(10))+1), rel[i].x2.yLoc+4);

	}
}

function equivrel(rel)
{
	var ans = false;

	if (symm(rel) && refl(rel) && trans(rel))
		ans = true;

	return ans;
}

function generate1(n)
{
	var A = new Array(n);
	var i, next;
	for (i = 0; i < n; i++)
	{
		next = Math.floor((Math.random())*100);
		if (!search0(A, next))
			A[i] = next;
		else
			i--;
	}

	return A;
}

function generate2(n, univ)
{
	var A = new Array(n);
	var i, next;
	for (i = 0; i < n; i++)
	{
		next = Math.floor((Math.random())*univ.length);
		if (!search0(A, univ[next]))
		{
			A[i] = univ[next];
			remove(univ, next);
		}
		else
			i--;
	}

	return A;
}

function init(set1, k1)
{
	set1 = generate1(k1);
	var universe;
	var i, j;
	var ans = new Array();
	var text = "";

	ans[0] = set1;
	universe = cartProd(set1, set1);
	universe = sort(universe);
	universe = setLocs(universe);
	drawPts(universe);
	ans[1] = universe;
	var k3 = Math.floor(Math.random()*universe.length);
	if (k3 > 25)
		k3 = 25;
	var rel = generate2(k3, universe);
	rel = sort(rel);
	text += "<p>rel = " + display(rel) + "</p>";
	drawLines(rel);
	ans[2] = rel;

	document.getElementById("list").innerHTML += text;
	return ans;
}

function isFunct(rel)
{
	var ans = true;
	var dom = new Array();
	for (var i = 0; i < rel.length && ans; i++)
	{
		if (!search1(dom, rel[i].x1.value))
			dom[dom.length] = rel[i].x1.value;
		else
			ans = false;
	}

	if (rel.length == 0)
		ans = true;

	return ans;
}

function makeAntsymm(rel)
{
//	var k = rel.length;
	for (var i = 0; i < rel.length; i++)
	{
		for (var j = i + 1; j < rel.length; j++)
		{	
			if (rel[i].x1.value == rel[j].x2.value && rel[i].x2.value == rel[j].x1.value && rel[i].x1.value != rel[i].x2.value)
			{
				rel[i].x1 = rel[rel.length-1].x1;
				rel[i].x2 = rel[rel.length-1].x2;
				rel.length--;
			}
		}
	}

	rel = compress(rel);
	rel = sort(rel);
	rel = setLocs(rel);
	return rel;
}

function makeFunct(rel)
{
	var i, j;
	for (i = 0; i < rel.length; i++)
	{
		for (j = i+1; j < rel.length; j++)
		{
			if (rel[i].x1 == rel[j].x1)
			{
				var loc = Math.floor(Math.random()*2);
				if (loc == 0)
				{
					if (document.getElementById("show").checked)
					{
						text += "elements (" + rel[i].x1.value + ", " + rel[i].x2.value + ") and (" + rel[j].x1.value + ", " + rel[j].x2.value + ") have the same domain element, so one must be removed. <br>";
						text += "removing element (" + rel[i].x1.value + ", " + rel[i].x2.value + ")" + "<br>";
					}
					rel = remove(rel, i);
					i--;
					j = rel.length;
				}
				else
				{
					if (document.getElementById("show").checked)
					{
						text += "elements (" + rel[i].x1.value + ", " + rel[i].x2.value + ") and (" + rel[j].x1.value + ", " + rel[j].x2.value + ") have the same domain element, so one must be removed. <br>";
						text += "removing element (" + rel[j].x1.value + ", " + rel[j].x2.value + ")" + "<br>";
					}
					rel = remove(rel, j);
					j--;
				}
			}
		}
	}
	
	text += "after making it a function, rel = {";
	for (i = 0; i < rel.length; i++)
	{
		if (i < rel.length - 1)
			text += "(" + rel[i].x1.value + ", " + rel[i].x2.value + "), ";
		else
			text += "(" + rel[i].x1.value + ", " + rel[i].x2.value + ")";
		ans[ans.length] = rel[i];
	}
	text += "}<br>";
	
	document.getElementById("output").innerHTML += text;
	return rel;
}

function makeInjec(rel)
{
	var ans = true;
	var range = new Array();
	for (var i = 0; i < rel.length && ans; i++)
	{
		for (var j = i + 1; j < rel.length && ans; j++)
		{
			if (!search0(range, rel[i].x2.value))
				range[i] = rel[i].x2.value;
			else
				ans = false;
		}
	}

	if (rel.length == 0)
		ans = true;

	return ans;
}

function makeRefl(rel, univ)
{
	var k = univ.length;

	for (var i = 0; i < k; i++)
	{
		if (univ[i].x1.value == univ[i].x2.value)
		{
			var temp0 = univ[i];
			rel[rel.length] = new Object();
			rel[rel.length - 1] = temp0;
			rel[rel.length - 1] = temp0;
		}
	}

	rel = compress(rel);
	rel = sort(rel);

	return rel;
}

function makeSymm(rel)
{
	var k = rel.length;

	for (var i = 0; i < k; i++)
	{
		rel[rel.length] = new Object();
		rel[rel.length - 1].x1 = new Object();
		rel[rel.length - 1].x2 = new Object();
		rel[rel.length - 1].x1.value = rel[i].x2.value;
		rel[rel.length - 1].x1.xLoc = rel[i].x1.xLoc;
		rel[rel.length - 1].x1.yLoc = rel[i].x2.yLoc;
		rel[rel.length - 1].x2.value = rel[i].x1.value;
		rel[rel.length - 1].x2.xLoc = rel[i].x2.xLoc;
		rel[rel.length - 1].x2.yLoc = rel[i].x1.yLoc;
	}

	rel = compress(rel);
	rel = sort(rel);
	return rel;
}

function makeTrans(rel)
{
	var k = rel.length;
	var text = "";
	var contin = true;
	
	while (contin)
	{
		alert("starting again" + rel.length);
		contin = false;
		k = rel.length;
		for (var i = 0; i < k; i++)
		{
			for (var j = i+1; j < k; j++)
			{
				if (rel[i].x1.value == rel[j].x2.value && !search2(rel, rel[j].x1.value, rel[i].x2.value))		//(a, b) and (c, a)
				{
					contin = true;
	//				temp0 = rel[i].x2;			//temp0 = b
	//				temp1 = rel[j].x1;			//temp1 = c

//					text += "A(" + rel[i].x1.value + ", " + rel[i].x2.value + ") and (" + rel[j].x1.value + ", " + rel[j].x2.value + ") implies (" + rel[j].x1.value + ", " + rel[i].x2.value + ")<br>";
					rel[rel.length] = new Object();
					rel[rel.length - 1].x1 = new Object();
					rel[rel.length - 1].x2 = new Object();
					rel[rel.length - 1].x1.value = rel[j].x1.value;
					rel[rel.length - 1].x1.xLoc = rel[j].x1.xLoc;
					rel[rel.length - 1].x1.yLoc = rel[j].x1.yLoc;
					rel[rel.length - 1].x2.value = rel[i].x2.value;
					rel[rel.length - 1].x2.xLoc = rel[i].x2.xLoc;
					rel[rel.length - 1].x2.yLoc = rel[i].x2.yLoc;
					
	//				rel[rel.length - 1].x1 = temp0;		//add (b, c)
	//				rel[rel.length - 1].x2 = temp1;
				}
				else if (rel[i].x2.value == rel[j].x1.value && !search2(rel, rel[i].x1.value, rel[j].x2.value))	//(a, b) and (b, c)
				{
					contin = true;
	//				temp0 = rel[i].x1;				// temp0 = a
	//				temp1 = rel[j].x2;				// temp1 = c

//					text += "B(" + rel[j].x1.value + ", " + rel[j].x2.value + ") and (" + rel[i].x1.value + ", " + rel[i].x2.value + ") implies (" + rel[i].x1.value + ", " + rel[j].x2.value + ")<br>";
					rel[rel.length] = new Object();
					rel[rel.length - 1].x1 = new Object();
					rel[rel.length - 1].x2 = new Object();
					rel[rel.length - 1].x1.value = rel[i].x1.value;
					rel[rel.length - 1].x1.xLoc = rel[i].x1.xLoc;
					rel[rel.length - 1].x1.yLoc = rel[i].x1.yLoc;
					rel[rel.length - 1].x2.value = rel[j].x2.value;
					rel[rel.length - 1].x2.xLoc = rel[j].x2.xLoc;
					rel[rel.length - 1].x2.yLoc = rel[j].x2.yLoc;
					
	//				rel[rel.length - 1].x1 = temp0;		//add (a, c)
	//				rel[rel.length - 1].x2 = temp1;
				}
			}
		}
	}

//	document.getElementById("list").innerHTML += text;
	rel = compress(rel);
	rel = sort(rel);
//	rel = setLocs(rel);
	return rel;
}

function one2one(rel)
{
	var ans = true;
	var ran = new Array();
	for (var i = 0; i < rel.length && ans; i++)
	{
		if (!search1(ran, rel[i].x2.value))
			ran[ran.length] = rel[i].x2.value;
		else
			ans = false;
	}

	if (rel.length == 0)
		ans = true;

	return ans;
}

function operate(rel, univ)
{
 	if (document.getElementById("alg").value == 1)
	{
		clearRect();
 		rel = makeSymm(rel);
		drawPts(univ);
		drawLines(rel);
	}
 	else if (document.getElementById("alg").value == 2)
	{
		clearRect();
 		rel = makeRefl(rel, univ);
		drawPts(univ);
		drawLines(rel);
	}
 	else if (document.getElementById("alg").value == 3)
	{
		clearRect();
 		rel = makeTrans(rel);
		drawPts(univ);
		drawLines(rel);
	}
 	else if (document.getElementById("alg").value == 4)
	{
		clearRect();
 		rel = makeAntsymm(rel);
		drawPts(univ);
		drawLines(rel);
	}

	return rel;
}

function range(rel)
{
	var ran = new Array();
	for (var i = 0; i < rel.length; i++)
	{
		if (!search1(ran, rel[i].x2.value))
			ran[ran.length] = rel[i].x2.value;
	}

	return ran;
}

function refl(rel, univ)
{
	var ans = true;

	for (var i = 0; i < univ.length && ans; i++)
	{
		if (!search2(rel, univ[i].x1.value, univ[i].x2.value))
			ans = false;
	}

	return ans;
}

function remove(set, loc)
{
	set[loc] = set[set.length-1];
	set.length--;
	
	return set;
}

function retreive(set, start, finish)
{
	var i;
	var ans = new Array();
	for (i = start; i < finish; i++)
		ans[ans.length] = set[i];

	return ans;
}

function search0(set, elmnt)
{
	var i;
	var ans = false;

	for (i = 0; i < set.length && !ans; i++)
		if (set[i] == elmnt)
			ans = true;

	return ans;
}

function search1(set, elmnt)
{
	var i;
	var ans = false;

	for (i = 0; i < set.length && !ans; i++)
		if (set[i] == elmnt)
			ans = true;

	return ans;
}

function search2(set, elmnt1, elmnt2)
{
	var i;
	var ans = false;

	for (i = 0; i < set.length && !ans; i++)
		if (set[i].x1.value == elmnt1 && set[i].x2.value == elmnt2)
			ans = true;

	return ans;
}

function setLocs(rel)
{
	var c = document.getElementById("myCanvas");
	var dom = domain(rel);
	var ran = range(rel);
	var set = union(dom, ran);
	var i, j, temp;
	
	for (i = 0; i < set.length; i++)
		for (j = i+1; j < set.length; j++)
		{
			if (set[i] > set[j])
			{
				temp = set[i];
				set[i] = set[j];
				set[j] = temp;
			}
		}
	
	for (i = 0; i < set.length; i++)
	{
		for (j = 0; j < rel.length; j++)
		{
			if (rel[j].x1.value == set[i])
			{
				rel[j].x1.yLoc = i*25 + 25;
				rel[j].x1.xLoc = (0 + c.width) / 5;
			}
			if (rel[j].x2.value == set[i])
			{
				rel[j].x2.yLoc = i*25 + 25;
				rel[j].x2.xLoc = 4*(0 + c.width) / 5;
			}
		}
	}
	return rel;
}

function sort(rel)
{
	var i, j;
	var temp;
	count = 0;
	for (i = 0; i < rel.length; i++)
		for (j = i + 1; j < rel.length; j++)
		{
			if (rel[i].x1.value >  rel[j].x1.value || (rel[i].x1.value == rel[j].x1.value && rel[i].x2.value >  rel[j].x2.value))
			{
				temp = rel[i];
				rel[i] = rel[j];
				rel[j] = temp;
			}
			count++;
		}
		
	return rel;
}

function symm(rel)
{
	var ans = true;

	for (var i = 0; i < rel.length && ans; i++)
	{
		if (!search2(rel, rel[i].x2.value, rel[i].x1.value))
			ans = false;
	}

	return ans;
}

function trans(rel)
{
	var ans = true;

	for (var i = 0; i < rel.length && ans; i++)
	{
		for (var j = i + 1; j < rel.length && ans; j++)
		{
			if (rel[i].x1.value == rel[j].x2.value)
			{
				if (!search2(rel, rel[i].x2.value, rel[j].x1.value))
					ans = false;
			}
			else if (rel[i].x2.value == rel[j].x1.value)
			{
				if (!search(rel, rel[i].x1.value, rel[j].x2.value))
					ans = false;
			}
		}
	}

	return ans;
}

function union(set1, set2)
{
	//Do I need location parameters for the union?
	var set3 = new Array();
	var i;

	for (i = 0; i < set1.length; i++)
		set3[i] = set1[i];
	
	for (i = 0; i < set2.length; i++)
	{
		if (!search1(set3, set2[i]))
			set3[set3.length] = set2[i];
	}

	return set3;
}

</script>
</head>
<body>
<p>
</p>
<form name=data id=data> 
<input type=button onclick="clearRect();document.getElementById('list').innerHTML = '';k1 = Math.floor(Math.random()*23);ans = init(set1, k1);set1 = ans[0];univ = ans[1]; rel = ans[2]; old_rel = ans[2];" value="New Problem"><br> 
<p id=list name=list></p>
<label>I would like to make this relation </label>
<select name="alg" id="alg">
 <option value=1 selected>Symmetric</OPTION>
 <option value=2>Reflecive</OPTION>
 <option value=3>Transitive</OPTION>
 <option value=4>Anti-Symmetric</OPTION>
</SELECT><br> 
<input type="checkbox" name="show" id="show">Show Work?
<input type="button" value="Operate" onclick="rel = operate(rel, univ); document.getElementById('output').innerHTML = '<p>Now, rel = ' + display(rel) + '</p>';">  </FORM>
<input type="button" value="Function Test" onclick="isFunct(rel);"><label hidden>Functionality Test</label>
<input type="button" value="Equivalence Relation Test" onclick="isEqRel(rel);"><label hidden>Equivalence Relation Test</label>
<input type="button" value="Partial Order Test" onclick="isPoSet(rel);"><label hidden>Functionality Test</label>
<input type="button" value="Total Order Test" onclick="isToSet(rel);"><label hidden>Functionality Test</label>
<select hidden>
</select>
<p name="output" id="output">
</p>
<canvas id="myCanvas" width="600" height="600" style="border:1px solid #d3d3d3;">
your browser does not support the canvas tag
</canvas>
<script type="text/javascript">
var k1 = Math.floor(Math.random()*23);
//var k2 = Math.floor(Math.random()*25);
var set1 = new Array();
//var set2 = new Array();
var rel;
var univ;
var ans = init(set1, k1);
set1 = ans[0];
univ = ans[1];
rel = ans[2];
var old_rel = ans[2];
//set1 = retreive(ans, 0, k1);
//set2 = retreive(ans, k1, k1+k2);
//alert("set1 = " + set1);
//alert("set2 = " + set2);
</script>
</body>
</html>

